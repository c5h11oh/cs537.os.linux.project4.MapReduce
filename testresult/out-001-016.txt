2 25
20 1
B 13
!= 7
"wc" 1
#1: 2
#define 2
%ax 4
(-P) 1
(1e7) 2
(256) 1
(APIs) 2
(BFS)2 1
(P1), 1
(PA), 1
(Q0), 1
(RDLK) 2
(SSDs) 1
(THE), 2
(TlbEntry.PFN 4
(VP 3
3 1
10 21
!zero, 2
"common_threads.h" 4
$0x1 2
%esp 1
%p\n", 4
&mutex); 8
(212 1
(24114) 5
(32 2
(5 1
(August, 1
(CFS) 2
(Dynamic 2
(PTEs) 1
(PowerPC), 2
(Run 1
(Success, 4
8 22
"fork 4
%ebx 1
(0, 3
(1110) 1
(20%), 1
(21) 1
(22.1) 1
(3) 2
(AMAT) 1
(C) 1
(G), 1
(L 2
(LRU) 1
(Linux, 1
(LoadLinked(&lock->flag) 4
(PC) 4
(PCB). 1
(PDIndex 3
(PSJF) 1
(PTE): 1
(PTIndex 3
(Pmiss 1
(S) 3
(T1 2
(TCBs) 2
(Tarrival 1
 26
$0x1,%eax 4
%eax,0x0(%ebx) 1
%ebp 1
&& 2
(-1KB) 1
(-p). 1
(24113) 5
(3764 1
(4 3
(4088 1
(As 1
(SJF) 1
(VM) 1
(VPN=06), 1
(With 1
(a[3] 1
(again, 3
(c) 3
(c2). 2
(c4), 1
(clearly 1
(current) 1
(dare 1
(fill_ptr 1
(four 1
(full) 1
(generally) 1
(header_t 1
(highest 1
(minus 1
(often 2
(p2.c) 1
(p5). 1
14 14
! 2
"usage: 2
%d\n", 9
%dx 6
%ecx, 1
&; 1
(-L 2
(-c) 1
(-l 4
(-s) 3
(117 1
(34KB), 1
(@PFN:101) 1
(ASLR). 1
(Again) 1
(COW 1
(FCFS). 1
(Good 1
(Linux) 2
(MLFQ) 1
(OS). 1
(P0) 1
(PCB); 2
(PFN), 2
(STCF) 2
(StoreConditional(&lock->flag, 2
(Success 4
(Tc2 1
(VPN), 2
(particularly 7
(read 1
!StoreConditional(&lock->flag, 2
"B"); 4
%d)\n", 4
%eax). 1
((flag[1-self] 2
(0x1) 2
(200 1
(9.2) 1
(B 3
(CTSS), 1
6 22
F 8
PAGING 21
%edx, 1
%esi, 1
&oops; 2
&rvals); 2
&x); 1
(-M 1
(-m 2
(./x86.py 4
(01) 1
L 17
"wc"... 1
%eax), 1
%ebp, 1
( 6
(*start_routine)(void 2
(-s 2
(117). 1
(2012-01-30-1-g1c41342) 1
(28KB) 1
(7.2) 1
(BKL). 2
(BSD). 1
(B’s 2
(G) 2
(LFU) 1
(P 1
(P0 1
(PDE). 1
(U/S) 1
(VA) 2
(VPN=08). 1
(Virtual) 1
(a[7] 1
(again 3
(arbitrarily; 1
(c1, 1
$0x03, 1
$0x03e8,%eax 1
(2134) 6
(32768) 1
(7030) 1
(And 1
(C 1
(DEC). 1
(EEVDF) 1
(Hardware-based) 1
(LW 1
(MMU); 1
(P=1), 1
(STDOUT 1
(TestAndSet(&flag, 2
(VPN=06, 1
(a.k.a., 2
(Code) 8
(Gulps) 1
(KASLR). 1
(at 12
(Figure 45
(OS 1
(P=0), 1
(PDE) 2
(PID), 1
(reduced 1
#include 62
%edi 3
&args); 4
&m); 3
(-i) 4
(0x200000), 1
(120−0)+(20−10)+(30−10) 1
(20-ms 1
(400)2 1
(4200) 1
(7.1) 1
(Advanced) 1
(A’s 2
(C, 1
(CanAccess(PTE.ProtectBits) 4
(HW 1
(London), 1
(Measurement) 3
(O 1
(Process 1
(RSS). 1
(SJF, 1
(T2) 2
(Left) 3
(Logical) 1
(MMU), 1
(P); 1
(PD 2
(PFN 2
(PID). 1
(Proc 2
(Software) 1
(TestAndSet(&m->guard, 4
(counter 17
(address 2
(and 111
(approximate) 2
(atomically); 1
(also 7
(atomic_bit_test_set 4
(average: 1
(binary 1
(all 6
12 19
(PTE) 9
(R 1
M 20
"A"); 4
$0x1, 6
%d 5
%eax,8049a1c 4
%esp, 1
%lld\n", 2
&rvalue); 2
(1 1
(10 1
(100 4
(1000 1
(32-bit 1
(4KB 1
(9.1) 1
(TLB 16
(Tc2) 1
(Thousands) 2
(a[0]) 2
(above), 1
(after 4
(among 3
(bytesLeft 1
(conservatively); 1
(cpu.c) 1
(eventually) 2
(free 1
(https://github.com/remzi-arpacidusseau/ostep-projects) 1
(io.c) 1
(ldstub); 2
(left). 1
(lots 1
(m->flag 2
(managing 2
(namely, 1
(non-paged) 1
(notably) 1
(note, 1
(an 2
(c3) 1
(done) 2
(called 9
(allocated 3
(almost) 1
(regardless 2
(si 1
(starting 3
(too!) 2
(curr->key 4
(easily) 2
(erroneously) 1
(formerly 1
(freeing 1
(get 1
(its 2
(load 1
(long 2
(cleared), 1
(continue 1
(curr) 4
(A 14
(Another 1
(Bounded 1
(CFS), 1
(C’s 1
(1) 13
(100) 1
(14th) 1
(28 1
(64 1
(A) 2
(ASID) 1
(CanAccess(TlbEntry.ProtectBits) 4
(Editors 2
(P1) 3
(PA) 3
(PCB), 2
(Q2). 1
(ROP) 1
(SN) 1
(a) 5
(always) 1
(broken) 1
(bugs) 1
(c2), 3
(causing 2
(flag 4
(imagine 2
(into 4
(kernel) 1
(milliseconds); 1
16 9
"common.h" 7
"hello"; 3
# 16
%eax 24
%edi, 1
&lock); 2
(-n 1
(0xC0000000 1
(101) 2
(11) 1
(2) 4
(34K) 1
(Alpha), 2
(B) 1
(DMA) 1
(K 1
(we 2
(bash?) 1
(MFU) 1
(NOT 1
(Niceness) 1
(R/W) 1
(Ready, 1
(TM 1
(Tc1) 2
(Timer 1
C 16
(bigger) 1
(described 5
(new 7
(non-restricted) 1
(ns) 1
(pid:29267) 1
(pid:29384) 1
(potentially), 2
(releasing 1
(one 6
(only 5
(other 1
(p6, 1
(rather, 1
(results 1
(sometimes, 1
(stride=100) 1
(studied 1
(too 1
(turned 1
(upon 1
(use_ptr 1
 32628
22 1
(repeat) 8
(roughly 2
(simple 2
(source) 1
(stuck 2
(they 3
(way) 1
(c->local[cpu] 2
(dramatic 1
(hex 2
(highly 1
(holding 1
(indeed, 4
(insert 1
(do 5
(flag) 2
(hence 1
(initial) 1
(let’s 4
(likely) 1
(lowest), 1
(mentioned 2
(more 3
(most 2
(mutex 2
(Lines 6
(with 21
(word 3
(void 12
(latter) 2
(like 5
(many 4
(minimally) 1
(modern 1
(modulo 1
(a 21
(a[8] 1
(another 1
(assumes 2
(available 1
(each 2
(either 3
(fun!). 1
); 1
(when 3
4 23
T 10
#3: 1
%ebx, 1
&stack); 1
(-T). 1
(/tmp/file) 1
(010101), 1
(224 1
(26 1
(4096), 1
(512 2
(8 1
(@PFN:100) 1
*mem; 1
* 17
"hello 1
%edx 1
%esi 1
& 29
(1024). 1
(104) 1
(15th, 1
(I/O). 1
(LDE) 1
(MIPS), 2
(OS)3 1
(R, 1
(global 3
(hopefully) 3
*new 4
**value_ptr); 2
*abs_timeout); 2
(generated 1
(of 10
(myarg 2
(note: 2
(onto 2
(probabilistic) 1
(VPN 14
(myarg_t 4
(MRU). 1
(NULL 1
(P2) 1
(PDE.PFN 2
(PFN). 1
(PTE.PFN 2
(R) 1
(T2), 2
(Third 2
(Tp). 1
(VPN). 1
(a3). 1
(about 1
(probably), 1
(Without 1
(new) 1
(c1–c3). 1
(Simulation) 16
(T1) 4
(TLBs) 1
(VPN=1, 1
(assume 2
(c4). 1
(hence, 2
(once 4
(original 2
*L, 8
(c1), 1
(b) 5
(pthread_join) 2
(switching 1
(target) 1
(v1) 3
(CPU 2
(D); 1
(KNUTH’S 1
(Line 5
(MMU) 1
(char 8
(depending 2
(due 6
(even 3
(forever), 1
(hardware 1
(lazily) 1
(array-based) 2
(perhaps 7
(pointed 1
(via 6
(kernel 6
*next; 6
*q) 2
*cond, 2
(PTE.Present 2
(S), 1
(SJF), 1
(Spring), 3
(TD 1
(Tc1 2
(This 1
(Thread 2
(Volume 1
(a2), 1
(recall 1
(virtual) 3
(you’ll 1
*arg); 4
*child(void 3
*hptr 1
*malloc(size_t 1
*mutex; 2
*new); 1
*producer(void 5
(count 8
(during 1
(emacs 1
(given 1
(done 4
(effectively 1
(roughly) 2
(size=200) 1
(stride=200) 1
-g 3
*old_ptr, 2
(if 13
(ironically) 1
(middle 2
*cond); 2
+= 9
-k 2
-t). 1
.... 1
./main-two-cvs-while 2
(alas). 2
(i.e., 96
(incredulous) 1
(interrupt) 1
(such 25
-i. 2
*p 6
-1, 1
-= 1
(mutex, 8
(myturn 2
(next 1
(nice 1
(scheduling) 1
(i 19
//acquire 4
(because 8
(created 1
(finally) 1
(first-in, 1
(hopefully 2
(instead 1
(limit) 1
(line 3
(maliciousness) 1
(mutex->flag 2
(out 3
(p2.c), 1
(seconds) 6
(shown 5
(implicitly) 2
(implying 2
(non-contiguous) 1
18 4
I 26
"A" 1
$0x0) 1
% 8
%ecx 1
(-p 2
(-w) 1
(256 1
(A, 5
(AS) 1
(CompareAndSwap(&lock->flag, 2
(FIFO) 2
(M 1
(No 1
(PFN) 6
(PM 2
(Page 1
(RR) 2
(SQMS) 1
(Tc1), 1
(Tp) 1
(VAX/VMS) 1
(VPN) 2
(VPN=07), 1
(VirtualAddress 9
(a[4] 1
(argc 2
(both 2
(labeled 6
(ld.so) 1
(locked). 2
(long) 1
/bin/ls. 1
S 28
(rc 8
-M 15
*mythread(void 12
(but 14
(main) 4
(as 49
(assert(hptr->magic 1
(atomic_add_zero 2
/proc/meminfo; 1
(c3). 3
(c5), 1
(he 1
(to 10
(mem.c) 1
0(%eax) 2
#2: 2
$0x0,(%edi,%eax,4) 1
%bx 2
%dx. 2
%eax, 8
(-a) 2
(-q) 1
(16 3
(232 1
(ARM). 2
(Bad 1
(Blocks) 4
(Chapter 2
(Hardware) 1
(LAUER’S 1
0); 8
0.001), 1
0.6 1
0000000000400000 1
04 2
(normally 1
(p4.c) 1
(pause 3
(potentially) 1
(realistically, 2
(returning 2
(slow) 1
(something 2
(waiting 2
(p2). 1
(pid:29266) 2
(rc_wait:%d) 2
-m 3
*rvals 2
(by 13
0x000, 1
(still 1
(simplified) 1
(e.g., 108
0,0,0,0,0,0,1? 1
(not 20
(just 5
(hint: 6
(i); 1
(ignoring 1
(MLFQ). 2
(pid:29383) 2
(ready 4
... 84
*src 3
(c3), 1
0x00000000, 1
0x03e8, 1
0x7ffe45522e94 1
0xBFFFFFFF 1
08 2
(or 83
(max 2
(modified), 1
(which 39
*H) 2
(MQMS) 1
(Offset 1
(P). 1
(P2), 1
(PDE.Valid 1
(double 1
(swapd) 1
(specifically). 1
(from 16
(gasp) 2
(horribly) 1
(include 2
(start 2
(t0.c) 2
(taking 2
*argv[]) 23
*m); 1
(size: 1
./x86.py 14
*x 3
--tool=helgrind 2
-1); 1
(there 3
(stop) 1
10.5 1
0x00000000 1
0x1095afe50 1
(int) 10
(large) 2
(lock-holding) 2
(log2 1
(marked 1
*ptr; 6
(stride=40) 1
0+ebx 1
0: 4
0x200000 4
-5 1
(this 4
(t1.c) 2
100%. 1
(pid:%d)\n", 9
0x200000. 1
0x400, 1
(including 10
(think 5
(remember: 2
(now 6
*tmp 7
(threads.c) 1
(unrealistically 1
(wait 1
0x600, 1
-nw 1
(thread 6
(usually) 2
1000s 1
(quite) 1
(required 1
(running 1
(it 12
(known 1
(result: 1
(privileged) 1
+ 45
(PTE.Valid 4
(especially 2
**) 4
1) 52
-u 6
(that’s 3
(worst-case 1
100s 1
1030 1
0xFFF. 1
(said 2
(trustingly) 1
(web 2
(who 2
(probably) 1
-> 10
(PWT, 1
(free) 21
(gadgets, 1
(int 6
(job 2
(left 1
(literally) 2
(nearly 2
(new_head 2
1). 6
(similar 3
(lock->turn 2
(say, 11
*c) 18
(pthread_create) 2
-n 19
0-9), 1
*arg) 26
0; 116
0x30 1
(though 6
*(*start_routine)(int), 2
(my 1
1111 7
(p1.c) 1
10). 3
(somewhat) 1
(no 4
(shaded 1
(thanks 1
(turn 2
(“Buzz 2
*(*start_routine)(void*), 2
*current 1
./main 6
0.4 1
0011 1
0101 1
0110 2
02 1
0x068, 1
0x7fff691aea64 1
0x80000000)) 2
(nods) 1
*curr 4
(sadly). 1
(Right) 3
(September 1
*attr, 2
*c); 1
0x37) 1
0x700, 1
*consumer(void 5
*dst; 1
112 2
(p4). 1
100). 2
(that 5
0x8049a1c 6
(non-toy) 2
*kstack; 1
(some 1
1-second 1
1.0; 1
1.3.37 1
*mutex); 8
(untimely?) 2
0x7ffe1033b8f4 1
(myturn). 2
*m) 6
128) 1
(preempting 2
13 93
(the 61
(through 1
(tmp 1
(v2) 1
(va.c) 1
(vruntime). 1
(wc). 1
(xchg). 2
(user 3
-D 154
-d 2
-t 20
./p4 1
0-byte 1
0.03 2
13.2 2
1-byte 1
(on 11
*mutex) 12
*q; 2
*x); 1
--l0 1
10) 2
) 46
(usually 7
0xC0000000 2
(note 4
*ptr 9
100+(110−10)+(120−10) 1
(pretend) 1
0.5. 1
14.1 1
10-byte 1
(or, 5
(p.81).” 1
(p3.c) 1
*rvals; 2
-I 6
10.1: 1
*/ 16
(v9 1
1.0, 1
10.2: 1
100%), 1
1028 1
10:1,10:100). 1
110000) 1
15. 1
15.2. 1
(thus 9
(TestAndSet(&lock->flag, 2
(page 49
(physical 1
(pointers) 1
(real) 1
(reduction 1
(resulting 1
(running, 2
(runtimei 1
*value) 2
1000). 1
(probably 1
0001 1
0010 1
10.3 1
15.6: 1
(what 4
(without 1
(write) 1
-i 18
100) 3
*c, 5
*mutex, 2
*ofile[NOFILE]; 1
*old_ptr; 2
--leak-check=yes 2
-C 6
-S 24
(quantum 1
128 13
01 2
0100 1
0xFFFFFFFF) 1
(VPNs 1
- 25
(“0101”th) 1
*head 1
1036 1
(we’ll 2
(which, 2
(say 17
*ptr) 7
103.33 1
-c 22
(quickly) 1
143012 1
15), 1
16(%eax) 1
16.6 3
17.5 1
1780K 1
1 461
*lock) 20
109 1
111). 1
). 3
(see 12
(store 1
(that, 2
(tiny) 2
(total) 1
100%, 1
16.1. 1
(Virtual 1
--b1 1
-is-unsafe. 2
179–180, 1
*ptr, 5
10 165
10.2 1
12). 1
100 87
-1; 8
-1KB. 1
-pthread; 2
(remember, 1
(unused) 6
(use 1
(value 2
(yes, 4
-5; 1
-m, 1
-p) 1
..., 2
(older 1
14.7 1
*args 4
1000 10
105-117, 1
-L 18
-s 21
(size 1
100ns 2
16.5: 1
(a.k.a. 6
(you 5
-P 19
18.4 2
19.3 1
1980’s; 1
1998 2
15.6 2
*head; 4
*q, 4
107 1
-l 19
................ 1
(too) 1
(usually, 1
16KB 24
17, 1
*dst 2
-Wall 7
+1 1
./fork.py 4
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 1
0.1). 1
0.10). 1
0.8 1
06 1
1124 2
./main). 1
./p3 1
101 4
(where 12
(assuming 5
17.4: 1
*malloc(size 1
-p 44
, 15
--b0 1
1: 7
16.5 1
17.4 1
*value 2
0x00000FFF, 1
128KB 1
/* 16
.EXE 1
(yet) 3
11 110
(but, 2
17.7). 1
*new_head 2
/dev/zero 1
/proc/meminfo 1
01, 2
2) 7
2.1: 1
2.4). 1
20.1: 1
0x200, 1
13); 2
0) 40
0+1+2 1
110 2
(bytes 2
18.3: 1
+19 1
0 384
0.2 1
-O 1
0KB 13
100000 2
17.8, 1
18.3 1
2000) 2
1% 1
13.1), 1
14.5 1
148K 1
15.4 1
(code, 7
19.2: 1
-H 1
(our 4
(p1), 1
(p1– 1
0] 4
0x0(%ebx) 1
0x0DC0. 1
19 58
20000000) 2
1), 5
*) 23
*cwd; 1
1100 3
16-byte 4
(continuing) 1
1928 1
-l, 1
00 4
-S, 1
(p2); 1
(physical) 1
--l1 1
0x7ffd3e55d2b4 1
19.2 2
218 1
22.9 1
24113 1
*input) 1
*myargs[3]; 2
16.3 2
(discussed 1
19345221) 2
1957. 1
1964 1
-o 9
11–19 1
(pid:29146) 4
-1) 1
0xC0000FFF 1
19.4. 1
1960’s, 2
10% 5
10), 1
13. 2
*str 1
--trace-mem=yes 1
(evicts) 1
-pthread 5
0000 14
1966. 3
./array 1
12. 2
120. 1
-5), 1
-l. 1
0). 2
1990). 1
254 3
10.7 1
14KB 2
16.5. 1
-15 1
(for 24
...; 1
0x80000000 2
1970s 1
./mem 5
0+5+10 1
14, 2
1, 80
09 1
00007f4e7d2d0000 1
1999. 1
26.5 4
100% 5
15, 7
17 66
17.2 1
17.4. 1
./cpu 5
0x8049a1c. 2
1975. 2
(queue_empty(m->q)) 2
0, 55
14-bit 4
15.3: 1
07 1
1KB, 1
1.01] 203
27.4 4
100), 1
15.4: 1
-F 3
(in 45
(making 1
./process-run.py 2
1.0001 1
1993. 6
1:0,4:100. 1
00, 1
00007f4e7cf06000 1
15:5, 2
0x03, 1
0x300, 1
10, 14
28.12 2
1032 1
16.1, 2
-f 1
17.8: 1
(mutex); 6
./thread 3
10-entry 1
10.1 2
2.4 1
0x0(%ebx), 2
00007f4e7d731000 1
16.2: 1
200,000, 1
0x3000, 1
10,000 8
28.3 2
105 6
16.3: 1
16384, 1
170 3
(n) 1
(p2), 1
(part 2
(pid:29147) 2
(right) 2
(sched 1
010000; 1
16KB] 5
17.1: 1
0xC0000000, 1
100, 6
100,000 1
1000, 5
-v 17
16K 1
18.1 2
0% 5
(rc_wait:29267) 1
10.2? 1
20.4 2
0x500, 1
(sorry!). 2
0th 2
0x0(%ebx),%eax 1
0x800, 1
1-GB 1
28.5. 2
128; 1
10ms, 1
/proc 1
16k 5
18.7: 1
0), 1
0.9. 1
05 1
2004. 7
0x8049a1c). 2
(turning 2
(virtual 1
(whether 2
1.00] 5
1024 10
12(%eax) 1
128, 1
13.5 1
137, 1
17.2: 1
1800s, 1
1959 1
10.3. 1
100? 1
2008–18, 5
1.2.1) 1
21:1, 5
18.3). 1
*), 2
10+20+120 1
10+20+30 1
13.4 1
10th 3
00000000019d5000 1
14.4 1
17: 1
(rc_wait:29384) 1
1968 2
0th) 1
101. 2
2013. 4
10,000,000 2
21:10, 1
18705, 1
**old, 1
28.9: 2
10.3: 1
100+110+120 1
1000; 1
100K 1
14949, 1
17:4, 1
(requiring 1
1979. 2
0x100, 1
108). 1
2015, 1
202 1
22.8 2
19). 2
*L) 4
*chan; 1
*parent; 1
*tail; 2
*tf; 1
1074 2
15.3 1
18.1: 1
(sometimes 10
1988. 2
0x3C00). 1
11. 3
115–116, 2
21.3 3
24(%eax) 1
25%. 1
29 25
132 2
11168, 1
1174 1
11:5, 2
10; 2
1962 2
16 92
(spinning 2
1997. 5
0x3F80, 1
100,000, 1
12:7, 1
215, 1
1945. 1
256KB 1
29.11 2
14.3 1
14:7 1
-20 2
1277, 1
12) 1
1964. 2
16(%eax), 1
(stop 1
1:1, 3
1); 4
100:100,100:100), 1
13, 2
22 38
1954. 1
256m 1
29.2 4
0111 1
-B 4
15 96
13.1: 1
1234567 7
1973. 2
16.2 2
(thank 1
1e7; 2
10); 1
10.1), 1
13.2, 1
22.11 1
1963. 2
26.4 4
29.8: 2
03 1
-R 13
15.2 3
14KB; 1
128-Byte 1
1982. 7
1990s, 1
(using 9
20,000,000. 2
108 11
10.6 1
132: 1
22.2 1
1965, 1
27.3 4
38 8
0x1096008c0 1
-b 3
150 10
15). 1
16.1). 1
18.6 2
1991. 9
1Each 1
2017. 2
11). 1
100); 2
100-bytes 2
100byte 1
1970 1
28 33
4). 7
47 2
-r 5
./multi.py 4
./p2 1
160 2
19.5 2
(v 2
21.7 1
110). 1
15.2: 1
22.8: 1
2 257
1024. 3
1972. 5
28(%eax), 1
1)) 2
4:1, 1
16.1 2
128-byte 2
/ 1
0,0,0,0,0,0,1:0,0,0,0,0,0,1:0,0,0,0,0,0,1 1
0,0,0,1,0,0,0:0,0,0,1,0,0,0:0,0,0,1,0,0,0 1
(version 1
22.6 2
11:1, 1
1224 1
220 1
2.2 2
104 1
1981. 7
1990. 2
1992.. 1
4:10, 1
16384 1
13:2, 1
17.1 1
19221041) 2
0.1 2
*H, 4
26 32
1586, 1
135 2
23.1 1
20 95
20(%eax), 1
28.11 2
10.4 1
2.1 2
60% 4
16492 1
14). 2
17.3. 1
1950’s 1
00007f4e7d932000 1
0? 3
0x1024 1
0x900. 1
14.6 1
24. 1
2501, 1
26, 1
26.4: 2
27.3: 2
20.1 1
64-Byte 1
16708 2
16), 3
17.7: 1
1970’s. 1
1We 1
1ms, 1
2.3: 1
1. 43
1.0 1
1110101 1
20.2 1
28.2 2
1024, 1
27KB. 2
2001. 1
64-byte 7
17.2. 1
17.6: 1
18.6: 1
*d 1
26.2 4
16.1: 1
20-29): 1
15.5 2
10. 7
113 4
200 24
28.4. 2
104. 1
28.2: 2
2003, 2
7); 2
16.7 1
170. 1
19.3, 1
*old_ptr 2
27.1 2
16KB, 1
20.3: 1
16.4 1
100. 6
117, 1
2000 15
28.8: 2
1101 2
29.10: 2
2008). 1
7.6 1
16500 1
172, 1
19.5: 1
*p); 1
28.6: 2
1793, 1
20.6). 1
17.3 1
1000. 2
128: 2
2002. 1
29.1 2
1110 2
29.1: 2
2010. 7
74 1
18.5 2
18.5: 1
1969. 3
*thread, 2
28KB1 1
29.1. 2
2000; 2
17.5. 1
2008–20, 49
13.3 2
2011. 7
29.7: 2
2KB), 1
12 89
22.5: 1
7620, 1
19.4 1
19.4: 1
1978. 5
*worker(void 1
18). 1
29.5: 2
11–12), 1
18 54
21.2: 1
13–14). 1
2013, 1
29267 1
30-byte 1
12(%eax), 1
23, 2
8.5 2
1960’s. 1
1957 1
1987. 1
--tool=lackey 1
19.1). 1
3), 3
12, 2
18.2 1
21: 1
21.1 1
14 71
29384 1
30.12 1
12(3), 2
23-bit 1
83 1
1970; 1
1959. 1
1966 1
-10 1
19.3), 1
30.7 1
300), 1
19.1 2
22.1: 1
22.6: 1
14.2 1
2This 1
30.3 1
30.9: 1
26.1: 2
87, 1
9.4 2
1996. 4
1968. 11
-A 6
19.8 1
12-bit 2
35 12
192KB 1
23:2, 1
23.1. 1
140 2
3). 5
120 9
31 21
26KB, 1
1980’s, 2
; 25
1KB) 1
1986. 1
-X) 1
1962. 7
12:6, 1
3Like 1
19384 1
256 6
24-bit 1
143,012. 1
30.9 1
12000 1
32-bits 1
28.9 4
;load 1
1; 42
1Note 2
1995. 6
-a 41
1963.” 1
13.2; 1
3a); 1
1989. 5
26.7 4
26.2: 2
15.1 2
16.6: 1
13.1 2
34KB 1
29.8 2
>= 5
1K 1
2), 3
2.7 3
-c. 1
1971. 1
. 53
4(%eax) 1
1996 3
27.6 2
27.1: 2
37 8
17.5: 1
135: 1
36K 1
29146; 1
A: 13
1KB. 1
1:0,4:100 2
20% 7
13.3: 1
1980. 1
1991, 1
4.6 1
1998. 2
28.14 2
29.9 2
3KB: 1
18, 2
14. 4
3764 4
29154, 1
ABOUT 1
1k 9
2.6 3
20), 1
15) 4
./p1 2
1? 1
44 6
2). 7
28.5 2
30.1 1
4-GB 1
18-bit 1
15.1. 1
3980 3
3. 32
APIs. 1
2.2: 1
20(%eax) 1
2007. 3
15.1: 1
./random 3
1MB 1
4400 1
2.9 2
28.9, 2
30.7: 1
4.1). 1
18.2, 3
15.3, 1
3A 1
30. 2
About 5
2.3) 1
20); 1
2014 1
15:3, 2
.globl 1
1” 1
44000 1
2009. 5
29.4 4
320KB 2
4.8 1
18.4: 1
15.5: 1
30.15: 1
AccessMemory(PhysAddr) 6
2.5). 1
4 164
20.6 1
2016. 1
15KB, 1
2. 29
4K) 2
2016 1
2; 5
32KB 5
// 294
5% 3
18–21); 1
152K 1
30.2. 1
Accounting 1
20.2: 1
4(%eax), 1
2006. 6
2018, 1
16KB; 1
2.6: 1
4KB). 2
22.7 2
2K 6
34K 3
0. 11
5), 5
19.3: 1
15KB 7
30.6: 1
Actually, 1
20.5). 1
4.2 1
2015. 1
21.1), 1
17:10, 1
20. 1
4MB), 1
22.9. 1
2k 1
3” 1
0.0 2
5.7 1
1949. 1
16.4: 2
300. 3
Aha! 1
21.1: 1
40 28
204 3
21.6 1
19.7 1
20.2. 1
5.5 1
26.3 2
30.11: 1
4. 27
00007f4e7d508000 1
50), 1
1980s 1
17.3: 1
32, 1
Allocator: 1
22.3). 1
400 1
21.5 1
214 1
1961. 1
20.6: 1
512 9
27 32
30.14). 1
4.2. 1
0x8049a1c, 8
55 1
1985. 2
17.6). 1
32-bit 16
Also, 1
23254, 1
4000 3
22.4 2
22.5 2
1963, 1
200. 3
55. 1
27.2 2
30.2: 1
40%) 2
10-ms 4
5:100,5:100. 1
1994. 1
18.2: 1
36291, 1
Andrea 7
24114 1
40000 2
23.3 1
2212 1
1970. 4
2000. 9
56KB 2
28.1 2
28.10 4
40. 2
110, 1
64 17
2.5 1
184–199. 1
3752 1
Approximation 2
25% 1
4088 1
24 37
25 33
1970’s 2
2018), 1
6.4 2
30.3) 1
28.3. 2
4088. 1
11916, 1
7.5 2
20.1); 1
19.1: 1
3:0,5:100,5:100,5:100 1
Atomically, 2
255 2
4096-byte 1
24(%eax), 1
250 5
2- 1
21.3, 1
62 2
31) 4
28.7: 2
4200, 1
1234567)) 1
70%. 1
20.5 3
1956. 1
4.5: 1
Attacks 1
26.6 4
4196 1
26.6: 2
26.1 2
2.5: 1
22, 1
7.3 2
3: 3
29.6: 2
44:1/2. 1
13.2: 1
78-101, 1
2005. 9
1965. 6
40-ms 1
Available: 29
27.5 2
4:100,1:0. 1
27.1. 2
26.7: 2
20.5: 1
22.2, 1
7.9: 1
4) 2
3-GHz 1
46273, 1
137298 1
8.4 2
2007, 2
1974. 3
40KB 2
Average 1
28.13 2
5.1 1
28.4: 2
27.2. 2
2010, 2
22.4: 1
4.1: 1
30.8 1
8 109
4b, 1
13: 2
88761, 1
1983. 4
2008–19, 138
4KB 16
A’s, 1
28.4 2
50? 1
29.3: 2
272, 1
2015). 1
28.17 2
448KB 1
324 1
8(%eax), 1
5(2): 1
13:4, 2
9.3 2
1992. 4
2016.. 1
4m 1
B) 3
28.6. 2
51. 4
2KB). 1
28.5: 2
20KB 2
28.8 4
49 1
32868. 2
8.2 2
50-ms 2
16KB)1 1
9.5. 1
2.3 1
203 1
4page 1
B-tree, 2
29.3 2
549–557, 1
3): 2
28KB 2
21, 4
29.7 2
4904, 1
36 11
80 18
51, 3
17.1). 1
90%, 1
20.3 2
21.4 1
22.12 1
BFS 1
29.9: 2
6. 20
33 12
29, 3
21-bit 1
2N 2
4:3, 1
4), 2
9.1 1
5KB 1
1792K 1
2003. 4
5, 6
22.3 1
Base 3
2: 3
: 289
7.5: 1
4.4 2
29.4: 2
21.2, 1
2’s 1
4GB 1
40% 5
9” 4
6.4: 1
18.7 1
201 4
5.4: 1
22.9: 1
Beginning: 1
3) 2
7.8). 1
== 91
42 7
29147 2
22.3: 1
30.1. 1
4KB, 3
40050 1
;store 1
6000, 1
19.1), 2
21 45
50, 5
23 37
Block 9
30.10: 1
7094 1
A) 2
4200 4
3); 1
23.2: 1
30.14: 1
5.3). 1
4088), 1
<< 9
7.1, 1
19.6 1
21.2 2
50,000 2
23.2 2
Bonwick. 1
30.13). 1
7355 1
ACHING 1
4b 4
30.15 1
28.16 2
30.5: 1
6). 1
45 6
<pthread.h> 8
7.3: 1
1960. 1
22.1 2
5000, 1
25. 1
Bosch, 1
30.1: 1
7KB 3
ALGORITHMS 1
5.3 1
30.6 1
28.7 4
32K 3
64-bits); 1
48KB 4
AIN 1
7.6). 1
1960’s 5
22.10 1
50th 1
254: 1
Broken: 1
384KB 1
8, 1
API 62
51 18
32896; 1
29.6 2
32k 6
7.8 1
49, 2
ANDOMNESS 1
73-96, 1
1KB 13
22.7: 1
5th 1
26.3, 2
But 49
39 11
By 58
Abstraction 2
56483, 1
335, 1
2:70, 1
2Fortunately 1
76 1
5.6 1
ANY 1
7353 1
1] 4
22–23), 1
6.3: 1
26.5: 2
8-bit 3
4.3). 1
CFS” 1
Accesses 2
5–7), 1
34 12
34920. 1
2KB 8
8), 1
512-byte 1
API. 5
8-page 1
1m 6
24KB 3
64). 1
27.2, 2
8.4: 1
48 9
CODE 2
Affinity 1
372K 1
36.4% 1
6 116
2] 2
8.7 1
526, 1
ATC 2
8.2: 1
2, 38
250, 1
7.2: 1
27.4: 2
9.3: 1
4MB) 1
CONCURRENCY 3
Algorithms 4
4.5 2
3:50,3:50 2
6+5 1
2m 1
80% 7
59–73, 1
ATTACK 1
846 1
2-MB 1
26.1, 4
75% 1
28.2; 2
;add 1
5). 6
CPUs 37
Approximate 10
43 8
3KB 3
6.2 1
2”. 2
85 1
6.5 1
AW 5
9) 1
2-bit 1
26.3: 2
8) 3
28.3: 2
ANDLE 1
655, 1
CRITICAL 1
Assume, 3
5.4 2
3] 1
60 13
3, 25
9.6 1
63 3
Accurate 1
9.1: 1
2.4: 1
27.2: 2
8.1: 1
28K 3
AS 10
7), 3
Cache-Affinity 1
BOUT 1
56, 1
4, 5
64, 1
30, 3
940 1
64bit 1
Amazing! 1
99 7
20, 3
28.10: 2
9:2, 1
29.11: 2
AZY 1
7.7 1
Certainly 1
BUCKETS], 4
6.3 1
4-bit 3
64-bit 10
30-bit 1
<sys/time.h> 1
7.4 1
Amazingly, 4
<assert.h> 4
20-bit 3
28.1: 2
<string>\n"); 1
29.2: 2
Abstraction: 3
75 3
Chou, 1
Background: 1
64KB 9
4.4: 1
7.1 1
30.13: 1
8-byte 1
Anderson. 1
<stdlib.h> 9
20.4: 1
28KB, 1
30.10): 1
Addison-Wesley, 11
76–86, 1
= 415
Clark. 1
Behind 4
40, 2
7.10 1
7 127
30.4: 1
8.3 2
Any 3
A1 3
200, 3
29.10) 2
A 728
30.4 1
AddressOfPTE 1
8(%eax) 1
A, 16
Code 24
Between 2
4000, 1
7.7: 1
7.2 1
30.5) 1
8049a1c,%eax 4
Approach: 5
AIX 1
200-MHz 1
29.3). 2
A2’s 1
32 33
Allocators 1
8(9):569, 2
ACM, 19
Code00 2
Birrell. 2
4b: 1
8. 12
7.4. 1
300, 2
April 10
AMD 1
9 119
2000, 1
2Q 3
ACHE 1
36, 1
Amazon’s 1
8.6 2
AMAT: 1
Coherence” 1
Boneh. 1
5.3: 1
8.6: 1
7.8: 1
3000, 1
Are 6
ARC, 1
9.2 2
2015/02/10/understanding-glibc-malloc/. 1
ACM 11
3764-byte 3
Analysis 5
3 231
9.5 1
APIs 10
Compared 2
Buffer 9
57.1% 1
820, 1
70 2
39016, 1
ArpaciDusseau. 1
ASLR 1
90 1
20th 1
AKE 1
3One 1
April, 3
30 31
93 1
ASID, 1
Computer, 6
Bus 1
6.2: 1
ASY 154
8.1 1
3B: 3
Artificial 1
Access 9
ACE 1
21.3: 1
ALWAYS 1
4-byte 3
Arrivals 1
30.11 1
< 24
Concept” 1
Buttlar, 2
9.5: 1
7) 3
AT&T/Bell 1
8.7: 1
4.3: 1
B+96, 2
After 21
ADD 1
22.2: 1
ASID 9
4.3 1
30.2 1
>> 11
Concurrency 1
As 158
CHEDULE 2
9548, 1
7.1: 1
ATOMIC 2
80-20 4
4096, 2
BAD! 2
Allows 1
ALICIOUS 1
23.1: 1
Allocator 1
40100 1
30.8: 1
A; 2
Control: 1
Atlas” 1
CONDITIONS 1
A), 2
9). 1
AUER 1
85.7% 1
4146 1
BF 2
Alpha, 2
ALLOCATED 2
24:2, 1
Along 2
41 10
300 4
ALLS 2
Controlling 2
Austin 3
CPU-intensive 4
API, 1
@ 8
Above 3
9. 9
4a: 1
Baby: 2
Alternatives 1
APIs, 4
256-byte 1
Alternately, 2
423, 1
3000 4
ANAGE 3
Cores” 2
Base[SN] 1
CPUs? 3
ARC 1
A1’s 1
Abstractions 1
99% 2
4k 1
Amazon, 1
Because 50
Acta 1
28(%eax) 1
Always 4
45, 1
3121, 2
ASPLOS-IX, 1
Couleur, 2
Blocked 4
Calling 8
ARDWARE 2
ANAGEMENT 17
Al 8
<fcntl.h> 2
5.1; 1
Animal 1
Benchmarking” 1
Ah 1
28.1), 2
Andrew 4
4a 4
3412382, 1
Again, 3
Critical 2
Boot 1
Cambridge, 2
ATA 21
ARM 2
Anita 1
<string.h> 2
5.2: 1
Anyhow, 1
Blasgen, 1
Algorithms” 1
28.15 2
Anomaly 2
4.1 1
Alan 3
Crockford’s 2
5 169
Bradford 2
Clayton 1
Abdel-Wahab. 1
Act. 1
Annals 1
<unistd.h> 6
5121024 1
Anything 1
Borg. 1
All 21
28.6 2
400MB 1
Another 38
Although 16
Currency 1
5.2 2
BufferOverflow.pdf. 1
Burnett 1
ASIDE: 4
ASIDs, 1
Anoop 2
<value>\n"); 1
54.5%. 1
Appavoo, 1
Buddy 1
Allocated 9
29.5 6
4096 3
Architecture. 1
Amazingly 1
Cutler, 1
Coffman 1
50 46
C-language 1
Address 25
Advanced 1
Approach” 3
ARPACI-DUSSEAU 38
5: 2
Apple 3
C), 5
Assignment 1
2github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
49).” 1
4MB 2
And...? 1
5. 27
Completion 4
500 4
CACM 1
AccessMemory(PDEAddr) 1
Algorithm” 1
Architecture: 4
Adding 7
5→0 2
Aq 1
CFS, 3
Attempt: 4
3.33). 1
Available 8
DBMS), 1
Apparently, 2
50. 1
Concurrency? 1
512KB 2
COND 2
AccessMemory(PTEAddr) 4
Allocated] 2
Atomic 2
Afraid 2
6) 5
Architecture” 3
August 5
30.12: 1
Avoiding 1
DVICE 1
B-Trees: 1
6100, 1
CPU 255
Conditions 1
512m 7
CPU, 33
Accessing 2
Allocation 3
Award. 1
Algorithm 5
6.1: 1
Automatically 1
30.3: 1
B1’s 1
Dick 2
B 157
B: 12
64GB 1
CPU-bound; 1
Corbato 4
52. 2
CPUs) 1
Again 2
Anderson, 2
B; 1
Anticipatory 2
6.2) 1
B). 2
30.4) 1
B5000: 2
Direct 8
BSD) 1
BUCKETS; 2
Bach. 1
6= 2
6KB 1
Cups” 1
6.1 2
CREATE 1
Allocation: 2
Android), 1
Babaoglu 1
Applications 4
64-bit) 1
B86], 1
30.8), 1
B? 1
Disk 5
Basic 10
Battle 1
CR3 1
7, 2
DATA 16
6.3. 1
Cache 18
Allocator” 2
Applications” 1
Bairavasundaram, 1
Arpaci-Dusseau 3
7332 1
BFS. 1
3000; 1
BUCKETS 2
Does 29
Batch 1
Bovet, 1
Candea, 1
7.2, 1
Dahm 4
64k 1
California, 6
Almost 1
Approaches 1
Became 1
Art 3
82% 1
BSD 3
32KB, 1
Bayer. 1
ECHANISMS 11
Better, 1
Brian 2
Canyon 1
7.4: 1
Darago, 1
7. 16
Canada, 4
Alto 2
Architectures 4
Belady, 1
Assuming 10
8:10, 1
BSTRACTION 20
3906, 1
Belady 3
EGMENTATION 12
Big 2
C) 3
Case, 1
7.7). 1
Data 13
7.6: 1
Chemistry, 1
Answer 1
Aside 1
Black 1
B5000 4
9.1). 1
Babaoglu, 1
3:50,3:50. 1
Berkeley. 1
ERFORM 1
Bits 1
C9 1
Chapman 2
70, 1
Dennis) 1
7.9). 1
Child 1
Apparently 1
Assumptions 3
Bonwick 3
BE 1
9.8 1
Bart 2
3; 3
Beyond 14
ESS 1
Buddy-managed 1
C95]. 1
Clearly, 9
7282 1
7354 1
70–76, 1
71755, 1
Apple’s 1
A’s). 1
B-trees); 2
BETTER 1
96 2
? 9
3A: 2
3K 3
3KB. 2
CISC 7
CPU: 1
Coalescing 2
Descheduled 1
8.3: 1
Coarse-grained 1
7356 1
Atlas”, 1
Both 7
BFS, 2
Barton 3
Below 2
A. 29
Bits” 1
ETTING 1
4(%esp), 2
CFS 40
CPUs). 4
Cobham. 1
Design 3
8k 1
Coding 1
8.5: 1
Austin, 1
Burroughs, 1
BIQUITY 1
Base[Segment] 1
Buffer” 1
A2, 1
Boston, 3
EVELOP 1
4-KB 3
CHEDULER 1
Can 40
Cobham’s 1
Dialogue 3
9.2: 1
Come 3
801, 1
Authors: 1
C: 2
BSD. 1
Better 4
Butenhof. 2
ACM. 2
Bouron, 1
Engineering 1
4.2: 1
CLOCK 2
Carl 5
CompareAndSwap(int 2
Dijkstra. 9
991 1
Conditions: 1
8KB 6
B. 18
CPU), 6
Bad 3
Blumofe, 1
C++ 2
ADDRSORT, 1
Broken 3
Envision 1
4.3) 1
CPU(s) 1
Charles 1
Complex 1
Dijkstra’s 5
<stdio.h> 15
Conference, 7
9, 6
BUILD 1
CPU-bound 2
Basu, 1
Brinch 7
C.J. 1
AMAT, 1
Bruce 1
Evans. 1
4.3BSD 1
CRUX: 6
Classic 1
Conference 1
EAD 1
<sys/types.h> 1
Countermeasures” 2
9-bit 2
Basically, 5
CPUintensive 1
Be 5
Butter 2
CCESSES 1
AN 18
Burroughs 5
Every 1
4: 2
CVs 2
Compiling 2
Contents: 1
EAKED 1
<sys/wait.h> 3
Create 3
9.4: 1
Bertinoro, 1
Caching 1
Berger 2
Bit-precision” 1
CCS 3
ANGRY. 1
C. 24
CONTROL 2
5) 3
Caching” 1
Call 8
Corbato. 1
EC2 1
<virtual 2
AT 1
Beyond” 1
D 109
Center, 1
CPU-optimized, 1
Bobrow, 2
COW 3
APPING 1
Evict 4
Cheap 1
5.1: 1
Computers 2
Case 4
Corbato’s 1
ECIDE 1
A2 1
Adaptation 1
Bigger 1
DEKKER’S 1
Chang, 1
CPU. 31
Boost 2
CPUs. 7
ARGE 1
Extract 1
Cocke, 1
50) 1
Computing, 3
Cassandra, 1
Cox. 1
EE 1
AFIPS 4
Ah, 2
Bovet 2
DRAM 1
Compaction 2
CPUs; 2
But, 7
CV 2
Actually 4
Fairness 2
Computers” 1
68 1
Consistency 1
Characteristics 1
Cup 1
EMBRYO, 1
AMAT 4
Ajay 2
Brooks 1
Data: 2
Compute 4
CS 1
B’s). 1
Caching, 1
Address-space 1
Computing; 1
Finally, 70
7). 2
Correct 4
Chunks 2
Cybertron 1
EXCLUSION 1
AME 1
Allocate 3
Bryant 4
David, 2
Control, 1
California. 3
C.H. 1
Casting 1
Also 10
Control 11
Flexible 3
7.9 1
Counters” 2
Clock 2
DD 1
Edsger 8
AND 6
Allocation” 3
Build 4
Dealing 1
Copy-on-write 1
Callers 2
CONDITION 19
Chevalley, 1
Convention. 1
An 65
Fox. 1
7232 1
Custer, 1
Coherence 1
David 19
Effectiveness 1
AVOID 7
Aren’t 1
Burchfiel, 2
Dekker’s 6
Corbet. 2
Came 2
CPU? 11
Chunk 1
Cooperative 1
And, 2
Frame 1
8.1). 1
D. 33
Cores 1
Dead: 1
Embedded 1
Abstract” 1
Arpaci-Dusseau. 3
Buy 1
Destroy: 1
Couleur. 1
Canada. 2
CPUs, 14
Cohen, 1
C’s 1
Annual 1
Free-Space 1
86 2
D.R. 1
DOO 1
Decay-Usage 1
English 1
Adam 1
Assign 1
Bye 1
At 31
Covering 2
Certain 1
Caches 3
Common 3
D.A. 1
Anomaly. 1
FreeBSD 3
8KB) 1
Corporation, 1
Decepticons1 1
Dijkstra, 4
EnvyFS” 1
Ahead 2
Developer’s 4
B’s 8
Atlas 10
Creating 2
Change 4
Certainly, 2
Communications 20
DID 1
Array 4
Generate 2
9), 1
Costs 1
Dekker, 2
Dilemma” 1
Exactly 1
Diego, 4
C-callable 2
And 108
August, 1
C’s, 2
Close 2
Cesati. 3
Compile 1
Days 1
Atlas: 3
HEN 4
9.7 1
Critically, 1
Donald 1
DiskRead(PTE.DiskAddr, 1
Exclusion 4
Dr. 1
C.A.R. 1
Approximating 1
B.W. 1
D) 3
Commu-nications 1
Chapter 1
Complete 1
Denning. 2
Atlas”; 1
Hansen. 5
90% 1
DEC 3
EAL 1
Doctoral 1
EASY 38
ECESSARILY 1
CA, 7
Architecture 9
Base/Bounds 1
Daley. 1
Computing 4
Clear 1
Concurrency. 1
Denning’s 1
Attempt 3
Hansen’s 2
99, 1
Daggett, 1
F.H. 4
Doesn’t 1
ECTION 1
ECURE 2
CACM, 5
Argument 2
Base/bounds 2
Daniel 3
Concept: 1
Clements, 3
Conditions? 2
Dennis 6
Award 2
IFIPS 1
99.9% 1
Debugging 2
Failing 3
Donkey. 1
EKKER 1
EGAIN 2
CISC. 1
Arpaci-Dusseau, 10
Begin 1
Definitely 1
Conversely, 3
Comes 1
Cool, 1
Directory, 1
A’s 7
II) 1
> 5
Detailed 1
Fast, 2
Download 4
EPARATE 1
ETTER 1
CPUbound 1
Atlas. 2
Being 3
Dennis, 2
Corbato, 5
Condition 6
Copper 1
Doing 23
B-tree 2
IME 2
ABCABCABCABCABC 1
Dijkstra 12
Fetch 5
D′ 2
Emery 1
Earl 3
CPUs), 1
Atomicity 2
Bershad, 1
Discovering 1
Cox, 1
Consider 2
Core 3
ETH 1
BASED 17
IZES 1
ACKGROUND 1
Dirty 2
Final 4
E.W. 2
Entry 3
Earlier 2
Clustering 1
Avere 1
Binary 1
Dominion 1
Custer 1
Could 1
DMA). 1
Each 19
Before, 2
If, 9
AM 2
Distribution, 1
Flag 2
ECHANISM 30
Ever 2
Earth 2
Come, 1
B1 1
Boilen, 2
EFERENCE 1
DOS 1
Counting 2
Declaring 1
Ed2.pdf. 2
Belady. 1
Implement 4
AMPSON 1
EG 1
Flash-based 1
Electronic 2
FIFO. 4
Edition)” 2
Compacted 3
Base-and-bounds 2
Boston 1
ENERALITY 1
Deadline 2
D.B.G. 4
Definition 1
Either 4
Belady’s 2
It’s 4
ASPLOS, 1
EMORY 36
Forin, 1
Equipment 2
FIFO’s 1
Environment” 4
Comparing 2
Before 21
Bottom 1
Early 3
Death 1
Davis 8
Design” 4
Experiment 1
Bell 2
Jacob, 1
AUSE 1
END), 1
Frans 4
Era 2
Factors 1
Evolution” 2
Compatible 1
Berger, 2
Bouron 1
Efficient 2
Design, 1
December 8
Detect 1
Facebook). 1
Berkeley, 2
Jason 1
Ability 2
EVEL 11
FreeBSD” 1
Evaluation 2
Fair 6
Excellent 1
Concurrency), 1
Berkeley 7
Brother” 1
Eligible 2
Details 1
Deciding 1
Dissertation 1
Find 4
Bit 3
Jeff 3
Account.html. 2
Errors” 1
G62]. 1
Exactly. 2
Fekete. 2
Execution 8
Considered 2
Beth 1
CFS) 1
Elliott 1
Determining 1
Dickey. 2
EASUREMENT 1
Formalizations” 2
Björn 1
Jeffrey 1
Achieving 2
Example 18
GNU 3
FFICIENT 1
Extra 1
Corporation 1
Bill 1
CMU 1
Errors 3
Dharmendra 1
Different 5
EBOOT 1
Fred 1
Figure 335
Bounds[Segment]) 1
Job 11
Aleksey 3
Examples”. 1
Generalized 1
FIRST 1
F. 8
Correcting 1
Boles. 2
CONCURRENCY: 15
Evans 1
Discusses 2
Dijkstra; 1
ERFECT 1
Gray. 2
File-System 1
Boyd-Wickizer, 3
Johnson, 1
Allocating 1
F.J. 1
Germond. 3
FLOW 1
FIFO 37
Counter 6
Buffer) 1
CPUs: 1
Everyone 1
Done 1
EALLY 1
ESOURCES 1
C 212
First: 1
C, 12
Journal 7
Analysis: 1
FAULT 1
Goh, 1
Facebook. 1
FILENO). 1
Craft 1
Capel 2
Examination 1
Druschel, 1
ERMS 4
Gray’s 2
Earliest 1
Flesh 2
CHEDULING 50
CHEDULERS 1
K 6
Andreas 2
Fault 4
HINK 1
Failure 4
FOOLISH 1
D, 2
Cilk-5 1
FFICIENTLY 2
EARN 1
ESTRICTED 1
HY 5
Emacs 1
Free 8
CONCURRENT 15
COMPCON 1
KB. 4
Antoine 1
February, 1
Hoc 2
First 23
False) 10
D.H.J. 1
Class? 2
FILENO 1
EASON 1
Edward 2
Hawkins, 1
EvictPage() 1
Freedom 1
CONDITION, 1
CPU). 1
Large 2
Apple, 2
Further, 8
How, 1
Fleischmann 1
Farrell, 2
DRAM, 1
Cocke 1
Follow-on 1
EDUCE 1
Electronics, 1
History” 1
Far 1
Frequency 1
CPU; 11
Calls 4
Lauder. 1
Levels 1
Futex 2
I! 1
Flow 6
Fellner, 1
Dave 3
Code: 2
Fortunately 2
EMORY-M 1
Emacs. 1
EMORY: 26
FetchAndAdd(int 2
Friedman, 1
Cache” 1
Candy 1
Approach 1
Limits) 1
GBs 1
I/Os 3
Frankenstein 1
Department, 1
First, 58
Commodity 1
Google 2
I/O: 4
Examine 9
END? 1
Fine-grained 1
Full? 1
Chile. 1
Colorado, 1
Ask” 2
Linear 2
Gecsei, 1
ISTORY 1
GE, 1
DisableInterrupts(); 2
Fleischmann, 1
Computations” 3
Growing 1
IRTUAL 19
FOR 2
EPRESENT 1
Forgetting 3
GB) 2
Cilk 1
Com-puting, 1
Assume 33
Linus 1
Geometry 2
Imagine 39
Distribution 1
H 42
Form 1
Concurrency: 2
Guide” 1
In-ternational, 1
Fill 1
ERSISTENTLY 1
Fortunately, 9
Getting 1
Claypool 1
Compare-And-Swap 2
B, 22
List_Pop() 1
Ginting, 1
Increase 1
Don’t 17
HFE-1:1, 1
Fourth, 1
Considering 1
Introduced 3
HE 83
ESIGN 1
Fun 3
Gorman. 1
Comment 2
For 194
Compare-and-swap 2
B-tree” 2
M. 35
Glaser. 1
Initial 3
EALING 1
Hall/CRC 2
Francisco, 1
Context 3
Inverted 1
HYSICAL 27
Easton, 1
GB 7
Grows 2
Concurrent 25
Forget 1
Computer 20
B97, 2
MB, 1
Gollum, 1
Intel. 1
ECHNOLOGIES 1
Hardware/Software 1
From 23
Creation 6
Isolation” 1
Hall, 5
Edwards, 4
GHz 2
Hank 2
Conference; 1
FreeBSD, 1
Concepts 2
BEST 1
MIN). 1
Guide. 1
Internals: 3
EECS 1
Heap: 1
Fusion 1
Culler. 1
Italy. 1
Hastings, 1
Enough 1
GUIDELINES 1
Harper 1
Counters 8
Future, 1
Conceptually, 2
Baby 2
MMU, 1
HICH 1
J 1
Heinrich. 3
G.A. 1
Culler’s 1
I’m 5
ERSION 166
Having 4
Epema. 1
George 2
Here’s 4
Culler, 2
G 12
Conway. 1
Balakrishnan 1
Manual”. 1
Handle 4
January 14
Hershey 1
Gates 1
DDRESS 25
Jacqueline 2
ESX 2
He 3
Epema’s 1
Given 15
Hey, 1
Current 3
Gandhi, 1
Corporation” 1
Baron, 1
March 14
Hardware?” 1
Knowlton. 1
Hits 2
Glenn 4
DVANCED 13
Josep 1
ETERSON 1
Hennessy 3
Example: 6
Good 8
Historical 4
DO 1
HAPTERS 1
Couleur 1
Baumann, 1
Mark 14
Has 1
Knuth 6
Hopefully 2
Going 1
Database 1
KB); 1
Eindhoven 2
Hint: 2
F 36
Google, 2
History 4
Daily 1
HOLD 1
Creation: 1
Best 2
Martin 1
Hash_Lookup(hash_t 2
L. 10
Hydra 1
HERE 1
Default 1
KPTI) 1
Electroanalytical 1
Hoare. 1
Facebook, 1
Group, 1
Hybrid 2
Delete 1
HREADS 1
Daley 1
Bhandarkar 1
McCarthy 2
Helen 1
LaTeX, 1
I/Os. 1
HP, 1
Devang 2
Kanev, 1
Emacs7 1
HotOS 2
Farm 1
HARING 2
I/O; 3
INITIALIZER. 2
Hash_Insert(hash_t 2
DeWitt. 1
Blocked: 1
Measuring 2
Melvin 1
Lampson 6
IBM 9
HREAD 12
Directory 5
Kathryn 1
Engineers 1
How? 1
First-in→ 11
HINGS 1
Denning 1
INTRODUCTION 15
Hill. 1
Dennis. 1
Bone: 2
History: 1
Minneapolis, 1
Larry 1
IEEE 7
Dissertation, 1
Kernel 14
Europe(!). 1
ID 7
HREE 154
French 2
Handled) 1
Detail 1
IP) 1
Hong-Tai 1
Detection 1
Brooks. 2
Hive/HDFS, 1
Miss? 1
Levin, 1
IF) 1
Dynamic 7
LRU. 3
Evaluating 4
IMER 1
Harcourt, 2
Function 2
Hazelwood, 1
Deterministic? 1
Initialize 3
Hydra” 1
I. 1
Building 5
Hmm... 2
Monitors 1
Homework 28
IO 7
LRU’s 3
FIFO, 7
INVERSION 1
However, 120
E 195
GAINST 1
Header 2
Deuterium” 1
Instruction 4
Development, 1
Butler 3
I/O 86
LoadLinked(int 2
Multiprocessor 4
Included 1
LWN 2
FIRST)? 1
Hash 8
IT 3
Hugh 4
ERMINOLOGY 1
Go 4
Hill 1
Development 2
Introduction 8
Douglas 1
B’s. 1
IBM” 1
Lynch, 2
Mythical 1
Index 11
Labs” 1
February 16
Heart 2
ITHOUT 2
I/O), 3
Efficiency 2
Goals 2
Home 1
Distributed 5
Intuitively, 1
Isolation 1
C; 2
IRECT 15
MA, 2
NGINEERS 1
Inserts 2
Licklider. 3
Fetch-And-Add 2
Here 30
Influenced 1
IA-32 4
Evolution 1
H. 20
Huge 2
Do 18
EC-11:2, 1
Joy 2
CISC, 1
ISSES 1
MANUAL, 1
NIX, 2
Instead 20
Like, 1
FetchAndAdd(&lock->ticket); 2
His 3
Ingo 1
IGHT 1
FASTER 17
Handbook 2
Human 1
E. 20
EEDBACK 11
June 13
Calculate 1
MIT 5
NIX-based 6
Instinct, 1
Lipman 1
File 3
Hopefully, 4
Interestingly, 3
IMITED 15
Failed 2
In 387
Harry 2
EC-11, 1
ELADY 1
KB), 1
Check 8
I 171
MLFQ: 3
NULL 20
Intel, 2
Lipp, 1
Freeing 2
Hovav 1
Investigator. 1
IRIX 1
Farm” 1
Includes 2
It 92
END, 1
EYOND 27
LOW 1
Child: 2
I/O-intensive 2
MMU; 1
NeXTStep 1
International 3
Logistics 1
G) 1
IBM, 1
IS 1
Faster 2
Hash_Init(hash_t 2
Incrementalism, 1
Jones. 2
Ed2.pdf 1
Embedding 1
LRU? 2
Christenson. 1
MQMS, 1
Negative-Growth 1
Interscience, 1
IECES 154
Lord 1
GB). 1
INUX 1
ISBEHAVIOR 1
Feedback 5
Henry 1
Indeed. 1
Interposition 1
EnableInterrupts(); 2
Examples 3
Labs 2
Circuitry 1
Mac) 1
Nelson, 1
I’d 1
IKE 1
M62, 1
Get 5
Idea1 1
Induced 1
Festschrift 1
Hershey. 1
Jose, 7
Introduction), 1
Execute 7
Exception 1
Law. 2
Compilers 1
Manager” 1
Nevada, 1
I” 1
MAC 2
IP 41
Golding, 1
Instead, 7
Intel 10
Figures 2
Hierarchies” 1
KB 18
Invalid 2
FIFO? 1
FAULTS 2
Learn 1
Completely 5
Manchester 3
Next, 9
MAX; 2
J. 33
IRTUALIZE 5
Gruss, 1
International, 2
Interesting 1
G. 9
Hydra. 1
Kaufmann, 5
Jaswinder 1
Facebook) 1
FIFO; 2
Length 1
Computers, 3
Matteo 1
No-Locality 2
MS-DOS. 1
Jing 1
ISN’T 1
HARE 14
Johnstone, 2
Is 14
Golub, 1
I/O? 1
Kenneth 2
Javascript 2
Fagin. 1
Factor 2
Loads/Stores 2
Computer” 5
McCall. 2
No. 6
MULATING 1
Job:C 1
Implementing 2
HTTP 1
Joint 5
Issues 6
Good, 1
IALOGUE 4
Kleiman, 2
Job:B 1
Fit 4
Fall 5
Lots 2
Contents 1
Mellor-Crummey 4
Non-Coalesced 1
Mac 12
Joe’s, 1
Indeed 1
Hear 1
July 4
It” 1
Gouicem, 1
INTERLUDE: 11
Knowing 3
Journal, 2
Frigo, 1
Finding 2
Low 2
Contrast 2
Meltdown 2
OK! 2
Mail. 1
Joyce. 1
Informatica, 1
Here, 13
KB). 1
I’ll 3
HPUX 1
Ideas 2
L1 4
KB64 1
Gaming 2
Finite 1
Lucco, 1
Convoy 1
Microprocessor 3
OMPLEXITY 1
Manuals 1
KB; 2
Internet 1
High 2
KB-64 1
KASLR” 1
Handbook” 1
Imagine, 4
LAW) 2
LATER? 1
Generally 1
Finnish 1
MPLEMENT 1
Corporation. 1
Moseley, 1
ONTENTS 1
Mars?” 2
KPTI 1
Keeps 2
Hits+M 1
KPTI, 1
Knowlton 1
Happened 2
Implementation 6
Inc.. 1
LESS 1
Gets 2
Firefox, 1
Mac! 1
Correspondingly, 1
NPUTS 1
OS) 2
Meehean. 1
Isn’t 2
Knuth. 1
House, 1
L->head; 8
Heavyweight 1
L 59
LL/SC 2
Information 6
Languages 2
Goodman. 1
Fredkin, 2
Managing 1
Corwin, 1
Network 1
Obtaining 1
Meehean’s 1
Issue 4
LATER 1
I/O) 2
LATER, 1
Hill, 3
LDE). 1
Hit 29
Interlude: 4
Lauer. 2
Goodman’s 1
G.L. 2
Marco 2
Create: 1
New 9
O’Hallaron 2
Mistakes 1
J.S. 1
LISP 1
IDs 2
LLOCATE 1
LRU→ 11
LOCKS 23
Holding 1
Interrupt) 1
Lauer’s 2
Gray 6
Gain 2
Garner 1
Decision 1
Nickolai 4
O’Reilly 3
Multics 14
Jack 5
Lampson. 2
INITIALIZER, 2
Last 1
Lamport’s 1
Leffler, 1
Holt. 1
Ion 2
Lectures 1
Great 5
Mattson, 1
Generally, 1
Depending 2
Nuclear 1
PFN=55 1
Murphy, 2
Joseph 1
Lampson’s 1
IRE 5
Later, 2
Least-RecentlyUsed 1
Levy, 5
Horn. 3
January, 2
Lepers, 1
Greenfield. 1
Maurice, 1
Gray, 1
Despite 1
OK 4
PID. 1
NBA 1
K. 1
Later 2
ISCA 4
Lee. 1
Leave 1
Libraries 1
I, 1
Job:A 1
Libraries: 1
HARES 1
Measure 5
Grove, 3
Digital 2
E) 1
PTE.PFN 1
NIX/C 1
KASLR, 1
Limited 6
IST 2
Library” 2
Linux); 1
Loops 1
I/O. 10
Jr., 1
Linked 8
Linux). 5
Measurement, 1
Guerraoui, 2
Gupta. 2
ELOCATION 2
PWT 1
NOT 1
KB, 1
Line 3
ITS 1
Ideally, 2
List_Init(&H->lists[i]); 2
Lu, 4
INDETERMINATE, 1
Just 15
KB) 3
L1) 1
Mesa, 1
Microsoft, 1
HW 1
EPLACEMENT 2
Paranoia 1
NSA? 1
KEY 1
Loading: 2
Locks, 1
Interaction 1
List_Insert(&H->lists[key 2
Load-Linked 2
Load-linked 2
Locks”) 2
L78]. 1
M 139
OMPILED 1
Microsystems 1
Handles 1
EY 4
Pass(C) 1
NT” 2
Key 1
Linux, 15
Looping 1
Interrupts 2
ITH 4
Hence 2
List_Insert(list_t 4
M.K. 1
LLUSION 1
MAC, 1
ONSTANTS 1
Minimize 2
Hard 1
Easy, 2
Perfection, 1
Not 23
L->head 8
Linux-based 3
MAX_HEAP_SIZE; 1
Its 4
Implementation” 1
Herlihy. 2
LoadLinked 2
MIN 1
Lampson, 2
MALLER 15
OS-ignorant) 1
Modadugu, 1
Heap01 2
Elias 1
Pioneered 1
Novark 1
L4) 1
List 7
MB) 1
Jain. 1
Indeed, 20
Hochshule 2
Locking 2
MRU 2
Lanigan, 4
MMU. 2
OSes 2
MongoDB, 1
Hit/Miss? 4
Even 20
Pn−1 1
O(1) 4
LEXIBLY 1
List_Lookup(list_t 4
MIT. 1
Locks 29
Instructions 1
Humorously, 2
Longer 1
Machine” 1
Late 1
Mac, 1
P1) 1
Motivating 1
Hoare 4
Experimental 2
Precise 2
ODING 1
LGORITHMS 1
Jain’s 1
MIT’s 1
MASK 3
Iyer, 1
I/O, 3
Low-level 1
Markowitz, 1
Lighting 1
Management 11
NCREMENTALISM 1
Hussein 1
FAST 7
Privileged 3
OINTER 1
LOCK 2
PERATING 184
James 1
MUTUAL 1
Ma. 2
Kanev 1
ICKETS 1
Making 3
Massachusetts, 1
List: 2
Manual” 3
ND 10
IGHER 1
FIFO: 1
Probably 11
OPT. 1
Lacking 1
PFN_SHIFT) 1
PTEs. 1
Mangard. 1
Man 3
Kay 1
Idea 2
March, 1
Mauro 2
List_Init(list_t 4
Marvin 1
NECESSARILY 1
IMMEDIATE 2
Fast 4
Problem: 6
OS? 4
Lauer 2
Java. 1
Parent 6
Manual: 3
Management” 2
Keep 4
In, 2
May 11
Methods 1
Liu, 1
Memory-mapped 1
NT 4
IO). 1
FindFreePhysicalPage() 1
Programs 4
OSSIBLE 2
Lawall, 1
Jim 8
Park, 2
Maxwell’s 2
Markstein. 1
Keith 1
Inputs 1
McCarthy, 2
Microsoft’s 1
Locks: 2
Microprocessors 1
Namely, 1
IRTUALIZATION 5
Framework 1
Pthread_join(p, 4
OS” 1
Laziness 2
Joy. 1
Pass(B) 1
McKinley, 1
Mayer. 2
Krieger, 1
Instrumentation” 1
Membrane 1
Miscellaneous 1
MALICIOUS 1
Mr. 1
Naval 1
From: 1
Pthread_mutex_lock(&c->lock); 6
Object-Caching 1
Linux) 2
K+96]. 2
Kernel” 1
Pesterev, 3
Mechanisms 3
Media, 3
LDE 1
Intelligence 1
Metrics 1
Morgan 6
MIT, 1
Much 9
Neumann 2
Fujiki, 1
Putting 1
Operation 1
Questions 26
If 167
Kleinrock. 2
Point 1
Memory” 1
Miss 29
LOCK-BASED 15
Issue: 3
Mixed 1
Morse. 1
Macintosh 2
Muller, 1
No-eXecute), 1
Gibson, 1
Lisa 1
Or 9
RACE 1
Incorporating 1
Kuehner. 1
Policy: 2
Minimally, 3
Multiple 1
LRU-like 1
Jonathan 3
Modha. 1
Most-Recently-Used 1
Massachusetts. 2
Multi-Queue 1
Note, 2
Goodness, 1
List_Lookup(&H->lists[key 2
Overall, 3
RANSLATION 15
Intel’s), 1
L4 3
Prentice 4
Morris, 4
Multiprocessors. 2
Laszlo 1
Kaashoek, 4
Moir 6
Mysterious 1
Maurice 2
Multics, 6
OFFSET_MASK 7
Graham. 2
Lock 12
P1 6
ROGRAMS 1
Interludes 1
LWAYS 1
Presented 1
Mozilla 1
Multithreaded 3
Led 1
Keeping 2
Mountain, 1
NOW 1
McDougall. 3
Multiprocessors” 5
ONCURRENCY: 15
Guide 3
Locks.” 2
PAT, 1
RY 1
John 14
Las 1
Programmer’s 2
Mutual 4
N. 7
Leonard 2
Kernighan, 1
NULL, 20
NTERRUPT 1
McKusick, 1
NIX. 2
ONTEXT 2
H&P 2
Lower 1
PDP-10” 2
Race 2
KB-32 2
Lavington. 3
Protected 1
Neat 1
Need 2
Let 18
Kilburn, 4
Nobel-prize 1
LRU 33
Measurement 2
NULL2 1
OOT 1
HOW 6
MAP_ANON|MAP_PRIVATE, 1
PD_SHIFT 1
Rachid 2
KNOW 1
Law, 2
Pthread_mutex_unlock(&mutex); 8
Netzer 2
NetBSD, 1
Like 6
NULL) 6
Nothing 4
LW 1
Meltdown, 1
Nethercote, 1
OPT? 1
Hardware 18
MEMORY 1
PT_SHIFT 1
Rafael 1
Kawamoto, 1
Leaks 1
Quanta 1
Non-compacted 1
ORK 1
Lock-based 2
NVERSION 1
Numbering 1
Language” 2
Mesa 4
Nice. 1
Harmful” 2
MIPS 14
Paged 2
Relational 1
Know 2
Learning 2
R+89, 1
ODE 2
OS: 1
Look 1
Node_t; 1
OES 1
Least-Frequently-Used 1
Microsoft 4
No 10
Heap 16
MPORTANCE 1
Performance” 1
OS 504
Resort, 2
L3 1
Leiserson, 1
README, 1
OFTWARE 1
OSTEP! 2
MIPS, 2
OFFSET 1
Letters 3
Mike 2
Now 79
Novark, 1
Let’s 90
Pioneers, 1
Resources 2
How 141
LRU, 11
Levy 1
ROTECTED 1
One 135
OK. 2
Obviously 1
OLICIES 16
OMEWORKS 2
Multiprocessing. 2
OAD 1
Mach 1
Nucleus. 1
Lindberg, 1
Prediction 1
Rules 5
I/O). 3
Letters, 2
Life 1
Random) 1
Only 10
MM00]. 2
Occur 1
ONCURRENCY 3
OPTIMIZATION 1
NCE 1
OBS 1
Malloc(sizeof(myret_t)); 2
O. 1
Lottery 6
Preemptive 1
Running: 1
IT! 1
Linux” 1
Recognized 1
Oops! 2
MQMS). 1
Linux 107
Oddly 1
OS), 2
NTERLUDES 1
OK: 1
Management, 2
OCK 16
Louisiana. 1
ORG 166
Present 1
S.Sahni). 2
Incorrectly 1
Lipman. 4
Reliability 1
Open 2
Main 1
Live 1
Often 1
Offset 15
NULL; 22
ONDITION 1
Mao, 3
OLUTIONS 1
M.J. 6
OSes. 1
Price. 1
SJF/STCF) 1
Innocent 2
Innovator’s 1
Relocation: 2
Orran 1
Malcolm 1
Load 4
Organick. 1
Oh 5
NUMCPUS; 4
ONG 1
McCarthy. 2
OMPARING 1
M83]. 1
Oregon. 1
Priority(B), 4
Saying 1
Lists 5
Interactive 1
Robin 3
Other 15
Malloc(), 2
Long 1
Over 6
Overflows 1
NX 1
ONSIDER 1
McCarthy’s 2
ON 12
MBALANCE 1
MLFQs 1
MORE 2
Scott. 4
Segregated 1
Israel. 1
S). 2
Ousterhout 3
Manchester; 1
Looping-Sequential 1
PACES 8
Overview 3
National 1
OPERATIONS 1
Megiddo 1
OOLS 1
Out 2
Problem 3
MS-DOS 1
Lu. 2
Sequential 2
Italian, 1
SDS 2
P2 3
Manifesto” 1
M.I.T., 1
PDIndex 1
O’Reilly, 2
Nemacolin 2
OU 1
OS; 8
Memory 58
PAGESIZE 1
Processes: 1
MUTEX 2
MAX) 1
Sharing” 1
Jackson-Edwards. 1
SER 1
PCs, 2
Many 21
PROGRAMMER 1
MLFQ 32
PCD 1
Note 34
OWERFUL 1
On 21
Menace 1
PDBR 2
Pthread_cond_signal(&fill); 2
Maintenance 1
MB 1
Size 10
Jiaqi 2
SHIFT, 1
PRIORITY 1
Mechanism 1
PTEs 3
MORTIZATION 1
PDE. 1
OK, 11
O_CREAT|O_WRONLY|O_TRUNC, 1
Or, 7
Molnar 1
PD_MASK) 1
Pthread_mutex_lock(&m); 6
Mars 5
MIT), 1
Software 7
Jobs 2
SIGMETRICS 2
Padegs. 1
Memory, 1
PTIndex 1
Manuals” 3
PPN) 1
OMPLETE 19
O_WRONLY|O_CREAT|O_TRUNC, 1
P1, 2
Multi-Threaded 2
PTBR 5
Q 12
May, 1
MMU 3
Sorry, 1
Joe 3
SIZESORT+, 1
Paging, 1
MenuMeters 1
Page” 2
Microsystems. 1
PROT_READ|PROT_WRITE, 1
ORE 2
Operations 3
P=0 1
Multi-threaded 1
PTE.present 1
Q0 13
McGraw-Hill, 2
Mac. 1
Stalin 2
Joy, 1
Shan 2
Paul 3
Simple 29
Palo 1
Mitchell. 1
PTE. 3
OSes, 1
Organization” 1
PAGE 6
Multiprogrammed 5
PTHREAD 4
Quicksort, 1
Memory: 3
McGee. 1
State: 2
Jozef 2
Mesa” 1
Performance 11
Smaalders. 2
Particularly 1
Patent 1
PTE.PFN, 3
OUBT, 1
Overflow 1
PFN) 2
Must 2
PTHREAD_MUTEX_INITIALIZER; 7
RANSFER 1
Merritt, 2
Mechanism: 2
Strategies 2
Juan 1
Modern 3
Pollack, 1
Spend 3
Mogul, 1
Patterson, 1
PTIMAL 1
OUR 2
P4 1
PID 5
NIX: 1
PTIMIZATION 1
REATE 2
NTRODUCTION 59
Metha 2
Stride 4
Julin, 1
NABLES 1
Positive? 2
Spider-Man: 2
MostFrequently-Used 1
Plenty 1
PageDirBase 1
PD 2
OW 34
PM 4
PT_MASK) 1
REEMPTIVE 1
Michael 10
Nancy 2
Michael, 2
Supporting 1
June, 1
NOWLEDGE 1
Priority 4
Spin 7
Moving 1
PowerPC, 3
Part 6
PDEAddr 2
Optimal 3
Paperbacks, 1
Page 39
RISC 14
Miller. 2
Narrow 1
Microsoft) 1
Swaminathan 2
Karels, 1
Navarro, 1
Professor? 1
Spin-waiting 2
Mudge. 1
Provides 1
Per 5
Pick 3
Oracle 3
Ph.D. 3
Pal 1
ROBLEM 4
Milton 1
Neely, 2
Multics. 1
Swap 4
Ken 2
Needed 1
NIX 55
Spurious 1
Multi-Level 4
Pthread_cond_wait(&c, 3
PDP 1
Pren-tice 1
Otherwise, 1
Physics), 1
Parallel 3
ROP 3
Mitoma, 1
Nimrod 1
Swift. 2
L2 1
Protocol 3
Ngram 1
Stallman. 2
NULL); 35
Multi-level 7
Pthread_join(p1, 5
Processes 8
PFN 43
Pilot 5
Our 25
Pathfinder/Authoritative 2
RaiseException(TLB_MISS) 1
Models” 1
Nir 2
T2), 2
L4. 1
OCALITY 1
Q1 15
Structuring 1
NUTH 1
Multics” 1
Queue_Enqueue(queue_t 2
Processing: 2
PID). 1
Policies 3
P6 1
Peanut 2
Random 21
No, 2
More 24
L60, 1
TABLES 15
OESN 1
Queue_Dequeue(queue_t 2
Success! 1
Neither 1
Nelson 1
RADE 1
Producers 1
PT 2
Prentice-Hall 1
PAGING 22
Pretty 8
Ratios” 1
Node_t 1
Most 9
Lanyue 4
TECHNICAL 1
OF 9
Queues: 2
Sullivan, 1
NDETERMINATE 1
Nethercote. 1
RAM, 1
Project 3
PTEAddr 6
Physical 13
PF 3
Principles” 2
Recent 1
Non-Cooperative 1
NDERSTAND 1
Levy. 2
TERMS 1
OK; 1
Susan 1
R 21
NIX! 1
Next 2
REAT 3
Protection 7
Patel. 1
Power 1
PID) 1
Reducing 1
Program 20
Notes 4
NE 1
Linux. 8
THREADS 1
NTERLUDE 35
Switches 1
RIORITY 1
NOMALY 1
NUMPAGES 2
Pthread_create(&p2, 5
REE 19
Pennsylvania, 2
Processing 5
PPROPRIATE 1
Relationships, 1
Pthread 11
Number 8
O(log 1
OSSpinLock 2
TLB) 3
NY, 1
Synthesis 1
RR. 2
Nucleus 2
Now, 26
Pthread_mutex_lock(&mutex); 8
RaiseException(PAGE_FAULT) 1
Personal 2
Page-Fault 2
Professor: 37
Required 1
Pthread_cond_wait(&empty, 2
Linux’s 2
OK? 2
TLB-miss 1
Newell, 1
TORE 1
Randal 1
Of 70
OCKS 23
Pthread_mutex_lock(pthread_mutex_t 2
Randall. 1
Phipps 1
Paging 6
Programming: 3
Review” 2
Pthread_create(&c, 2
Little 2
O 247
OOK 1
TPDS 1
Now? 2
TV 1
Randell 1
OLICY 4
Once 41
Q6 1
Rate 4
Plus 1
Patel 1
Pthread_cond_signal(&c); 4
Ritchie) 1
Q7 1
Long-Running 1
ORRECT 2
Tables 9
OPERATING 42
OPT 4
Tf 1
Rather, 4
ONCURRENT 16
Organization 1
RE 1
Prentice-Hall, 7
Phenomenon” 1
Read 38
Pthread_cond_wait(&cond, 6
Running 24
Queue_Init(queue_t 2
Long-running 1
OSDI 10
Technical 4
OS). 2
Oh, 1
They 5
Reese’s 1
OOPERATION 1
Ott. 1
ROCESSES 1
Presumably 1
Physical) 1
Read-Execute 1
Pthread_join(p2, 5
S. 22
Queues 4
MLFQ. 2
MQMS 2
Than 1
Orwell. 2
Thread2 6
OR’d 1
References 28
P0), 1
OS. 26
Priority(A) 4
Play 1
OSTEP. 166
Reduced 2
Pthread_mutex_lock(&lock); 6
SECTION, 1
R/W 1
Old 2
Make 5
Then, 19
Orwell’s 1
Threads? 2
Results 1
Rago. 4
PAT 1
OS’s 4
Problems 1
Processes” 2
OSTS 1
Report 2
Publishers, 1
SGI. 1
REASON 1
One”. 1
Man-Month” 1
Therein, 1
P3 1
Threads” 6
SJF/STCF 1
Rashid, 1
PDE, 1
Orleans, 1
Proc 14
Processor-Memory 1
Rudolf 1
Operating 38
RDLK 2
SJF. 2
RITICAL 1
OpenSolaris 1
Maybe 1
Things. 1
PC 16
Tim 2
SWITCH 6
Refers 1
PERATIONS 2
Ousterhout. 3
Pthread_cond_wait(&c); 1
Protection” 1
SEG_SHIFT 1
Overlap 2
RISC, 2
SN 3
Raging 1
Orr, 1
McVoy 1
Third 1
PCD, 1
Tony 1
SYNCHRONIZATION 1
Regions 1
PHit 1
Ousterhout’s 2
Pthread_mutex_unlock(&m); 6
Pthread_create(&p1, 5
SET 2
O’Hallaron. 2
RR) 1
Saavedra-Barrera. 1
Rajimwale, 1
P1’s 1
Metric: 1
Threads 5
PINNING 2
Transforming 1
San 12
Remzi 6
PREMATURE 1
Q3 1
Q5 1
R.H. 1
O’Reilly. 2
RUNNING, 1
Said 1
Redell 2
PC, 7
Microsystems, 1
TimeSharing 1
Tucker, 1
POSIX 20
Santiago, 1
Revolution 1
PTE, 6
Queues, 2
SIGNALING 1
P 280
R4000 5
P.M. 1
RaiseException(SEGMENTATION_FAULT) 5
Sanzi, 1
PACE 21
POSIX, 2
Modeling” 1
Tp). 1
Traditional 2
PPLICATION 1
Schedulers 1
River” 1
PageTableBaseRegister 1
STCF, 1
RR 14
P0 4
RINCIPLE 2
Random, 5
Redirection 1
Scalability 3
PDE 8
Pacific 3
Montreal, 1
Two 11
UMMARY 3
PTE.ProtectBits) 3
Seward, 1
Runs? 1
Passing 2
Schedulers: 1
RSS, 2
P4, 1
Raiders, 2
Readings 1
Reduce 1
Scaling 6
Perl, 2
Morgan-Kaufmann, 2
PIECES 38
UPPORT 2
UPERUSER 1
PTE: 1
Similarly, 6
S09]. 2
Patt, 1
Set 6
Read-Write 2
Sharing 12
RaiseException(PROTECTION_FAULT) 9
Reclaim 1
Reeves. 2
Scheduled 1
Pfaff, 1
Multiprogramming 4
PLDI 3
VERLAP 1
UTUAL 1
PTEs). 1
Single 7
SHIFT) 8
Persistence 1
PAGES 2
Real 3
Short, 2
Rather 1
Recollections 1
Registers 1
Science). 1
PhysAddr 8
PTE 17
Va3 2
N 41
Usually, 3
Pathfinder. 2
Slab 1
Scalable 10
Prof. 1
PDPTA’97, 1
Reese 1
Shortest 6
Reprinted 1
Redell. 1
Report, 2
Scientific 1
Plot 1
PTHREAD_COND_INITIALIZER; 3
Wanjohi: 1
NT, 1
VMS), 1
Perhaps 15
Secure 1
So 30
Pthread_create(&p, 5
PFN, 1
Referring 1
Signaling 2
Research 3
Redell’s 1
Represent 1
Setup 1
Preemption-safe 2
Page, 1
Warburg 1
NTERPOSITION 1
Va4 2
Phoebe 1
Semantics 3
Sometimes, 9
Q4 1
Pages 5
Region 1
Signals; 1
Restoring 1
Ritchie. 1
Resource 4
Shacham, 1
Prefetching 1
Page-Reference 1
Weaver 1
NUMPAGES. 1
Valley. 1
Pointed 2
September 13
Sorry3 1
Quarterly, 1
Paging: 4
Requirements 3
Silas 3
Resulting 4
SPINNING 1
Responsibilities 1
Shortly, 1
Primer 1
PageTable[39] 1
Weiwei 2
Nichols. 2
Vyssotsky, 1
Positive 1
Shared 2
Speaking 1
Queue 8
Parts”.) 2
Rewritten 2
Simpler 2
Richard 9
SSD, 1
Round 3
Silicon 1
Priority] 2
Pass(A) 1
Wilson. 1
Nope, 1
Was 1
Problems” 1
Shedler 1
Sploitfun. 1
RAND 5
Patterson 2
Ritchie, 1
Smotherman. 1
Running, 1
SSDs) 1
Rule 14
Similar 3
Patt 1
Process 35
Wilson’s 1
November 10
We’d 1
Proceedings 2
Sleeping 3
Sun, 2
REMATURE 1
Perry. 1
River, 1
Smotherman’s 1
Russ 1
Same 2
SE 11
Simulation, 1
Perspective” 5
Process0 12
Win, 2
O(n) 1
Where 7
Processes, 1
Software-based 1
Sun.. 2
RUN 5
Peter 5
Runtime 1
Solaris” 1
SUPPORT 1
Sanjay 1
SS+10]) 1
Sitaram 1
Pieces 2
Processor” 1
Wisconsin—Madison, 1
OFFS 1
Windows 10
Professor 5
Solution: 1
Sweden, 2
Peterson 2
SQMS 7
Ready 58
Sounds 6
Say 2
Space 20
SSD. 1
Sood, 2
Pillay. 1
Producer/Consumer 5
Worse: 2
ONTROL 8
Wish 2
Programming 15
Sorin, 1
Switch 3
Policy 6
STRUCTURES 16
Recheck 1
Schedulability 1
Schroeder. 1
Staelin, 1
Special 1
Portable 1
SYSTEMS 42
Professor, 1
X/macOS 1
OO 1
Woodlands 1
Q2 9
Spin(), 1
Synchronization 8
Pons 1
Scotland, 2
Red-Black 2
Scheduling 12
Scott 10
Stallman 1
Standard 2
Press, 7
Saving 1
Programmers 4
X11 1
OS, 31
Write 11
RISC-like 3
Spin(1); 2
Star.” 1
Poor 1
Seward. 1
Register 8
Science, 1
Secker 2
Support” 1
Stanford 1
See 43
Purify 1
Second, 31
Yuanyuan 2
October 17
Yale 1
RR? 1
Systems: 6
Stephen 4
Portland, 1
Single-Queue 1
Reuter. 2
Search 2
T1). 4
Process: 2
Starts 1
Seems 1
Quantitative 2
Security 2
[2] 2
Ousterhout, 2
Yang, 1
RUNNABLE, 1
T. 14
Steve 4
PowerPC 1
Riak. 1
Some 25
Segments 2
TLB: 2
Processing, 1
State 12
Segmentation” 1
RAIDs, 1
Segmentation: 1
[AC97]. 1
Overhead 3
Yet) 1
Recall 9
T2, 4
Support: 1
Prints 1
Sopena. 1
Server” 1
Thesis, 1
Run 68
Producer/Consumer: 3
Steinberg. 1
SIDE 40
Self-Tuning, 1
ROCESS 30
[B+18], 1
P. 12
Zhiqiang 2
Recommended 1
Surprisingly, 1
Probability” 1
Shasha. 1
Thomas 3
Specifically, 52
Proportional 2
Shared-Memory 4
Strachey. 1
TLB 173
SOSP 9
Space-time 1
ROP. 1
[B89, 2
PEED 1
[3] 1
Relocated 2
Swap-Based 1
Problem” 3
Simple, 1
Traiger. 1
Spectre. 1
Proportional-Share 3
Shared-memory 1
Strachey’s 1
TORAGE 1
SPARC, 3
Spending 1
[B97] 2
PETERSON’S 1
[B89] 2
Repair 1
Switzerland 1
Process1 9
RPACI 154
Sometimes 9
Turner, 1
Springer-Verlag, 1
Proportional-share 1
Shavit. 2
Structure 3
Tb, 1
S_IRWXU); 2
Stack11 2
[BNS69] 1
PT: 2
[BJ81]. 1
Replacements 1
Systems” 7
Protection) 1
Specific 1
RUX 33
Turns 2
Stan. 1
Pthread_cond_signal(&empty); 2
Shavit’s 4
Tc2) 2
Student: 36
Saltzer 1
Stevens 6
[C+04] 1
PageTable[1] 1
[CS94] 1
T3 8
Pthread_cond_wait(&fill, 2
Spectre 3
Ranganathan, 1
UK, 2
States 1
Put 4
TestAndSet(int 2
Solaris 18
Supervisor” 1
Scheduling” 1
Still 5
[C69] 1
Patterson. 2
[D+13] 2
TCB. 2
Pthread_mutex_unlock(&lock); 6
Spin-based 1
Ready: 1
S 379
USENIX 8
Stevens, 2
Q8 1
Times 1
Solution 5
Symbiosis” 1
Section 1
Stodolsky, 1
[CP78] 1
Peterson. 2
[E95] 1
TILIZATION 1
Published 1
Spinning 4
Recall, 1
Stack 14
UST 1
Storage” 1
ROCEDURE 1
Unfortunately, 37
Soyeon 2
Synchronization” 2
Server. 1
Summary: 2
[D68] 7
Peterson’s 6
[EF78]) 1
TIP: 9
Python. 1
SEG_MASK) 2
Record 1
Stan 1
StoreConditional(int 2
To? 1
ROPORTIONAL 13
Unknown.. 1
Specification, 1
System, 2
Shedler. 1
Sumner. 4
[D97]. 1
Placing 1
[FLR98]. 1
TLBWR, 1
Q1. 1
Relocation” 1
SJF 21
Sun 5
Structures 6
Together 1
ROVIDE 1
Unlock 2
Stanford, 1
Systems.’ 1
Singh, 1
T1, 12
[DV66], 1
Pons. 1
[H74] 1
TS 1
Remember 5
R. 33
SLEEPING, 1
Support) 1
Sun. 2
Too 3
RTFM 2
Until 3
Store-Conditional” 2
SunOS 1
Slow 1
THE 9
[Free] 1
Previously, 1
[HP06]), 1
Table? 1
Repeatedly 1
Replacement” 1
Response 3
Systems. 1
Sun’s 1
Translations 2
T2 38
VAX-11/780 1
Stretch 1
Solomon. 2
Systems 18
TLBs, 6
[G83] 1
Priority, 1
[High 1
Thanks. 1
RAID 1
STDOUT 1
Responsibility” 1
Systems, 3
Transparent 2
Rago 1
TR 1
Va5 3
Subramanian, 3
Stack? 1
TABLE 2
TM 2
[GR92]. 2
Problems: 1
[J09] 1
There? 1
RAM 5
Saavedra-Barrera 1
Right! 1
Segment 10
System” 22
Raiders” 2
Tb 2
Virtually 5
Suli 1
Statement 1
TD 2
TOOLS 1
[H91] 2
Pthread_cond_signal(&cond); 6
[K64]. 1
Third, 5
RR, 1
Trevor 1
Rings, 1
Sequin. 1
Really 3
Technique 1
WITH 1
Sun). 1
Steven 1
Support 9
Storage 10
[I09] 4
[J91]. 1
[KE+62] 2
Tickets 1
Randell. 1
U.S.S.R; 1
Round-Robin 1
Shacham. 2
Relocation) 2
Thompson. 1
Wales 1
THREAD 12
Surveys, 1
TRUCTURES 17
Swapping, 1
Pthread_mutex_init(&c->lock, 2
[K+61,L78]. 1
[L+75] 1
Trap 2
Reese, 1
T 378
UIDELINES 1
Run: 2
Share 4
Research, 2
Threading 2
Swift 2
THREE 37
TeX 1
Pthread_mutex_unlock(&c->lock); 6
[KE+62, 1
System 37
We 166
[L+93] 2
Turning 2
Relocation 1
T2. 4
Undefined 1
S, 6
South 1
Restartable 1
Tickets? 1
System/370” 1
Tell 1
Table 18
Python, 2
[L60] 1
Whew! 1
[L83], 1
T1 30
Typically, 2
Replacement 6
TENEX 3
University 6
SCHEDULER 1
Spectrum 1
Restricted 1
Time-to-Completion 2
TLB; 1
Texas, 1
Takes 2
Quarterman. 1
[LL82] 4
Wilson 2
[M06] 1
TAKE 1
U/S 1
TLBs 10
Tc1, 2
Upon 3
SEFUL 2
Steinberg 1
RetryInstruction() 4
Tix:250 1
TeX, 2
That 14
Tc1 9
Quote 1
[LR80], 1
[M15] 4
Ronald 1
UNSW-CSE-TR-0321, 1
TOCS, 3
With 82
Tel-Aviv, 1
Users 2
SEG 2
Stoica 1
Roscoe. 1
Trans. 2
TestAndSet(flag, 4
Techni-cal 1
R.P. 1
[M07]. 1
[M82], 4
SPINNING: 1
USA. 1
Ta 3
Word 1
This, 2
VAX/VMS. 1
SJCC, 1
Structures” 2
Routines 3
S.J. 1
Theodorus 2
Techniques” 2
R10k 1
[MS04]. 8
[R97] 2
STACK: 2
VA 1
Take 2
Worried 1
VAXen 1
SJF, 4
Thus 24
Student, 1
Transformers 1
SIZESORT-) 1
TlbEntry) 4
RAM. 1
[PP03] 2
There 42
[S+04] 1
STCF 8
VAX-11/750. 1
Tarrival 3
Worse, 3
VMS, 1
SPARCv9). 1
Ticket 3
Such 16
Tricky 2
SOLATION 1
Tolerance 1
SPARC 9
[R97]! 2
RANSLATIONS 15
[S04]; 1
Scheduling: 6
VPNs 5
Test-and-set, 2
Wulf. 1
VMware 1
Save 2
Tiny 1
T3, 4
Tturnaround 3
The 821
ULL 1
STCF) 2
This 201
[SA96] 1
[SHW11]. 1
README 20
Shah, 2
Va0 3
Tuning 1
XD 1
VPN. 1
Scan-resistant 1
Tix:50 1
THER 1
Typical 1
Through 1
URL: 1
Sadly, 2
Thompson 1
[W95]. 1
[SS+10] 1
ROM 2
Sharedmemory 1
Valgrind 2
Types 1
ZFS) 1
VPNs; 1
Scheduler 5
Torrellas, 1
UCB/CSD-92-684, 1
Timer 1
TO 26
USE 3
Scientists 1
Thrashing 1
a:100:100,b:100:50, 1
[Y+18]), 1
ROPORTIONALLY 1
Short 1
Virtual 12
Thread 95
Vegas, 1
Seg 1
Tp 3
ULE 2
Tomlinson. 2
Tamil, 1
U 89
Uh 2
Served 1
a[2] 2
__lock_t 8
Randomization” 1
Single-Threaded 2
[4] 1
W 17
Three 4
Time) 2
Should 4
U.C. 2
Tools 1
Tc, 1
Up 2
Servers” 1
a[9]) 2
a:30:200 1
Use 35
Reboots 1
USSEAU 154
Sleeping) 1
[AC97] 1
WITCHES 1
Visualization 1
Time-Sharing 8
Showing 1
UEUE 11
Uman 3
Texas. 2
VMM-level 1
a[1] 1
Sleep 40
User’s 4
Recovery” 1
Understanding 2
Smaller 1
[B+18]. 1
WORST)? 1
Warm-start 1
Tracing 8
Soon 2
ULLER 1
Underlying 3
Those 2
VPN=42. 1
about 294
abstraction 15
Small 2
VAX’s 1
Remove 2
Using 19
Sorry! 1
[B,C 2
Waciuma 1
We’ve 2
Transactions” 2
Spaces 3
UNIX 7
Unsafe” 2
Time-Shared 1
Van 4
above. 20
accessed? 1
Solaris, 7
accessed 42
Return-into-libc 2
Spinning: 2
V 31
[BB+72], 1
Watch 4
What’s 4
Two-Phase 2
Stoica, 1
US, 1
VM. 1
Vancouver, 5
VPN=39 1
Sound 2
accident 1
accesses 47
Review, 3
Stanley 1
To 152
VERY 1
[BH73] 2
Weihl. 1
Two-phase 2
Streams 1
Unix 1
VPN=0 1
Virtualization 5
Value 1
When 122
Study 8
accomplishes 1
accessible, 1
Robert 9
Stockholm, 2
Tracking 1
VICT 1
[C03]. 1
Whether 4
Unlike 5
Subsequent 1
Unused 2
VPN_SHIFT 1
Visually, 1
VirtualAddress 7
YSTEM 2
Summer 1
account. 1
according 3
S+03] 1
Stored? 1
Trees 1
acquire 57
[CD85] 1
Why? 5
VLDB 2
System: 1
Useful 1
Wei, 1
Vyssotsky. 2
W. 18
Yet 2
Sundararaman, 4
accounting 4
SHIFT 8
Structure” 1
VMS 16
Tresponse 1
acquire/release 2
[CV65] 2
Wikipedia 3
VPN_MASK) 7
TOPLAS, 2
V. 3
Working 2
WRONG 1
WAIT 1
Zhou, 2
Swapping 1
accuracy 1
SIGINT 2
Sure! 1
Variable 2
Tron 1
acquired, 2
[D97] 1
Wood. 1
Va1 2
Tc1). 1
VAX/VMS 11
Wrapper 2
Waiting: 2
Wait 1
[A79]) 1
Swift, 1
SIGTSTP 1
across 30
Switching 4
Version 4
USTERHOUT 1
active. 1
[G85] 1
Workstations” 1
Virtualizing 2
That’s 6
VMS. 2
Xiong, 2
Wakeup 2
Weihl, 2
[A90] 1
Tc2 7
SN_SHIFT 1
activity. 2
TEST 2
Very 2
V.A. 1
actively) 1
[GR92] 2
Y. 1
Then 17
Volume 35
YNAMIC 1
Wilkes. 1
Whichever 1
[B94]; 1
VPN 69
Techniques 2
SOMETHING 1
addr 2
TLB. 13
Virtual” 1
VM 18
actual 15
[H93] 4
Yield 2
Though 5
Voorhis. 1
YPES 2
Wisconsin 1
While, 1
[BC05] 3
Terminology 1
STCF. 1
address), 1
TLBR, 1
WWW.OSTEP.ORG 42
W.C. 1
VMMs 1
adapt 1
[J91] 1
Zorn. 1
Waiting-Line 1
Time 29
Yes 1
Workshop 2
Wikipedia. 1
[BC91]; 1
Test-And-Set 2
Saint-Exupery 1
addressed, 1
TLB_Lookup(VPN) 4
Well 1
WAPPING 1
Von 2
address); 1
[K65]. 1
[AC97]; 1
Warehouse-scale 1
Today’s 1
York, 6
YBRIDS 1
XCLUSION 1
[BH00] 1
Test-and-set 4
Scheduler” 2
adjust 1
TLBs; 1
Werthman. 1
Warburg, 1
WAITING 1
addresses, 3
[L09, 2
[B+13]. 1
Torvalds 1
Why 28
[A91]. 1
YOU 2
[BOH10] 3
Thanks 5
Schwarz, 1
admit, 1
TLB’s 1
Weaver, 2
WARY 4
advocates 1
[LM+89, 1
[B94] 1
YSTEMS 203
Trace 9
Will 6
[B+10]; 2
Yes, 9
[C63]. 1
Segmentation 3
These 24
advantage 14
Tc2). 1
What 214
Weighting 1
affinity 8
[M07] 1
[BC05,G04]. 1
Zel-dovich 1
Translation 5
Wilson, 2
[B+79], 1
[CK68]. 1
Separating 1
WWW. 166
Trace: 4
again; 3
You 89
Technique: 1
Whenever 2
Wiggins. 1
again!) 1
[M83], 1
[BC91] 1
Zonkey), 1
Trials 1
Wood-lands 1
[B72]. 1
[EF78] 1
She’s 1
Wahbe, 1
Transactions 3
Waiting 8
[AD00] 1
TestAndSet() 6
Why, 1
Wiggins’s 1
again: 2
[MS04] 2
[C93] 1
[B+00] 2
Try 11
Wouldn’t 1
[BC05, 2
[G+17] 1
Simply 3
al. 5
Trigonakis. 2
Wanted 2
[B+19]. 1
Without 15
Wikipedia? 2
Wiley, 1
[O16]. 1
[C95]. 1
[B+79] 1
ULTIPLE 2
X 3
[BS+09] 1
[JS94] 1
Thus, 206
Sizes 1
alloc 1
True) 9
Were 2
[BJ81] 1
X, 1
aims 1
Windows; 1
[O45], 1
[CK+08]. 1
[B94]. 1
URSE 1
XITS 1
[C06] 2
[M11]; 1
Times?” 2
Slutz, 1
alright 1
Turing 5
Which 12
[D01] 1
XIST, 1
Woke 1
[O72], 1
[CSG99] 1
algorithms 26
[C93]. 1
Undoubtedly 1
XXX 2
[C54,PV56] 1
[MM00] 2
Tix:100 1
Smotherman 1
also, 1
Turn 1
Within 4
[FLR98] 1
Xerox. 1
X. 1
[SHW11] 1
[CV65,DD68]) 1
annotate 2
[D65,D68] 2
User 14
Zeldovich 1
[CD85]), 1
[MS91] 2
Tom 2
So, 1
altogether, 1
UNESCO, 1
Work 1
[FP89]. 1
Years 4
Xerox 2
[SN05]. 1
[D65] 2
answer: 2
[D68]; 1
VAX 5
Zelenka. 1
[D70]. 1
[O49]. 1
Tp, 1
Splitting 1
amortize 2
USA 1
Workload 11
[H87]. 1
Zebra 1
ZOMBIE 1
[X+10] 2
[E95], 1
anymore? 1
[D72] 1
VM, 3
[AD00]; 1
[G04]. 1
[PS81]. 1
Tree 1
Sriram 2
amt) 2
UT 1
Yield, 4
[HP06]). 1
Zhang, 4
Zeldovich. 2
a; 4
[G62] 1
anyone 3
[G83]; 1
VPN; 2
[B86] 1
[K68] 1
[S07] 2
Tricks 1
Staelin. 1
analogy 1
Uncontrolled 2
Yupu 2
[K+96] 2
Zuckerberg 1
Zwaenepoel, 1
a[3] 1
[H61] 1
[HJ92] 2
Vasileios 2
approach, 25
[BH70, 1
[L78]. 2
approximate 20
True 1
Start 5
answer; 3
[B72] 1
VARIABLES 18
[K64] 1
[B+96] 2
[B+10] 3
above? 3
[H74], 1
[J16], 1
Vol. 5
[BH73], 2
[SR05] 6
[MB91] 1
approximation? 1
UNIX-based 1
Status: 1
anticipating 1
[C69]) 1
VAX/VMS), 1
[KL88]. 1
[B75]. 1
[B66] 2
access: 1
[J09], 1
[K+61] 2
WITCH 1
[BNS69]. 1
[W03] 1
[P+95] 1
architects 4
UNUSED, 1
Stick 1
approximate! 2
[CP78]) 1
VS 1
[L09] 4
[C54] 1
[B75] 1
accessible. 2
[M+63]. 2
[KR88] 2
WORST 1
[C+04]. 1
[WG00], 1
[P81] 2
arithmetic 2
Unfortunately 1
Store-Conditional 2
approximation 1
[CSG99], 1
Va2 2
[L81] 4
[C63] 1
[C69], 1
accomplished 9
[M+70] 1
[LL82]; 1
Wait: 1
[CM00] 1
[WL+93] 1
[P90] 1
arose 5
VALID 3
Store-conditional 2
architectural 2
[D70] 1
Variables 3
[LM+89] 1
[CK68] 1
[CM00]. 1
accuracy/performance 2
[M06], 1
[M+70]. 1
[CV65], 1
We’ll 38
[virtual 5
[RK68]. 1
array; 1
VAX/VMS, 2
Structures: 1
arising. 2
[D72]. 1
Summary 30
[Low 1
[D82]. 1
[D82] 1
accurate); 2
[M11] 2
[MM03] 1
[D01]; 1
Whereas 3
a1 1
[S15] 1
arrives. 2
VMWare’s 1
array, 7
Virtual-Storage 1
[E06] 1
Superpages” 1
[M62] 1
[D91]. 2
[D91] 2
action. 1
[MS96] 2
[MS96]. 1
[D68]. 2
William 3
a[9] 1
asleep 3
VPN, 2
array-based 2
WHILE 2
[G04] 1
Survey 3
[P10]); 1
[DV66,V+65]. 1
[G+95]. 1
active 13
[MS98]. 2
[O11], 1
[V 166
[D70]), 1
Worst 2
a[i] 1
XECUTION 15
Values 2
ask, 1
Weihl 1
[I11] 2
THINK 1
[RL81]. 2
[HP06]. 3
[H61, 1
actuality, 1
[NM92]) 2
[TTG95] 1
[G+95] 1
assert(p 1
abbreviated) 1
[VERSION 42
YNCHRONIZATION 1
Waldspurger 6
assert(tmp 2
[L+13] 2
While 31
[S15], 1
TLB, 21
[K+15] 1
[HP06] 2
addition 13
[SS74]. 1
[W06] 1
[G85], 1
assists 1
abilities, 1
[W02] 2
YOUR 1
associative 1
Well, 27
[L78] 3
Winter 1
[W95] 1
TLBP, 1
[L11]. 1
[L11] 1
addresses. 4
[W17] 2
[W15] 1
[H91]. 2
assume, 2
above), 3
[stack 1
Yes. 1
atomic. 2
X-windows 1
[M11], 1
Wow, 2
] 2
TLBWI, 1
[O49] 1
[LL82], 1
[W95]: 1
[Y+18] 1
adds 24
[H93], 3
atomically; 2
abused. 2
__counter_t 6
Your 1
atomically, 2
Yandong 3
[MM03]. 1
Write-back 1
__list_t 2
TLB_Insert(VPN, 3
[PS81] 1
[QI15]. 1
[anon 1
__hash_t 2
access 133
[I09]. 2
attained 1
You’re 2
attacker, 1
Yes? 1
[N+02] 1
Y 3
a[4] 1
TLBs) 1
[R69]; 1
[R+89] 1
__Node_t 2
adios, 1
__node_t 10
accesses)? 1
[K+61,L78], 1
avoided. 2
Zero” 1
attacks 5
You’ll 3
[N+07]; 1
[1] 2
a[i]; 1
TR-95-22, 1
TRUCTURE 3
[W+95]. 2
a4 1
advice 4
about, 2
accesses?) 1
[LL82]. 3
balanced 6
[B+19] 1
attempt, 2
Zeedonk 1
[RK68] 1
[A79] 1
[S09] 2
Tcompletion 2
[W09]. 2
above 50
about: 1
affairs 1
acceptance 2
[LM+89]; 1
added 12
bash, 1
[C06]. 2
attr 2
[AD03] 1
[TTG95]. 1
[B+13] 1
[SB92], 1
[V+65] 1
[WG00] 3
abstractions 7
accesses; 1
affects 2
achieve 12
achieved, 1
address, 7
batches 1
[CG68, 1
average 16
[BB+72] 1
[W06]. 1
[BH70] 2
Technische 2
[W+95], 1
__queue_t 2
access; 1
accessed, 12
accidentally 12
again, 31
acquisition, 2
address-based 1
beauty 2
[D70], 1
avoided? 1
[BH00]. 2
[W15]. 1
[BOH10]). 1
Think 12
a3 1
a[1], 1
[MS04], 2
accounting, 1
accommodate 4
accordingly. 3
activities 3
address-translation 4
[FP89] 1
background; 1
[BS+09, 1
[WW94] 1
[C95] 1
Time” 1
been 100
abilities 1
[N+07] 1
accrued 1
allotment, 1
able 59
although 15
ad 3
advance 1
[H87] 1
backward, 1
[CG68] 1
a2 1
[CK+08] 1
Timothy 1
behave? 4
about; 3
[P+95]). 1
above) 6
account 6
about) 1
amazingly 3
add, 3
advanced, 2
[K68]. 1
[G+17]. 1
accomplish 9
[CS94]. 1
base 66
Traffic” 1
behaves, 1
accumulates 1
[Page 2
accesses, 4
acquires 8
above). 7
an- 1
addl 2
advantageous 1
[KL88] 1
[JM98] 1
achieves; 1
[D+13]. 2
basic) 1
Transitions 1
behavior: 1
become 32
[QI15] 1
addr:10 1
actions, 1
accumulate 1
another; 1
answer, 8
advent 1
[L83] 2
[M65] 1
[E95]. 1
acquiring 22
Tudor 2
achieved. 3
beginning: 1
[S+11] 2
behind 31
activity 3
address. 21
addr:0 4
anti-gaming 1
affected 1
[M28] 1
[M83] 1
[H74]. 2
affords. 1
UILD 3
acquisition. 4
[S59, 1
behave 12
benefits: 1
address(es). 1
address> 1
address? 1
appealing; 1
[M82] 2
[MS91]. 2
after 54
[J16] 1
ago, 5
ULTI 11
active; 2
[SB92] 1
benchmark 3
address). 1
administrators 2
addresses). 1
address 561
appears 1
[MB91]. 1
between 79
[NS07] 1
age), 2
[KE+62]. 1
ahead 8
ULTIPROCESSOR 12
[W+95] 4
benefit. 1
adding 35
addresses? 1
alike. 1
advances 1
advanced 7
approach. 8
[N+02], 1
bit; 1
[O45] 1
algorithm; 2
[L+75]. 1
akin 2
Unfairness 1
[W09] 2
bet 2
addr:20 2
alas, 3
all; 4
affinity; 1
affinity, 1
approaching 1
[P81]. 2
blocks, 1
[O72] 1
alike, 1
[L+93]. 2
algorithm, 8
University, 2
[X+10], 2
bit, 10
address! 1
alive, 1
allocation. 7
algorithm. 2
allocators 9
appropriately 3
[RL81] 1
book? 1
[O90] 1
all) 1
[LR80]; 1
algorithmic 1
VAX-11 4
a:30:200. 1
bits) 1
admission 1
allocation). 2
algorithms, 3
argc/argv 1
all, 17
allocation 24
amount 37
bounds? 1
[S05] 2
allocation, 2
[M+63] 2
all... 1
VLSI 1
a[1]. 1
block 22
advertise 1
allocator, 5
arrives 4
[S+04]), 1
all-too-trusting 1
allowed. 1
an-THREE 1
break), 1
[S07]. 1
allocators. 3
[M04] 2
allocate(100), 1
a 3927
VPN: 1
a[3], 1
advisors, 1
allowed), 1
book 47
assembly, 3
[S+11]). 2
altering 1
analysis 5
allocate 31
brutal 1
[W03]. 1
[MS98] 2
allocate. 1
allows 37
a+b,b+c,c+d,c+e,c-. 1
Waldspurger. 2
a[6]) 2
affecting 1
born: 1
allowing 22
assigned. 1
[S04] 1
applications? 1
analyze 3
allocate(10). 1
[WL+93]. 1
[O11] 1
alternates 1
a:100:100,b:100:50,c:100:50) 1
buffer 43
Waldspurger’s 1
already 28
above; 7
against 9
borrow 2
always, 5
assistance. 1
[V+65,BH70]. 1
apply 1
anyhow. 2
allocated, 2
a[7] 2
[P10] 1
alternatives! 1
a[8] 1
bug, 1
Wanjohi. 1
alternatives 4
abstraction. 1
ago 1
both. 4
amortized. 1
attempts: 2
[VPN 11
alternately 1
about), 1
[PV56] 1
approaches 31
application 29
amazing, 2
about-to-be-run 4
bugs) 1
We’re 1
amazingly!), 1
accesses. 5
agreed-upon 1
bottleneck 1
amt; 2
available; 1
[W02]. 1
animals 1
abuse 1
[R69] 1
arcane, 1
approaches. 2
analysis” 1
accesses). 1
building, 1
When, 1
accessibility 1
among 14
ain’t 2
another, 12
avoided 2
[WW94], 1
bounds 48
anon) 1
accept 2
[RT74] 1
architectures 2
architectures. 1
actions 18
bus 3
Who 4
accidental 1
amount. 2
anyhow). 1
badly 1
algorithm 34
a:100:100,b:100:50,c:100:50). 1
breathe 2
answered, 1
access. 8
[S+03] 1
are. 4
are, 4
activate 1
bx 2
Wow! 1
accumulated 1
ancient 2
applicable 2
battle 1
all. 9
a[6] 1
brk, 1
applications. 12
accessed), 1
[S+68]), 1
arg, 2
arg: 1
actively 4
bx=3 2
[AD03]. 1
accurate 2
and? 1
approach? 3
behaves. 5
allocated. 5
absolute 6
broaden 2
approach). 4
[S05]) 2
accessing 36
argue 1
arguments 23
arise2 1
c->global; 2
[B+18] 1
accused 1
anticipate 1
approximates 1
behavior, 3
amazing 9
accesses), 1
broadly. 1
approaches? 1
[S59] 2
accom-plish 1
argued, 1
adapted. 1
arose, 1
c->local[i] 2
[B+72] 2
accustomed 1
anyhow, 2
argc 1
behaviors) 1
args 8
accommodated. 1
brought 10
arbitrarily 2
[S68] 1
address: 8
arguments. 4
argv[1]; 1
arrive] 2
arise 12
[C+62] 2
achieves 7
anything 17
amounts 7
believe 5
argument: 2
accordingly 1
built; 2
aren’t 5
[SA96]. 1
arg; 7
address; 3
c;, 1
aside 4
arose: 1
[C03] 1
act 3
application. 4
anti-hero 1
bigger, 2
array. 4
actions. 1
[SN05]; 1
args->a, 4
addresses): 1
call. 17
asleep, 1
arranged 1
address>, 1
active, 2
approaches, 1
any? 1
billions 1
array’s 1
actively-used 1
[SS74] 1
arises. 2
actually 38
assumptions 14
but 288
[CS97] 2
arrangement 1
administer 1
calling 55
activity; 1
architectures, 1
anymore, 1
bits: 1
blocks. 2
a1). 1
administrator 2
around, 4
additions 1
astute 2
bx=0,bx=1 2
[DD68] 1
array), 1
affected. 1
can’t) 1
addition, 4
are: 2
anytime 1
arrived 6
book! 1
a:100:100,b:100:100,c:100:100) 1
adopted 1
art. 1
address) 2
attention 10
[DV66] 3
arrive; 1
aforementioned 2
capacity, 1
addr:21 1
arguments, 5
appearing 1
asking 4
books. 1
a[0] 2
affordable; 1
assign 3
address-space 5
authors 8
[E06]; 1
article 3
card 1
advice, 1
arise. 3
aspiring 1
both? 2
again 58
applications 29
about. 6
afterwards. 1
by 705
addressed 2
auto-matically 1
avoids 5
case. 3
affinity. 4
arrays 5
assertion), 1
bottom). 2
aggressive 3
approach) 1
above, 39
assignment, 3
ago: 1
byte). 1
admit 1
[JM98]. 1
award-winning 1
causing 3
age; 1
arriving 2
association 1
bounce 1
allotment 2
approached 1
abundant, 1
assumptions? 1
ahead. 1
c->threshold 2
adversely 1
[JS94], 1
balance 15
challenging. 1
alas). 1
aside, 2
assumption: 1
bowels 1
almost 13
alone! 1
abusing 1
alas 1
c->value 4
again? 2
[K65] 1
be? 9
chan 1
algorithms. 5
asks 4
brag 4
atomic 25
alternate 5
accessed. 4
albeit 2
cache). 1
agent 1
[LR80] 1
begins. 1
changed 18
all? 8
assert 3
buffers? 1
atomically. 2
alternatives. 2
achieved 1
algorithm: 2
caching. 1
ahead, 3
[M28]? 1
beguiling 1
allocate(int 1
chapters 14
build, 2
assumed 12
attacks2 1
amazed. 1
and 2770
achievement 1
appropriate 3
algorithms). 1
calculation, 1
alas. 4
[M65]. 2
as 1029
allocates 11
charge 7
business 1
assumptions, 6
attempting 1
amplifying 1
better 88
answers 3
acquisition 6
area. 1
arena 1
allocator 26
all!), 3
[NM92] 2
asked, 1
allowed 8
children! 1
bx=1000,bx=1000 2
atoi(argv[1]); 1
analyses 1
available, 11
beware 1
at 576
anywhere 6
call? 4
along 10
allegorical 1
arises 21
[O16] 1
asleep... 1
add 82
alter 2
choosing 2
bye, 1
attack: 1
away; 1
beyond), 1
answer 29
attributes. 2
ap-proaches 1
calls, 3
applications, 6
allocator. 2
arrives; 1
[O90]. 1
assert(fd 1
amazingly, 1
additional 15
chop 5
bytes), 3
attackers 2
awesome, 3
bit). 3
anything. 1
automatically, 2
altered 1
can) 1
approach), 2
allocators; 1
art 1
[S07], 1
assumptions. 2
analyzed 2
addresses; 4
chunks. 3
c->value++; 4
attempts 4
b; 4
black) 1
apparently 1
auxw 1
alternately, 2
canceled, 1
approximating 1
articles 2
architecture 18
[SN05] 1
atop 1
advantage. 1
clean). 1
attention, 3
back, 4
bodies 2
approaches: 1
awoken 3
candidates; 1
allow 22
asking: 3
always 53
any 171
[SR05], 3
argument 22
attains 1
affect 10
call 230
clears 5
authors.. 4
beautiful, 1
book; 1
appropriate) 1
axis 4
care 10
alone 6
assembly). 1
amortization 1
apologize. 1
a:0,b:1,c:1 1
arise? 3
attention. 1
again) 3
care! 2
co-advisors 1
average). 1
both) 1
became 21
arbitrary 13
bad. 7
also 213
assume) 1
append 2
a[5] 1
assuming 25
attentive 1
age-old 1
another 105
code? 9
away 12
bounds; 2
began 4
architectures: 2
case? 5
bandwidth 3
case 62
always. 1
appetite, 1
arises, 4
ability 11
assured 1
attribute 2
al-though 1
answer! 1
codes, 2
awesome! 1
broadcasts 1
begin\n", 2
arguments: 3
barons 1
cases, 27
caught 8
am! 1
applicable; 1
arranges 1
access, 9
attacks, 3
authors. 1
al.’s 2
answers. 2
commonplace, 3
backwards 1
brutal, 1
beginning, 1
argv 3
base/bounds 5
cast 4
chagrin 1
amount; 3
approach: 5
array[1000]; 1
accessible 3
attr, 4
attributes 4
automatic 2
anything? 3
compares 1
base/bound 1
bucks. 1
begun, 1
behavioral 1
benefit 1
better-than-expected 1
big; 1
bind 1
catches 1
challenging 6
arrive: 1
achieving 7
aspects 10
avoided; 2
arbitrarily, 1
completes. 4
buffer, 11
arise, 4
basic 94
bit. 5
chapter), 1
all 247
certainly 32
acquired 15
assert(count 2
awake. 1
architecture. 4
completion 4
bus, 1
arrange 4
batch 7
bitmap 2
an 545
basics 13
characteristics 2
character. 1
action 15
assigning 1
allocated 46
architectures; 2
complexity, 1
bus-based 1
bad 31
arrangement, 1
before? 2
black 3
and, 5
be. 11
check. 4
choice 8
added, 1
assumption 10
allocations 8
argument. 2
conceptualized 1
butter 1
base, 1
array.c 2
begins: 1
born, 1
anomalous 1
checking 6
begin 32
citation 1
additionally 1
are 870
avenue 1
atomic_decrement 2
also: 1
arguments; 1
concerns? 2
bytes? 1
array[i] 1
behalf 2
another. 6
choices. 1
begin\n"); 5
class), 2
both 87
arg. 2
balance. 1
addresses 42
atomicity 8
alternating 2
arises: 1
concurrency? 1
c->value; 4
aside: 1
below) 3
aspect 15
chosen, 1
classmates; 1
briefly 7
array) 3
being 54
balanced: 1
adoption 1
author 2
always!). 3
arrival 1
condition3 1
c3 10
answer? 3
beneficial 1
assembly 13
chucking 2
client, 2
broadly 1
asked 2
below, 2
basically 6
advantages 5
avalanche 1
amt>0) 2
assumes 14
conditions 9
call: 2
answers, 2
be 785
better, 14
associated 18
chunks 13
closing, 2
broken, 2
assertion 2
better? 1
basing 1
again. 24
analogous 1
assumption. 2
constant 1
avoid 50
calls). 1
application; 1
below. 13
aware 2
cleaned 1
clustered 1
big 44
buffers 6
assume: 1
biggest 4
batch-like 1
algorithm). 1
anonymous 4
atomic_increment 2
constructed, 1
base-and-bounds 4
applied 5
came 12
best-case 1
awful! 1
clearly 17
bugs, 2
attack 9
billions) 1
because, 1
all), 1
bits 70
answer) 1
attain 3
consume 5
bash), 1
appreciation 1
case: 4
bits), 2
clock 11
byte) 2
background 15
attempted 2
becoming 2
alloc()/free() 1
binary 14
blocked. 2
answered 1
attainable, 1
consumer. 2
basics. 1
approximately 1
cases). 1
code 391
bitwise 1
close(fd); 1
c:100:50 1
base-and-bound 3
avoidance. 2
begin” 6
books). 1
allocating 19
book). 5
anymore. 1
author. 1
containing 4
be, 2
architecture, 4
cast; 1
columns: 2
block, 2
cloud), 1
cache) 1
basics; 1
avoided, 1
behaving 1
bookshelves 2
born! 1
am 16
appear 4
authors’ 1
contents, 1
argument, 11
cen-tral 1
command, 4
clustering, 1
book, 18
behalf. 1
boost 8
bad! 1
before 130
below; 1
boost. 1
both), 1
answering 1
are! 3
arguments) 1
contrast, 10
available 31
companies, 1
cmpl 1
certain 26
caching 9
boots 2
badly, 1
behavior 35
before!” 1
better. 7
bottom 10
bounds). 1
answers; 2
area 5
arise; 1
control-c) 1
avoid. 3
compare-and-swap, 2
co-authors). 1
chains 1
call1 1
bounds, 5
calls. 5
begin. 3
bit), 1
bouncing 1
breed 1
anything, 5
argc, 23
converted 1
avoiding 16
array 46
because 93
ask 12
co-exist 1
challenges 2
below). 3
brand 2
camp, 1
behaviors 2
black). 1
box, 1
bring 4
appeared, 1
cooking 1
awesome 2
compared 7
before), 2
comparison 7
assembly? 2
co-workers 1
chanced 1
benefits 5
builder 1
candidate 3
belt, 1
break 5
blocked 16
browser. 1
applies 1
cores. 1
around 42
begins 13
assert(rc 5
code/stack/heap? 1
back 65
compiler 26
big. 3
but, 1
carts 1
better.” 1
brings 1
change 55
boot 11
bumping 1
appreciate 1
corre-sponding 1
array.c) 1
below? 1
atomically 16
codes. 2
back-and-forth 1
completes? 1
bigger 19
cases. 3
binary. 1
buffer; 6
bytes 41
changed, 3
borrowed 1
chapter? 9
costly, 6
array: 1
biased 2
attacker 4
coherence 3
barest 1
computational-overhead 1
bit! 1
approach 138
bits1 1
challenge: 9
bytes. 3
c4 6
bytes; 2
bother 1
caches 16
costs. 1
bit) 1
attaining 1
arrive 21
collection 3
basi-cally 1
computer, 3
bits. 2
appropriately-named 1
boost, 1
child/parent 1
c2 10
bytesLeft 3
chapters, 9
bounds) 1
call-ing 1
count++; 1
blank 1
asides 1
attempt 14
com- 1
be: 2
computers) 2
blocked, 3
approximations 2
boots, 1
chops 1
c6, 1
clarity. 1
cache. 9
breath. 1
call; 2
counter: 1
blocked); 2
ask: 2
available. 14
come–great 1
beautiful 9
concepts, 1
bolts, 1
archive, 1
break. 1
clean-page 2
caches. 1
caches; 1
class 12
browser 1
care, 2
coupling) 2
blocks: 1
associative. 1
award 4
commands: 1
before. 7
concerns 3
book), 2
arg); 8
breaking 1
clever, 1
call) 1
calamity. 1
cleans 2
built-in 1
careful), 1
course) 1
bold). 1
atomically: 2
away.” 1
commercial 3
beginning 15
boolean 2
args->b); 4
broadcast 1
client. 1
concurrency 36
calculated 1
cleverness, 1
byte 15
carefully 17
crazy! 1
bookstore 1
attachment 1
axes. 2
commonly-used 2
called 111
begs 2
boosted 3
argument; 2
btrees. 1
client’s 2
condition); 1
close 11
c->local[cpu]; 2
case; 3
credentials, 1
bound 4
attacks. 3
back-to-back 1
completes 6
carved 1
behaviors. 2
break; 5
arrays, 2
beyond 20
closest 1
confections 1
code; 3
c->threshold) 2
certainly, 1
cross 1
bounded-buffer 1
auto-magically 1
back. 2
complexity. 2
case) 1
broadcast(), 1
buffer[MAX]; 1
arrive), 1
big? 1
coarse 1
confining 1
collect 1
construction 7
change! 2
curious 3
breaks 2
automatically 6
backing 1
concept 9
caused 2
browser, 1
builds 1
ask? 2
big” 1
cocoon, 1
c1 10
combat 2
consults 1
changes. 1
cycles). 2
brief 4
average. 1
backward 1
concurrent) 2
centralized 1
bytes, 10
asks, 1
binary, 1
cold-start 2
c5, 1
combinations 3
consume! 1
build 118
can 699
built 19
awake 1
chapter 37
base); 1
confusing 2
chances 4
assigned 7
bits? 1
combine 7
combining 7
consumers, 2
cannot? 1
broad 4
bunch 6
ax 4
cheapskate. 1
based 17
consider-ably 1
cache 86
changes, 1
c 177
blame 3
coming 7
communication 2
data 252
contiguous; 1
careful 16
buddy 11
assume 80
burst 3
ax=0,ax=1 2
chips 3
battles 2
consisted 1
before, 7
c4, 1
boring 1
chapter. 25
command. 2
compare? 1
datacenters, 1
control: 1
carefully; 1
buffer. 6
atomics. 2
buy 6
ax=1,ax=0 2
choice, 2
cake 4
constructed. 1
begin... 1
cache? 2
born 4
characterize 1
commands; 1
competing 6
date, 2
conundrum 1
challenges, 1
buffering 1
attempts, 3
bytes) 3
balances 1
chosen). 1
causes 5
behaved 1
caches, 5
bottom, 2
consumer 26
cheat 2
compaction 3
compiler; 2
daunting 1
chance 4
bx=1 2
copy 18
automate. 1
c->value--; 4
base. 1
cache, 11
centers 1
behavior? 2
call). 5
bounded 8
contain 6
children, 3
compete 1
completion, 2
compiled 6
chapter; 1
byte(s) 1
correct) 1
baby 2
chunk. 4
bed. 2
caches) 1
cesses. 1
better) 1
called. 4
boxes 2
contention; 2
caller 14
day, 2
complex. 2
completed 5
child. 2
c5 5
baby!” 2
correctness 9
chunks; 1
begins! 2
call); 1
change. 6
beyond. 1
bragging 2
choice: 1
contents. 2
decision, 4
cannot 21
components 1
completes1 1
chip’s 1
cached 3
background. 2
costs? 1
clear 12
behave. 2
campaign 1
changes; 3
bidding. 1
break, 1
chunk, 3
context-switches 1
deep, 1
carefully, 6
comprised 3
compulsory 5
chocolate 2
backwards, 1
call, 19
counter; 2
clock; 1
behind-thescenes 1
can. 3
cheaper, 1
brilliant!” 1
circular 1
continuing. 2
defense 3
caused. 1
computations 1
bit 93
chooses. 2
compute 12
base/bounds) 2
canonical 3
cover, 2
cloud 2
capability. 1
below 11
broken 1
cite 2
copy! 1
demands. 1
caution 1
child 59
bits”. 1
computing 16
chose 1
computer. 1
bases 2
carefully! 2
create()6 1
careful. 1
best; 1
bugs 6
class? 2
cores 1
demonstrated 2
code, 73
chain 2
chip 1
bizarre 3
concept: 2
class, 3
con- 1
becomes 18
creature 1
case); 2
bet. 2
busy. 1
clear. 2
correct: 1
describing 4
cofounded 1
case, 105
challenge 5
chooses 3
chapter, 16
concluding 1
concerned, 2
classic 26
behaves 11
credit 3
categories: 1
binaries, 1
c2, 1
clearing 2
costly. 3
collector 2
cat 3
comes 14
bombs, 1
classically 1
chapters) 1
concurrency; 2
conclude 2
clear; 1
behavior. 4
cell 1
bits). 4
calculates 1
client/server 1
costs 8
design 22
century. 1
commandline 1
born. 1
critical 140
coalescing, 4
cheating 1
concurrently-running 1
concurrently), 2
close, 1
behaviors; 1
centers, 1
block. 3
calculations? 2
clues) 1
desire. 1
challenging, 1
counter, 15
compact 3
boundary; 1
currency 4
coarse-grained 2
child? 2
concurrently. 1
configure; 1
cluster 2
benefits. 1
chance. 2
blocking 2
call), 1
co-authors 5
desktop 4
changes? 2
counts 4
company 1
break: 1
compare 6
code) 3
chopped 5
condition3, 1
connects 2
coalesces 2
child, 8
best 31
called, 10
book. 23
code: 7
destroy 1
chapter! 1
coverage 2
datacenter 1
brilliant. 1
compare-and-exchange 2
colleagues 3
chunks). 1
condition? 1
constants 2
coined 2
chip, 2
best-fit 7
caller. 2
both, 1
common, 1
details); 2
chapters. 6
crime, 1
days... 1
brk 1
comparison, 3
come 9
clean 9
conference. 1
consulted, 1
cold 3
chosen 5
bible 2
caller’s 1
bottleneck. 2
communicate 2
detector 1
characteristics, 1
critically, 1
days: 2
broader 1
competitive. 1
command-line 2
clear, 5
configured 1
consumers. 1
comfortably 3
chunk). 1
big!”, 1
bounds. 5
community 3
can’t 30
devices). 1
checking, 1
crux: 5
de-queue 1
broken. 3
compiler, 2
commonalities 1
complete. 6
confined 1
consumes 2
commands 2
circumvent 1
big, 3
bug; 2
compact. 1
catastrophic, 1
diagnose 1
chopping 1
deallocation, 1
curr 6
brutally 1
close(), 1
complete; 5
complex-instruction 1
confuses 1
contention, 2
common) 1
clustering 3
bits, 7
c->local[cpu] 4
company’s 1
differentiate 2
cause 24
chunks, 4
decrees 1
cycles) 1
buffer), 1
cloud-based 1
complex, 4
combination 11
consists 8
control, 4
compiling 1
cmp 1
blocks 9
c6 6
comparison: 1
differently. 3
caused, 1
clarify. 1
define 9
datacenters. 2
buffer[use_ptr]; 1
computers), 2
components. 1
community. 1
continues. 6
convenience 2
controlled 8
coarse-grained, 1
body 2
cabinets 1
compile-time 1
difficult 10
complete, 7
clean), 1
deleted); 1
date. 1
buggy! 2
computing. 1
concurrency, 10
company, 2
complete) 1
convoys, 1
cooperatively 1
code), 4
calculation: 1
books 21
center 2
discuss, 1
completion; 5
closer 2
deliver 8
debugging 1
concern, 3
bugs. 11
concurrently? 2
complain 2
completed), 2
correctly? 3
combina-tion 1
cool 17
calls: 3
botte 1
challenge. 4
disk-access 1
complicated 13
coalescing 6
dense, 1
decision. 2
concise 7
bx=100). 2
cond_t 5
complete: 1
completing 1
corruptions. 1
combines 1
copy-on-write 5
casting 1
bounds”); 1
chapters). 2
disk? 2
complications 1
code.” 2
descriptor, 2
decrease 2
concurrently, 1
c->global 4
complicated. 4
comprise 3
counterbalance 1
compacted 1
correct; 1
central 7
branch 3
condition 81
disks, 1
checks 25
comprises 1
coherence, 2
designs. 1
decreased, 1
cache; 2
cond 17
component 5
compromised 1
created. 3
comparing 5
corresponding 10
bucket 2
changes 20
configurations, 1
dismantling 1
choose 5
concatenate 2
communicates 1
destroy() 2
defeats 1
calculation 1
conditional 1
computation 2
computers 7
critical; 2
complementary 1
counter1, 1
buffer); 1
channel 1
confused 1
documentation 3
chores.” 1
concurrency: 2
complete? 3
develop, 2
degree 3
call3 1
constraints, 1
conceptually 2
computing, 4
critique 2
complete). 1
buffer[fill_ptr] 1
check; 1
confusing; 1
dominant 4
cleaning 1
condition. 8
completed; 1
consider 26
device; 1
demands 2
caller, 4
consumers), 1
concern; 1
conception 2
curious, 1
components: 3
bug 4
checkbook 1
dread: 1
clear: 6
conditionals. 2
course, 73
completely: 1
conspired 1
depicts 1
difference 18
calloc() 1
context-switch 4
concrete 1
concurrency). 1
currency; 1
compromised. 1
buggy 1
children 1
drive 5
clever 5
conditions; 2
covering 7
completes, 9
const 3
desire 7
differentiation 1
contexts, 1
configure 5
computers. 1
currently-running 9
build. 2
choice. 1
ease-of-use 1
close(STDOUT_FILENO); 1
calls 88
confines 1
concurrent 80
crash, 1
completion. 2
creating 9
desired, 1
difficulties 2
controls 5
conflict 2
concludes 1
data, 18
eat 6
building 41
coalescing) 1
chunk 44
consider. 2
concurrently; 1
considering 6
consumer; 1
complex 22
curr->stride; 1
destination: 1
digest; 1
convenience). 1
confusion. 1
direct 14
deal 16
eax, 3
built. 1
columns 1
citation. 2
cases 29
condition, 7
constitutes 1
continuous 1
comprehensive 2
current: 1
detailed 8
converts 2
conclusions 1
consideration 2
discussion). 1
declaration 5
ebx; 1
burden. 1
combined 1
community, 1
cause. 1
confuse 1
construct 5
cope 1
computing2 1
days, 6
detects 1
cost; 4
concurrency), 1
consistency 3
defaults. 2
edition. 1
buying 2
cited 2
complete?) 2
disk 54
challenge, 1
connected 4
copy, 1
concern 5
decimal. 1
concurrently 9
couldn’t 2
context 70
condition) 1
context-switching 2
defend 2
effective) 2
bx=2,bx=2 2
claims 2
complicate 1
disrupt 1
changing 9
connections 1
copying. 1
device, 1
decisions, 2
conditions. 5
counter); 6
contiguously 2
connection 1
conventions, 1
defense, 1
efficacy 2
bytes). 3
closes 3
complicated, 1
distinguish 2
client 5
consist 2
core. 2
diagram). 1
defined. 1
configuration 2
continue 10
corn 1
considered 10
defer 2
create 49
c; 3
element 14
computation. 2
dives 1
closing 2
code. 44
constructing 3
corollary 2
differ, 2
definitely 4
confusing, 2
converse 2
corner-case 4
constituent 1
deletes 1
cache: 1
created, 14
emphasis 1
computed 1
documents/R4400 1
coalesce 2
collaboration 1
consuming 3
differences. 2
correctly 19
delaying 2
correctness, 4
convince 1
context; 1
common 61
calculate 5
correct 42
creativity 1
concerned 5
code); 2
enables 23
context. 2
differently 1
constant. 1
deletion) 1
cost. 1
cooked 1
demand-zero 1
compete, 1
contiguous 13
caller; 2
correctly; 1
currency) 6
concurrently) 1
cold- 1
ends 4
continue. 7
direction; 1
constraints 2
deploy 1
does 256
costing 1
core, 5
demonstrate 5
competitive 1
continue; 2
can, 4
couldn’t. 2
daemon 8
condition: 1
colleagues’ 1
enterprising 2
could 137
directly, 5
consult 2
deployment, 1
doing: 1
correctly-working 1
dereference. 2
correctly. 8
control? 3
capacity 2
count) 3
dangling 1
configurable 1
collected 1
contributed 1
entirely. 4
count. 2
dirty 11
consumer, 6
design-ers, 1
domains 1
compile 11
derivatives 1
correctness: 2
control” 2
cost, 5
counting; 2
dealing 2
cons. 1
collectively 2
contributions 1
counterpart 1
disappears 2
counting 7
contexts 2
designer, 1
double 3
compiled, 1
descheduled, 1
careful, 3
cooperative? 1
countermeasures 1
covers 4
decade. 2
consulted 1
color 1
convention 2
entries 22
disassemble 2
crazy. 2
continues 7
designs 1
earlier). 1
descriptor). 1
creates 34
complete 23
copyon-write 1
crashes, 3
crazy) 1
decimal), 1
contention 4
columns. 1
copies 12
disassembler. 2
error 17
continuously, 1
desktops 1
easy-to-read 1
cares 2
design, 1
critical, 2
completed, 2
correct. 2
cream.” 1
crux 3
declared 1
context, 2
correct-ness; 1
command 12
discussing 4
etc. 5
control-z 1
dest_buffer[100]; 1
ebx, 1
cases? 2
desk? 2
customized 1
compulsory, 1
correcting 1
curse 3
create() 11
default? 1
continue, 1
correctly, 3
commentary 1
disposal.” 1
correctly! 2
details). 4
ecx; 1
casts 1
control 79
cyclic 2
datacenter, 1
concurrency. 7
customer 2
defaults, 2
creation 20
cost: 4
commonlyused 1
do) 1
costs, 1
counter 116
effect. 1
despairing 1
chaos 2
control-c 1
determine 34
exactly 39
developing 7
concurrentlyrunning 1
dark 3
degenerate 1
cruces 1
could, 1
companies 6
doing; 1
craft 2
couple 10
eight-page 1
chapter). 3
cooperative 5
details 46
deadlock 5
exam? 1
did, 1
examines 3
deallocated 4
delivered 2
daemon1 1
compare-and-swap 10
counters 14
don’t, 2
crazier 1
course). 1
emails 1
correct? 3
determining 4
char 35
debug 1
confront 1
deciding 5
deallocations 2
deployed. 1
darn 1
compiled(!) 1
example. 31
counting, 2
doubt. 1
create(); 1
coverage, 2
empty, 3
counter++; 1
developed. 1
differentiates 1
constants, 1
decodes 1
check 46
decided 6
depressing 1
data; 1
completion), 1
examples; 2
counting-based 1
downsides, 1
create, 2
covered 2
enabled 4
cpu 4
developer 2
direction, 4
construction. 1
disabling 5
child: 1
decrement(counter_t 4
depths, 1
complicated: 2
database 13
exception; 2
creators 1
draw. 1
creation; 1
counter1 1
enact 1
developments 1
created 22
dedicated 2
disaster. 1
contending 14
chosen. 1
dedication. 1
describes 6
computation, 2
deal? 2
crucial 2
drawn 1
creator 1
exclusion 21
ence 1
course 20
did), 2
curious. 1
definitive 1
disk-like 1
continued 1
circuitry 2
demanded 2
description 9
debate 2
crude 2
dreams 1
curr); 1
computer 59
executing. 1
engineering 2
crash 2
died 1
current->next; 1
degenerates 2
do: 2
convenience, 1
currently 27
demoted 1
design: 1
debug. 1
ctxt 1
driver 1
current->tickets; 1
concepts 7
execvp(). 1
enough), 2
create(), 2
dirty-page 2
deleted 1
doing, 3
citations 1
convenient 1
currently-pointed 1
depicted 2
designate 1
debugger 6
culprit 1
dummy 4
cycle 4
concrete, 1
execvp(myargs[0], 2
ensuring 14
creation, 6
discusses 1
demand. 1
downward). 1
classic, 1
converge 1
dangerous 5
depressing. 1
designers 9
decreasing 1
dx 2
deeper 5
concurrent, 2
default 7
entry) 1
exit 13
criteria. 2
disk; 4
demanding 3
drives 2
clean; 2
cool, 1
data. 9
descriptors 5
destroy()) 2
deadlock) 2
ease. 1
current 37
cond; 2
defense; 1
equals 3
experimentation. 1
curr->next; 4
display 2
demise 1
dynamically-allocated 1
clustering. 1
coolest 2
databases 5
designers. 2
destruction 2
decisions? 1
easy-to-use 2
customer! 1
considerably 1
depth 2
errors. 1
explained 2
currently-executing 2
dependence, 1
each, 1
codes 2
copy-on-write, 1
column 5
destination 2
detail10 1
declare 4
easy: 2
done 72
cycles 11
constantly 3
express 1
especially 13
cycles. 4
dependent 1
described 36
earlier) 1
debugging, 1
copy. 1
commands, 1
destructive 1
commonly 13
eax. 5
double-check 1
data) 2
details. 34
consumers 9
extreme 4
danger 2
desired). 1
device), 1
every 52
decay-usage 2
copying 4
deletion, 1
details, 4
commonplace 1
edx; 1
down-wards 1
early 68
data[100] 1
consumption 1
deterministic 8
data). 1
desk 1
fact, 28
diagram 10
evict 9
decide: 1
core 8
deterministic. 2
delve 5
communicating 3
effect” 1
downward 1
easy; 1
debug, 2
deterministically. 1
contains 32
days 4
details! 1
fail. 2
difference: 4
example? 2
decides). 1
correctness. 3
developer, 1
depend 3
company). 1
compilers 1
completely 6
edi; 1
declares 2
developer. 2
contention. 2
deallocates 1
details1 1
failing 3
different. 2
examples, 3
deep... 1
devices? 1
depends.” 1
elapsed. 1
drive, 2
completion); 1
cost 49
complexity 10
dedicate 1
developments. 1
control. 1
decides 11
detecting 1
families 1
exception, 3
directory 18
defaults 3
die 1
description, 1
encountered 1
duration 2
effect 4
costly; 2
computation; 2
deeper. 1
deviously 1
counters, 6
decisions 7
developers. 2
fast, 6
excess 1
dirty) 2
definite 1
directed. 1
descriptors. 1
end), 1
eax=51), 2
effective, 2
computers, 1
deeply 1
count 25
digested; 1
course. 4
deeply. 2
difference, 4
fault. 7
exercises 4
discipline1 1
demand? 1
directions. 3
designers, 1
energy-efficiency 1
edit 2
efficiencies 1
concatenating 1
deeply-nested 1
counter) 1
disable 3
cover 11
default, 2
faulting 2
exhibit. 1
disciplines. 1
demand” 1
directives 1
editor? 1
entering 9
effectively 5
conceptual 4
depends 5
court, 1
efficient 19
discipline 1
crash. 1
delight 1
favor, 1
exist. 5
discrepancy 1
dereference 1
discussion. 1
different 196
desired 52
entirely 4
efficient) 1
concert 2
design) 1
cpu.c 2
efficiently; 1
discredited 1
creation: 1
deployable 1
fd 1
discussed. 1
describe 14
divide 6
disk). 3
disk-drive 1
destination. 1
equivalent. 2
effort 3
condition). 1
crashes 2
designed 9
discretion 1
elements 8
criterion 2
existing 14
descrip-tion 1
descheduled. 1
fetch 29
does: 2
differently; 1
distinct 2
destruction, 1
errant 3
element, 2
confidence 2
crazy 3
destroyed 1
else-where, 1
cycles, 3
discussion 17
exit() 6
detail. 12
design. 2
file: 1
done? 1
disciplines 2
diverse 1
errorprone. 1
determines 17
employ 4
confirm 6
create()); 2
empty. 1
cyclic-sequential 1
detail 26
disk) 3
exits. 4
details; 3
designated 2
fills 3
downfall. 2
do? 9
discussed 24
errors? 2
deterministic, 2
encounters 2
device 11
end” 8
emptying 1
data), 1
detour 1
doesn’t, 3
expected) 4
deter- 1
designing 3
dramatic 2
does). 1
esi; 1
disk, 14
final 51
congratulations! 1
currency. 2
differ 2
engineering; 1
emulate 2
day! 1
developed; 1
experts 1
done. 10
determined 9
desire, 1
drop 4
done, 6
est 1
does, 6
finished 14
constructed 4
dairy 1
directly 8
encouraged 1
days. 1
enough 32
development 13
extents 2
double) 1
developer; 2
desktop. 1
dx) 4
downward, 1
estimate 2
doesn’t? 1
five 8
consumed 2
darker 1
directory; 1
contents 28
decayed 1
entries, 5
devices 15
extract 7
double-precision 1
devices. 4
destroying 1
d’un 1
dynamic 20
domains, 1
data? 1
disappear). 1
end-of-string 1
continuing 4
decimal 2
flag 73
equation 1
different-sized 1
fail? 1
down, 1
diagram, 6
earlier. 2
example 131
e 1
developed 23
done! 3
datacenter. 1
easy 50
enemy? 2
contrast 7
decisions. 2
flash-based 2
era. 1
differs 1
fails, 3
downward. 3
dictates 1
exceeding 1
eagerly, 1
diagrams 1
double-ing! 1
discipline, 1
de 1
ebp; 1
enormously 1
controversy 1
decreases 3
flavor 2
error, 3
difficulty 4
failures 1
driver8 1
exceptional 5
did 22
easier, 1
differently, 1
dramatically 2
disciplines) 1
declaring 1
effectively, 1
entry; 2
convention; 1
defined 5
flight, 1
etc., 1
directory. 6
fairness 7
duty. 1
exciting! 1
dies, 2
easily. 3
difficult. 3
dream. 1
disconnection 1
defeat 1
efficiently 10
equally 1
convoy 2
delay 2
foil 2
example... 1
disabled; 3
familiarity 2
dx=3,dx=3 4
executed), 2
different: 2
efficiency 8
dirty, 2
drops? 1
discussion, 1
defensive 1
egomaniac. 1
definition 6
copy-onwrite. 1
delete, 2
forever! 2
example: 8
discussed, 1
famous 21
e.g., 8
digit 1
executing 26
earlier 18
discovered 4
dynamically 1
disk), 2
errors 9
elsewhere. 2
delving 1
correct, 2
depiction 2
forgets 1
excited 2
distributed 7
fault? 1
direction 1
else, 7
execvp() 1
eaters 2
dive 4
easier. 1
distribution 1
embarrassment. 1
essentially 11
demand 11
costly 7
deployment. 2
forth). 1
exec() 13
faults, 2
directory, 8
enable. 2
exists, 3
effectively. 3
divides 6
does), 1
enforcement, 1
easily 17
everyone 1
demonstrates 3
count--; 1
derive 1
found. 2
feasible 1
executes 23
diving 1
end. 1
exits? 2
elsewhere 3
do), 1
doing? 2
enough, 5
editor 2
evil.” 2
deschedules 3
counter. 12
descheduling 2
do 328
fragmentation; 1
features, 2
exhaustive 3
ending 1
do. 18
expected: 2
emailing. 1
documented 1
ele-ment 1
examples. 3
ensure 34
designs, 1
counter_t; 6
describe. 1
don’t 81
driving 1
frequent 4
felt 3
existed 1
enjoy 3
expects 3
empty), 1
employs. 1
exception. 1
entity), 1
design” 1
counter’s 2
doing 76
descriptor 1
earlier, 3
doesn’t 51
editor, 1
frequently; 1
few) 1
exiting. 1
fact. 2
ensures 14
enacted 1
en-us/um/people/mbj/Mars 2
exchange1) 1
desirable. 1
curr->pass 1
dollars 2
desires 1
easy. 3
entry 55
efficiency. 3
down 25
full). 2
figuring 1
expectations? 2
fail 13
entities 5
end”. 1
excludes 2
detect 5
enable 24
cycle. 1
dominate 3
detail, 6
eax=50 2
etc.)? 1
encounter 7
download 2
game 4
file; 1
exploits. 1
fast. 5
entries; 2
fault 12
excuse 1
developers 12
enabled, 4
dandy. 1
done; 1
details) 1
effects 1
event 3
end, 5
drink 2
eyes 2
finally, 8
general, 18
enough. 2
enum 2
feature 5
execl, 1
diagram); 1
darned 1
doubts 1
deterministically) 1
efficiency; 1
end 46
endlessly 2
ever 19
drive. 2
facets 2
find!) 1
generalized 1
ensued 1
environment 4
feel 8
exhibit 3
die). 1
date 2
dump”, 2
efficiently. 1
develop 12
end\n"); 5
entered, 2
everywhere, 1
driven 1
failure. 1
flag.s 2
get: 4
entirety 2
error; 1
fewest-possible 1
exist 11
difficulties. 1
day 5
elsewhere, 1
devices, 2
endeavors 1
entirety? 1
evicted. 2
dynamics 1
fashion. 3
flags. 2
getpid(), 2
entries: 1
essay 1
file, 9
exits 3
digging 1
deadlock). 2
enabling 15
did. 2
enough! 1
environment. 4
exceptions 3
eating 1
fetch, 2
flaws. 3
gettimeofday()). 1
each 340
envisager 1
events 5
files) 1
expected; 3
directing 1
deallocate 1
enacted, 1
differ? 1
escalation 1
exec(), 6
electrical 1
figured 2
entire 46
flexible 9
glance 1
eases 1
equal, 2
eventually, 1
fill_ptr 2
experiment, 1
disappear 1
engineers 2
decide 23
different-size 1
esp; 1
element. 1
executable 13
finish), 1
entirely; 2
flushed 1
globally-shared 1
eater 2
era, 1
evermore 1
finegrained 1
extension 1
disk. 14
entry. 10
decision 15
direction. 3
establishment 1
elements; 1
executes, 3
finished, 10
entry), 1
execution. 17
gnu 2
expected 7
errantly-freed 1
first-in 2
everything 12
fail! 2
displays 1
evicted, 1
decreases? 1
directory: 1
etc.) 11
else? 2
first-out) 1
fly 1
first. 10
effective 12
fits 9
evicted 3
explicit 22
fixed-sized 11
evolution 3
failure), 1
dissertation 6
evil 1
deep 7
disk); 1
evenly 3
do, 11
estimator? 1
following: 8
good! 2
efficiency, 3
flag, 14
faint 1
flag[self] 4
evolved 1
followed 5
falling 1
divided 8
examining 4
depending 12
email 2
evidence 1
document 1
evaluate 6
forcefully 2
got 16
efficiently? 5
follows 6
excellent 42
fair 19
fancifully 1
exact 26
does. 1
excellent, 4
dequeue 5
embracing 1
example). 3
found 84
doesn’t). 2
form). 1
gracefully, 1
eight 1
for? 2
examine 36
excessively 1
fair-share 7
executed 17
doivent 1
example) 10
exec(): 1
descriptor? 1
emptied 1
exchange 2
doing. 3
formed. 1
granting 1
forget-ting 1
four 52
exchange1 1
fantastic 1
either 49
family 5
exist: 1
double. 1
exec 2
execution, 8
descriptors, 2
enjoys 1
excluding 1
done) 1
former 5
grasshopper, 1
formula 2
free()) 1
exec(). 2
farmer 1
encounter. 1
far) 2
exit(1); 6
fetches 10
executed. 1
exhibits 2
desired. 9
enlisted 1
execle(), 2
doubt! 1
found? 1
greater 4
forward! 1
free(void 4
fast” 1
encountering 1
downside, 1
exiting? 1
execution 48
executing) 1
exists 3
despite 6
enqueue 4
draconian 1
fragmentation, 6
grow; 1
fourteen. 1
free-page 1
execute 29
features. 2
enough; 1
few 102
downwards 1
expect. 2
exist). 1
exit; 1
expand 1
detail; 1
entity; 1
drivers 1
guarantee. 1
fraction 5
fullness 1
frame 40
executed, 5
fg 1
field. 1
enters 21
dream 1
expectations 1
existed. 2
exited2 1
expected. 4
device. 1
entries. 3
didn’t 11
handle. 1
fragmented) 1
fully 8
free) 5
execution” 1
fine; 2
entries). 2
drives, 1
figure 35
expensive 3
exit()) 1
expect, 2
explicitly 12
each. 4
die, 1
equal 19
handler, 3
free(50). 1
further, 2
free-list 1
exited 1
finish, 2
entry? 1
file-system 1
expect; 1
during 29
exporting 1
expensive. 2
exploring? 1
earlier; 2
differences 2
era 7
happen. 2
free(rvals); 2
futex 16
free-space 4
expect: 4
fire). 1
environment, 2
files” 1
experiments 3
dustbin 2
failed; 2
explicitly. 2
fairly 9
eaters; 1
digest. 1
essential 3
happening 1
free(x); 1
general. 1
frequently, 3
expensive, 6
first-level 2
epic 1
fill; 2
expert, 1
dynamically-allocated, 1
fair. 1
exploit 1
fairness, 2
eax=51. 4
directly. 3
exam- 1
happens; 2
freed 3
generalization 5
friends 3
explanation 1
flags 10
equation; 1
findings 2
explains 2
familiar; 1
earliest 13
exploration 1
far-reaching 1
economist. 1
disassembler 2
hard-and-fast 1
generalpurpose 2
fringe 1
function 41
explored 2
flaws 1
etc.). 1
fine 7
expose 1
family. 1
exports 1
far. 1
easier 19
effective. 3
harddisk 1
generation 1
from). 2
future; 1
discuss 53
expressed 2
fork; 1
eviction 3
fit? 1
famously 3
extra 18
facility 3
fascinating 9
efficient, 5
either. 1
get(); 5
hardware, 15
func(). 1
game, 1
discussion: 1
example, 262
external 10
formal, 1
example), 10
fits, 1
fancy? 1
far; 1
fact). 1
fault; 2
efforts 2
employed 4
ghastly 1
hardware-based 5
gcc) 1
future 21
disks 4
exclusion. 6
failure; 2
formed 3
exceeds 8
flag)? 1
faster; 1
fashion, 1
failed 8
fellow. 1
eip; 1
github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
empty 14
has. 1
gdb) 1
gather 1
dividing 6
executing, 2
far: 2
fought 1
exceptionally 2
flag[0] 2
favorite 8
fastpath) 2
failed\n"); 4
few), 2
global; 2
endlessly, 2
generalize 1
else 45
heap, 22
do; 2
execv(), 2
fashion; 1
generate 28
fragmentation. 6
exec(); 1
floor 1
fetch-and-add 8
fairshare 1
field 15
fewer. 1
globally-allocated 2
establish 3
generalized, 1
employs 3
heavy-handed, 1
documents, 1
execvp(), 2
faster. 6
generated, 1
fragmented 3
existed; 2
flush 5
few. 1
familiar 2
file.txt|wc 1
fields 2
grab 11
eviction. 1
gettid()); 4
emulator 1
hexadecimal), 1
doing.” 1
exercise 4
feeble 2
free(): 1
get(counter_t 6
exit). 2
forces 2
field, 2
fanatics, 2
finally), 1
figure), 1
finds 10
fill 11
examples 21
en.wikipedia.org/wiki/LoadLink/Store-Conditional. 2
hide 1
done\n", 2
exert 2
fell 2
free; 5
expected? 2
fight. 1
fork 7
give 30
far, 13
grabbing 2
globally 4
finishes. 1
first, 20
excellent; 2
file 95
hierarchy; 1
don’t. 1
exist; 2
fetched 5
frequency; 1
experiment 5
form. 2
glock; 2
grand 1
faster 16
first” 1
first-fit, 1
enabled. 1
go 37
filled 6
exception 15
high: 1
double-click 1
existence 3
fields, 1
frequently-used 1
explain 1
formally, 1
google’s 1
gray) 3
fault) 1
fix 3
floating 1
enacting 1
fine. 2
goals 15
excessive 3
hit), 4
doubt 2
exit. 5
field” 1
frequently. 1
extended 5
forms; 1
grocery 2
grows: 1
faulting”, 1
faulty 1
follows. 4
encapsulated 2
fixed 13
goodness); 1
execute, 2
hoc 2
downsides. 1
exiting 2
files 10
friendly 5
holds 38
formula, 1
grouping 4
flag=0 2
guarantee 21
feedback 5
foo 4
encourage 3
flexibility; 1
good”. 1
execvpe(). 2
draw 2
exits; 2
fine! 1
failed, 1
from) 2
honorable 1
grow, 1
flags: 9
guessed, 5
fetch-ing 1
forays 1
engineering. 1
flushing 1
habits; 1
exit), 1
due 19
experience 9
first; 6
family? 2
func() 4
hood 1
growth 1
flexible, 1
free 187
guide. 1
figures 4
foreground) 1
entitled 2
happen: 1
focus 21
expensive!). 1
ease 4
expert 3
fancy 7
funky 1
fit 27
hope. 1
guesses, 1
free()? 1
hallmark 1
file), 1
forever; 2
entity, 3
harder 4
follows: 21
explore 5
easy, 1
form 46
fares 1
gaining 5
flag) 5
how, 1
habits 1
freedom 1
half 8
hand-over-hand 8
entry). 1
harming 2
for) 1
extremely 3
exploring 2
format; 2
eax 20
faster, 6
flag[1] 2
gcc 10
however: 1
fill. 1
frequency 5
hand 6
equivalent; 1
haul, 1
handle 17
form, 6
face 4
exposed 1
fortuitous 1
eax=50. 2
figures, 1
follow 2
gdb 5
http://www.sparc.org/standards/SPARCV9.pdf. 2
filling 1
friend: 1
happen? 8
error-prone. 1
head_lock, 2
handled, 1
formally: 1
extend 2
factor 8
foundational 2
ecosphere 1
files. 1
for, 2
general? 1
http://www.unix.org/version3/. 1
finishes, 1
from. 5
fitting 3
error? 2
held) 1
handler. 2
forthcoming 3
extent 1
fails 5
freed. 3
efficiently, 1
forced 2
generated. 1
hundred 7
happening! 1
function, 3
happens, 4
et 7
higher-priority 2
handlers; 1
free(10), 1
fact: 3
find 86
fall 5
friend, 2
endless 4
forget, 1
hypervisors, 1
iMac 4
fix. 1
fork() 25
getpid()); 9
etc.? 2
hints 4
happen 15
free. 13
fashion). 1
finish 13
failure 21
enter 32
idle, 1
hardwaremanaged 1
flag; 6
forth 3
gettid() 2
hit! 1
eventually 15
hardware. 10
freeing 6
fault3 1
first) 1
fashion 4
entries); 1
illegal 11
harmful, 1
flexibility 2
free() 8
hits. 1
evict. 3
getting 33
hardware’s 1
from, 3
faults 3
flag). 2
features 17
fetch), 2
entry, 8
files, 3
focused, 1
freely, 1
imagine 41
hold? 2
evicting 1
go, 2
fully-associative, 1
following 55
harmless, 1
etc.); 1
for. 3
frees. 1
for 1176
forever. 1
holds, 2
finally 27
exactly? 2
from 443
funny 1
for: 1
has? 2
headed 3
imbalance. 1
forewarned: 1
honor 1
full 33
find. 1
except 6
generic 4
goals, 1
fully-associative 1
forget: 1
forefront 2
even 148
further 31
impact, 3
held. 16
forget 8
helgrind. 2
functions: 1
herein 3
exclusion? 2
globallyshared 1
has 348
fault, 7
going. 1
function. 2
forgot 2
ever, 1
forever, 6
fusion, 1
implications. 1
http://people.freebsd.org/˜jasone/jemalloc/bsdcan2006/jemalloc.pdf. 1
forms 3
finding 15
futex_wake 2
hierarchy, 1
execution), 3
goal: 1
havoc’ 1
faulting. 1
graph 11
functions; 1
fork(). 2
evicts 3
fork.py, 1
futex_wait 2
important, 7
frankly 3
fine-tuned 1
gaming 2
i.e., 29
holes 1
exist, 1
head->next 1
graduate 9
fetch. 2
greater-than 1
fundamentally 3
fork()ing 1
execl(), 1
forward 4
gains. 1
inc 1
free), 2
finish. 2
gave 3
i=0 1
homeworks, 3
exit? 1
header_t 1
group 12
fetching 4
gates 1
grows 16
formal 2
execlp(), 2
free(ptr), 1
gates, 1
incorporated 4
freely 2
fit, 2
hot 1
increase 20
generally 28
ideas 36
headers 2
grow. 1
finished. 2
generating 2
happy 5
forms: 1
executable, 3
generality, 1
frees 6
friends, 2
five-level 1
exits, 2
however; 2
increased, 1
gently 1
ignored. 1
heap. 10
growing 5
harsh, 2
giving 15
execution: 1
forth. 10
frequencies; 2
friend” 1
flag), 2
http://portal.acm.org/citation.cfm?id=540365. 2
expect 15
incremented, 1
illegal, 1
helgrind? 2
guarantees. 2
hash_t; 2
goals. 2
exists. 4
four-level 1
frightening 1
fully-operational 2
flag[2]; 2
gets 51
had 57
get 126
eyes...) 1
indicating 8
illegally). 1
helpful, 1
hate 1
expected, 4
have. 3
fprintf(stderr, 6
functionality, 2
functionality. 3
flexibility: 2
flexibly 1
gettimeofday() 5
handlers, 3
graph. 1
failures. 2
initial 5
imagine, 4
helps 5
going 29
first 278
expires. 1
fragmentation2 1
functions, 1
future, 5
folks 1
head 39
https://gruss.cc/files/kaiser.pdf 1
giant 1
happens. 3
greedy 3
fairness. 6
initiates 4
implementation 7
hidden 4
improved 6
first-fit 3
exploited 2
free(). 6
furthest 5
general) 1
follow, 1
heap); 1
if, 4
hard-andfast 1
groups 3
goal 19
fantastic, 1
input: 1
hair 4
high, 4
handed 4
extracts 3
flag. 13
free? 4
garbage-collected 2
generator 2
force 2
heart. 1
illusion, 2
hard-to-find 1
grows. 1
gray 3
ins 1
far 21
improvement 3
higher-level 1
harder. 1
flag’s 2
hardly 3
fact 20
getrandom(0, 1
forest, 1
good. 6
heavily 2
hard-working 1
guaranteed 1
implement 30
inseparably 1
fast; 1
in? 2
freed; 1
flavor. 1
great 79
highest 20
fair, 1
goals? 2
hash 17
fork(), 9
fast 19
held), 7
hard. 1
guessed 1
implicit 1
installs 2
feasible. 1
incl 1
frustration 1
incorporate 7
hinted 3
flow 14
good, 2
grammar 1
forth, 4
fetches, 2
help) 1
hardware? 1
hacked 1
imply 2
handled 4
happened; 1
grossly 1
happy. 4
incrementalism; 1
history... 2
focuses 3
government 3
gruesome 1
forward-growing 1
guess 8
helped 2
harmful. 1
instructions), 1
improving 4
feature-filled 1
fully-developed 1
have, 1
index. 1
guard 14
hit). 1
guess, 3
graphs 1
few, 2
hand, 3
fragmentation 13
here. 11
integer, 4
increases. 5
having 29
fellow 1
fundamen-tally 1
header). 1
indexing 1
footnote: 1
hack, 1
growth: 1
homework 9
fewer), 1
hand-coded 1
free(), 2
here’s 1
intensively 1
influential 4
few). 1
he 20
gadget), 1
hear 1
infinite 6
forcing 1
hand-over-hand). 2
have 487
gruesome. 1
hope 13
fewest 2
handle; 1
free(16500) 1
hey, 1
inform 4
interact 15
fewer 13
head; 2
get() 7
heavily-used 1
influential; 1
foreman 1
handling. 1
headaches. 1
guy 3
field: 1
hardware) 3
free(tmp); 3
however, 49
highlyfragmented 1
initializing 1
interactive, 1
fine). 1
heap? 3
glibc 3
hello, 8
info: 1
fork()/exec() 1
hard-hitting 1
heap-allocated 1
hack. 1
hardwaremanaged, 1
figure, 15
freed) 1
http://books.google.com/ngrams). 1
initially, 2
historical 14
interesting. 2
fine-grained 3
heavy 5
here, 22
forth), 1
has). 2
global 56
heard 1
hacking 1
information 57
head), 1
file. 2
frequently 7
http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF 1
initiated 1
intergalactic 2
history 16
fingertips. 1
herein), 1
held 25
found, 2
have? 2
grande 1
heart 2
handler). 1
infrequently 1
head->next; 1
file.txt 2
from; 1
http://www.multicians.org/history.html. 1
insertion 2
honor, 1
finishes 6
heuristic 2
fourth 4
helgrind 16
header: 2
graphics 2
held). 2
inherits 1
handling 14
header. 1
file’s 2
idiom: 1
full, 6
instruction) 9
hybrid 10
fires 1
fragmented; 1
here) 4
high 36
headway 1
great. 1
hello 5
initialization. 3
happened 5
header_t; 1
filled. 1
imbalance 3
functional, 1
idea? 2
flag.s. 2
friend 3
flag? 3
history. 3
into 339
heap), 1
greater). 1
hardware). 3
initialized 8
heap) 2
fine, 1
important. 5
here 46
functioned 1
ideas, 3
hides 1
fundamental 18
flags, 1
hit; 1
introduces: 1
heavilyused 1
green 1
hates 1
injected 2
held: 2
fit; 1
in-between. 3
int 260
heyday 1
identifiers, 1
gained 1
hierarchy. 2
fundamentalist 1
focused 3
honor: 1
invention 1
help: 1
grew, 1
head->value; 1
innovations. 1
help. 1
focus. 1
incorrectly. 1
intellectually 1
high-end 4
illusions 1
good? 1
history; 1
gadgets 1
forcefully. 1
however 1
investigating. 2
grows? 2
hence 20
header, 4
insight 1
helping 2
focusing 2
increased. 5
interface: 1
himself, 1
immediately. 2
greater. 1
hogs, 1
gain 16
forever 6
http://ostep.org/Citations/inside-cfs.pdf. 1
invocation 1
hackers 1
here? 3
heap). 1
instead. 4
herein, 1
fork(); 4
indicated). 1
interleavings 4
implementation, 2
greatly 4
homeworks. 1
his 37
gaming, 1
forewarned, 2
http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD123.PDF. 5
is. 7
handlers 5
heuristics 1
heavyweight 1
instruction(s) 2
hierarchies 2
forth; 1
info 1
intermediate 1
importance 8
guest 1
http://stackoverflow.com/questions/2509679/ 1
hits, 2
generalizing 1
forgetting 2
https://quoteinvestigator.com/2015/07/23/great-power. 1
isolating 1
handling, 1
hierarchies, 1
help, 1
integers), 1
forwarded 1
inner 1
higher 24
interrupt. 4
guide: 1
improve 17
http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF. 1
honor. 1
generally, 7
formulae. 1
hung. 2
it.” 1
hardware-interpreted 2
hint 4
here! 1
intense 2
fragmentation? 1
input, 1
historically 2
is? 2
habit 2
in; 2
humble 2
hopefully, 3
generated 12
fortunately, 2
hybrid. 1
item; 1
hardware-specific 1
historically, 1
hex 4
interrupted 14
frames 5
inserted. 1
hand-assembled 1
hold 27
inadvisable 1
hundreds 5
house 2
generations 1
fragmentation: 1
it. 68
immediately, 4
job? 1
haven’t 4
historically-based 1
high-level 6
intervals. 1
framework 3
handle, 1
horrible 1
inside 30
inconclusive 1
idea: 1
http://cag.csail.mit.edu/raw/documents/R4400 2
get? 1
fragmented, 2
itself); 1
implicitly 2
havoc 2
jobs, 14
hit. 5
highest-order 1
into, 1
free, 5
hands-on 1
http://ftp.gnu.org/gnu/glibc. 2
instruction: 1
incremental 1
identical 6
http://history-computer.com/Library/AltoUsersHandbook.pdf. 1
gigabytes 1
frames; 1
improve. 1
highlighted 1
jumping 2
it’s 33
hold, 1
highly 7
intricacy 1
full; 2
happen, 2
humorously 1
instructions). 1
indefinitely. 2
illusion. 2
http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1303.PDF. 1
goal, 1
general 41
in) 2
kernel) 2
hit, 28
hostility: 1
highly-networked 1
introducing 5
hardware-managed 9
imag-ine 1
index: 1
imbalances. 1
http://www.ibm.com/developerworks/linux/library/l-solar/. 2
front 10
interesting 46
grabs 16
increment(counter_t 4
generates 10
kill. 1
honest 1
huh?? 1
intuitively 1
hardware: 3
imperatives. 1
job 144
indivisible 2
hit 32
important? 1
http://www.intel.com/products/processor/manuals. 3
frustrating 1
interrupts, 4
grade, 1
fun 20
getpid() 1
killing 2
http://linux.die.net/man/3/pthread 1
humorously, 1
invocation, 1
harm 3
impetus 1
kernel-owned 1
industry 2
in-memory 2
holding 12
https://github.com/mit-pdos/xv6-public. 1
intricacies. 2
indefinitely, 1
great, 1
functionality 2
gettimeofday(); 1
functions 7
http://www.ostep.org/Citations/notes-solaris.pdf. 1
hurt 3
is: 9
has, 1
implement, 1
kicked 2
inefficiencies. 1
hoping 6
hundreds). 1
intro 3
indexes 1
greater), 1
including 51
laid 4
gives 15
hurting 2
future. 9
it) 5
head->size 1
implementations. 4
kindly 1
inefficient. 4
http://en.wikipedia.org/wiki/You 1
inverse 1
i; 16
indicative 1
greatest 1
inefficient, 2
increases 6
landmark 3
hurts; 2
goes 27
garbage 2
it?!) 1
headers, 1
important) 1
know, 5
information, 6
http://www-formal.stanford.edu/jmc/history/timesharing/timesharing.html. 1
involving 1
idea! 1
idea 92
ground 1
inflation, 1
indefinitely) 2
lations 1
ice 1
goofs 1
gcc, 1
iterations/threads: 2
heap: 2
impossible 1
knowing. 1
inherently 2
humans) 1
ideally 1
identifier 3
ignore 5
grow 18
influenced 2
guarantees 6
imaginary 1
granularity, 2
gdb, 2
itself? 1
held; 2
known. 1
initialize 15
lack 4
informed, 1
imagining 1
immensely 1
inherent 5
guesses 3
guts, 1
immediately 23
graph, 6
general-purpose 8
highlight 3
installation 1
hybrids 1
init(); 2
learned? 1
implemented? 1
inject 2
impacts 1
implies 7
implementation. 4
large 93
generalizes 1
grep 7
hire 1
hypervisors). 1
initiating 1
least-recently-used 4
inputs: 2
len:10 6
hackers. 1
importantly 1
larger. 1
implemented 10
given 80
just 304
instruction 130
intend 2
icon, 1
innovator 1
hits 13
inspires 2
input 20
lest2 1
handles 14
launch 2
in, 6
improvement. 1
gods, 1
kernel), 1
gone 5
intent 5
ideas? 1
hole 1
instant, 1
instead), 1
instruction; 3
libc 2
happen?4 1
lazy; 2
leaking 3
in- 1
groups. 2
learned 13
idioms 1
in-use 1
left 21
input/output 3
kind 54
integers, 2
lie 1
inaccessible. 1
good 99
incarnation. 1
grows, 4
interposing 1
implement!) 1
in: 1
include 18
length) 1
insert; 2
late 4
interactivity. 2
later. 9
happens 78
inactive 4
increasing 10
lead 50
guard; 2
interrupt), 1
implementations, 1
homework, 9
inaccessible, 3
hopefully 6
inclusion 1
inspiration 1
life: 1
interludes. 1
gum 1
incrementing 12
halt 5
guide 1
independently 8
indicated. 1
interrupted, 3
incur 1
incurring 1
how: 1
independently! 1
installed 1
leaked 2
internal 12
hacker 2
important). 1
hand. 3
hard 51
inefficient? 2
intervals: 4
levels 9
indexed 3
http://en.wikipedia.org/wiki/ 1
indicates 3
likely 73
least- 1
interposed 1
halted, 1
instruction. 22
impressive. 1
handed-out 1
hardware/OS 2
innocently 1
libcrypt-2.23.so 1
introduction 17
https://en.wikipedia.org/wiki/Buffer_overflow 1
indicate 15
inefficiencies 1
least-frequentlyused 1
interpret 1
leaving 3
hand-controlled 1
instructions; 2
int), 2
handler 24
happening? 1
hence, 3
happens: 5
libraries. 2
intuition? 1
humans, 1
inducing 1
ineffec1 1
list. 21
improves 4
i++) 18
hands 4
level. 7
inopportune 2
interrupt 77
here; 4
hardware; 2
life; 1
isolation 3
inefficient 4
infinitum. 1
list_t; 2
interaction 13
in-kernel 5
illegal. 2
hang 1
libc, 1
inputs 2
introduce 12
hierarchy 2
lifetime, 1
header 15
issuing 6
infinite. 1
infrastructure 1
listing 4
interchangeably 1
imbalance, 1
in. 11
included 4
libraries) 1
lifted. 1
invented 5
in 2103
heap; 2
it), 4
inflation 2
linear 34
init(), 2
list’s 1
interfaces, 1
happens? 2
inability 1
increasingly 6
insert. 2
line. 1
inversion 6
high-performance 1
heavy, 2
includes 13
items 9
information. 9
inputs. 1
lines 14
located. 2
inaccessible 2
interrupts 33
increments 7
installations. 1
list: 3
is! 2
high-priority 2
isolation; 3
held, 6
iterations 4
helgrind, 2
inquiry 2
list? 1
locations. 1
incentive 1
interval’ 1
incredibly 8
instructions. 5
index 20
incorrect. 1
hits). 1
informative 3
issued 7
itself; 3
insparable 1
lists, 7
intriguing 1
load/store: 1
help 38
intelligence 1
hardware 263
increment 14
lock() 38
indirection 3
incurred; 1
homeworks 5
informed 3
job). 1
instant 3
load; 1
introduces 6
locally-allocated 2
is 2736
here), 2
intensive. 1
have: 2
incrementally. 1
locks. 6
inheritance. 2
initiate 3
hopes 1
jobs); 1
init 4
instruction? 3
invoked 2
location.” 2
herein. 5
interactions 4
head, 1
issues 26
logic, 1
indeed, 11
local 56
init(lock_t 4
insidious 1
hours. 1
initializer 2
key) 16
it3 1
instructions, 10
hog; 1
lock(), 8
interval. 1
it? 11
indeterminate, 2
lookup 12
locality: 2
initialization 8
insights. 2
how-to-generate-a-random-number-from-within-a-range. 1
innovations, 1
loop 41
integers 4
home 3
locks: 3
intervention. 1
heap 76
itself), 3
indicated 4
locates 2
inkernel 1
install 1
https://lwn.net/Articles/170003. 2
kick 8
input); 1
loved 1
intelligence. 1
http://cag.csail.mit.edu/raw/ 1
lookup, 2
intricate 3
hearing 3
it’d 1
init() 6
innovations 2
initializes 5
integer) 2
hy-brid 1
kind, 1
instead, 5
main-deadlock.c 2
intensive, 1
https://events.static.linuxfound.org/sites/events/files/slides/elc 1
intuition 3
loop, 10
huge 20
here: 10
logical 15
high. 3
innovation 2
interested 11
idea, 7
instrumentation 1
make, 2
interactions. 2
knows 18
invalid, 8
lottery.py, 1
it” 1
human 4
jobs. 7
long; 1
him 1
lookaside 4
interesting; 2
its 295
ideal 4
int) 2
manifests 2
language. 3
interfaces 17
interface 16
love 2
inode) 2
insisting 1
history, 3
insert 12
i 22
lookups. 1
interposition 2
itself) 1
identifier, 2
manual, 2
investigate 1
larger), 1
interfere 2
interval, 1
lwarx/stwcx 2
join, 2
instances 2
hogging; 1
installing 1
identical, 1
loop.s 6
interrupt: 4
it’ll 1
idle! 1
masking 4
invited 1
larger-scale 1
interleaving, 2
intervals) 2
machines. 6
jokes 1
holder 2
instance 3
jump 22
loops. 1
jars 1
invalid 8
math 4
involved, 6
largest 2
instead 95
interrupted. 2
main() 11
host 2
introduced 25
illusion: 2
instructions 78
kernel; 2
lovely 1
join 12
mathematical 1
involved 9
it 1299
it!), 1
last. 1
interact. 1
invent 3
main-deadlock-global.c. 2
hour 1
invalidate 1
illustrate 5
insufficient. 2
implement. 5
integer). 2
implementations 4
if 483
maximum, 1
involvement 1
item. 1
ld-2.23.so 1
itself, 8
interacting 1
issue; 1
main-race) 2
inversely 1
kill 10
ls, 1
k-stack(A) 1
interconnected 1
implementing 8
illegally 3
memory! 2
irstrun 1
iteration. 1
leap 3
junctures 1
interest: 2
it). 3
inverted 4
job) 3
killed). 1
m->guard 10
kernel” 1
interesting) 1
implication 1
mention 1
illusion 20
is; 3
jne 3
interested! 1
keeping 14
is), 1
journalism 1
main.c 6
knowledge, 3
magic: 7
kicking 1
interval 8
implying 1
microcode), 1
imbalanced? 1
isn’t. 3
learn 65
jobs? 3
interesting, 4
killall. 1
isolate 1
judiciously 1
larger? 1
malloc.py, 1
kept 12
management. 3
intervention 1
important; 4
mid 1
how 441
immediate 2
isses 1
least) 1
join(), 7
interleaving 4
killer 1
iterations? 1
later); 1
malicious 14
killed; 1
key; 6
manager 3
intrinsically 1
improbable, 2
hptr 1
migration 5
immediately; 7
issue. 3
left). 2
just-finished 1
interlude, 2
kinds: 1
join() 9
latter 5
malloc. 1
kind: 1
kind. 1
manner: 1
invalid. 2
in-depth 1
http://www-formal.stanford.edu/jmc/ 1
minicomputer. 1
it!) 2
importantly, 9
legends 2
kernel, 7
interpretation 1
key); 4
k-stack(B) 2
layout. 1
manifesto 1
know! 1
known). 1
invisible 1
mark 6
incorporates 2
https://birrell.org/andrew/papers/035-Threads.pdf 2
minimum. 2
it... 1
independently, 2
len:9 1
l/stq 2
init(counter_t 6
keyboard, 1
ldl 2
many! 1
knowledge 14
language 8
involved. 2
match. 1
increase? 2
hugely 3
miss. 9
it: 4
kernel 123
languages, 2
initially 3
length 16
kill() 1
len:30 1
mapping: 1
laborious 1
large) 1
isn’t, 2
matching 1
increases, 2
hybrid, 1
missing 4
last 37
keyboard 2
later, 5
itself 32
inode 3
limits 6
know. 3
libc-2.23.so 1
masses: 1
laptop 2
isolated 2
matter. 2
incremented; 2
i5 2
interrupt; 1
mistakes) 1
launches 2
keystroke 1
indeed 26
instantaneously. 1
line: 2
instructions: 2
knowing 6
life, 3
max 1
large-scale 1
issue, 3
measuring 5
idea; 1
intervals 6
mmap(NULL, 1
law 2
kmalloc. 1
indeterminate 2
job, 19
lingo) 1
integrity 1
lightweight, 1
meaningful 5
last, 1
it?) 1
let’s 73
meet 5
ideal? 1
mocked). 1
is, 22
ldrex/strex 2
large-memory 1
known 90
leading 9
jobs) 1
listens 2
intelligent 2
linking 3
meanwhile, 1
latency 9
memory-intensive 1
library. 10
itself. 19
idle 5
mode), 1
laugh 1
it; 14
individual 3
la 3
left) 1
juggling 1
literally 1
interactivity 2
measured 2
memory-like 1
lazy 5
libtinfo, 1
join()); 1
illusions, 1
more). 1
lazily, 1
jobs: 2
judiciousness 1
list 103
level, 3
larger 23
jump; 1
lock) 4
interface. 4
measurement 3
mid-execution 1
leaks 1
like. 6
joke, 1
immense 1
ldq 2
moves 15
influence 1
jumps) 1
load, 3
library” 1
later), 1
kids, 1
interrupted) 1
locked 7
memorymanagement 1
middle, 1
lean 1
list). 2
jump) 1
impact 5
learn? 1
multiprocessorbased 1
informally, 1
keeps 13
load/store 3
likes, 1
latest 8
known: 1
leak 2
looking? 1
messages. 2
minds 1
learning 2
lists[BUCKETS]; 2
jumped 1
implementation)” 2
length? 1
multiprocessors, 2
informing 1
known; 1
located 13
line, 7
interruption, 2
lags 2
leave 13
lost 4
met 1
minimizing 1
left), 1
lives 7
implements 6
lengths, 1
instrument 1
mythread, 14
large-file 1
keep 48
locations 11
linear) 1
investigator 1
languages 4
libraries 3
mild 1
lots 12
miss? 1
legal; 1
llock[NUMCPUS]; 2
importance, 1
library, 10
interleavings. 2
naming 1
last); 1
key, 2
lock_t 2
lived 1
iss 6
large, 7
lies 4
milliseconds 6
misses). 1
low 10
letter 3
loads 19
libtinfo.so.5.9 1
internet 1
nary 1
last-in 1
kicks 2
important 63
it1! 1
load-linked 14
item 9
limitations 1
mind. 1
mjtsai.com/blog/2015/12/16/osspinlock 2
lower-case 3
locks 79
levels), 1
locking, 2
lifesaver 1
interpose 1
need. 2
kidding; 1
in-between 5
laws 2
later 36
location; 2
join(). 2
limiting 1
minute?), 1
monitors 5
lowered 1
long, 5
m->flag 6
logarithmic 3
like, 3
interrupt, 4
needs; 1
killed 2
in-terface 1
lawyers 1
latter, 2
judicious 1
limits; 1
jumps 7
miss: 1
moreover, 1
library; 1
loops? 1
macro 1
long-term. 1
likely). 1
interrupt-based 2
negative). 1
knew 5
in/out 1
learned, 1
lets 10
lock; 24
lists. 1
kernel. 6
level 23
moved 6
lowers 1
much. 6
main(), 1
longer, 1
links 3
intervening 3
network 2
languages. 2
increased 3
left, 6
logically-different 1
ll/sc 2
mistakes), 1
less 29
lie. 1
life 22
lowest. 4
multipro-gramming 1
maintains. 1
list), 1
looking 13
invented, 1
network-connected 1
learns 1
incremented 4
longlived 1
loathe 1
kernel?” 1
locality, 8
lessons 5
light 1
letting 6
machinery, 1
malicious, 1
multiprocessor 19
literature 1
loop) 2
inversion, 4
least, 7
independent 4
looping-race-nolock.s 8
modes. 2
kernel’s 4
lock(&m) 1
lightweight 1
likes 1
lifeless 1
magic; 1
managed), 1
mutex_lock 2
lives. 1
least-significant 1
lottery 24
inexpensive 1
new 140
isn’t 26
lucky, 2
modification 2
kills 2
like; 2
lock(lock_t 14
limit) 1
lines, 1
main-race.c. 2
managing 9
myargs[0] 2
locality 18
lying 2
led 8
informs 1
next; 4
machine? 2
modified), 1
kind) 1
issue 33
limits. 1
lock->turn 8
link) 1
limited 17
main-two-cvs-while.c 1
me 6
line 14
linked 18
machine. 9
init: 2
legal 6
non-ASLR 1
machines, 5
modifying 2
live 12
locked; 2
mainframe, 1
mythread(), 2
long-lived 3
list; 4
know 71
it, 68
machines; 1
measure 21
made, 5
innocent 1
legitimate 1
non-executable 1
lengths 5
modularity, 1
lookups 1
majors 1
load 35
let 36
longrunning 1
loader 4
knowledge? 1
laptops, 1
list, 26
mail 1
memory) 5
inodes, 1
main(). 1
noted 3
main-signal-cv. 2
make. 1
nanoseconds 1
loops 18
load-linked, 2
levels: 1
loss 2
location. 3
job. 8
laughing 2
lives), 1
malloc; 2
locate 3
insert(queue, 1
module 1
noticeably 4
main-two-cvs-while-extra-unlock.c. 1
maliciously! 2
nature, 2
lowest-priority 1
locale 2
libcrypt, 1
lottery. 1
job’s 2
left-shifted 2
memory-mapping 1
manipulates 2
locations, 1
inserted 2
monitoring 3
nuance 1
lock. 64
maintains 1
malloc(3) 1
near-term 1
ls. 1
low-priority 1
lock). 10
journaling 3
lengths: 1
mentioning: 1
manually 1
library 47
many. 5
inspired 1
monolithic 1
nuclear 1
maliciously) 1
lock_t; 8
malloc(strlen(s) 1
luck. 1
nearly 9
lower-half 1
lock_init(lock_t 4
lifetime 1
methods. 3
lock->ticket 2
key 28
mechanisms; 1
kinds 5
most-recently 1
nuts 1
malloc(20);. 1
man 21
m 1
necessary. 1
m;) 1
locking 34
like: 3
logically 6
metric. 4
lock-free 3
installation, 1
memory-management 2
lock? 10
mutex_t 5
instruction, 19
manipulations 2
manages 9
main.c). 2
necessitates 1
like 215
machine, 8
lock’s 2
limit 6
mighty 4
know: 2
memory?”, 1
long 68
mentioned 7
objects 5
instructions) 2
locks, 22
many” 2
manner; 1
maintain, 1
needs, 2
linker 1
machines) 1
list) 5
longer 17
migrating 2
knowing, 1
my 6
looping-race-nolock.s, 2
message. 1
observed 1
intact; 1
marked 11
manual. 4
makes, 2
next, 1
looks 39
list_t 2
made: 3
listed 1
milliseconds, 2
low-level 16
known, 2
namely 5
looping-sequential 3
metal 1
occasion; 1
marriage, 1
integer 17
malloc()); 1
mapping 13
nice, 3
lookup. 3
lists 13
magic 7
lively 1
lowering 1
minimize 11
labeled 3
lost. 2
near 13
millisecond 1
occur. 3
maximize 2
mask 1
managed 6
non-concurrent 1
interactive 20
loop. 8
lives, 2
main(); 1
location, 6
lowest-order 1
misses. 7
large. 3
lot! 1
nearly-endless 1
miss). 1
occurs; 3
master 4
non-practical 1
means 31
interest 3
looping 1
management 29
load” 1
mainstream 1
lowly 2
modification, 2
larger, 2
low. 1
neat. 1
mlfq.py, 1
odds 1
lock, 61
matter? 3
none-too-subtle 1
measurement. 1
introduction, 1
loops; 13
manner, 11
locality. 4
maintain 4
more? 1
laser-like 1
luck! 1
made 23
networking. 2
mocked 1
old; 4
locking. 3
matters, 2
not: 3
memory-bug 1
inventory 1
low-cost 1
mappings. 3
lock()), 2
motivating 1
latency) 1
machine; 2
new, 1
mode. 4
once), 3
makes 57
locks) 3
mem- 1
noticing 1
memory-user.c. 1
isolation, 2
making 63
lower-priority 2
match 12
laughably 1
lot 35
machinery 10
new_head; 2
mov 33
one-third 1
malloc(10 2
logs 1
memory): 1
null 2
it! 14
malloc(). 4
lucky 3
material. 3
memory; 19
lay-out. 1
ls 1
main-two-cvs-if.c. 1
luck 5
movement). 1
onelevel 1
malloc(strlen(src) 1
longer-running 1
memory-allocation 10
numer-ous 1
obtaining 4
malloc’d 3
m; 1
matter 13
lays 1
methods 4
newfile.txt. 1
mainframe 2
macOS, 1
multi.py 2
open("./p4.output", 1
manner 7
meta-level 1
iterations, 1
occur? 2
malloc” 1
maximizing 1
laziness 2
metric 5
machines 21
malfeasance 1
machinery? 1
node 12
multiplexing 2
must-read 3
manuals 2
micro-instructions 1
jacket, 1
look 121
manager, 3
occurs, 14
mem. 1
microsecond. 1
leads 13
malloc(sizeof(double)); 1
machines). 1
magic. 1
main(int 23
operator. 3
nanoseconds). 1
maps 7
mines 1
loop; 2
manages; 1
memcheck 1
leak, 1
jobs 102
off 30
main-one-cv-while.c. 1
million 17
machine 34
main-deadlock.c. 2
opinions; 1
nearest 1
matters! 1
minicomputer 5
memories, 1
mapped 14
malloc(sizeof(int)); 2
nonetheless. 1
join. 2
offered 1
main-signal.c. 2
more 470
least 35
min 3
legality. 1
malloc 8
opposed 3
mean 6
necessarily 8
minimally 1
memory); 2
marvel 1
manipulate 2
not), 3
knows, 1
often? 1
macros 1
main: 12
mind, 4
length). 2
mapping, 1
optimizations 1
measure? 2
negatives, 2
minimum 2
memory-mapped 3
manner? 1
l/stl 2
old, 1
made. 2
maintaining 1
note 27
mini-computer; 1
liked 1
massive 4
optimizing 2
misses 21
newly-freed 1
most 130
minus 5
mesh 1
manufacturers 1
latency. 1
may 123
oldest 1
magnificently; 2
makes. 1
noticeable 2
linear. 1
master, 1
mechanism, 2
options. 3
models 2
nicely. 2
much?). 1
microkernel-like 1
materials. 1
miss 32
layout 2
mem.pdf 1
on. 9
noticed 5
manner. 7
lmbench 4
math. 1
megabytes 3
ordering 9
mode” 1
nightmares 1
main 66
multilevel 2
milliseconds). 1
mem.c 2
mmap() 7
learn, 1
memory-related 1
one) 4
obliged 1
mappings 8
matter; 1
loaded 17
memories 4
originally 2
modification. 2
nitty-gritty: 1
main-signal-cv.c. 2
munication, 1
minicomputers. 1
memory). 6
mode). 1
leftmost 1
one-word 2
masks 2
observe 6
measurements? 1
local-to-global 2
mental 2
others), 3
month. 1
node, 1
malloc(), 3
misbehaved), 1
memory. 103
memory-constrained 1
mutex 17
monopolize 6
length, 1
opened 1
material 8
observed, 1
local[NUMCPUS]; 2
mentor, 2
more! 1
otherwise 14
mechanisms 32
nodes) 2
malloc(strlen(src)); 1
misbehaving 2
metrics 7
memory-failing 2
myarg_t 8
more) 1
lesson: 2
operating-system 3
meaning 3
obtained 1
message, 2
multicore 6
megabytes). 1
outcome. 6
location 39
nonsolution: 1
moglie 1
note, 5
men-tioned 1
naive 3
ms, 5
library) 5
origins 1
other) 1
ocean 1
messy 2
multiplex 1
memory-access 1
over. 1
millions 3
mother. 2
merest 1
needed. 11
life. 2
notice 34
outcome? 5
off; 2
metadata 1
myret_t 6
overhead, 1
memory? 9
mind-blowing 1
merge 2
multiple 95
needless 2
like) 2
now-standard 1
output: 4
older 13
names 1
method 8
overload. 1
memoryreference 1
message; 1
minimal 7
many 252
multiprocessors. 4
limits, 1
outs 1
negative 14
now. 7
new) 4
millisecond. 1
needed? 6
overwrites 1
memory” 1
much 135
meters 1
misbehaves 1
marking, 1
multiprogramming. 1
link 6
owner 4
on) 1
occasions 1
no?). 2
milliseconds; 1
networking, 1
p3). 1
mesmerizing. 1
multi-queue 4
methods, 1
miss; 1
matches 1
myargs[1] 2
list-like 1
ownership, 1
operation), 2
ocean, 1
lock 370
meltdownattack.com 1
notes: 2
miss), 3
new->next 4
mistakes 3
multitude 1
p: 18
metric, 2
mitigates 1
mathematician 2
mythread. 2
p1.c) 1
opposites 1
olden 1
logical. 1
mem 10
now? 7
mess 1
newly-created 3
myargs[2] 2
page-replacement 6
miss); 1
mode, 13
mmap(); 1
little 103
meant 1
name; 1
p; 7
omitted, 1
long-list 1
memories. 1
optimal 20
numbers). 1
messages 1
nice), 1
mystery 1
pages: 2
name, 4
model 8
modifications. 2
load. 2
measurements, 1
natively 1
packages, 1
lookup? 1
memory-add 2
optimizations, 3
obscure 1
microcosm, 1
nicely 1
misses, 8
painful; 2
napping 1
modified 15
measures 2
loading 6
more. 14
loop? 1
move 31
method. 3
page. 21
optional 2
obvious, 2
microprocessor. 1
node. 1
mode; 2
neatly 4
lock(&mutex); 2
naturally 4
most. 1
parent 44
loops, 4
mechanism 18
ms). 3
middle 11
pages; 9
ordering, 2
occurred, 4
migration. 1
node_t; 5
modifies 1
node’s 4
necessary 9
necessarily!) 2
music 2
park(); 4
lower 13
much... 1
lowlevellock.h 2
pains 1
odd, 1
million); 1
lock), 2
modulo 1
non-performant. 1
non-zero, 1
mutex. 1
park, 2
myret 4
much: 1
multiprocessor, 2
memory, 124
odd-sized 1
of. 1
lock->flag 6
logic 7
news 2
participated 1
machinery) 1
myargs); 2
name 22
pairs, 1
memory-reference 1
need 152
mind 5
offerings 2
moment 5
offset, 2
next. 10
long-running 15
main); 1
looked 8
nearby 2
our 230
papers 8
major 28
needed). 2
partition 1
monopolized 1
miss, 10
once. 5
one 500
nanoseconds, 2
now 184
modified. 1
lost, 3
nearly-complete 1
memory-user 4
out. 11
parameters). 1
neighboring 1
movie 1
malloc() 32
parts 19
moving 13
one! 1
occurs), 1
natural 9
more, 6
low, 3
necessitating 1
no 140
needed, 7
message 10
park(), 2
no? 8
malloc(100e6)); 1
mobile 1
pause, 1
one-quarter 1
ms 14
ones. 3
newly-opened 1
most-significant 1
lowered, 1
over-written 1
none.” 2
negatively) 3
microseconds, 2
passive 2
nondeterminism 1
modes 2
manage 19
odds: 1
pay 12
much-improved 1
news: 2
open() 6
mother 2
lowest 9
overheads), 1
newer 2
not, 14
mid-instruction, 2
path. 3
none, 1
modified). 1
managed, 2
old_ptr 4
peep 1
percentage, 1
perfectly, 1
perform? 1
notes. 1
only 202
operate): 1
multiples 1
machine) 2
overseas. 1
non-blocking 2
notes); 1
minimal. 2
pdflush), 1
not; 1
modify 3
management, 1
on). 1
muck 1
perl). 1
multi-CPU 3
oops! 1
operates 4
multiprocessing). 2
opposite 5
mutex, 4
nuances 3
minimizes 2
notion), 1
money 1
once? 2
manager. 4
nothing 5
permanent 1
perform 70
open 7
machinery. 3
p6 5
opt 1
mutual-exclusion 2
obey. 1
multi-level 30
minutes 1
obtain 10
mostly 4
marking 2
persons 1
operations 26
notion 12
philosophical, 1
number. 2
madvise), 1
page) 4
optimization, 3
myret_t; 2
multiply 2
null.c 1
miss) 1
obviates 1
much; 1
matter, 3
multi-processor 4
perspective 8
open()? 1
physical. 1
numbering 1
magnitude 1
page-fault 3
organization. 1
mythread() 2
myarg 2
paging 28
missed 2
occurs. 3
multiprocessing 1
measurements 4
mutex->flag 6
pessimal, 1
not 449
operations. 8
pioneered 4
object 10
mutual 29
myturn 2
numbers 12
nanoseconds), 1
paging-policy.py, 1
misses! 1
occurs?” 1
optimal. 1
meeting 1
phone 1
nothing”; 2
optimal, 5
pleasure: 1
point1 1
myturn) 2
obvious 12
name. 4
object), 1
needed; 1
pain. 1
optimizes 4
make 214
otherwise: 2
malloc(sizeof(node_t)); 8
mandated 1
mode 23
ours: 1
out, 27
name). 1
nasty 1
nature 8
oblivious 1
observation 5
physics). 1
never 38
manual 13
out; 1
points. 1
overflow 3
naturally, 1
occurred 3
paper. 1
obviously 5
picks 5
needs 32
newlyrunning 1
outdated) 1
map 7
popl 1
modern 90
own 72
other 303
notice? 1
neat 8
occurrence. 1
par-allel, 1
odd 6
pipe, 2
negative, 3
next-to-last 1
outlines 6
market... 1
memory 568
ms), 4
p); 1
out-of-bounds 1
portion 20
necessary; 1
objdump 8
occur 9
paragraph 1
occurring 3
please 3
newly 3
noble 1
overall. 1
marks 4
mess! 1
must, 1
p3.c 3
outputs. 2
posed 5
necessity! 2
objectoriented 1
oddity: 2
parallel) 2
oddly 1
pmap, 1
newly-fetched 1
none 3
overhead), 2
marvelous 1
microseconds 2
matters. 3
overflow. 1
p4 7
possibility 5
need, 1
obvious: 2
needlessly 3
partition, 1
offset), 1
not? 2
own? 1
n). 1
mature 1
own. 2
point 39
page). 1
possible: 1
on 719
off, 3
occasionally 3
network. 2
patient! 1
offset=04); 1
note: 4
p2.c 1
named 8
maximum 8
pool 1
p2 7
pages); 1
next 101
power. 1
ones!). 1
offender. 1
offset: 1
networking 3
patterns), 1
new. 3
once, 9
p3 5
maybe 4
populated, 1
page), 2
paging. 4
often 69
practice 4
oops, 1
precise 4
naturally-occurring 1
periods 4
newfile.txt 2
one-to-one 1
nice 34
p4.output 1
might 218
offset 42
mem-access 1
needed 44
paper, 3
once). 1
new; 8
page-table 31
operation, 9
persistently 1
predict 16
non-contiguous 2
one? 1
non-scalable 2
page-number 1
migrate 1
oh 2
power.” 1
mem? 1
parallelism. 2
nothing) 4
memory), 5
newly-allocated 2
pagedirectory 1
opportunity 1
paging, 4
predictors, 2
non-synchronized 2
ones, 2
nor 1
paging-multilevel-translate.py; 1
migration? 1
oops.x 2
pre-configured 1
paralleliza-tion, 1
one: 3
notice. 1
memoryintensive 1
newlyfreed 1
perspective, 1
notes, 3
paper: 1
pressing 1
non-zero 3
one” 1
paradigm. 1
miniscule 1
not. 14
optimization 6
pre-initialized 1
oops; 2
noticed: 2
parameters 9
merely 1
opposite: 1
phone, 1
nothing. 2
parameters. 2
previously) 1
nondeterminism, 1
ongoing 1
parent) 1
misses), 1
piece 36
order; 1
precious 2
operator 3
parent: 2
now, 18
metric: 1
or, 5
notices 2
parentheses 2
primitives? 2
norm, 2
online, 2
part, 2
o 2
mobility 1
pipeline 1
ority 1
predictable; 1
opinion 1
partially-ordered 1
now-extinct 1
microkernels 3
order! 1
now! 1
printing 3
noticeably. 2
oops 2
obey 1
models), 2
place! 2
out? 1
preferred; 2
overflows 4
past, 4
num 1
particular, 28
obvious) 2
orderings 2
number, 4
priority) 1
performance 91
now-sleeping 2
observing 1
molecules 1
platforms. 1
optimality 1
operation 20
presented 8
peaches; 1
mirrors 1
overview 12
password 1
off), 2
otool 2
numbers) 1
perror("malloc"); 4
objects. 1
private 18
monster! 1
play 4
occurs 19
options 3
opposite. 1
prevention 2
performance2 1
miss-handling 2
overwrite 4
peeking 1
owns 2
offending 10
object. 1
persistently, 1
obviously, 1
motivate 1
pleasant. 1
privileged 24
of... 3
optimal; 2
primitive! 2
mistake 3
performed 11
probably 32
penalties. 1
p1.c), 1
offset=000000, 1
obvious. 2
order 80
person; 1
occur, 2
moustache 1
often, 7
point, 30
mix 1
out-of-bounds; 1
personal 1
output, 2
probes 1
people. 1
page: 1
old 60
once; 4
others). 1
physically 2
optimize 4
much, 1
oh! 1
pointier, 1
primitives. 8
mode) 9
phases 2
outside 4
people.cs.clemson.edu/ 1
problem: 25
pages). 3
online: 1
once”, 1
papers, 6
piece, 1
on; 1
printf("%p\n", 1
policies. 7
moment. 1
piece. 3
overstate 1
per-process 12
multi-threaded 44
process, 51
onnv/onnv-gate/usr/src/lib/libc/port/threads/synch.c. 2
outcome 4
parallelization, 1
pioneer 2
parcel 1
one. 24
priorities 5
onto 17
open-source 2
open. 2
operations, 3
original; 2
other. 8
others; 1
place? 1
oversubscribed; 1
perfect... 2
p1, 5
p2; 5
packing 2
perhaps 39
period 8
persistence. 2
phrase 2
physics 1
place. 16
ploticus 1
pointed 15
pointers? 2
policies; 1
poorly. 2
popular 7
porting 2
positive 4
practical 8
preemption 2
prepared 1
prior). 1
or 469
open(), 1
output; 1
over 90
pipeline, 2
process; 13
part 52
programmer. 5
progressed, 2
prohibitively 2
projects 3
promoted 1
protected 4
protections 4
pthread_join(pthread_t 2
other’s 1
possession 2
out-of-memory 1
preempted 4
pressed 2
order), 1
principle 6
oops.y 2
over-designed 1
plots 3
page 635
mouse), 1
particular 60
pthread_mutex_lock(&q->head_lock); 2
plain 2
overcome 3
multiplied 3
pro2 1
orderly 1
operation. 5
printed 6
overhead. 1
operator, 2
policies: 2
optimizations. 1
pass 54
pthread_mutex_timedlock(pthread_mutex_t 2
order, 5
overheads? 1
overwriting 2
own, 3
p 1
p1.c. 1
proceed! 1
organization, 1
original, 1
opinions 2
printf("%d 4
overheads; 1
printf("%lld\n", 2
politely 1
move). 1
pause) 1
planet 1
pthread_mutex_unlock(&c->llock[cpu]); 2
pthread_mutex_unlock(pthread_mutex_t 2
multiprogrammed 3
p1–p3). 1
process); 1
orphaned 1
opposing 2
pagereplacement 1
p3) 1
printf("location 3
package 4
pausing 2
processes, 31
plus 11
purpose, 1
pointers 5
p3.c, 1
other? 1
opposite, 1
paging). 1
ponder: 1
printf("returned 4
page? 1
peaches. 1
ordering. 2
put() 4
origin 2
movl 28
policies, 7
packaged 2
others, 4
optimal) 1
painful. 1
power-of-two-sized 1
privileged; 2
per 57
processors 16
pages, 26
ory. 1
must 152
ms. 5
poorly? 1
otherwise). 1
orders 2
organize 1
out). 1
pro-cessor) 1
puzzle 2
perceived 3
producers, 1
paging-linear-translate.py, 1
ourselves 3
n; 1
multiple-queue 1
nanoseconds. 3
pair 21
powerful. 3
outcomes 1
output 36
output. 2
queue), 1
perfect. 2
production, 1
multiprocessors 5
positivity 1
nears 2
parameter; 2
prerequisite 1
process). 2
overall, 1
overcome? 1
queue_add(m->q, 4
overheads. 4
pages 195
perform, 1
multiprogramming 8
postulates 1
networks, 1
paranoid. 1
next: 9
processes? 3
overheads 14
overzealous 1
races, 4
productive. 1
pals 1
performance), 1
mutex; 6
pretend 5
park. 2
no, 1
powerful 21
prac-tice, 1
overlays, 1
out 181
pairs. 1
own; 3
professor 2
randomness 6
parameters, 5
performant) 2
mutex_unlock 2
preventing 3
processes” 5
node_t 24
produced 2
particularly 27
overly 3
outrage! 1
ownership 1
parallel 6
program; 3
rare 2
part) 1
person 3
myarg_t; 4
previously 3
pre-WWII 1
non-computer-types 1
prefer 2
preferring 1
presents 7
presumably 4
page-directory 5
parameter, 4
processing. 1
programming 7
rate. 3
phenomenon 1
passed 18
n 4
patch 5
professors 3
partner 1
profilers 2
p1 8
priority 61
presumes 1
park(). 2
painful 7
processor; 5
progress. 3
re3 1
non-cooperative 2
program. 46
paths 4
programs; 3
over, 1
passed, 1
program’s 9
problematic 2
prevent 8
passion 1
park() 4
primary 9
prohibitive. 3
read. 6
non-preemptive 2
nearly-infinite 1
peach? 1
pick 15
packed 4
p4.output. 1
patent 1
projects, 1
pattern. 2
producing 1
per-CPU 5
principle. 1
passes 5
project, 2
patterns. 2
non-stop; 1
new->key 4
per-futex 2
pieces. 1
packet 3
page(s) 1
problems. 11
promote 1
path 8
performance: 4
printf() 1
readability 1
protection, 2
peach. 6
new_head->value; 2
performance-minded 2
normal 11
placed. 1
pageable 1
page; 5
paged 1
performance. 35
parameter 6
pays 1
performs. 2
prioritizes 1
readied, 1
ps 2
programs 85
percentages. 1
nonconcurrent 1
notably 5
normally 2
pain 1
notice, 3
proceed 6
performed, 2
part: 4
peach, 3
permanently-valid 1
privileged) 2
question; 1
readily 5
properly. 1
perfection 1
pleases: 1
notes 5
proverbial 1
now: 1
physically-indexed 1
processes; 7
patterns 4
processes’ 1
pauses 1
processes”, 2
paper 85
parent. 4
properties. 1
perhaps, 1
policies? 1
now), 1
pthread_mutex_trylock(pthread_mutex_t 2
nptl 4
problems 55
peanut 1
pioneering 6
permissions 1
queue. 12
peach 4
produce 9
reading 21
produced, 1
proportions, 1
periodic 1
practice, 1
null-pointer 2
number), 1
ptr 16
penalty 2
proc 5
place; 1
pesky 1
queue_t; 2
people, 1
past 6
ready), 2
producer. 2
reality 7
periodically. 1
pressure. 2
null. 2
pulled 1
numerous 12
q->tail 4
query 1
players 1
picture 5
queues; 1
percent 6
patches 2
provided. 2
paying 3
pseudocode 7
reasonable. 3
philosophy 1
prevents 3
performance; 5
of) 3
proc_state 2
question. 7
questioning 1
plenty 3
re-reads 1
pmap. 1
re-referenced, 1
pthread_mutex_init(&c->llock[i], 2
policy, 12
pipe() 2
performance”, 1
played 1
on! 2
professor? 1
on-chip 4
pointer? 1
number 198
of 3668
queues. 2
performance? 3
penalize 1
reach 2
recall). 1
possible; 2
primitive. 6
pthread_t 14
permissible. 1
pointer. 3
pthreads 8
professors, 1
on-going 4
program: 6
offers 1
raised. 1
offset. 6
person! 1
policy 50
recognized 1
reader 7
possibly-failing 2
primitives; 2
perspectives 1
printf("(%d) 2
pop 1
purchase 1
objectives; 1
prompt 4
performance” 1
prone. 2
omniscient, 1
one, 26
periodically 9
poor 10
recommend 2
ready. 1
posterity) 2
process), 3
peterson.s, 2
printf("Final 1
popular, 1
printf("Initial 1
observes 2
randomly 4
protection; 2
ranging 1
on-disk 5
open, 1
permit 1
possess 1
recursion 1
realloc() 4
recycles 1
process-run.py, 1
phase, 4
purify, 2
once 60
private, 3
occurs)! 2
perspective. 2
protocol 3
operational 1
persistence, 1
rather 29
persistent 4
practice! 1
receive 11
reduced. 2
produced. 1
phones 3
popular-sized 1
ones 8
occurs: 1
privilege 8
putting 17
picture, 5
other, 5
providing 16
potential 12
read/write 1
persistently; 1
precisely, 1
recommended 1
register), 1
photos 1
off. 1
online 6
possible. 14
opens 4
producer 26
quantum 5
pid; 1
others) 2
pthread_mutex_lock(&c->glock); 4
powerful, 2
readers 1
phase 3
precision 2
referenced 6
register-level 1
phrase... 1
omit 2
probabilistic 1
pouvoir”, 1
opportunities 1
professor! 2
places 6
out"); 1
questions 13
pthread_mutex_lock(&q->tail_lock); 2
powers 1
reading, 1
physics. 1
preferably 2
regions, 2
relaxing 1
procedure. 1
on, 11
pragmatists 1
optimization. 1
profit 1
platforms 2
point. 7
pointer). 2
pointing 2
points; 1
physical 236
policies 35
ptr, 3
pre-specified 2
reality, 1
pigs. 1
prematurely-optimized 1
race 28
register. 4
once); 1
precisely? 1
releasing 16
option, 2
piena 1
program, 58
outcomes? 4
pollutes 1
python 1
pragmatic 1
quest 3
predates 1
pipes 4
preserve 1
randomization, 1
registers; 4
one). 1
primitives 15
reliability 2
ordered 4
pipes, 2
remaining 13
overcome. 2
precisely 2
reason. 3
processes 107
question: 7
preparing 1
place, 9
range. 1
predictors 1
regs(A) 3
preemption, 2
printf("main: 8
ordering; 1
proofing 1
player 1
remarkably 1
preempts 1
pointer, 10
reasoning 1
producers 3
receives 4
platform, 1
re-awaken 1
open("/tmp/file", 1
re-enable 2
preferred 2
problem; 2
pretty 26
organization 2
pri- 1
renewed 1
overhead 12
previously. 2
queues: 1
points 15
program? 6
recently 6
ple 1
relatively-slow 1
reaches 2
prefetching 2
problematic: 1
pros 1
problem”, 1
pthread_mutex_lock(&L->lock); 8
publicized) 1
pursue 1
oversubscribed, 1
original 19
printf(), 1
quickly 21
programmer; 4
recollections 1
recover 1
pleasure 1
react, 1
prepare 1
presenting 1
primitives, 3
processor, 13
reporting 2
operating 151
quantum) 1
p. 1
others 14
randomly-generated 3
possible, 14
refers? 1
programs, 16
prints 41
read-only 1
released. 6
preserves 1
priorities. 1
program-debug 1
proc-struct(A) 1
option 1
requests. 6
question, 1
our-selves 1
regain 1
power 8
rather, 11
pages. 28
project 4
priority. 8
read-write). 1
primer 1
relocated 6
pointer 55
renders 1
poorly, 1
process) 6
reside. 1
process-run.py 1
resources? 1
registers. 3
precautions 2
ratios 1
preempt 2
properties: 1
proactively. 1
read? 2
printf("%s: 4
program4 1
out! 1
repair 3
protection 22
queue? 1
out.” 1
processed 2
rest, 1
remaining, 1
paid 1
re-check 3
preemptive, 1
problem? 2
present, 2
prio_to_weight[40] 1
problems, 12
popular. 1
programmer 12
replacements 2
pthread_mutex_init(&L->lock, 4
processing; 1
overall 9
professionals 3
overlap, 1
remedy 2
parameters: 1
reacts 1
rearrangement 1
overcoming 2
prevented 5
problem” 1
positively) 3
proportion 5
representation 1
problem. 26
pthread_mutex_lock(&c->llock[cpu]); 2
resuming 1
queues, 12
overlays 1
rabbit 1
readers, 1
park 6
reasons 6
overlap 6
proceeding 1
previous 19
possibilities. 1
prove 5
reset 3
program 321
pthread_mutex_lock(pthread_mutex_t 2
return-tolibc 1
owns. 1
returning, 2
raise 10
paths. 2
overly-large 1
reboot 6
processes) 1
process 403
reside). 1
programmer, 1
possible 31
pthread_mutex_unlock(&L->lock); 12
realization 1
p4.c 2
provides 30
right, 3
provisions 1
pattern 5
overwhelm 1
reclaiming 1
previously; 2
resource; 1
processors, 9
projects. 1
reply: 1
processor 28
powerhouse 1
questions, 3
really) 2
p5 5
raised, 2
rolls. 1
pseudo-random. 1
pause 2
p3.c), 1
redirected 2
restricts 1
proofs” 1
print 25
producer/consumer 9
proper 14
producer, 2
preemptive 2
quoting 1
reason: 3
page-frame 1
pure 2
percentage 5
roughly 24
reduced-instruction 1
retain 1
page, 28
representing 2
printf("%s\n", 3
real 53
producer; 1
properties; 1
programs5 1
recently, 1
r-x 5
pages), 1
purpose. 2
present 36
perfectly 2
printf("child\n"); 3
returns 61
page-not-present 1
requiring 11
page-sized 4
product. 1
reason, 8
proponents 1
reclaimed, 1
r-x-rw--r-x-r-x-r-x-r-x-rw--- 1
pagetable 4
pushl 1
run), 2
put(int 2
printf("hello 3
performance, 14
revolutionized 1
printf("hello, 6
prompt> 37
resource. 2
protocol. 4
professor, 1
recall1 1
proportion, 1
records 1
panacea, 1
raises 8
reduces 9
re-referenced 2
printf("parent: 6
rightly 2
puts 19
priority; 1
performs 21
pages) 3
resources; 2
protocols; 1
program). 2
recently. 2
provides, 1
recourse: 2
paradigm 1
rvalue; 2
reference, 2
reac-quiring 1
priorityadjustment 1
rise 2
queue). 5
period; 1
pthread 57
respect 2
problem, 24
pthread_mutex_init(&lock, 2
redirection, 1
programmers 13
question 27
parent; 1
region). 1
rx 4
read-only, 2
really. 1
routed 3
refer 27
pal, 2
pipe 8
responsible 6
pthread_mutex_unlock(&lock); 2
programming, 2
queue_t 2
part. 1
relocation; 1
says: 1
probability 2
rearrange 2
quote. 4
redirect 2
routine1, 1
referring 2
papers. 4
process. 69
parallel, 2
processing 4
promise 1
published 4
queues 6
remain? 1
scales? 2
passing 12
ran; 1
reasons, 6
references 28
placing 7
restored. 1
parameterize 1
region 25
run. 22
prone; 2
push 2
process’s 18
q->tail->next 2
scheduler; 2
queue; 5
random; 1
reassurance; 1
region. 1
plans 1
problem 121
retains 1
parent? 1
register? 2
runs; 3
proportionality 1
registers, 10
programmers. 2
patience, 1
scope 2
randomizes 1
quickly. 5
reboot, 1
quite 114
regular 2
pmap 5
processes: 4
path, 2
retry 6
rv; 2
remains, 1
proportions 1
regs(B) 3
programming: 2
peaches, 1
releases 14
randomly-accessed. 1
radical 2
received 3
quote: 2
relinquishing 2
policy. 4
processors. 3
patience 2
rich 2
rvals; 2
remembering. 2
provably 1
pronounced 1
scorned, 1
peek 1
reliably 3
properly 15
randomness. 1
properties 8
refers 9
remembers 2
product 1
portions 7
peaches 2
robin, 2
rvalue); 2
repeatedly, 3
proves 1
pending 1
second. 5
random-access 1
relies 1
ranges 1
range; 1
remove_min(queue); 1
provided 20
regions 11
professor. 2
preserved. 2
perfect 7
replace? 3
purify 1
satisfy 9
section), 2
rate 27
relinquish 5
rc; 4
rate, 3
people 28
removed 6
pthread_mutex_init(&q->head_lock, 2
relaxation 1
program) 1
previously, 1
routine 60
replacement; 1
performing 14
question). 1
re-referencing 1
request; 1
saved 11
seem 7
rdtsc 3
re-create 1
persistence 1
pthread_mutex_lock(&lock); 2
requested 8
reload 1
programmer), 1
printf("%d\n", 7
running), 1
priority, 7
permission 1
rage 3
reached 1
requirements 1
sbrk() 1
segmentation, 4
readable 1
re-duces 1
picking 6
researchers/engineers, 1
pieces, 5
pthread_mutex_t 22
programming. 5
report? 4
priority-based 1
persists, 1
runs. 11
ran. 1
researcher 2
scenarios, 2
real, 2
scheduler); 2
re-initialized. 1
relocation.py 1
responsiveness; 1
piece” 1
pthread_mutex_unlock(&q->head_lock); 4
progress, 1
pull 2
privacy 1
represents 4
personally 2
rw- 1
random. 1
resource, 4
send 13
realistic 3
school; 1
sense, 6
remainder 1
pioneers 4
read 91
results 17
property, 2
queue_init(m->q); 2
problematic, 1
requests? 2
physical, 1
sad. 3
randomization 3
rarely 1
scripting 1
sensitive 1
realized 8
restore 17
removing 8
restored, 1
retry, 1
queuingbased 1
resumes 5
quick 4
protect 11
place 46
read, 7
pieces 19
rarely-taken 2
sent 3
rearranging 1
realize 5
section. 34
request. 7
returned) 2
problems: 2
require. 1
reuse 1
quickly; 3
ps. 1
placed, 1
reap 1
pipe; 1
rates 1
sequential” 1
reasonably 3
same 145
reasonable 9
saying; 1
sections; 4
review 2
security; 2
requirement: 2
seemed 1
rage. 1
pthread_mutex_lock(mutex); 2
placement, 1
re-accessed 1
rebooted, 1
reason 32
requesting 1
placed 24
serious 10
reduced 5
scale. 1
proceeding. 1
reused, 1
rewrite 8
research. 1
raising 3
ptr; 2
poorly 3
react 1
reclaims 1
rechecks 2
requests; 1
placement 1
servers 1
references: 1
segment 56
process? 4
semantics, 5
right); 2
resides, 1
ran, 1
purely 1
possibly 1
reader, 1
references. 2
recommending 2
player, 1
researchers 8
plays 2
regardless 2
root 3
processor. 9
sentence. 2
road, 1
resources 6
random, 1
purposes 2
potentially 7
reg/PC 1
reads 10
recorded 3
region, 5
resizing, 2
plural) 2
scheduling 102
register). 1
routine. 2
programmed 1
separa-tion 1
rogue 1
respectively, 1
randomized 2
quantify 3
predate 1
servicing 5
realizes 3
recourse 1
regions) 1
resources, 4
policy) 1
restores 4
relative 3
proportionally 1
rudimentary 4
relax 10
respond 1
role 11
range 7
premature 2
set. 2
queue, 17
recall, 1
recursive 1
register; 2
scientist 1
relates 3
restricted. 1
protocol, 1
sequence: 1
relinquishes 1
response-time 1
run? 8
roused 2
rarely-used 1
premise 1
routine, 10
rechecking, 2
ran 15
redirection 2
pool? 1
scribble 2
release? 2
return-oriented 1
pthread.h 2
server, 1
relocation, 5
server-based 2
rarely. 2
runs, 21
rule: 2
record 6
presence 11
setting, 1
redoing 2
poorly-programmed) 1
se. 1
random 37
return-to-libc 1
rc, 3
pthread_cond_signal(pthread_cond_t 3
result, 12
rely 5
serviced. 2
read() 1
runtime 2
runnable; 2
preserving 1
severe 3
popularity 1
reduce 15
reference 57
returned. 2
reliable 6
search 20
re-acquires 4
pthread_cond_t 3
ret 1
setassociativity; 1
remain 8
reader: 2
safely 3
rw45 1
pressure, 2
sharing. 3
potentially-starving) 1
reference) 1
referenced, 1
returning) 2
second: 1
relocation 6
seconds). 1
pthread_create(pthread_t 2
remote 1
rears 1
return; 10
sake 5
same, 3
pretends 1
shouldn’t. 2
pressure 5
referencing 1
returnsfrom-trap, 1
share 36
re-energized 1
she’ll 2
referred 27
sections. 4
recent, 1
purpose 9
replace 9
reverts 1
satisfaction, 1
saved? 2
primitive, 2
showed 4
primarily 3
sidebar 2
right) 1
repeats, 1
re-use 1
simple) 1
regained 2
security. 1
reclaim 3
pushing 2
replacement, 3
right.” 1
scale, 1
printf("this 1
scenario 4
regards 2
primitive 9
signal, 1
room: 1
replaced 2
reaching 1
region; 1
recursively 1
simplicity, 16
put(i); 5
rip 1
segments 22
report 9
saves 9
priori 3
scheduled3 1
scheduler), 1
requests 28
signal/wakeup 1
routine1 1
read), 1
routines. 1
reduction 2
simulation. 1
registers 48
q->head 4
reliability. 2
root). 1
selection 1
say), 2
priorities; 1
sbrk 3
scheduling. 9
require? 1
signaling. 1
reserve 4
ready, 3
rules, 1
sits 3
replacement 30
reference. 8
queue) 1
relocating 1
routine), 4
semaphores” 1
principles 5
proceeds 4
scale: 1
school, 2
relaxed: 1
receive. 1
reside 11
processes. 22
situations 3
repository 1
refined 5
quote 7
represent 5
rules 6
semi-nal 1
priority). 1
sense?) 1
scourge, 2
relevant. 2
responsibility, 1
runaway 1
recent 16
sizeof(PDE)) 1
produces 7
required? 2
refuses 1
race): 2
request? 1
running: 1
scary 1
probabilistically 2
se, 2
separation 5
responsive. 1
relocate 5
runs? 2
recommended. 1
professional 1
sizeof(PTE)) 7
region) 1
simple 196
races 4
requires 25
requests, 2
reserved 6
scenario. 4
proc-struct(B) 1
searching 4
servers, 2
procedure 12
rvals->x, 2
remains 11
recursion). 2
sketch/review 1
reducing 6
registers), 2
simpler. 1
reject 4
runs...) 1
required). 1
resided 1
scheduler.py, 1
seconds), 3
rest. 2
setpark(); 2
process: 2
rw59 1
remedied 2
progress 8
sleeping, 3
refer- 1
re-acquire 1
simply, 4
relate 1
rvals->x 2
research; 1
responsibility 6
section? 4
returning. 1
schedulers 14
sharing: 1
processing, 3
sane 2
property 10
remember 20
regard, 2
slices 10
register, 6
simultaneously, 1
relegated 2
sampling 2
reside, 1
responsibility!” 1
sections, 2
resource 14
shells; 1
scheduling, 15
saying, 1
proportional-share, 1
remind 1
programs. 25
readable. 1
slow. 3
registers) 2
sizes, 2
remains. 1
satisfies 1
result! 2
revenge 1
results. 6
restarts 1
shrink). 1
school: 2
proliferation; 1
prot 8
scalable 15
readonly 1
repeatedly 15
slowly) 1
regs 3
skimmed 1
repeat, 1
savings 9
security, 1
right. 5
restored 4
similar), 1
scientist, 1
promotes 2
protection. 3
scenarios 2
reads” 1
return 169
sched 7
skips 1
repeatedly. 2
related 18
see). 1
running; 3
saw 12
seeds 11
similarly 3
seamlessly 1
proofs 1
protective 1
repeating 1
protocols 2
small: 3
replaces 7
schedule: 2
slower. 3
repeating. 1
restricted? 1
rvals->y 2
relatively 16
say. 2
segments. 3
seasoned 1
properly, 1
simple, 9
reasonably. 1
pthread_attr_t 2
root, 1
snippet 9
reports 2
scream, 2
reproduced 1
slowly 12
resulted 2
satisfactory 1
saying 4
semaphore 1
release 23
secretary 2
proportional 3
simplified 2
relevant 13
pthread_cond_wait(pthread_cond_t 3
routinecalling 1
solidify 1
required. 5
second; 1
slumber 2
require 10
return-fromtrap 3
satisfied 1
sbrk) 1
services 1
security: 1
proportional-share 6
size; 6
removes 1
reboots 1
pthread_create(&p, 2
rude 1
solve: 1
resides 9
seconds!). 2
small! 1
secure 3
sockets. 2
say? 1
set-it-to-1 2
scales 6
segment? 1
slowly, 4
repeat 1
referenced; 1
pthread_mutex_init(&c->glock, 2
run; 1
sometime 1
scheduler, 20
required, 3
returns), 1
see: 2
provide 65
software? 1
says, 1
shell, 5
segments, 5
software; 1
replete 1
references, 1
represented 3
runnable) 1
resort 1
space). 3
schedulers) 1
reused 1
semantics 8
research 18
provided, 2
something, 2
scaling; 2
ship 1
services. 1
someone 3
pthread_mutex_init(&q->tail_lock, 2
register) 2
running? 4
responsabilit 1
required 15
spaceshared 1
second-chance 1
revert 1
semaphores 1
research.microsoft.com/ 2
response 31
sounds. 1
scenarios), 1
shoppers 1
several 1
shown), 1
pthread_mutex_unlock(&c->glock); 4
runtime, 2
reset. 2
sparsely 1
seconds, 2
ridiculously 1
sequence. 2
pthread_create(..., 4
sometimes 73
resides. 3
scheduled; 1
resize; 2
shells). 1
pthread_mutex_unlock(&q->tail_lock); 2
result 30
rvals->y); 2
space. 45
resistance 1
spear-headed 1
secretly 3
rights). 1
server 11
somewhere). 1
relatively-short 1
screen, 1
respectively. 2
shipping 2
shows 94
put 41
publishing 2
retrospective 3
sage 1
sparked 3
says 2
see. 4
round 2
setaffinity() 1
specify 10
sooner 1
rele-vant 1
restoring 5
shrinks 1
q->head; 2
result. 11
resource) 2
sparse, 1
simple: 39
sbrk. 1
seeing 1
rule 4
speculation, 2
sorting 1
relocated; 1
queue 55
second 78
return? 2
similarly, 3
question! 1
results? 2
spawn() 1
simulate 3
scenario, 3
single-queue 4
schedulers. 5
shared 67
spring 1
space-management 1
seen 31
relocation. 2
rapidly 1
see? 6
remove 10
returns, 7
questions. 3
species. 1
resume 8
resulting 24
spend 10
six 3
schedules 4
shells, 1
started, 1
space: 2
segfault 1
rate) 2
simplicity; 2
segmentation. 3
replacement. 4
reveal 1
queued 1
resumed, 1
running). 2
reusing 1
spent 7
screen 1
size) 5
short). 1
stash 1
spaces). 1
segmentation.” 1
since 7
segregated 3
specific 21
spin, 2
segmented 4
revisited 1
quick, 1
spin 79
richer 1
section; 2
sleep; 4
statement. 2
shorter 6
sequential 8
runs 83
self)) 2
rid 1
series 9
replies: 1
qu’une 1
spin-waiting 4
seeds, 2
right? 8
slides 1
spinning 27
step). 1
shuts 1
rv 4
retaining 3
roam 1
seriously, 3
sense. 11
set” 2
race. 4
rc 13
spurious 2
sees 4
slow? 1
room 17
spot 2
storage. 1
signaled 1
sad 4
returns. 3
requested, 2
robust 9
shooting 1
sequences 5
ravages 1
round-robin 11
rc_wait, 2
run: 3
segments: 1
small/random; 2
rosy 1
strategy 6
running. 23
sanity 1
revolutionary. 1
resident 2
shown, 2
single 203
simplest: 2
stand 1
stack 79
store-conditional, 4
select 4
snuck 1
rotational 1
software) 2
strdup() 1
rwrw- 1
string, 2
risen 2
responds 2
running, 30
sitting 4
simplifying 3
re-checks 4
stack”! 1
storeconditional) 1
services, 1
similarity 1
solution). 1
stop 21
short 29
rw— 2
structures? 1
ruins 2
strung 1
responsive 1
runtimei 1
size). 2
reaction 2
stream. 2
simplicity 7
storing 1
set 146
silently, 2
safe 6
rc_wait 3
student, 3
safe. 2
sketch 3
rest 18
streaming 2
run, 24
single-CPU 2
straightforward; 1
set-top 1
run-time 7
re-place 1
simulator 16
succeeded. 1
save 27
said, 10
skip-ping 1
restricting 1
size 124
strings 1
singlequeue 1
strdup("p3.c"); 1
ready 33
read(), 1
real-world 2
success: 2
scalability. 1
sharing 30
shifting 1
short, 3
shortest 2
shouldn’t 5
shutdown 1
side). 2
signal. 3
really 52
results, 4
retries 4
structure) 1
say 29
stream: 2
realizing 1
size, 12
single-threaded 4
sizeof(int); 1
signal?? 1
sketched 1
reasons. 10
return. 1
scaling, 1
stuck, 1
stuck 16
students 3
returning 27
succeed. 3
sit 6
slicek 1
reboot. 1
signaling 17
scenes, 2
subset 3
really, 4
scaling. 1
scheduled. 2
skip 5
such 274
success! 4
slight 2
recency 1
situation 9
signals; 1
substantial, 2
running 227
red-black 4
schedule 14
slab 5
sleep. 8
sudden 1
suite 1
slightly; 1
recognizes 1
sixteen 1
simpler 6
surprising 7
redirects 1
rwx 4
sleep) 1
some 505
scheduler 110
sat 2
rewrite, 2
scheduler. 10
sleeping 5
supposed 4
sure; 1
slower? 1
reduction, 1
sizeof(int)); 2
right 42
switches, 2
reflect 4
safer 2
sleep-ing. 1
soon-to-be-exec’d 1
searched 1
saves/restores 1
scheduler’s 1
sleeping/waking 2
susceptible 3
sophisticated 13
sneaky 2
refine 3
simplicity), 1
skills. 2
safe? 2
swtch(struct 1
slogan. 1
seconds 9
symbol 3
seconds. 3
slice). 1
swap? 1
switch() 3
sloppy 4
register 75
regains 3
relaxed 2
remains: 2
scare 1
soup.” 1
saving 6
scheduler? 5
seed. 1
system! 2
secretary; 1
slice 36
said 43
swtch: 1
small. 1
switches 14
simulator, 1
system), 3
remember: 1
released 10
slot 7
sources 6
scale 4
schedulers, 1
seeds; 1
system1 1
satisfying 2
symbiotic 1
software 17
segment, 14
slightly 19
table2 1
smart 13
rent 1
remainder. 1
systems. 64
system. 57
scans 1
scorned 1
scalability 2
sizes. 3
sentence: 1
solution. 8
slow; 2
tables? 1
so), 1
replacement) 1
replacing 3
small) 1
specific. 1
t(A) 1
systems; 9
schemes 5
school 2
scaling 2
sleeps 4
solved. 1
service. 3
see 272
tail 5
software, 4
reproduce 1
reproduce, 1
system’s 3
request, 10
table. 26
science. 2
scanning 3
somewhere, 1
small). 3
slice, 7
seemingly 12
talking 5
software-based 1
sets 27
smaller 14
shape. 1
request 35
requester), 1
tables; 1
scratch 3
soon, 1
scheduled 11
slower 6
task). 2
seems 12
solution: 1
table; 5
snapshot 1
specifically, 13
research, 4
reside) 1
targets, 1
sorry, 1
second, 6
scheduling; 4
smaller, 1
sections 6
so 197
screen. 3
solve. 1
security 21
so. 15
speeds 4
resources. 5
residing 2
taken 16
tasks 2
sorts 9
scheme, 1
technology. 1
solutions, 3
tens 2
searches 3
segment: 10
seek 2
software), 1
space; 11
speedup. 1
restricted 7
restart 5
takes; 1
scientific 1
solving 4
space? 6
solves 7
termination 4
secondchance 1
technique 29
segmentation? 1
segment), 3
spawning 1
solutions 11
spinning. 2
restrictions 1
rethink 1
scoff 1
spaces, 5
somebody 5
something. 2
return-from-trap 17
test-and-set! 1
see! 2
thank 2
segmentation” 1
sending 1
speculation 2
sense: 2
result: 2
scratched 2
serves 6
space” 1
task 16
somehow 6
teaching 1
return-to-libc. 1
test-and-set.s 2
segment; 4
there. 6
sends 3
should 274
some, 2
sploitfun.wordpress.com/ 1
stack. 17
second-level 3
set, 3
returned 15
soon-to-be-executing 4
specifies 5
sometimes, 2
tests 5
returned, 2
there’s 1
them, 20
sense? 1
spell 1
showing 8
sprawling 1
segmentation 26
stage 3
severe. 1
returning; 1
section, 24
sounds 6
spectreattack.com 1
sounded 1
spinning), 2
rewrites 1
thing, 6
then; 1
sets. 2
spin-lock 2
setup, 2
standpoint 1
shown 35
sharing, 3
right; 1
segment. 8
shell 12
segmenting 1
space-efficient, 1
stack), 2
right). 2
starvation 3
therein; 2
sptr. 1
stack: 3
short-lived, 1
should. 1
show, 1
signal(). 1
signals, 2
simplify 1
simulating 1
sitting; 1
size=100); 1
sizeof(), 1
sizeof(x)); 2
slowdown 2
snippet: 3
snooping 1
so; 2
solution 44
solved 2
somewhere. 3
soon. 1
sorry. 1
sounds! 1
source, 1
space! 2
space1 1
spaces. 7
specialized 4
specifying, 1
spends 1
spins 11
space 278
right”, 1
sense 26
text. 1
shorter! 2
segments; 1
speeds. 1
thinking: 2
spinning, 2
thinks), 1
stages 1
this. 4
standpoint, 1
shudder 1
splits. 1
states 15
special; 1
sensed, 2
them), 2
shortest, 1
segment’s 1
they 149
road” 1
stashes 1
rough 3
thoughtful, 1
stack, 18
starve; 1
started 11
signal() 4
stack). 4
status 5
specified 8
stays 4
shrink) 1
stopping 4
sibling 1
routines 41
similarly-named 2
routines, 5
thoughts 5
simple. 10
states, 1
simpler, 2
stored? 1
stores 16
thing 38
setting 15
theme 6
spin-wait 10
senses 1
there; 5
state: 2
run-and-yield 2
state1 1
starvation, 1
thread. 20
simulated 1
significant 4
stack-smashing 1
string) 2
think, 2
share; 1
strange 8
split 9
serve, 1
thereby 1
statistics 4
rw 6
service 11
stealing 1
threads; 2
simulations 4
similar. 2
stands 1
shift 1
though; 4
structures, 13
strcpy(dst, 4
src); 3
step? 1
stack-allocated 2
sad! 1
serviced, 1
stops. 1
slip 1
thread’s 14
single-processor 5
starts, 3
short-circuiting 2
thoughtful 1
subject 4
stride) 1
states. 1
stronger 2
those 84
start. 1
say, 5
settle 1
store-conditional) 1
slower, 1
threshold) 2
site: 2
short-running 4
threads? 4
subsequently, 1
stopped, 1
state, 13
statically-initialized 1
stronghold 1
scales. 1
stronglytyped, 1
thought 17
straightforward, 2
starting 14
slowly. 2
time). 3
size); 2
run 374
short. 3
three-queue 1
scalable. 5
statistics). 1
straightforward 9
step-by-step 2
short-lived 2
scientists 4
thr_exit(); 1
strdup("p4.c"); 1
starve). 1
softwaremanaged 1
tmp->next; 2
skill 2
shortcomings. 1
substituted 1
scan 5
time; 16
stop, 1
strangest 1
scream. 1
stride, 1
thread; 7
structures 59
state; 2
solely 1
too4 1
slices, 2
show 24
store 24
shot 2
subsystems. 1
scenarios. 1
timespec 2
store), 3
strategies 8
see, 15
threadID. 2
stuff, 1
string 12
stems 1
solution; 1
topmost 7
smaller? 1
sign 3
str); 1
schedule(curr); 1
successful 5
strcpy(dest_buffer, 1
tool, 6
streams, 1
signal 28
segmentation; 2
ticket.s. 2
subsequently 4
tickets, 4
step 2
solve? 1
trade-off. 1
software4 1
streams. 1
signals 13
scheduling? 1
sufficient 2
scheme 6
trace; 1
stretching 1
seminal 1
student 3
subtleties 2
sense; 5
store-conditional. 3
sort 6
transac-tions 1
some_function(char 1
strive 5
strdup 1
strong 2
script 2
transcript 1
simply 128
similar 45
tidbits 2
study. 2
time-shared 2
stride 17
strdup("wc"); 2
sometimes) 2
transaction 4
sequence 24
summarizes 1
strengths 2
transforming 3
simulator. 2
similarly; 2
space, 50
structure, 24
time-slicing. 1
struction 1
studying 9
subverted 1
stream 7
somewhere 4
transfers. 1
section 55
served 3
supports 5
strike 1
transistors. 1
simultaneously 11
spaces) 1
simplest 13
style, 1
timeline, 1
structure: 2
stuff? 1
success; 1
structure; 2
tremendous 1
sub-sequent 1
soon 25
setpark(). 2
surrounding 2
strongly 5
translation; 1
sincerely 1
sparc/ 2
simplified; 1
sub-microsecond 1
subproblem 1
success. 3
survive 2
segmentation). 2
tricky 10
sorry 1
two, 3
sets: 2
survive, 1
transparency 1
single, 1
situation. 2
species, 1
single-entry 2
submitted, 1
succeeds, 2
super-linear 1
swapoff. 1
segmentation.py 5
substitute 3
source. 1
shaded 1
switch. 4
traps 5
typical 26
structures. 22
sizes 8
sinister 1
substrate 1
specifically 6
surface. 1
suffer 8
self; 2
swapped 12
succeed 2
shmget() 1
tricks: 1
short) 5
spaces 20
switching 17
strut 2
sleeping). 1
situations. 1
summarize 5
specified, 1
surprise: 1
semantics. 2
suggested 8
switching); 1
sufficient, 1
symbol. 1
simultaneous 1
support? 4
switching, 2
slice. 1
synchronize 2
slices; 2
slowed 1
sizeof() 7
speed-of-light 1
surprisingly, 6
sensible 4
superpages, 1
unanswered: 1
spectrum, 1
speeding 2
system? 4
studied 5
synchronized 10
sub-job 3
supply 1
small-scale 1
sizeof(PDE)). 1
spending 3
slots, 3
sentence 1
support. 9
slow, 8
understanding 19
separate 17
systems, 49
undo 4
subjunctive 1
system; 8
two 241
t, 2
spin-waiting. 2
suspect 1
supporting 1
speeds; 1
suppose, 2
six-level 1
system). 4
system” 1
tables! 1
unimaginatively 1
talk 10
smarter 1
two-fold. 1
tables), 1
spin. 4
swath 1
support 110
snatch 1
splintering 1
surprise. 1
sequence, 8
size. 7
t 10
tasked 1
ubiquitous 2
targeted 1
splitting: 1
systems? 2
sure. 2
snippet. 1
splits 1
so? 5
subsections 1
serve 2
surprisingly 7
sizes; 2
so, 37
technology 7
ultimately 1
tell? 2
sponse 1
t(B) 1
table? 3
updates 33
table, 26
soon-to-be-running 1
spread 9
subsystems 1
serviced 4
suspicion. 2
solutions. 4
understand2 1
terminal 4
tension 3
staring 1
surely) 1
sleep 30
surprise 2
tables, 8
tables) 2
sorted 1
spuriously 2
suc-cessfully 1
stack) 7
starve: 1
somehow, 1
unexpectedly 1
terminates 1
stateful 2
us. 4
test 7
swap 34
sloth” 1
systems), 1
table), 1
tail_lock; 2
suggest 3
supervisor 1
source 23
state. 10
unless 1
steps 3
stateless 1
usability 1
textbook 1
switched 2
talents, 1
that? 7
target 6
taken: 2
shade 1
tapes 1
space), 4
testand-set 1
stipulated 1
unlock. 4
small 61
statements 1
something 132
switching; 1
use) 10
themselves 4
tackle 4
tcsh), 1
surprising, 1
shared. 1
task: 1
sparsely-used 2
text). 2
stitch 1
unmapped 1
stopped 2
storeconditional. 1
syscall 3
useful2 1
t). 2
tables 49
take? 2
team 2
takes, 1
shortly 1
taught?! 2
textbook, 1
terminated 2
unsurprisingly, 1
upside 1
special 22
stored. 1
static 21
thesis 1
using 140
tailor 1
surround 2
tasks. 1
ten 7
side 4
snooping, 1
their 91
sources: 1
usable. 2
specification 1
strange; 1
stdlib.h 1
strategy, 2
usual, 3
technical 3
suspend 2
tech 1
terminate. 3
simplicity. 3
terms, 3
so). 1
test-and-set. 4
them. 16
used) 1
thorough 2
streams 2
step, 5
speed 12
utilize 5
tend 7
technique. 1
terribly 1
testand-set! 1
tells 11
simulation 7
software. 2
them) 1
themselves, 1
user; 3
thread-local 2
switch 62
src) 1
structure. 16
v 2
terminated. 1
space-usage 1
that, 11
still 59
site 1
solid-state 1
temporal 7
themselves). 1
solution, 10
usual 2
thread-safe, 2
synchroniza-tions 1
stack; 3
structures; 2
valgrind? 1
terms 10
them? 3
synchronization 26
strategy), 2
terms) 1
size: 16
theory, 1
think. 2
there? 4
solve 20
studies. 1
then. 1
system.” 1
theory-types 2
sparse 7
stream, 2
terrific, 1
sizeof(node_t); 1
utilization. 1
thermodynamics 1
someday). 1
think) 1
thinking 23
standard 22
systems: 5
thus, 54
value) 13
therein. 5
strings. 1
theoretical 1
spatial 7
slabs 1
utilized 4
style. 1
somewhere... 1
subdirectory 2
three-quarters 1
standards/SPARCV9.pdf. 1
than 149
vantage 1
that: 3
starts 25
there, 2
stuff 8
therefore 2
v); 2
third, 2
sleep, 13
this? 5
state 73
tickets), 1
t. 2
themselves; 2
subsequent 24
ticket, 2
subsystem 4
splitting 3
therein), 2
src.opensolaris.org/source/xref/ 2
then, 16
things 46
thread? 2
stated, 2
time-slice 5
table: 3
variable 75
soon-to-be-faulted-in 1
subtract 1
sound 5
subtle 1
valid: 1
thing... 1
sleeping. 4
stance 1
think? 1
theory 4
statement, 1
timedlock 4
taken? 1
varies, 2
time! 2
suddenly 2
specialize 1
support; 4
varies 5
thing: 4
slice), 2
thinking! 1
threads, 38
thread), 2
stay 3
timer; 1
tasks, 1
vectors 1
tcsh 2
specifics 1
technique, 2
survived 1
victim. 1
start 58
thirty 1
slots 7
therein, 2
slow 15
thread” 1
storage, 2
tmp; 7
timer? 3
succeeds 3
spins, 2
technologies. 1
swapon 2
vmalloc, 1
starving 1
version 31
things. 7
three-level 1
slowly; 1
this, 32
threats, 1
small, 7
to) 1
timers, 2
super 2
splay 1
times. 7
switches. 1
states: 1
vruntime 10
store-conditional 7
threshold 11
three-instruction 3
through, 1
small-sized 1
smallest 5
sneaks 2
software-managed 5
soon-to-be-run 1
tickets 30
sptr 2
very 60
terminating 5
terminology) 1
tips 2
swoop 1
time. 66
timer, 4
this: 49
storeconditional 1
space) 4
sure 56
timeline 3
surprised. 2
vruntime, 1
want 50
thread, 48
tirelessly 2
too: 2
together. 5
times; 3
thousand, 1
spans 1
stacks 4
timeout 4
stored 15
w/ 2
system: 6
way) 1
threads) 1
stores. 1
tool. 1
tolerate 1
tip 2
too. 6
speculative 1
stale 1
stacks, 3
strategy. 1
starvation. 7
wait() 26
three, 3
strictly 2
throw 6
top) 1
thread!) 2
today, 4
traces. 2
times), 1
starting) 1
systems). 1
starved 1
was; 1
stringent 1
tragically 2
threads). 2
three: 1
track; 1
traditionally 1
starvation: 1
transferred 4
t; 2
wasted. 3
table). 3
transform 4
too; 1
structure 73
wc 11
studies 4
timing? 1
starve 2
steal 3
translations. 6
way), 1
structures: 2
transistors 2
taken, 5
systems 185
thinking? 1
weightB 1
throughput?) 1
took 16
sub-jobs, 1
tip: 1
stated 2
stood 1
trapped 2
wc, 3
stub 1
translations: 2
talks 1
sz; 1
which). 1
task, 5
tool? 1
succeeded, 2
third 18
totals 2
statement 3
though, 8
tread 1
websites 1
successful. 1
transparency2 1
thrown 1
winner). 1
winning 7
worked. 1
worker 6
working-set 1
worse: 2
wrap 2
wreak 1
thus 486
tools, 3
successfully, 1
tough 2
store, 2
store-conditional; 2
stolen 1
straightforward. 2
strategies. 1
trap), 1
ticket. 2
writes, 4
tickets; 1
such. 1
transformation 2
ticket 27
treat 4
threads 197
weird; 1
telling 1
successfully) 1
storage 12
table 175
strength: 1
traverse 1
topic. 1
wrote) 1
sum, 1
translated), 2
time), 4
treatment, 2
threshold. 2
times 40
test? 2
tree 15
thanked 1
straightforward: 6
tackled 2
stringing 1
tree, 4
total) 2
trend? 1
traffic. 1
translation-lookaside 1
timely 3
tick 1
tn 2
suffers 5
tricks 2
whatever 15
whose 8
that. 9
tail. 2
strlen(), 1
x-axis 1
sun.com/solaris/articles/atomic 2
true, 3
transparently 3
timing, 3
translation. 10
translations; 1
to? 2
tiny 21
summary 5
strict 1
why. 2
that’s 8
x86); 2
surprised 2
tune 1
switch? 2
trials. 1
takes 50
tricky: 1
struct 49
to! 1
together 12
tons 2
stride. 1
trap 52
willing 3
the?? 1
total 26
towards 3
tracing, 1
transfers, 1
system, 65
tick-by-tick 1
trick 3
techniques? 1
trouble 9
temporarily 5
stuck; 3
true 14
tempting 4
strings? 1
traversals 2
woke 1
term 15
systems) 4
try. 1
study, 3
trying 15
turns 37
truly 9
superuser 3
strong, 1
wonderful 11
translation), 2
tries 41
terminal, 1
time, 75
turning 9
studying. 1
too 85
unlikely 3
tweak 1
turnaround. 1
supports. 1
twice 5
traversal 3
timer-interrupt 1
table) 2
terrific 4
typing, 1
toolbars, 1
succeeded 4
type. 1
topics 5
surfing 1
worker, 2
type: 1
tried, 1
survey 16
times) 1
take, 3
test-and-set.s. 2
xchg 2
unblocked 2
then 227
unlock() 14
success, 5
typesetting 2
traces 3
unallocated 2
trade-off: 1
trigger 2
swaps 3
workloads 14
tmp->next 4
taken. 1
tests), 1
topic, 4
task. 7
there). 1
taste 2
technology-driven 1
uint 1
study 52
uncommon 2
subsystem: 1
turn; 4
switch, 8
undesirable) 2
total). 1
unsatisfying) 1
therein 1
successfully 5
works 54
y-axis? 1
world. 3
wreak, 1
transaction, 2
understandable 2
subtle: 2
two: 1
swpd 1
touches 2
tell 28
unsigned 2
unique 7
those, 1
suffering, 1
yields 5
undefined. 1
yourself! 3
translated 3
undertaken; 1
unbounded 1
system) 1
success 9
trace, 3
unfortunately, 14
trade-offs 5
unpark(threadID) 2
suffice 3
www.ajwm.net/amayer/papers/B5000.html. 2
understanding: 2
zeroing, 1
though 29
underpowered 1
translations 22
suffering 2
system-call 5
tennis 1
uniform, 1
unusable. 1
tradeoff 1
unqualified 1
suggests 2
x-axis, 2
suit 1
unfortunately 4
threads); 2
understand, 3
transparent 4
suggested. 1
there 250
text, 2
unused) 1
unlock 13
unusual 3
untimely 6
traditional 11
× 1
transition 6
sum 3
unified, 1
surprising? 2
ticket; 2
understanding. 1
unlucky) 1
suitable 2
thing. 2
taking 11
unused 14
x. 2
updated 8
’d’ 1
to 4068
translation, 15
valgrind 15
surprisingly!) 1
trap; 2
until 52
summarize, 1
things; 3
task; 3
update: 2
up? 3
upsides 1
together! 1
support, 16
told 2
too! 2
unimaginably 1
unit 7
unknown 1
unlock(&m) 1
top 32
touch 4
toughest 1
tracking 2
transfer. 1
translations! 1
trap, 3
treats 1
trees 4
triggers, 1
twice). 1
underly 1
undertake 1
unexpected. 2
units 1
unrealistic 2
unreasonably 1
tcsh, 2
’his/their 1
upper-half 1
tends 5
surface 3
x86 23
valid). 1
swapping, 1
trapframe 1
unlock(lock_t 10
update) 1
time 306
up. 7
treasure 1
“A”, 2
upwards. 1
testing 2
x86-64) 1
swapping 12
values). 2
switches; 1
unmodified, 1
trust 14
time-share 1
updating 13
timer. 1
trials, 1
tlb.c, 1
us, 2
thankfully, 1
zombie 2
switches? 1
to, 13
today. 6
today’s 2
unnecessary 1
turn) 2
variables. 13
thinking, 2
vice 1
update 54
“CPU-bound” 1
trickier. 1
switching) 1
trivial 2
swtch 1
useful 69
switching), 1
them 99
unpacking 2
— 131
upper 1
view, 1
turnaround 30
updated, 2
“Exterminator: 1
topic 18
use 317
used, 8
table! 1
useful2. 1
synchronizations 1
then? 2
unused, 1
up; 2
updated) 1
upon. 1
usage; 1
used? 1
useful, 11
user/supervisor 1
users. 1
think 66
those; 1
thr 7
thr_join() 3
thumb. 1
thus: 1
tight. 1
time? 9
uses 70
times, 10
urging 1
turned 2
uplifting! 1
upward 1
usage. 4
useful? 1
utility? 2
val 2
vastly 1
vector 1
vice-versa. 1
virtual, 1
virtualization. 4
totaltickets); 1
trouble. 3
virtualized 6
twenty 1
voo-doo 2
tables. 6
vruntimei 2
trace 24
utopian 1
to; 1
usable 2
together, 3
“Hmm... 1
virtual 253
’94. 1
type) 1
’Precise’), 2
system 363
valid 51
tandem 5
transforms 4
type 73
used; 2
tolerate. 1
“Inside 3
typically 1
user. 7
vs. 8
“100x” 1
wait-for-me.s. 2
wait. 2
tcsh). 1
that 1398
take 97
translation 46
understand: 1
users: 1
too, 2
“Intel 4
typing 9
user’s 4
“CPU 1
useless 2
waitpid()); 1
values 75
target. 1
tree? 1
unmasks 2
utilities 1
techniques 24
“Is 1
tool 15
unasked 1
using). 2
“Evaluation 1
user-facing 1
wake? 1
variable-sized. 1
warm 3
trees, 4
warnings. 2
trials 2
wastes 10
watch 5
weaknesses. 1
try 64
tweaks 2
whether 59
utilization 5
“Segmented 1
terminate 6
trace? 2
valid, 14
waiting 94
“Experience 1
user-level 6
variable: 2
target’s 2
two-CPU 1
teach 1
“With 1
two-level 7
uncaught, 1
tracked 2
value 233
unpack 2
valuable 3
waitpid() 2
“Hoard: 1
usermode 1
vary. 2
while. 2
“brain 2
techniques, 7
terrible 3
undoubtedly 2
under- 1
units, 2
variable). 1
undergraduate 4
value? 2
underlies 2
“Ils 1
using. 2
varying 2
why? 2
“owned” 1
test-and-test-and-set.s. 2
text 9
via 53
unpark() 2
unlock): 2
unrealistic? 1
wanted 3
unsafe 4
“Man-Computer 1
values, 12
utility 3
wikipedia 1
test-and-set 15
→ 17
thanks, 1
tract 1
virtualization; 1
virtual-memory 1
unmask 1
wary 7
unfortunate 5
unused. 2
“Program 1
virtualization). 1
windows, 1
variable. 8
this 1109
test-and-set.s? 2
them). 2
tested 1
virtuallyindexed 1
unrealistic, 3
water 1
unit”, 2
upcoming 1
translate 19
“Pthread 1
winter. 1
variable’s 1
virtually 9
thr_exit() 3
visualization. 1
these, 4
void; 2
thanks 4
update, 1
website 2
unlock? 2
translated, 1
“Relocating 1
used. 15
translations, 6
variety 3
visible. 2
thrashing 2
void. 1
thing; 1
upon 40
thousands, 1
them; 2
threadID 2
wondering: 4
“Reminiscences 1
tickets. 5
“There 1
user 117
vengeance’.” 1
visualize 1
viewed 4
waitFirst 2
use_ptr 2
waking, 1
treating 2
useful. 10
use. 16
work-stealing 2
“Time-Sharing 1
wait(NULL); 3
“Volume 4
waiter 2
virtualization? 1
there! 1
tree. 5
usually 52
wants 16
tightly 1
wary: 1
worker(), 1
volatile 5
“Why 2
warmup 1
visionary 1
users 27
therein: 2
trees; 1
utilizing 4
user, 3
user-defined 2
usually, 2
valid; 1
value. 12
varied 2
vi, 1
weightk 1
view 14
vmstat, 1
wakes 15
were 76
when! 2
thread 449
threat 1
“core” 1
visited, 1
way, 20
value), 3
variable, 8
variable-sized 7
variables) 1
variants: 1
was 188
time-slicing 1
these 222
world? 1
“first 1
vruntime: 1
welcome! 1
trends. 1
vary 4
true. 3
time-tested 1
they? 2
three 69
world” 1
“fun” 1
write, 3
well) 1
way: 5
vectors, 1
tuned. 2
timeline. 2
type, 4
threshold; 4
wait(). 3
“lock” 2
x? 1
“loop.s”. 2
weights 2
view). 1
things, 6
typeset 2
tmp); 5
time) 4
under 18
which... 1
“looping 1
waste 23
weird 3
virtualizes 3
thing” 1
we’d 9
time-sharing 7
yet), 1
underneath 2
winner: 2
“out 1
wondering 2
ways 19
yield 21
think-ing 1
time-space 2
undoes 1
visualization 1
“real-world” 2
work: 1
weight, 1
top-to-bottom 1
you: 1
yourself. 1
zero). 1
zplot. 1
’95. 1
’a’ 4
timing 5
unfairness 4
uniform. 1
well 88
units; 4
unrealistic; 1
vulnerabilities. 1
vulnerable 2
“Earliest 1
tired 1
“steal” 1
this! 2
workers 1
workload: 1
which 501
v9 1
update(counter_t 2
where 166
wakeups 2
while2 1
void 153
to), 1
“tried 1
track 27
worry: 1
thousands 10
widely), 1
valid? 3
update; 1
“Electrochemically 1
wall 1
whom 2
vulnerabilities 2
tomes 1
“turn” 2
trans- 1
worthwhile 2
thr_join(); 1
thread.c 1
values? 3
upon, 1
“I 1
warmed 1
wired 2
top), 1
wait(), 6
walks 1
winner 5
written 18
wish 26
users, 1
“Jack 1
threads. 19
way? 1
threshold, 2
top-level 2
warm-start 1
wisdom 1
vanishes. 1
what 280
with? 1
whenever 3
“MIPS 3
transfer 10
wrong 15
ways, 1
tracing 6
throughout 13
waste. 7
variable) 1
wishes 16
uses. 3
words, 5
why, 1
“Memory 1
transformed 2
x86). 2
weirdly 1
tracks 8
time-efficient 1
trade-off 4
well, 15
val; 2
worst-fit, 2
will, 2
“Operating 2
transparency; 1
yes, 6
trap. 1
way! 1
vector, 1
well-defined 1
valid. 2
ways. 11
well. 30
we’ve 21
what’s 2
we 992
web. 1
winner) 2
worstcase 1
window, 3
“Purify: 1
time: 2
trapping 3
versa. 1
violations). 1
virtualize 13
virtualized, 1
when 480
well-meaning 1
transfers 7
values. 1
worthwhile. 3
wished 2
“Tolerating 1
times). 2
“all 4
virtue 2
within 89
while) 1
weren’t 1
woken. 2
variables), 1
variety: 1
traversing 2
“fault.” 1
vmstat 2
won’t 21
translation) 1
treasure-trove 1
trees), 1
tried 4
trylock 4
twice, 5
would 200
wreak1 1
two-phase 6
work 150
vast 2
virtualized; 1
visible 2
wait()) 1
when. 2
without 70
timings. 1
write 63
woken 13
two. 3
won 3
uber-engineer 1
trusts 4
waited 1
wait(address, 2
wild 1
waiters 4
work? 7
wrong. 3
“operating 1
workload 14
work! 3
truth. 1
workloads. 3
woken, 2
wonders. 1
waiting, 5
workings, 2
wrote: 1
“response”; 1
“uninitialized 1
works. 22
tuning 1
walling 1
tip, 4
wake(address) 2
world\n", 1
workloads, 1
worse 9
understand 112
world; 1
world!”, 1
twins!” 1
two-thirds 1
worry 21
x; 4
yet! 1
yield(); 2
types 33
wakeup/waiting 2
wrappers, 2
works, 15
www.takeourword.com/TOW146 1
understandable, 1
watermark 2
world, 6
tmp->value 2
yield, 2
u 2
walk 1
xv6, 1
written), 1
y-axis 2
uniprocessor, 2
ways: 2
worry! 2
too). 2
web 10
ubriaca. 1
well-known 4
www.gnu.org/gnu/manifesto.html. 1
years, 9
yes: 3
you. 8
yourself2 1
yield-based 2
watches 2
you’ve 6
went 3
worth 20
x86, 8
yet. 4
unlock, 2
took, 1
unsurprisingly: 1
unaffected 1
’75, 1
we’re 3
wrappers 2
yours. 2
xv6. 1
way. 6
years. 4
yes! 1
unsuspecting 1
unfair 2
’a’, 1
wreakers 1
when, 3
writing 21
written). 1
x, 2
x86. 1
xv6 6
y; 2
{ 281
who 41
years 19
yelling 1
widely 9
trace: 1
win 1
yet 20
you’ll 37
us 84
unlocked 2
“1984” 1
wc), 1
with 638
yield.s, 2
© 21
you 995
trading 1
within; 2
young 3
zero 10
use; 4
unpacks 1
“Ad 2
well-regarded 2
you). 1
word 14
yuck! 1
worked 6
transactions 1
wonder? 1
’83, 1
’09, 1
use”, 1
unrealistically 2
“A”), 1
well-suited 2
yourself; 3
’ 11
’04, 2
workflows. 1
transitioning 4
“Analysis 1
“Informed 1
“Nonblocking 2
“Policy/mechanism 1
“Towards 1
“Wait-free 2
“What 5
“as 2
“have 1
“hello 1
“modern” 1
“parent: 1
“ready” 2
“what 1
up 156
’14 1
updating) 1
“Dynamic 3
well; 1
ˆC 2
zero.” 1
worried 1
’13, 5
translations). 1
work; 6
usual. 2
utilization, 1
utilized. 1
value; 22
’18, 2
upper-case 1
“Everything 2
’63 3
worse, 8
“2Q: 1
workgroup. 1
treated 6
variants 4
’81, 5
“Machine 1
’flag’ 2
usage 16
wrapper; 2
we’ll 112
“Atomic 2
worse. 6
trouble, 2
versus 5
’85, 1
“Mesa” 1
’new’ 2
use?) 1
write() 5
whatever) 1
written? 2
turn 32
’92. 1
“Microreboot 1
virtualizing 14
writes 21
’peek 1
uses), 1
’self’ 2
“Cold-start 1
whereas 14
type). 1
which, 4
“Monitors: 1
vision 1
x86)” 2
x[10]; 1
using? 2
“21” 2
“Efficient 2
’94, 2
understand! 2
whole 5
“Myths 2
vruntime. 1
yet: 2
valgrind. 1
yet, 10
“Animal 1
“He 1
zero. 11
unifying 1
wine, 1
“OSSpinLock 2
valid), 1
you? 9
“Introduction 3
“It 2
’b’, 2
waits 36
zeroing 4
uninitialized 1
within, 1
“Premature 2
variable-length 2
yours: 1
“One 1
“KASLR 1
“...with 1
’05. 1
uninteresting: 1
wonder 3
“System 1
variables, 5
yourself2! 1
“Performance 1
wake 33
“OS”, 1
“80-20” 1
’07, 2
unit) 1
} 271
won’t, 1
“Take 1
variable” 1
“Priority 1
you’d 9
want. 1
“On 2
“Advanced 4
“01” 1
universal 1
˜mark/syscall.html. 1
words 2
“U 1
variant 3
“Reese’s 1
zero, 3
wasn’t 2
“Parallel 1
wasted 4
“ARC: 1
unlock(), 2
’15, 1
“at 1
vector-like 1
“big 1
work, 23
zeroing. 2
“Change 1
“Solaris 3
way). 1
“Alto 1
unpark(queue_remove(m->q)); 2
’Classic 1
“being 1
vengeance’. 1
“catch” 1
“Extending 1
workload, 11
| 8
“Solution 2
weight 1
“A” 8
unpleasant. 1
’pedantry’ 1
“commoncase 1
version? 2
“crux 1
“Hints 3
’03. 1
worst 7
“Symmetric 1
weight0 1
“Control-c” 1
’w’ 1
“older” 1
viewpoint 1
use, 15
“easy 1
“Information 1
’Approximate’, 2
worst-fit 2
“You 2
wherever 2
“Evaluating 1
“reliability”, 1
“An 9
violation 2
“Bell 1
“other 1
“Just 2
“B”. 2
x86) 1
“atomic 2
whet 1
“E”, 2
“same” 1
user-managed 1
virtualization 20
“too 3
“010101”, 1
“My 1
“Computer 6
years; 2
“best” 2
while? 1
“Get 1
“works” 1
utilized? 1
“Fact 1
“Our 1
“Converting 1
yell) 1
“emulation” 1
whims 2
“TENEX, 2
wait 53
utilizes 1
“Guide 2
“RTFM.” 1
“If 2
yes. 3
“implements” 2
“interactive” 1
want; 1
“Hoare” 1
“Shared-access 1
“John 1
value, 17
“it 1
“on 1
“page 1
“right” 1
“setting” 2
“She’s 1
why 58
“Someone 2
“Observations 2
variables 33
waste! 1
“Survey 1
widespread 1
“Transaction 2
“OpenSolaris 2
watch. 1
“Think 1
various 27
“Perfection 1
“Understanding 5
watching 1
“baby 1
vary). 1
“Practical, 1
“Using 2
whichever 4
“demon”, 1
“TLB”. 1
versions 8
“bad” 3
viewing 2
while, 8
visually 1
“goodbye”. 1
“ease 1
“Time 1
wily 2
your 201
“THE” 2
“jemalloc” 1
wait-for-me.s 4
“familial” 1
“just 3
with) 2
“Test 1
wakeup, 1
“T”, 2
“hello”; 1
you’re 18
“perfect”. 1
works? 3
“havoc” 1
worlds: 1
“child”, 1
world”. 1
’threshold’, 2
“smart” 1
“hello, 1
was. 1
“right 1
wasteful. 2
“A 15
“high 1
“second-system 1
“daemon”, 1
write: 1
weaknesses 1
“reserved 2
“walk” 1
“running” 2
“interrupts” 1
www.stanford.edu/˜ouster/. 1
weightA 1
x86” 2
“main: 14
“starts” 2
well), 2
“B” 8
yielding 5
“yes.” 1
“process 1
• 69
“test” 2
“History” 2
yourself, 2
“test 2
− 7
“Javascript: 2
zero), 1
“Mac 1
zombies, 1
“Membrane: 1
zsh 2
“OS” 1
“RISC-I: 1
“Run-Time 1
“Structure 1
– 19
’93. 1
’95, 2
’c’, 1
“The 40
“Valgrind: 1
’wreak 2
“a 1
“batch” 1
“Cloud 3
“cold” 2
“Idleness 1
“correct” 4
“Load-Link, 2
“free” 1
while 170
“Making 2
“glibc 2
wide 1
“One-Level 2
“lost” 1
wishing 3
“out-of-bounds” 1
workers, 2
“One-level 2
“the 1
works3 1
“wreaked”? 1
workshop, 1
“Virtual 8
worlds. 2
“bad 1
” 4
wrangling 1
“buddy” 1
write(fd, 1
“condition 1
write. 2
“discovered” 1
written, 1
“drum” 1
“limited” 1
wrong, 4
“ten-items-or-less” 1
x86-version 2
“the”). 2
x86.py, 4
you, 11
younger 1
yourself 7
zeroed 1
zombies 1
· 4
’02, 2
’11, 2
’68 1
’current’ 1
’c’ 3
’e’. 1
’mutex’ 2
“But 1
“Cooperating 7
“Improving 1
“It’s 2
“Multics: 1
“PThreads 2
“cooperating 2
“direct 1
“double 1
“fault” 2
“first-in” 2
“longword” 1
“private 1
“prove” 2
“reasonable” 1
will 580
window 3
wise 1
wondered 1
word, 1
worked, 2
world 26
worst-case 5
wouldn’t 5
wrapping 2
write(), 1
writes: 1
written; 1
x 12
yeah! 1
yield() 2
yield.s 2
you; 1
zeroes 2
|| 2
}; 8
’10, 4
’89, 1
’98, 1
’b’ 1
“Ah! 1
“Aleph 1
“Algorithms 2
“Dahm 2
“Principled 1
“Profiling 1
“SDS 1
“They 2
“bounds” 1
“got 1
“hot” 2
“privileged” 1
“ticket-assignment 1
← 2
the 8323
things); 1
thinks 7
threadID, 2
threaded 2
three) 1
through 56
tickets: 1
timer 36
times? 2
tive) 1
tmp 8
to. 4
today 7
tools 16
too” 1
touching 1
track, 1
translates 5
transparent” 1
true! 1
truth: 2
typedef 33
ugly 3
uncommon), 1
underlying 9
unfair, 1
uniformly, 1
units. 3
unlock(&mutex); 2
unpark 2
unrealistic. 1
up, 12
update. 1
upper-level 2
urgent, 1
usage, 2
used 175
user-mode 3
using; 2
v; 2
value); 2
variable; 2
variablesized, 1
variants) 1
vector. 1
violation, 2
virtual-to-physical 6
virtualization, 7
virtualized. 1
voluminous 2
wait(); 1
wait, 4
waking 5
way 97
weakness 1
weighted 1
weighti 2
were. 1
winner. 2
within. 1
work. 24
working 28
workload. 6
works; 1
worry. 3
worse! 1
wrapper 3
wreaked?” 1
wrote 10
www.cs.tau.ac.il/˜shanir/concurrent-data-structures.pdf. 2
www.nds.rub.de/lehre/seminar/SS06/Werthmann 1
www.sparc.org/ 1
x) 1
’19, 1
“Aspects 1
“Before 1
“Concurrent 2
“H-Pucks”) 1
“H”, 2
“Lottery 2
“Mach: 1
“Multilevel 1
“Programming 7
“foo” 1
“lmbench: 1
“pinning 1
“real” 3
“yeah, 1
