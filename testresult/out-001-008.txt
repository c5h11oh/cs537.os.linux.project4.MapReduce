10 21
18 4
I 26
!zero, 2
"A" 1
"common_threads.h" 4
$0x0) 1
$0x1 2
 26
8 22
"fork 4
$0x1,%eax 4
%eax,0x0(%ebx) 1
%ebp 1
%ebx 1
&& 2
(-1KB) 1
(-p). 1
(0, 3
(1110) 1
(20%), 1
(21) 1
(22.1) 1
(24113) 5
(3) 2
(3764 1
(4 3
(4088 1
(AMAT) 1
(As 1
(C) 1
12 19
C 16
S 28
#2: 2
#include 62
$0x0,(%edi,%eax,4) 1
%bx 2
%dx. 2
%eax, 8
%edi 3
&args); 4
&m); 3
(-a) 2
(-i) 4
(-q) 1
(0x200000), 1
(120−0)+(20−10)+(30−10) 1
(16 3
(20-ms 1
(232 1
(400)2 1
(4200) 1
(7.1) 1
(ARM). 2
(Advanced) 1
(A’s 2
(Bad 1
(Blocks) 4
(C, 1
(CanAccess(PTE.ProtectBits) 4
(Chapter 2
(HW 1
(Hardware) 1
(LAUER’S 1
(London), 1
(Code) 8
(G), 1
(Gulps) 1
(KASLR). 1
(L 2
(LRU) 1
(Left) 3
(Linux, 1
(LoadLinked(&lock->flag) 4
(Logical) 1
(MMU), 1
(P); 1
(PC) 4
(PCB). 1
(PD 2
14 14
M 20
! 2
"A"); 4
"usage: 2
$0x1, 6
%d 5
%d\n", 9
%dx 6
%eax,8049a1c 4
%ecx, 1
%esp, 1
%lld\n", 2
&; 1
&rvalue); 2
(-L 2
(-c) 1
(-l 4
(-s) 3
(1 1
(10 1
(100 4
(1000 1
(117 1
(32-bit 1
(34KB), 1
(4KB 1
(9.1) 1
(@PFN:101) 1
(A 14
(ASLR). 1
 32628
22 1
4 23
L 17
T 10
"wc"... 1
#3: 1
%eax), 1
%ebp, 1
%ebx, 1
&stack); 1
( 6
(*start_routine)(void 2
(-T). 1
(-s 2
(/tmp/file) 1
(010101), 1
(117). 1
(2012-01-30-1-g1c41342) 1
(224 1
(26 1
(28KB) 1
(4096), 1
(512 2
(7.2) 1
(8 1
(@PFN:100) 1
(BKL). 2
(BSD). 1
(B’s 2
3 1
16 9
"common.h" 7
"hello"; 3
# 16
$0x03, 1
$0x03e8,%eax 1
(CPU 2
(D); 1
(G) 2
(KNUTH’S 1
(LFU) 1
(Again) 1
(Another 1
(Bounded 1
(CFS), 1
(COW 1
(C’s 1
(FCFS). 1
(Good 1
(Linux) 2
(MFU) 1
(MLFQ) 1
(PDIndex 3
6 22
F 8
PAGING 21
!StoreConditional(&lock->flag, 2
"B"); 4
%d)\n", 4
%eax). 1
%edx, 1
%esi, 1
&oops; 2
&rvals); 2
&x); 1
((flag[1-self] 2
(-M 1
(-m 2
(./x86.py 4
(01) 1
(0x1) 2
(1) 13
(100) 1
(14th) 1
(200 1
(28 1
(64 1
(9.2) 1
(A) 2
(ASID) 1
(B 3
(CTSS), 1
% 8
%ecx 1
%esp 1
%p\n", 4
&mutex); 8
(-p 2
(-w) 1
(212 1
(24114) 5
(256 1
(32 2
(5 1
(A, 5
(AS) 1
(August, 1
(CFS) 2
(CompareAndSwap(&lock->flag, 2
(Dynamic 2
(FIFO) 2
(M 1
(No 1
(CanAccess(TlbEntry.ProtectBits) 4
(Editors 2
2 25
20 1
B 13
!= 7
"hello 1
"wc" 1
#1: 2
#define 2
%ax 4
%edx 1
%esi 1
(PFN 2
(PFN) 6
(PM 2
(PTEs) 1
(Page 1
(PowerPC), 2
(RR) 2
(Run 1
(PID). 1
(PSJF) 1
(PTE): 1
(PTIndex 3
(Pmiss 1
(Proc 2
& 29
(-P) 1
(1024). 1
(104) 1
(15th, 1
(1e7) 2
(256) 1
(APIs) 2
(BFS)2 1
(I/O). 1
(LDE) 1
(MIPS), 2
(OS)3 1
(P1), 1
(PA), 1
(Q0), 1
(R, 1
(RDLK) 2
(SSDs) 1
(MLFQ). 2
(NOT 1
(Niceness) 1
(OS). 1
(P0) 1
(PCB); 2
(PFN), 2
(R/W) 1
(Ready, 1
(STCF) 2
(StoreConditional(&lock->flag, 2
(Line 5
(MMU) 1
%eax 24
%edi, 1
&lock); 2
(-n 1
(0xC0000000 1
(101) 2
(11) 1
(2) 4
(2134) 6
(32768) 1
(34K) 1
(7030) 1
(Alpha), 2
(And 1
(B) 1
(C 1
(DEC). 1
(DMA) 1
(EEVDF) 1
(Hardware-based) 1
(K 1
(LW 1
(Lines 6
(MMU); 1
(S) 3
(SQMS) 1
(Success, 4
(T1 2
(TCBs) 2
(Tarrival 1
(MQMS) 1
(MRU). 1
(SJF) 1
(Software) 1
(TestAndSet(&m->guard, 4
(VM) 1
(Simulation) 16
(Tc1), 1
(Measurement) 3
(O 1
(Offset 1
(P). 1
(P2), 1
(PDE.Valid 1
(T1) 4
(THE), 2
(TLBs) 1
(TlbEntry.PFN 4
(VP 3
(VPN=1, 1
(address 2
(PTE.Valid 4
(PWT, 1
(Process 1
(RSS). 1
(Right) 3
(SJF, 1
(VPN 14
(assume 2
(Tp) 1
(NULL 1
(Success 4
(Figure 45
(P 1
(P0 1
(VPN=06), 1
(With 1
(Without 1
(P2) 1
(TM 1
(OS 1
(P1) 3
(P=0), 1
(PA) 3
(PCB), 2
(PDE) 2
(PID), 1
(Tc1) 2
(September 1
(PDE). 1
(PTE.Present 2
(S), 1
(SJF), 1
(P=1), 1
(PTE) 9
(Q2). 1
(T2) 2
(TestAndSet(&lock->flag, 2
(VAX/VMS) 1
(a[3] 1
(Spring), 3
(TD 1
(Tc1 2
(R 1
(ROP) 1
(VPNs 1
(VPN) 2
(VPN=07), 1
(PDE.PFN 2
(Tc2 1
(This 1
(Thread 2
(U/S) 1
(VA) 2
(VPN=08). 1
(Virtual) 1
(Volume 1
(a2), 1
(a[7] 1
(SN) 1
(Virtual 1
(again, 3
(VirtualAddress 9
(PFN). 1
(Timer 1
(bash?) 1
(again 3
(TLB 16
(Tc2) 1
(Thousands) 2
(a[4] 1
(argc 2
(VPN), 2
(c1–c3). 1
(c4). 1
(a.k.a. 6
(also 7
(a) 5
(a[0]) 2
(above), 1
(after 4
(always) 1
(among 3
(broken) 1
(an 2
(PTE.PFN 2
(at 12
(a 21
(a[8] 1
(char 8
(array-based) 2
(bugs) 1
(assuming 5
(but, 2
(atomic_bit_test_set 4
(average: 1
(binary 1
(both 2
(c3). 3
(bytesLeft 1
(c2), 3
(bytes 2
(c3) 1
(all 6
(depending 2
(as 49
(c5), 1
(R) 1
(causing 2
(alas). 2
(code, 7
(allocated 3
(almost) 1
(another 1
(called 9
(cleared), 1
(conservatively); 1
(arbitrarily; 1
(continuing) 1
(done 4
(due 6
(effectively 1
(even 3
(forever), 1
(hardware 1
(because 8
(discussed 1
(assert(hptr->magic 1
(assumes 2
(available 1
(continue 1
(cpu.c) 1
(i.e., 96
(c1, 1
(done) 2
(atomic_add_zero 2
(c) 3
(bigger) 1
(curr) 4
(eventually) 2
(incredulous) 1
(counter 17
(created 1
(curr->key 4
(c2). 2
(c4), 1
(clearly 1
(current) 1
(interrupt) 1
(evicts) 1
(STDOUT 1
(easily) 2
(c->local[cpu] 2
(described 5
(flag 4
(dare 1
(just 5
(lazily) 1
(main) 4
(erroneously) 1
(c1), 1
(dramatic 1
(free 1
(e.g., 108
(for 24
(T2), 2
(max 2
(finally) 1
(count 8
(he 1
(https://github.com/remzi-arpacidusseau/ostep-projects) 1
(fill_ptr 1
(generated 1
(TestAndSet(&flag, 2
(Third 2
(Tp). 1
(VPN). 1
(VPN=06, 1
(a.k.a., 2
(a3). 1
(about 1
(modified), 1
(first-in, 1
(during 1
(hex 2
(imagine 2
(four 1
(hence, 2
(and 111
(my 1
(formerly 1
(each 2
(highly 1
(into 4
(from 16
(if 13
(approximate) 2
(myturn). 2
(freeing 1
(either 3
(hint: 6
(io.c) 1
(kernel) 1
(in 45
(atomically); 1
(normally 1
(get 1
(emacs 1
(holding 1
(i); 1
(ldstub); 2
(left). 1
(b) 5
(note 4
(hopefully 2
(fun!). 1
(given 1
(ignoring 1
(ironically) 1
(lots 1
(but 14
(older 1
(instead 1
(its 2
(global 3
(including 10
(making 1
(m->flag 2
(by 13
(our 4
(p1), 1
(limit) 1
(hopefully) 3
(indeed, 4
(insert 1
(managing 2
(c3), 1
(full) 1
(p1– 1
(line 3
(i 19
(middle 2
(it 12
(milliseconds); 1
(do 5
(gasp) 2
(p2); 1
(load 1
(implicitly) 2
(mutex); 6
(known 1
(namely, 1
(double 1
(generally) 1
(p4.c) 1
(long 2
(implying 2
(mutex, 8
(latter) 2
(new 7
(especially 2
(header_t 1
(pause 3
(maliciousness) 1
(kernel 6
(myturn 2
(like 5
(non-paged) 1
(flag) 2
(highest 1
(physical) 1
(modulo 1
(labeled 6
(n) 1
(lock->turn 2
(non-restricted) 1
(free) 21
(horribly) 1
(pid:29146) 4
(mutex->flag 2
(ld.so) 1
(next 1
(many 4
(notably) 1
(gadgets, 1
(include 2
(potentially) 1
(myarg 2
(locked). 2
(nice 1
(minimally) 1
(note, 1
(hence 1
(int) 10
(queue_empty(m->q)) 2
(note: 2
(long) 1
(mem.c) 1
(modern 1
(ns) 1
(initial) 1
(large) 2
(rc_wait:29267) 1
(onto 2
(out 3
(non-contiguous) 1
(no 4
(one 6
(int 6
(lock-holding) 2
(rc_wait:29384) 1
(realistically, 2
(p2.c), 1
(not 20
(nods) 1
(only 5
(job 2
(log2 1
(marked 1
(requiring 1
(probabilistic) 1
(or 83
(non-toy) 2
(other 1
(left 1
(p2), 1
(minus 1
(returning 2
(probably), 1
(p2). 1
(of 10
(p6, 1
(let’s 4
(likely) 1
(now 6
(slow) 1
(pthread_join) 2
(pid:%d)\n", 9
(on 11
(pid:29267) 1
(part 2
(literally) 2
(often 2
(something 2
(seconds) 6
(pid:29266) 2
(once 4
(pid:29384) 1
(pid:29147) 2
(lowest), 1
(p2.c) 1
(sometimes 10
(still 1
(swapd) 1
(switching 1
(potentially), 2
(right) 2
(mentioned 2
(p5). 1
(spinning 2
(pid:29383) 2
(or, 5
(target) 1
(rather, 1
(sched 1
(more 3
(particularly 7
(start 2
(quite) 1
(remember: 2
(there 3
(this 4
(scheduling) 1
(most 2
(mutex 2
(stop 1
(original 2
(required 1
(releasing 1
(thread 6
(shown 5
(privileged) 1
(probably) 1
(t0.c) 2
(p.81).” 1
(result: 1
(repeat) 8
(results 1
(simplified) 1
(myarg_t 4
(pthread_create) 2
(taking 2
(p3.c) 1
(running 1
(usually) 2
(roughly 2
(sorry!). 2
(nearly 2
(read 1
(thank 1
(page 49
(said 2
(v1) 3
(simple 2
(specifically). 1
(new) 1
(reduced 1
(think 5
(physical 1
(say, 11
(via 6
(sometimes, 1
(source) 1
(new_head 2
(p1.c) 1
(p4). 1
(pointers) 1
(shaded 1
(virtual) 3
(stop) 1
(stride=100) 1
(regardless 2
(trustingly) 1
(perhaps 7
(pointed 1
(similar 3
(worst-case 1
(t1.c) 2
(stuck 2
(studied 1
(using 9
(rc 8
(preempting 2
(somewhat) 1
(thanks 1
(that’s 3
(sadly). 1
(they 3
(too 1
(turned 1
(pretend) 1
(probably 1
(that 5
(though 6
(si 1
(v 2
(rc_wait:%d) 2
(upon 1
(you’ll 1
(quantum 1
(the 61
(turning 2
(some 1
(version 1
(ready 4
(use_ptr 1
*(*start_routine)(int), 2
(quickly) 1
(through 1
(untimely?) 2
(starting 3
(web 2
(real) 1
(void 12
*arg); 4
(recall 1
(tmp 1
(user 3
(thus 9
(who 2
(reduction 1
(way) 1
*child(void 3
(remember, 1
(turn 2
(usually 7
(too!) 2
*H, 4
(resulting 1
(when 3
*consumer(void 5
(roughly) 2
(v2) 1
(v9 1
(we 2
*c) 18
(running, 2
* 17
*dst; 1
(size 1
(size=200) 1
(virtual 1
(what 4
*curr 4
(runtimei 1
**value_ptr); 2
*hptr 1
(va.c) 1
(stride=200) 1
(we’ll 2
(with 21
(without 1
(say 17
*L, 8
*m) 6
(vruntime). 1
(such 25
(whether 2
*d 1
(word 3
(see 12
*abs_timeout); 2
*malloc(size_t 1
(wc). 1
(xchg). 2
(“Buzz 2
*kstack; 1
(write) 1
(size: 1
*cond); 2
*mutex; 2
(to 10
(which, 2
) 46
*mutex) 12
(“0101”th) 1
(store 1
*cond, 2
*new); 1
(too) 1
). 3
*(*start_routine)(void*), 2
*old_ptr 2
); 1
(stride=40) 1
*mythread(void 12
*producer(void 5
(usually, 1
*), 2
*/ 16
*p); 1
*head 1
(that, 2
*old_ptr, 2
*ptr 9
(waiting 2
**old, 1
*attr, 2
*q; 2
*lock) 20
(threads.c) 1
(tiny) 2
*value) 2
(where 12
*L) 4
*args 4
*chan; 1
*head; 4
*parent; 1
*p 6
(total) 1
+= 9
(which 39
*c); 1
*thread, 2
*mem; 1
*q, 4
*rvals 2
(unrealistically 1
--leak-check=yes 2
(yet) 3
*c, 5
*worker(void 1
*x); 1
*tail; 2
*src 3
(unused) 6
-C 6
*) 23
*mutex); 8
*mutex, 2
--l0 1
*tf; 1
*x 3
(use 1
-S 24
*H) 2
*new 4
*ofile[NOFILE]; 1
--tool=lackey 1
*value 2
--tool=helgrind 2
(value 2
-c 22
*argv[]) 23
*cwd; 1
*old_ptr; 2
-10 1
--l1 1
-1); 1
(wait 1
-k 2
*next; 6
*input) 1
*m); 1
-A 6
-1) 1
-1, 1
(yes, 4
-pthread; 2
*ptr, 5
*ptr) 7
*myargs[3]; 2
-I 6
-20 2
-5 1
(you 5
-s 21
*q) 2
-1; 8
*ptr; 6
-X) 1
-5), 1
-= 1
**) 4
-t). 1
+1 1
-1KB. 1
*str 1
-a 41
-B 4
-M 15
*arg) 26
.... 1
, 15
*tmp 7
-c. 1
-D 154
-R 13
-m 3
*current 1
................ 1
--b0 1
+ 45
-i 18
-L 18
-b 3
-nw 1
*dst 2
./main-two-cvs-while 2
-O 1
--trace-mem=yes 1
-is-unsafe. 2
-d 2
-l. 1
-u 6
*malloc(size 1
./p3 1
-S, 1
-15 1
-m, 1
-l 19
-r 5
*new_head 2
.EXE 1
... 84
-g 3
-> 10
-p) 1
-t 20
./multi.py 4
*rvals; 2
//acquire 4
./main 6
-i. 2
-F 3
./main). 1
. 53
./p2 1
+19 1
/proc/meminfo; 1
./x86.py 14
-o 9
-f 1
./p4 1
..., 2
/ 1
- 25
0+ebx 1
./array 1
-n 19
/* 16
./fork.py 4
0) 40
0). 2
--b1 1
0.4 1
./mem 5
-v 17
0 384
./p1 2
0+1+2 1
0,0,0,0,0,0,1:0,0,0,0,0,0,1:0,0,0,0,0,0,1 1
-5; 1
0011 1
/bin/ls. 1
/proc 1
0,0,0,0,0,0,1? 1
./random 3
0-byte 1
0,0,0,1,0,0,0:0,0,0,1,0,0,0:0,0,0,1,0,0,0 1
-H 1
0101 1
0(%eax) 2
0-9), 1
0.2 1
.globl 1
0.03 2
0.1 2
-P 19
0110 2
0); 8
00000000019d5000 1
00 4
0.5. 1
00007f4e7d2d0000 1
-Wall 7
02 1
0+5+10 1
0111 1
0000 14
0001 1
00007f4e7d932000 1
-l, 1
// 294
0: 4
03 1
0, 55
08 2
0010 1
07 1
-p 44
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 1
0x068, 1
0.001), 1
0.6 1
0; 116
01 2
0? 3
-pthread 5
0. 11
0x200000 4
0x00000000 1
00, 1
0x1096008c0 1
0100 1
0x03, 1
...; 1
0.0 2
0x600, 1
0x1095afe50 1
0000000000400000 1
0x30 1
09 1
0x1024 1
./cpu 5
0.1). 1
0x7fff691aea64 1
0x200000. 1
00007f4e7cf06000 1
0x37) 1
0x0(%ebx), 2
0x300, 1
./process-run.py 2
0.10). 1
0.8 1
0x400, 1
00007f4e7d731000 1
0x700, 1
0x500, 1
0x3000, 1
./thread 3
0x80000000)) 2
00007f4e7d508000 1
0x80000000 2
010000; 1
0x7ffe1033b8f4 1
0x8049a1c). 2
0x900. 1
/dev/zero 1
0x8049a1c 6
06 1
0x8049a1c. 2
04 2
0xC0000000 2
0xFFFFFFFF) 1
0xC0000000, 1
/proc/meminfo 1
0x00000FFF, 1
1) 52
0xFFF. 1
0th 2
1)) 2
1-GB 1
0% 5
0x200, 1
1-byte 1
1). 6
0x0(%ebx),%eax 1
1.0, 1
1 461
1. 43
0), 1
0x8049a1c, 8
1-second 1
1.0001 1
0x000, 1
10.2: 1
1.2.1) 1
1.0 1
0.9. 1
1% 1
1.0; 1
10). 3
0x00000000, 1
10.4 1
10. 7
01, 2
1), 5
1.3.37 1
10 165
10-entry 1
0x03e8, 1
100%), 1
100. 6
05 1
10% 5
10) 2
10,000,000 2
10.2 1
0x7ffe45522e94 1
0x800, 1
1000. 2
0KB 13
10), 1
10-byte 1
10.1 2
1024, 1
0xBFFFFFFF 1
100 87
1024 10
0] 4
10-ms 4
10.1: 1
10.2? 1
1028 1
1.00] 5
100,000, 1
11–12), 1
0th) 1
10.7 1
10.3 1
10.3. 1
104. 1
10+20+120 1
1000 10
12(%eax) 1
0x0(%ebx) 1
100% 5
100%, 1
100). 2
10:1,10:100). 1
10+20+30 1
100000 2
12, 2
0x0DC0. 1
100), 1
100) 3
100+(110−10)+(120−10) 1
110000) 1
10.3: 1
100:100,100:100), 1
12-bit 2
0x100, 1
1032 1
105 6
1000). 1
1101 2
10.5 1
108 11
128, 1
0x3C00). 1
100ns 2
110, 1
100? 1
1110 2
100%. 1
11). 1
12:6, 1
0x3F80, 1
101 4
11916, 1
101. 2
100+110+120 1
12 89
110). 1
13.2; 1
0x7ffd3e55d2b4 1
1036 1
1234567)) 1
103.33 1
1000; 1
12(%eax), 1
11:1, 1
13.3: 1
0xC0000FFF 1
109 1
128; 1
105-117, 1
1000s 1
12(3), 2
11–19 1
13.5 1
1); 4
13.2: 1
107 1
100K 1
11 110
120 9
12. 2
137, 1
13.4 1
1, 80
108). 1
100s 1
110 2
1100 3
120. 1
14.4 1
132 2
11. 3
1030 1
12000 1
111). 1
1.01] 203
1224 1
14949, 1
137298 1
1124 2
1074 2
128 13
12). 1
10); 1
135 2
15) 4
13: 2
115–116, 2
10; 2
13.1 2
13. 2
10, 14
14, 2
15.1: 1
13:4, 2
128KB 1
1111 7
135: 1
14.7 1
10,000 8
14-bit 4
15.3 1
14.3 1
12:7, 1
112 2
14. 4
14KB 2
10.1), 1
14.6 1
15:3, 2
14:7 1
13); 2
12) 1
143012 1
15, 7
10.6 1
100); 2
15KB, 1
13, 2
15 96
1234567 7
15), 1
15.4: 1
15.3: 1
100, 6
13.1), 1
16 92
15.2 3
128) 1
15.1. 1
15.6 2
15.5 2
100,000 1
13.2, 1
16(%eax), 1
150 10
128-Byte 1
15.3, 1
16.1, 2
15:5, 2
100-bytes 2
132: 1
16.2 2
16.1 2
128-byte 2
15.5: 1
16.3: 1
16.2: 1
1000, 5
14.5 1
160 2
16384 1
152K 1
13 93
16.5 1
16.4 1
100byte 1
148K 1
16KB; 1
16492 1
15KB 7
13.2 2
16384, 1
16KB] 5
1024. 3
15.2: 1
17.1 1
16708 2
16(%eax) 1
13:2, 1
16K 1
17.1: 1
104 1
15.4 1
17.3. 1
16KB)1 1
16.4: 2
14). 2
16k 5
17.3 1
10ms, 1
1586, 1
17.7: 1
17.1). 1
16.6 3
14.1 1
17.2: 1
17.5. 1
10th 3
16-byte 4
17:10, 1
17.2. 1
17.3: 1
15. 1
17.4 1
1110101 1
16.1: 1
18 54
18.2 1
17.6: 1
17.5 1
15.2. 1
17.8, 1
11168, 1
16.3 2
18.6: 1
18.3). 1
170. 1
17.6). 1
15.6: 1
17: 1
113 4
16.5. 1
19.3, 1
18705, 1
172, 1
1780K 1
16), 3
17:4, 1
117, 1
16KB, 1
19.5: 1
17 66
1792K 1
179–180, 1
16.1. 1
18.1: 1
1174 1
19). 2
19.7 1
17.2 1
18.5: 1
18.2: 1
16.5: 1
18.3 1
11:5, 2
19.1 2
1961. 1
17.4. 1
18.7 1
18.4 2
16.7 1
1277, 1
19 58
192KB 1
1963, 1
17.8: 1
19.1), 2
184–199. 1
16500 1
128: 2
19.2 2
19384 1
1969. 3
170 3
19.4: 1
19.1: 1
16KB 24
13.1: 1
19.4. 1
1945. 1
1970. 4
1793, 1
19.6 1
19.3 1
17, 1
13.3 2
1960’s, 2
1954. 1
1970’s 2
18). 1
1957 1
1956. 1
17.4: 1
13–14). 1
1962 2
1963. 2
1978. 5
18.1 2
1959. 1
1965. 6
17.7). 1
1964. 2
1965, 1
1970 1
14 71
18.7: 1
1960. 1
1974. 3
18.3: 1
1973. 2
1987. 1
1972. 5
14.2 1
1800s, 1
1960’s 5
1980’s; 1
18.5 2
1982. 7
1996. 4
1981. 7
140 2
19.1). 1
1966 1
1983. 4
19.2: 1
1990). 1
1KB) 1
1989. 5
143,012. 1
19.3), 1
1968. 11
1992. 4
19.4 1
1990s, 1
1Note 2
1990. 2
14KB; 1
19.8 1
1986. 1
1998 2
1928 1
1991. 9
2), 3
1992.. 1
15). 1
1959 1
1995. 6
1: 7
19345221) 2
1999. 1
2- 1
1996 3
15.1 2
1962. 7
1:0,4:100 2
2) 7
1957. 1
1Each 1
2.5: 1
1998. 2
16.1). 1
1963.” 1
1KB 13
2.1: 1
1960’s. 1
1KB, 1
2.7 3
2). 7
16.6: 1
1968 2
1] 4
2.3 1
1964 1
20% 7
2.1 2
17.5: 1
1971. 1
1m 6
2.4). 1
1966. 3
2, 38
20), 1
2.9 2
18, 2
1979. 2
20.1: 1
2 257
1970; 1
2-MB 1
20.5: 1
20.1 1
18-bit 1
1980. 1
20.3 2
2.2 2
1970s 1
2-bit 1
2007. 3
2001. 1
18.2, 3
1988. 2
2000) 2
1975. 2
2.4: 1
20 95
2010, 2
2003, 2
18.4: 1
1991, 1
20000000) 2
1980’s, 2
2.6 3
20(%eax), 1
2014 1
2008). 1
18.6 2
1997. 5
2003. 4
1993. 6
20(%eax) 1
20.2 1
2015). 1
2009. 5
18–21); 1
1:1, 3
201 4
1:0,4:100. 1
20); 1
20, 3
1; 42
2010. 7
19.3: 1
1? 1
21 45
2016. 1
200 24
20-bit 3
1K 1
2016 1
19.5 2
1MB 1
21.2 2
2018, 1
200,000, 1
20.4: 1
1KB. 1
22.5: 1
19221041) 2
1e7; 2
218 1
20KB 2
2000 15
20.6 1
1k 9
22.7 2
1949. 1
1” 1
22.1 2
21, 4
2002. 1
200, 3
2.2: 1
22.9. 1
1950’s 1
22.10 1
22.7: 1
21-bit 1
2011. 7
200-MHz 1
2.3) 1
2.4 1
1970’s. 1
2. 29
22.9 1
21.1), 1
2013, 1
2000, 1
23, 2
2.5). 1
1980s 1
2.6: 1
22–23), 1
21.2, 1
21.1 1
2006. 6
23-bit 1
20.2: 1
1985. 2
20,000,000. 2
24113 1
21.6 1
21:1, 5
2015. 1
26.1: 2
20.4 2
1994. 1
20. 1
24KB 3
214 1
21:10, 1
2015/02/10/understanding-glibc-malloc/. 1
26.3 2
20.5). 1
1We 1
20.2. 1
250, 1
22.3: 1
22.6: 1
204 3
26KB, 1
2004. 7
1ms, 1
20.6: 1
254 3
22.5 2
22.8 2
20th 1
27 32
2008–18, 5
2.3: 1
200. 3
26.1, 4
2212 1
23.1. 1
21.3: 1
27.2 2
2013. 4
2.5 1
2000. 9
26.3: 2
23.2: 1
24(%eax) 1
21.5 1
28.1 2
2015, 1
20-29): 1
2017. 2
26.5 4
24-bit 1
25 33
22.2: 1
28.10 4
202 1
20.1); 1
2018), 1
27.2: 2
25%. 1
250 5
22.4 2
28.3. 2
21.1: 1
20.3: 1
21.3, 1
27.4 4
256KB 1
26.1 2
23.1: 1
28.7: 2
21.3 3
20.5 3
21.7 1
28.10: 2
256m 1
26.7: 2
23.3 1
28.9 4
215, 1
20.6). 1
22, 1
28.12 2
26.2: 2
27.2. 2
29.6: 2
24 37
2000; 2
22 38
22.2, 1
28.1: 2
26.4 4
272, 1
29.8 2
24(%eax), 1
2005. 9
22.11 1
22.4: 1
28.3 2
27.1: 2
28.16 2
29146; 1
24:2, 1
2007, 2
22.2 1
22.6 2
28.5. 2
27.3 4
28.5: 2
29154, 1
256-byte 1
22.3). 1
28.9: 2
26 32
28.7 4
3-GHz 1
28 33
26.6: 2
2008–19, 138
22.8: 1
28KB, 1
2008–20, 49
28KB 2
28(%eax), 1
3. 32
27.1. 2
220 1
26.2 4
29 25
2016.. 1
29, 3
28.11 2
30. 2
28(%eax) 1
23.1 1
27.1 2
29.10) 2
203 1
29.4: 2
28.2 2
30.15: 1
28.1), 2
23254, 1
28.17 2
29.11 2
21.2: 1
29.6 2
28.4. 2
30.2. 1
28.15 2
24. 1
28.6: 2
29.2 4
21.4 1
29147 2
28.8: 2
30.6: 1
28.4: 2
24114 1
28.8 4
29.3). 2
21: 1
2:70, 1
29.1 2
30.8 1
28.6 2
25% 1
28KB1 1
29.8: 2
22.12 1
2Fortunately 1
29.7: 2
300. 3
29.3: 2
2501, 1
29.1. 2
2Q 3
22.1: 1
2KB 8
29.9 2
32, 1
29.5 6
255 2
29.5: 2
22.3 1
2] 2
29267 1
32-bit 16
2KB). 1
26, 1
29.7 2
22.9: 1
2m 1
29384 1
324 1
2github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
26.4: 2
3 231
2N 2
2”. 2
23 37
2This 1
32868. 2
3): 2
26.6 4
2’s 1
30 31
3); 1
23.2 2
3). 5
36 11
3.33). 1
30.12: 1
3), 3
30.11 1
23:2, 1
3, 25
30.1 1
36291, 1
27.3: 2
30.3: 1
30.1. 1
30.2 1
25. 1
30, 3
30.7: 1
3752 1
27.5 2
30.4) 1
30.14: 1
30.8: 1
254: 1
30-bit 1
30.9 1
3:0,5:100,5:100,5:100 1
27KB. 2
30.8), 1
30.5: 1
300 4
256 6
30.13: 1
320KB 2
4), 2
28.13 2
3000; 1
30.7 1
3000 4
26.3, 2
30.15 1
32KB 5
4.5: 1
28.2: 2
32KB, 1
300), 1
3121, 2
26.5: 2
30.4: 1
34K 3
40% 5
28.4 2
33 12
32K 3
3412382, 1
26.7 4
30.5) 1
37 8
40-ms 1
28.6. 2
3906, 1
32k 6
38 8
27.2, 2
30.6 1
3KB: 1
40050 1
29.10: 2
3:50,3:50. 1
34920. 1
4). 7
27.4: 2
300, 2
3” 1
4088), 1
29.1: 2
3; 3
35 12
4.1 1
27.6 2
3000, 1
4-GB 1
40KB 2
29.3 2
3A: 2
36.4% 1
400MB 1
28.14 2
32896; 1
4. 27
45 6
29.9: 2
3K 3
3:50,3:50 2
4096 3
28.2; 2
335, 1
4.1). 1
48KB 4
2: 3
3KB. 2
3KB 3
47 2
28.3: 2
34 12
4.2. 1
49, 2
2KB), 1
4(%esp), 2
3Like 1
49).” 1
28.5 2
372K 1
4.8 1
4KB 16
3) 2
4-KB 3
3] 1
3a); 1
28.9, 2
39016, 1
40%) 2
4m 1
30-byte 1
4.2: 1
4:1, 1
4(%eax) 1
28K 3
3B: 3
40. 2
4page 1
30.10: 1
4.3) 1
4:10, 1
4, 5
29.11: 2
4.3: 1
4088. 1
5, 6
30.12 1
4.3BSD 1
4MB 2
4-bit 3
29.2: 2
4.5 2
4200, 1
5.4: 1
5.6 1
4.4 2
4.4: 1
5. 27
29.4 4
4096, 2
44:1/2. 1
30.13). 1
50, 5
42 7
4.6 1
50. 1
2; 5
4146 1
46273, 1
30.1: 1
50,000 2
4200 4
40, 2
60% 4
2K 6
43 8
4b, 1
30.3 1
5000, 1
4: 2
4000, 1
6100, 1
2k 1
4a: 1
5% 3
30.9: 1
50th 1
31 21
44 6
64-Byte 1
30.10): 1
4k 1
5(2): 1
4b 4
512-byte 1
32-bits 1
4400 1
64-byte 7
30.11: 1
5.1; 1
5), 5
5) 3
526, 1
34KB 1
44000 1
64GB 1
30.14). 1
5.2: 1
5.7 1
5.1: 1
59–73, 1
36K 1
4K) 2
6= 2
30.2: 1
5.4 2
50), 1
5.3 1
5th 1
3764 4
4KB). 2
6KB 1
30.3) 1
5121024 1
50-ms 2
50) 1
6.3: 1
384KB 1
4MB), 1
7); 2
30.4 1
54.5%. 1
51, 3
6.5 1
51 18
39 11
4b: 1
7, 2
31) 4
56, 1
55 1
63 3
56483, 1
3980 3
5.3: 1
7.2, 1
5: 2
32 33
5:100,5:100. 1
64). 1
5–7), 1
3A 1
5.5 1
7.4: 1
5→0 2
36, 1
5KB 1
64bit 1
512 9
7.6 1
6) 5
3764-byte 3
6 116
6.4: 1
7.2: 1
55. 1
7.7). 1
6.1: 1
3: 3
4 164
6+5 1
6000, 1
7.4 1
56KB 2
70, 1
6.2) 1
3One 1
4(%eax), 1
6.2 1
64 17
75% 1
57.1% 1
7282 1
6.3 1
4) 2
4.2 1
60 13
7.1, 1
8) 3
6.2: 1
7354 1
64-bit) 1
4-byte 3
4.3). 1
64, 1
7.3: 1
8-byte 1
6.4 2
74 1
64KB 9
4.1: 1
64-bit 10
40 28
7.5 2
8.1: 1
62 2
7620, 1
4.3 1
68 1
400 1
7.6). 1
8.3 2
7) 3
7 127
8.3: 1
40100 1
7). 2
4000 3
70%. 1
8049a1c,%eax 4
7.1: 1
7.2 1
8.5 2
41 10
7.1 1
40000 2
73-96, 1
7.3 2
7.4. 1
83 1
423, 1
7.10 1
9 119
4088 1
7353 1
7.9: 1
7.8: 1
87, 1
448KB 1
7.7: 1
9.2 2
4096-byte 1
78-101, 1
70 2
8k 1
45, 1
7.9 1
90 1
4196 1
8-page 1
7332 1
8 109
9.2: 1
49 1
7232 1
9:2, 1
48 9
8.2: 1
8.1 1
8(%eax), 1
9.4 2
4904, 1
8. 12
<string>\n"); 1
4:100,1:0. 1
8.4 2
8.7: 1
8.2 2
991 1
4:3, 1
8.1). 1
4MB) 1
846 1
80-20 4
80 18
4GB 1
; 25
8.6: 1
5). 6
88761, 1
82% 1
9). 1
4KB, 3
;load 1
820, 1
5.1 1
9) 1
85.7% 1
9.1 1
4a 4
<stdio.h> 15
86 2
50? 1
9.1: 1
8:10, 1
9” 4
<sys/types.h> 1
8KB) 1
A 728
9.3 2
9. 9
;store 1
<sys/wait.h> 3
51. 4
9), 1
5 169
A2’s 1
9.5. 1
9.1). 1
<< 9
<virtual 2
<pthread.h> 8
9.5: 1
5.2 2
ACE 1
90%, 1
9.8 1
549–557, 1
>= 5
6. 20
9.7 1
5.3). 1
ACHE 1
99 7
96 2
A2 1
@ 8
655, 1
90% 1
ACM 11
50 46
99% 2
A: 13
A1’s 1
7), 3
9548, 1
ADD 1
500 4
<fcntl.h> 2
ABOUT 1
AIN 1
7.5: 1
99, 1
AKE 1
512KB 2
: 289
<string.h> 2
AFIPS 4
7.7 1
ANAGEMENT 17
99.9% 1
ALICIOUS 1
512m 7
<assert.h> 4
<unistd.h> 6
AMAT 4
7.8). 1
ANDOMNESS 1
> 5
ALLOCATED 2
52. 2
<stdlib.h> 9
<value>\n"); 1
AME 1
7094 1
ANY 1
A), 2
ALWAYS 1
6). 1
? 9
AND 6
7355 1
A. 29
API. 5
ABCABCABCABCABC 1
APIs, 4
6.1 2
APIs. 1
== 91
75 3
A2, 1
ARM 2
ACKGROUND 1
ASID 9
6.3. 1
AVOID 7
A) 2
76–86, 1
ACM. 2
ASIDE: 4
AM 2
Acta 1
64-bits); 1
About 5
A1 3
7KB 3
ADDRSORT, 1
ASIDs, 1
AMPSON 1
Ah 1
64k 1
Abstract” 1
ACHING 1
8(%eax) 1
AMAT, 1
ATC 2
API, 1
Algorithms” 1
AccessMemory(PhysAddr) 6
All 21
AIX 1
8(9):569, 2
AN 18
ATTACK 1
ARC 1
7. 16
Accounting 1
Allocated 9
ALGORITHMS 1
8, 1
ANGRY. 1
AW 5
ARDWARE 2
7.6: 1
Actually, 1
Allocator 1
AMD 1
8-bit 3
APPING 1
AccessMemory(PDEAddr) 1
ASPLOS, 1
7.8 1
Adam 1
Along 2
8.4: 1
ARGE 1
API 62
AccessMemory(PTEAddr) 4
7.9). 1
ATA 21
Aha! 1
Alternately, 2
8.6 2
ARC, 1
ARPACI-DUSSEAU 38
Accessing 2
70–76, 1
AUSE 1
Ahead 2
Always 4
9.3: 1
ASLR 1
Actually 4
Accurate 1
71755, 1
Abdel-Wahab. 1
Allocator: 1
Andrew 4
9.5 1
Abstraction 2
Adding 7
Again 2
7356 1
Ability 2
Also, 1
Anomaly 2
93 1
Access 9
Address-space 1
Allocation: 2
76 1
Account.html. 2
;add 1
Another 38
Accesses 2
Afraid 2
Allocator” 2
8), 1
Achieving 2
Architecture. 1
< 24
And 108
Affinity 1
Algorithm 5
Almost 1
8.5: 1
Act. 1
Assignment 1
>> 11
Andrea 7
After 21
Also 10
Alto 2
8.7 1
Attempt: 4
Address 25
A; 2
Approximating 1
Algorithms 4
Amazing! 1
80% 7
An 65
August 5
Advanced 1
ALLS 2
Approximation 2
Allows 1
Amazingly, 4
801, 1
And, 2
Automatically 1
Aleksey 3
ANAGE 3
Architecture 9
Alpha, 2
Anderson. 1
85 1
Annual 1
Available 8
Algorithm” 1
ANDLE 1
Argument 2
Alternatives 1
Answer 1
8KB 6
Anomaly. 1
Avoiding 1
Allocated] 2
AS 10
Arpaci-Dusseau, 10
Amazon, 1
Any 3
9, 6
Anticipatory 2
B). 2
Allocating 1
ASPLOS-IX, 1
Atlas. 2
Animal 1
Apparently 1
9-bit 2
Applications 4
B1’s 1
Allocation 3
AZY 1
Atomically, 2
Anyhow, 1
Apple’s 1
9.4: 1
Arpaci-Dusseau 3
B5000: 2
Analysis: 1
Abstraction: 3
Atomicity 2
Anything 1
Approach: 5
9.6 1
Array 4
B86], 1
Anderson, 2
Addison-Wesley, 11
Attacks 1
Appavoo, 1
April 10
940 1
Art 3
B? 1
Assuming 10
AddressOfPTE 1
Apple 3
Available: 29
Are 6
<sys/time.h> 1
Andreas 2
BFS. 1
Atlas: 3
Again, 3
Approximate 10
Average 1
ArpaciDusseau. 1
Android), 1
BSD 3
Atlas”; 1
Alan 3
Aq 1
Avere 1
Artificial 1
Antoine 1
BSTRACTION 20
Attempt 3
Allocators 1
Architecture” 3
A’s, 1
Atlas”, 1
Apple, 2
BUCKETS 2
Award 2
Assume, 3
= 415
B) 3
Austin, 1
Applications” 1
Babaoglu, 1
Although 16
A’s 7
B-tree, 2
A, 16
Authors: 1
Approach 1
Bart 2
Amazingly 1
B-tree 2
B1 1
B 157
ACM, 19
B+96, 2
Approaches 1
Bayer. 1
Amazon’s 1
B5000 4
BFS 1
BOUT 1
AMAT: 1
B. 18
Architectures 4
Belady 3
Analysis 5
BASED 17
Base 3
BSD) 1
APIs 10
BAD! 2
Aside 1
Below 2
And...? 1
BE 1
Base-and-bounds 2
BUCKETS], 4
ASID, 1
BF 2
Ask” 2
Berkeley. 1
Apparently, 2
Assume 33
Before 21
Background: 1
BUILD 1
BFS, 2
April, 3
Beyond 14
Assumptions 3
Beginning: 1
Basic 10
Baby: 2
BIQUITY 1
Arrivals 1
ASY 154
Bits” 1
A’s). 1
Berger, 2
Batch 1
Basically, 5
BSD. 1
AT 1
Boston, 3
Berkeley 7
B, 22
Behind 4
Bad 3
AT&T/Bell 1
Bouron, 1
As 158
Because 50
B-trees); 2
Better, 1
Basu, 1
ATOMIC 2
Beth 1
Broken 3
Atlas” 1
Benchmarking” 1
B-tree” 2
Between 2
Be 5
AUER 1
Bill 1
Bruce 1
Austin 3
Bertinoro, 1
B97, 2
Big 2
Before, 2
Above 3
Block 9
Buffer” 1
B-Trees: 1
Beyond” 1
BEST 1
Birrell. 2
Belady. 1
Abstractions 1
Boles. 2
Burroughs 5
Bigger 1
B: 12
BETTER 1
Bits 1
Belady’s 2
Adaptation 1
Bonwick. 1
Butenhof. 2
Blasgen, 1
BUCKETS; 2
Baby 2
Boneh. 1
Bell 2
Ah, 2
Bosch, 1
C++ 2
Borg. 1
Bach. 1
Balakrishnan 1
Buddy-managed 1
Berger 2
Buffer 9
Broken: 1
Bovet 2
C. 24
Base[SN] 1
Baron, 1
Ajay 2
Berkeley, 2
Bus 1
Buffer) 1
Brooks 1
C.J. 1
Battle 1
Barton 3
Al 8
Bit 3
Buttlar, 2
Bryant 4
CCESSES 1
But 49
Blocked 4
Base[Segment] 1
Allocate 3
Bit-precision” 1
CHEDULE 2
Buddy 1
CCS 3
Boot 1
Baumann, 1
By 58
Allocation” 3
Björn 1
CISC 7
Build 4
CONTROL 2
Bovet, 1
Best 2
Anita 1
Bobrow, 2
CONDITIONS 1
Burchfiel, 2
COW 3
Bradford 2
Better 4
Annals 1
Boost 2
CPU-intensive 4
Buy 1
C 212
CPUs. 7
Brian 2
Bhandarkar 1
Anoop 2
Bounds[Segment]) 1
CPU: 1
Bye 1
CFS” 1
CV 2
BufferOverflow.pdf. 1
Blocked: 1
Approach” 3
Boyd-Wickizer, 3
CPUs). 4
B’s 8
Caching, 1
Burnett 1
CHEDULING 50
Blumofe, 1
Architecture: 4
But, 7
CPUs? 3
C), 5
Casting 1
C) 3
CODE 2
Bone: 2
Aren’t 1
B’s). 1
Calling 8
C-callable 2
Cheap 1
C-language 1
CONCURRENCY 3
Brinch 7
Arpaci-Dusseau. 3
C, 12
Cambridge, 2
C.A.R. 1
Chevalley, 1
C9 1
CONCURRENT 15
Brooks. 2
Assign 1
C.H. 1
CA, 7
Chunk 1
Can 40
C95]. 1
CONDITION, 1
Building 5
CHEDULERS 1
At 31
CACM, 5
Atlas 10
Carl 5
CACM 1
CPU; 11
Butler 3
COMPCON 1
Cocke, 1
CFS, 3
Atomic 2
Charles 1
Butter 2
CPUs 37
CFS 40
CONDITION 19
Cohen, 1
CISC. 1
August, 1
Classic 1
B’s. 1
CRITICAL 1
CHEDULER 1
CPU). 1
Common 3
Award. 1
Communications 20
C; 2
Cache-Affinity 1
CLOCK 2
CPU? 11
Clayton 1
B.W. 1
Compile 1
CISC, 1
Cache” 1
COND 2
CPU 255
CPUs, 14
Coffman 1
B; 1
Complete 1
CPU-optimized, 1
Certainly 1
CPU(s) 1
CPU-bound; 1
Caches 3
Compiling 2
Babaoglu 1
Computers” 1
Chile. 1
CPU. 31
CPUbound 1
CPU, 33
Calls 4
Completion 4
Bairavasundaram, 1
Computing; 1
Chou, 1
CPUs; 2
CPUs), 1
CPUs) 1
Candy 1
Computers 2
Base/Bounds 1
Concurrency. 1
Cilk 1
CS 1
CR3 1
CREATE 1
Certainly, 2
Computing, 3
Base/bounds 2
Conditions? 2
Clark. 1
Calculate 1
Candea, 1
CRUX: 6
Cesati. 3
Concurrency? 1
Became 1
Control 11
Claypool 1
California. 3
Canyon 1
CVs 2
Chapter 1
Conditions 1
Begin 1
Convention. 1
Code 24
Callers 2
Case, 1
Clear 1
Cache 18
Consistency 1
Being 3
Cool, 1
Code00 2
Came 2
Chapman 2
Clements, 3
Caching” 1
Corbato 4
Belady, 1
Cooperative 1
Coherence” 1
Canada. 2
Clearly, 9
Colorado, 1
California, 6
Correct 4
Bershad, 1
Copper 1
Comment 2
Certain 1
Clustering 1
Com-puting, 1
Call 8
Counters” 2
Binary 1
Core 3
Compared 2
Change 4
Coalescing 2
Comes 1
Canada, 4
Cups” 1
Black 1
C’s 1
Computer, 6
Check 8
Cobham. 1
Compare-And-Swap 2
Case 4
Custer, 1
Boilen, 2
D.A. 1
Concept” 1
Child: 2
Cobham’s 1
Compare-and-swap 2
Cassandra, 1
Bonwick 3
D. 33
DID 1
Concurrency 1
Christenson. 1
Come, 1
Computer 20
Characteristics 1
Boston 1
D.R. 1
DMA). 1
Circuitry 1
Concurrent 25
Compacted 3
Concepts 2
Chemistry, 1
Both 7
Days 1
DATA 16
Close 2
Conference; 1
CompareAndSwap(int 2
Conceptually, 2
Child 1
Bottom 1
Declaring 1
DOO 1
Commu-nications 1
Control: 1
Comparing 2
Condition 6
Chunks 2
Bouron 1
Definition 1
Dahm 4
Compilers 1
Controlling 2
Compatible 1
Consider 2
Clock 2
Brother” 1
Denning. 2
Darago, 1
Completely 5
Cores” 2
Complex 1
Conway. 1
Coarse-grained 1
Burroughs, 1
Denning’s 1
Data 13
Computers, 3
Couleur, 2
Concurrency), 1
Corporation” 1
Coding 1
C: 2
Dennis 6
Decepticons1 1
Computer” 5
Counters 8
Conference 1
Could 1
Coherence 1
CFS) 1
Design” 4
Dekker, 2
Computing 4
Critical 2
Considered 2
Couleur 1
Come 3
CMU 1
Detect 1
Dennis) 1
Concept: 1
Crockford’s 2
Contents: 1
Counting 2
Conditions: 1
Directory, 1
CONCURRENCY: 15
Descheduled 1
Contents 1
Culler, 2
Corbato. 1
Creation: 1
Conference, 7
Dissertation 1
CPU), 6
Design 3
Doing 23
Currency 1
Corbato’s 1
D.B.G. 4
Cores 1
CPU-bound 2
Contrast 2
Dialogue 3
EASUREMENT 1
Current 3
Corporation 1
Daley 1
Corporation, 1
CPUintensive 1
Conversely, 3
Dijkstra. 9
EBOOT 1
Cutler, 1
Correcting 1
Davis 8
Costs 1
CPUs: 1
Caching 1
Dijkstra’s 5
ERFECT 1
DBMS), 1
Counter 6
DeWitt. 1
Countermeasures” 2
Convoy 1
Capel 2
Donald 1
ESOURCES 1
DO 1
Cox. 1
December 8
Create 3
Corbato, 5
Center, 1
EAD 1
ETH 1
DVICE 1
Craft 1
Deciding 1
Critically, 1
Corporation. 1
Chang, 1
EAKED 1
Each 19
Daily 1
Cup 1
Dennis. 1
Correspondingly, 1
Cilk-5 1
EAL 1
Earliest 1
Delete 1
D 109
Cybertron 1
Detection 1
Corwin, 1
Class? 2
Ed2.pdf. 2
Denning 1
EASY 38
DEC 3
D, 2
Development, 1
Cox, 1
Cocke 1
Either 4
Detail 1
EC2 1
DEKKER’S 1
D.H.J. 1
Dickey. 2
Create: 1
Code: 2
Emacs 1
Deterministic? 1
ECIDE 1
DRAM 1
DD 1
Different 5
Custer 1
Commodity 1
EvictPage() 1
Deuterium” 1
ECTION 1
Daggett, 1
DRAM, 1
Dijkstra; 1
DOS 1
Compaction 2
Experiment 1
Development 2
EE 1
Data: 2
Dave 3
Douglas 1
Deadline 2
Computations” 3
Facebook). 1
Dick 2
EKKER 1
David, 2
David 19
EALLY 1
Death 1
Compute 4
Far 1
Direct 8
EMBRYO, 1
Dealing 1
Dead: 1
EC-11:2, 1
Decision 1
Concurrency: 2
FetchAndAdd(int 2
Disk 5
EPARATE 1
Debugging 2
Decay-Usage 1
EEDBACK 11
Depending 2
Considering 1
Find 4
Distributed 5
EXCLUSION 1
Dekker’s 6
Department, 1
ELADY 1
Design, 1
Context 3
Fine-grained 1
Do 18
Edsger 8
Destroy: 1
Dijkstra, 4
ERMS 4
Despite 1
Control, 1
Forgetting 3
Effectiveness 1
Does 29
Detailed 1
Dilemma” 1
ESTRICTED 1
Details 1
Copy-on-write 1
Formalizations” 2
Embedded 1
E. 20
Developer’s 4
DisableInterrupts(); 2
Determining 1
EYOND 27
Corbet. 2
Fortunately, 9
Emery 1
EC-11, 1
Diego, 4
DiskRead(PTE.DiskAddr, 1
Dharmendra 1
Edward 2
Couleur. 1
Fred 1
English 1
ECHANISMS 11
Dijkstra 12
Distribution 1
Digital 2
Electronics, 1
Covering 2
Fun 3
Entry 3
EGMENTATION 12
Dirty 2
Doctoral 1
Discusses 2
Emacs. 1
Creating 2
GB 7
EnvyFS” 1
END, 1
Distribution, 1
Doesn’t 1
Done 1
Embedding 1
Creation 6
GHz 2
Ever 2
ERFORM 1
Dr. 1
Donkey. 1
Druschel, 1
Don’t 17
Culler. 1
GUIDELINES 1
Exactly 1
ESS 1
ECESSARILY 1
Examine 9
E) 1
Download 4
Culler’s 1
George 2
Exclusion 4
ETTING 1
ECURE 2
Examples 3
EARN 1
D′ 2
C’s, 2
Given 15
F.H. 4
EVELOP 1
EG 1
Exception 1
EASON 1
E.W. 2
D) 3
Good 8
FIFO. 4
Ed2.pdf 1
EGAIN 2
FAULTS 2
EDUCE 1
EALING 1
Google, 2
DDRESS 25
FIFO’s 1
EnableInterrupts(); 2
FIFO; 2
EMORY 36
ELOCATION 2
Gray. 2
ECHANISM 30
DVANCED 13
Factors 1
Engineering 1
FOR 2
END), 1
EMORY-M 1
Gray’s 2
ECHNOLOGIES 1
Daley. 1
Failing 3
Envision 1
Factor 2
ETTER 1
Group, 1
EMORY: 26
EECS 1
Daniel 3
Fair 6
Evans. 1
Fall 5
EVEL 11
HARING 2
END? 1
Database 1
Fast, 2
Every 1
Fill 1
Earl 3
HINGS 1
EPLACEMENT 2
Default 1
Fekete. 2
ERSION 166
Evict 4
Finding 2
Earlier 2
HY 5
EPRESENT 1
Definitely 1
Fetch 5
ESX 2
Execute 7
Finite 1
Earth 2
Handled) 1
ERSISTENTLY 1
Dennis, 2
ETERSON 1
Extract 1
Finnish 1
Edition)” 2
Hawkins, 1
ESIGN 1
Devang 2
Eindhoven 2
FIFO? 1
Firefox, 1
Environment” 4
Hazelwood, 1
EY 4
Directory 5
Electroanalytical 1
Facebook) 1
Errors” 1
Header 2
Figure 335
Easton, 1
Discovering 1
Electronic 2
Fagin. 1
Evolution” 2
Hill 1
File-System 1
Easy, 2
For 194
Dissertation, 1
Emacs7 1
Fairness 2
Example 18
History” 1
Final 4
Edwards, 4
Forget 1
Dominion 1
Engineers 1
Examples”. 1
Home 1
First: 1
Finally, 70
Elias 1
Fredkin, 2
Dynamic 7
Equipment 2
Excellent 1
Huge 2
Flag 2
Fit 4
Enough 1
FreeBSD, 1
Era 2
Execution 8
Human 1
Flash-based 1
Flexible 3
Epema. 1
Future, 1
Europe(!). 1
Extra 1
Flesh 2
Fox. 1
E 195
Epema’s 1
G 12
Evaluating 4
F. 8
Forin, 1
Frame 1
EFERENCE 1
I 171
Even 20
G.L. 2
Evaluation 2
F.J. 1
Frans 4
Free-Space 1
ENERALITY 1
I/O-intensive 2
Example: 6
Gain 2
Exactly. 2
FAULT 1
Free 8
FreeBSD 3
ERMINOLOGY 1
I/O: 4
Experimental 2
Gandhi, 1
FFICIENT 1
FreeBSD” 1
Frigo, 1
FIFO 37
Early 3
Garner 1
F 36
FIFO, 7
Freedom 1
Gaming 2
FILENO). 1
Efficiency 2
Generally, 1
IECES 154
FAST 7
FIRST 1
Frequency 1
Generally 1
FOOLISH 1
Efficient 2
Gray, 1
IKE 1
FIFO: 1
FIRST)? 1
Friedman, 1
Generate 2
False) 10
Eligible 2
Grove, 3
Facebook, 1
FLOW 1
IP 41
Full? 1
Gets 2
Farrell, 2
Elliott 1
Guerraoui, 2
Farm 1
Facebook. 1
IRTUAL 19
G62]. 1
Goodman. 1
Fault 4
Errors 3
Gupta. 2
Fast 4
Failure 4
IRTUALIZE 5
GB) 2
Goodman’s 1
February, 1
Evans 1
HAPTERS 1
FindFreePhysicalPage() 1
February 16
ISN’T 1
GNU 3
Gray 6
Fellner, 1
Everyone 1
HOLD 1
First-in→ 11
Fetch-And-Add 2
Implementing 2
Generalized 1
Great 5
Evolution 1
HREADS 1
Framework 1
First, 58
FetchAndAdd(&lock->ticket); 2
In-ternational, 1
Germond. 3
Greenfield. 1
Examination 1
HW 1
French 2
Fleischmann, 1
File 3
Indeed 1
Getting 1
HARES 1
Handles 1
FASTER 17
From: 1
Form 1
Informatica, 1
First 23
Goh, 1
HEN 4
Hard 1
FFICIENTLY 2
Fujiki, 1
Fourth, 1
Internet 1
Fleischmann 1
Gorman. 1
Hansen. 5
Hash_Insert(hash_t 2
FILENO 1
Function 2
Francisco, 1
Introduced 3
Flow 6
Grows 2
Hansen’s 2
Heap01 2
Failed 2
GAINST 1
Inverted 1
From 23
Frankenstein 1
HINK 1
Hence 2
Hill. 1
Farm” 1
Gibson, 1
Isn’t 2
Further, 8
Freeing 2
Hank 2
Herlihy. 2
Hit/Miss? 4
Faster 2
Go 4
Isolation” 1
Fusion 1
G) 1
Harper 1
Hochshule 2
Hoare 4
Feedback 5
Goals 2
Issue 4
Futex 2
GB). 1
Here’s 4
Humorously, 2
Hong-Tai 1
Festschrift 1
Goodness, 1
Italy. 1
G.A. 1
GE, 1
Hey, 1
I/O, 3
Hussein 1
Figures 2
Graham. 2
I’m 5
GBs 1
Get 5
Historical 4
ICKETS 1
Hydra” 1
Follow-on 1
Guide 3
J.S. 1
Gates 1
Golding, 1
History 4
IFIPS 1
I. 1
Fortunately 2
H&P 2
G. 9
Gecsei, 1
Gruss, 1
Hoc 2
II) 1
Jack 5
Golub, 1
Geometry 2
H. 20
How, 1
IME 2
I/O 86
H 42
Jacqueline 2
Good, 1
Ginting, 1
HOW 6
Hybrid 2
IZES 1
IBM” 1
HARE 14
Josep 1
Google 2
Glaser. 1
Handbook 2
I! 1
Idea 2
IGHER 1
HFE-1:1, 1
Joseph 1
Gouicem, 1
Glenn 4
I/O; 3
Hardware 18
If, 9
IMMEDIATE 2
HTTP 1
K. 1
Growing 1
Going 1
I/Os 3
Harmful” 2
Implement 4
IO). 1
Hall/CRC 2
IRECT 15
Guide” 1
Gollum, 1
INITIALIZER. 2
Harry 2
In, 2
KASLR, 1
Hardware/Software 1
IRTUALIZATION 5
Guide. 1
Hash_Init(hash_t 2
INTRODUCTION 15
Inputs 1
HE 83
KB); 1
Heap: 1
ISSES 1
HERE 1
IP) 1
Heap 16
Instrumentation” 1
HPUX 1
KB, 1
Hear 1
HICH 1
ISTORY 1
Henry 1
Intelligence 1
KEY 1
Heinrich. 3
HP, 1
HYSICAL 27
Hershey. 1
Issue: 3
If 167
Imagine 39
KPTI) 1
Here, 13
HREAD 12
Hall, 5
Handbook” 1
Happened 2
Hastings, 1
Having 4
He 3
Heavyweight 1
Hennessy 3
Hill, 3
Hint: 2
Hit 29
Hoare. 1
Holding 1
Holt. 1
Hierarchies” 1
Increase 1
Kanev, 1
Hershey 1
HREE 154
It’s 4
Horn. 3
Initial 3
Kathryn 1
High 2
Handle 4
Jacob, 1
HotOS 2
Initialize 3
Hits 2
Kernel 14
Harcourt, 2
Jason 1
How? 1
Instruction 4
Hits+M 1
In 387
Key 1
How 141
Hardware?” 1
Jeff 3
I, 1
Intel. 1
Hopefully 2
Includes 2
L->head 8
Hydra. 1
Has 1
Jeffrey 1
I/O. 10
Job 11
House, 1
Incorporating 1
L4) 1
I/O). 3
Hash 8
Internals: 3
ID 7
Johnson, 1
Hydra 1
Incrementalism, 1
LEXIBLY 1
I/O? 1
Hash_Lookup(hash_t 2
Introduction 8
IMER 1
Jonathan 3
I/O) 2
Indeed. 1
LGORITHMS 1
IALOGUE 4
Heart 2
Intuitively, 1
INDETERMINATE, 1
Journal 7
I/Os. 1
Intel’s), 1
LOCK 2
Helen 1
INTERLUDE: 11
Isolation 1
INVERSION 1
K 6
IBM 9
Interludes 1
LRU. 3
IT! 1
J 1
Here 30
IT 3
KB. 4
IDs 2
Interposition 1
LRU’s 3
Ideas 2
January 14
His 3
ITH 4
Kaashoek, 4
IEEE 7
IF) 1
LWN 2
Imagine, 4
Joy 2
History: 1
June 13
Keeping 2
Kernighan, 1
INITIALIZER, 2
Labs” 1
Implementation 6
Hive/HDFS, 1
ITHOUT 2
KB), 1
Introduction), 1
Kilburn, 4
IO 7
Lacking 1
Inc.. 1
Hmm... 2
Implementation” 1
Knowlton. 1
Invalid 2
Knuth 6
LRU 33
Lauer 2
Incorrectly 1
Homework 28
IRE 5
Indeed, 20
Jaswinder 1
L. 10
LW 1
Lawall, 1
Information 6
Hopefully, 4
ISCA 4
Influenced 1
Javascript 2
LOW 1
Language” 2
Laziness 2
Innocent 2
Hovav 1
IST 2
Ingo 1
Job:B 1
LRU? 2
Large 2
Licklider. 3
Innovator’s 1
ITS 1
Instructions 1
John 14
LaTeX, 1
Lauder. 1
Like, 1
However, 120
Interactive 1
Ideally, 2
Interestingly, 3
Journal, 2
Labs 2
Least-Frequently-Used 1
Linux) 2
Hugh 4
Interlude: 4
Included 1
Investigator. 1
KB-32 2
Lampson 6
Letters 3
Lipman 1
I/O), 3
Interrupt) 1
Index 11
It 92
Larry 1
Lipp, 1
IA-32 4
Ion 2
KB64 1
Inserts 2
Let’s 90
Iyer, 1
Law. 2
Lisa 1
IBM, 1
Israel. 1
KNOW 1
Levels 1
Jones. 2
Instead 20
Learn 1
List_Lookup(&H->lists[key 2
IGHT 1
Italian, 1
Kawamoto, 1
Limits) 1
Jose, 7
Instinct, 1
Length 1
Lock 12
IMITED 15
Jackson-Edwards. 1
Know 2
Lindberg, 1
KB 18
Intel, 2
Levin, 1
Locks.” 2
INUX 1
January, 2
L3 1
Linear 2
Kanev 1
Interaction 1
LoadLinked(int 2
Logistics 1
IRIX 1
Jiaqi 2
LATER? 1
Linus 1
Kaufmann, 5
International 3
Loads/Stores 2
Lord 1
IS 1
Job:A 1
LESS 1
List_Pop() 1
Kay 1
Interrupts 2
Lots 2
Lower 1
ISBEHAVIOR 1
Jobs 2
LRU, 11
Lottery 6
Keep 4
Interscience, 1
Low 2
Its 4
Idea1 1
Joe 3
Languages 2
Louisiana. 1
Keith 1
M62, 1
Lucco, 1
I’d 1
Induced 1
Joy, 1
Lauer. 2
Kenneth 2
MAC 2
M. 35
Lynch, 2
I” 1
Instead, 7
Jozef 2
Intel 10
Kleiman, 2
MAP_ANON|MAP_PRIVATE, 1
M.J. 6
MA, 2
Lauer’s 2
Jr., 1
Interesting 1
Knowing 3
J. 33
MAX; 2
M83]. 1
MANUAL, 1
Lectures 1
Juan 1
International, 2
Krieger, 1
Jain. 1
MEMORY 1
MB, 1
MIT 5
Lepers, 1
Julin, 1
Is 14
L1 4
Jain’s 1
MIPS 14
MBALANCE 1
MLFQ: 3
Letters, 2
June, 1
Issues 6
LAW) 2
James 1
MPORTANCE 1
MIN). 1
MMU; 1
Libraries: 1
It” 1
Just 15
LDE 1
Java. 1
MS-DOS. 1
MLFQs 1
MPLEMENT 1
Linked 8
I’ll 3
KB) 3
LL/SC 2
Jim 8
MULATING 1
MMU, 1
MQMS, 1
Linux). 5
Johnstone, 2
Karels, 1
Jing 1
LOCK-BASED 15
Mac 12
MORE 2
Mac! 1
Linux” 1
Joint 5
Ken 2
Job:C 1
LRU-like 1
Mach 1
MS-DOS 1
Mac) 1
Lipman. 4
July 4
L1) 1
Joe’s, 1
LRU→ 11
Mail. 1
MUTEX 2
Manager” 1
List_Insert(list_t 4
KASLR” 1
L2 1
Joy. 1
Lamport’s 1
Malloc(sizeof(myret_t)); 2
Maintenance 1
Managing 1
Lists 5
KB). 1
L4. 1
Joyce. 1
Laszlo 1
Management, 2
Manual”. 1
Manchester 3
LoadLinked 2
KB-64 1
L60, 1
K+96]. 2
Least-RecentlyUsed 1
Manuals 1
March 14
Marco 2
Locking 2
KPTI, 1
L78]. 1
KB; 2
Leave 1
Mao, 3
Mark 14
Matteo 1
Longer 1
Knowlton 1
LLUSION 1
KPTI 1
Led 1
Mars?” 2
L 59
Mattson, 1
Low-level 1
Lampson, 2
Keeps 2
Leonard 2
Mars 5
McCarthy. 2
L->head; 8
Maurice, 1
Lu. 2
Lanigan, 4
Kernel” 1
Let 18
Martin 1
McCarthy’s 2
LATER, 1
McCall. 2
MAX) 1
Lanyue 4
Kleinrock. 2
Libraries 1
May, 1
Meehean. 1
LDE). 1
Measure 5
MB 1
Late 1
Knuth. 1
Like 6
McCarthy 2
Meehean’s 1
LLOCATE 1
Measurement, 1
MIT), 1
Levy. 2
Kuehner. 1
Lock-based 2
McGraw-Hill, 2
Megiddo 1
Mellor-Crummey 4
LOCKS 23
MMU 3
Lighting 1
L4 3
Look 1
Measuring 2
Meltdown 2
Last 1
Mac. 1
Memory 58
Linux. 8
LATER 1
Loops 1
Melvin 1
Mesa, 1
Later, 2
Making 3
Menace 1
Linux’s 2
LISP 1
Lu, 4
Memory: 3
Microprocessor 3
Lee. 1
March, 1
Mistakes 1
List: 2
LWAYS 1
Merritt, 2
Microsoft, 1
Leffler, 1
May 11
Molnar 1
List_Init(list_t 4
Lampson. 2
Michael 10
Microsystems 1
Levy, 5
M 139
McCarthy, 2
Multi-Threaded 2
Little 2
Lampson’s 1
Miller. 2
Minimize 2
Library” 2
MAC, 1
McGee. 1
Multi-threaded 1
Liu, 1
Las 1
Milton 1
Modadugu, 1
Linux); 1
MALLER 15
Mechanism: 2
Multics 14
Locks: 2
Later 2
Minneapolis, 1
MongoDB, 1
Linux, 15
MIPS, 2
Membrane 1
Multiprogrammed 5
Long-Running 1
Lavington. 3
Miss? 1
Moseley, 1
Linux-based 3
MM00]. 2
Metha 2
Murphy, 2
Long-running 1
Law, 2
Mitoma, 1
Motivating 1
List 7
MMU. 2
Metrics 1
Must 2
MALICIOUS 1
Leaks 1
Models” 1
NCREMENTALISM 1
List_Init(&H->lists[i]); 2
MQMS). 1
Michael, 2
NBA 1
MIT, 1
Learning 2
Monitors 1
ND 10
List_Insert(&H->lists[key 2
Mac, 1
Microsoft) 1
NIX/C 1
MLFQ. 2
Leiserson, 1
NECESSARILY 1
More 24
List_Lookup(list_t 4
Main 1
Mixed 1
NIX: 1
MQMS 2
Levy 1
NPUTS 1
Most 9
Load-Linked 2
Malcolm 1
Modha. 1
NOT 1
Macintosh 2
Life 1
NT 4
Multiprocessor 4
Load-linked 2
Malloc(), 2
Moir 6
NSA? 1
Make 5
Limited 6
Namely, 1
Mythical 1
Management 11
Mountain, 1
Locks 29
Man-Month” 1
Line 3
Naval 1
NDERSTAND 1
NTRODUCTION 59
Manchester; 1
Multics. 1
Locks”) 2
Massachusetts. 2
Network 1
NE 1
NT” 2
Manifesto” 1
M.K. 1
Maurice 2
Linux 107
Neumann 2
NIX 55
NGINEERS 1
Nancy 2
Manual” 3
NULL); 35
Maybe 1
Live 1
New 9
NIX, 2
Narrow 1
MASK 3
Many 21
McDougall. 3
NULL, 20
Load 4
Nickolai 4
NIX-based 6
Neely, 2
MIN 1
Marvin 1
McKusick, 1
NUTH 1
Loading: 2
No-eXecute), 1
Nimrod 1
NTERLUDE 35
MRU 2
Mechanism 1
McVoy 1
Neither 1
Locks, 1
Note, 2
Nir 2
Ma. 2
NULL 20
Memory, 1
Measurement 2
Nelson 1
Long 1
Nuclear 1
No, 2
Machine” 1
NY, 1
Memory-mapped 1
Meltdown, 1
Nethercote. 1
Looping 1
OFFSET_MASK 7
Node_t 1
Man 3
NeXTStep 1
MenuMeters 1
Mesa 4
Next 2
Looping-Sequential 1
OK 4
Non-Cooperative 1
Management” 2
Negative-Growth 1
Mesa” 1
Metric: 1
Nobel-prize 1
M.I.T., 1
OMPILED 1
Markowitz, 1
Not 23
Nelson, 1
Microprocessors 1
Microsoft 4
Nothing 4
MAX_HEAP_SIZE; 1
Markstein. 1
ONCURRENCY: 15
Notes 4
Nevada, 1
Modern 3
Microsystems, 1
Nucleus 2
MB) 1
Massachusetts, 1
ONSTANTS 1
Novark 1
Newell, 1
Mr. 1
Mike 2
Numbering 1
MIT. 1
Mauro 2
ONTEXT 2
Number 8
Next, 9
Much 9
Modeling” 1
MIT’s 1
Mayer. 2
OOT 1
O(1) 4
No-Locality 2
Muller, 1
Montreal, 1
Media, 3
OPT? 1
MLFQ 32
O(log 1
No. 6
Multi-Queue 1
Morgan-Kaufmann, 2
Methods 1
MORTIZATION 1
ODING 1
O 247
Non-Coalesced 1
Multics, 6
Multiprocessing. 2
Microsoft’s 1
MUTUAL 1
OINTER 1
OES 1
Now? 2
Multiprocessors” 5
Multiprogramming 4
Miscellaneous 1
Mangard. 1
OK? 2
OFFSET 1
OK! 2
NABLES 1
Manual: 3
OOK 1
N 41
OMEWORKS 2
Miss 29
OMPLEXITY 1
NIX. 2
Manuals” 3
NCE 1
OPTIMIZATION 1
OPERATING 42
ONTENTS 1
Morgan 6
NOWLEDGE 1
Maxwell’s 2
NT, 1
ORRECT 2
OPT. 1
OPT 4
Morse. 1
NULL2 1
McKinley, 1
NTERLUDES 1
OS), 2
OS). 2
OS) 2
OS 504
Most-Recently-Used 1
Navarro, 1
Mechanisms 3
NTERPOSITION 1
OSDI 10
OS? 4
Offset 15
OS-ignorant) 1
Multiple 1
Needed 1
Memory” 1
NULL; 22
Obtaining 1
OSSIBLE 2
Oh 5
OSes 2
Multiprocessors. 2
Nethercote, 1
Microsystems. 1
NUMCPUS; 4
Oh, 1
Old 2
Multithreaded 3
Ngram 1
Minimally, 3
NUMPAGES. 1
Orwell. 2
One”. 1
Mysterious 1
Nice. 1
Mitchell. 1
NX 1
Orwell’s 1
OSTEP. 166
OpenSolaris 1
N. 7
No 10
Mogul, 1
National 1
One 135
O’Hallaron 2
OSTS 1
Orr, 1
NOW 1
Novark, 1
Morris, 4
Nemacolin 2
O’Reilly 3
Only 10
OS” 1
Overflows 1
NTERRUPT 1
Overview 3
MostFrequently-Used 1
Nichols. 2
P3 1
Oops! 2
Object-Caching 1
Nucleus. 1
NULL) 6
O’Reilly, 2
Moving 1
Nope, 1
Open 2
PC 16
O. 1
NVERSION 1
P1’s 1
Operating 38
Mozilla 1
Orran 1
PCD, 1
OCALITY 1
Note 34
Need 2
Operation 1
PC, 7
Mudge. 1
PFN=55 1
Other 15
November 10
NetBSD, 1
OCK 16
Or 9
PCD 1
Multi-Level 4
PID. 1
Ousterhout 3
O(n) 1
Node_t; 1
OESN 1
Overall, 3
PDE. 1
Multi-level 7
PINNING 2
P1) 1
OFFS 1
Overlap 2
OF 9
POSIX, 2
Multics” 1
P2 3
Now 79
POSIX 20
OK, 11
O’Hallaron. 2
OK; 1
PPN) 1
Mutual 4
PCs, 2
OAD 1
PPLICATION 1
O’Reilly. 2
OLUTIONS 1
OMPLETE 19
PROT_READ|PROT_WRITE, 1
NDETERMINATE 1
OBS 1
PTE.PFN 1
P.M. 1
OMPARING 1
ONTROL 8
OO 1
NIX! 1
OK: 1
PTE.ProtectBits) 3
P1 6
ON 12
PTE. 3
ORE 2
NOMALY 1
ONDITION 1
PTE: 1
OOLS 1
PACE 21
PTE.PFN, 3
NUMPAGES 2
ONG 1
OS, 31
PERATING 184
PTEs). 1
PAT, 1
OS; 8
PTIMAL 1
Neat 1
ONSIDER 1
OSes, 1
PFN_SHIFT) 1
PWT 1
PDE 8
OSSpinLock 2
Pacific 3
Netzer 2
OPERATIONS 1
OUBT, 1
PRIORITY 1
Paranoia 1
PDP-10” 2
PageDirBase 1
Non-compacted 1
Part 6
OUR 2
PTEs. 1
Of 70
Pass(C) 1
OW 34
On 21
Per 5
Now, 26
Padegs. 1
PD_SHIFT 1
Pathfinder. 2
Perfection, 1
October 17
Once 41
Paging, 1
ORK 1
OCKS 23
Perl, 2
Perhaps 15
Optimal 3
Or, 7
Parent 6
PIECES 38
OS: 1
ODE 2
Pfaff, 1
Phoebe 1
Oracle 3
Organization 1
Park, 2
PLDI 3
OSTEP! 2
OFTWARE 1
PhysAddr 8
Pioneered 1
Otherwise, 1
Ott. 1
Pass(B) 1
OU 1
OK. 2
Pick 3
PTE 17
Pn−1 1
P0), 1
Our 25
Paul 3
OWERFUL 1
Plot 1
OLICIES 16
PTHREAD_COND_INITIALIZER; 3
Pointed 2
P1, 2
Ousterhout, 2
O_CREAT|O_WRONLY|O_TRUNC, 1
Overhead 3
Preemption-safe 2
OLICY 4
PT_SHIFT 1
Positive 1
P=0 1
Performance 11
O_WRONLY|O_CREAT|O_TRUNC, 1
Prefetching 1
P. 12
ONCURRENCY 3
Page, 1
Precise 2
PAGE 6
Pesterev, 3
Obviously 1
Pren-tice 1
P6 1
Page-Reference 1
Privileged 3
ONCURRENT 16
PAGING 22
Point 1
Occur 1
Primer 1
PageTable[39] 1
PAT 1
OOPERATION 1
Probably 11
PEED 1
Policy: 2
Oddly 1
Priority] 2
Paged 2
PDE, 1
Problem: 6
PETERSON’S 1
Pollack, 1
Often 1
Pass(A) 1
PERATIONS 2
Problems” 1
PF 3
Process 35
Positive? 2
Operations 3
Process0 12
PFN) 2
Proceedings 2
PID) 1
Prentice 4
Patt 1
Organick. 1
PHit 1
Processes 8
Processes, 1
PPROPRIATE 1
Presented 1
Performance” 1
Organization” 1
PID 5
Processing: 2
ORG 166
Professor 5
PT: 2
Priority 4
Perspective” 5
Over 6
PM 4
Processor” 1
OR’d 1
Producer/Consumer 5
Programming 15
Professor? 1
Pieces 2
Overflow 1
PREMATURE 1
Page-Fault 2
PTE, 6
Programs 4
Programmer’s 2
Pillay. 1
OS. 26
P4 1
Producers 1
PageTable[1] 1
Pthread_join(p, 4
Protected 1
Pioneers, 1
OSes. 1
Page 39
PACES 8
Professor, 1
Paging 6
Pthread_mutex_lock(&c->lock); 6
Protocol 3
Portable 1
Pthread_mutex_unlock(&mutex); 8
PageTableBaseRegister 1
PD 2
Programmers 4
Patel 1
Putting 1
OS’s 4
Prediction 1
Pal 1
Q1 15
Parallel 3
Project 3
Patterson. 2
Q2 9
Oregon. 1
Preemptive 1
PDEAddr 2
Quanta 1
Passing 2
Protection 7
Peterson. 2
Orleans, 1
Present 1
Questions 26
PDIndex 1
Queue_Dequeue(queue_t 2
Pathfinder/Authoritative 2
Pthread_create(&p2, 5
Peterson’s 6
Pthread_mutex_lock(&mutex); 8
Press, 7
RACE 1
PDP 1
Queues: 2
Patt, 1
Ousterhout. 3
Phenomenon” 1
Pthread_mutex_lock(pthread_mutex_t 2
Price. 1
RANSLATION 15
Peanut 2
Ousterhout’s 2
PFN 43
R 21
Physical) 1
Purify 1
Priority(B), 4
RISC-like 3
Persistence 1
Out 2
PID). 1
R+89, 1
Placing 1
Q6 1
Problem 3
ROGRAMS 1
Physical 13
PROGRAMMER 1
README, 1
Play 1
Quantitative 2
Process: 2
RR? 1
Power 1
PT 2
RIORITY 1
Pons. 1
RAIDs, 1
Processes: 1
RUNNABLE, 1
Processing 5
PTEAddr 6
ROTECTED 1
Previously, 1
RE 1
Processing, 1
RY 1
Prof. 1
PTEs 3
RR. 2
Priority, 1
Producer/Consumer: 3
Race 2
ROCESS 30
PTIndex 1
Randal 1
Problems: 1
Professor: 37
Proportional 2
Rachid 2
ROCESSES 1
Page” 2
Randell 1
Processes” 2
P 280
Programming: 3
Proportional-Share 3
Pthread_cond_signal(&c); 4
ROP. 1
Palo 1
Particularly 1
Processor-Memory 1
P0 4
Rafael 1
Proportional-share 1
Pthread_cond_wait(&cond, 6
Random) 1
Patel. 1
Protection” 1
P4, 1
Recall 9
Pthread_cond_signal(&empty); 2
Pthread_create(&p, 5
Rather, 4
Pthread_join(p2, 5
PAGES 2
Pthread_cond_signal(&cond); 6
Recommended 1
Pthread_cond_signal(&fill); 2
RPACI 154
Patent 1
Recognized 1
Pthread_mutex_lock(&lock); 6
PAGESIZE 1
Pthread_create(&p1, 5
Relational 1
Pthread_mutex_lock(&m); 6
Patterson, 1
Reese’s 1
Publishers, 1
PDBR 2
RUX 33
Pthread_mutex_init(&c->lock, 2
References 28
Put 4
Pennsylvania, 2
Q4 1
PDPTA’97, 1
Rago. 4
Relocated 2
Pthread_mutex_unlock(&c->lock); 6
Reliability 1
Q 12
Personal 2
Quarterly, 1
PD_MASK) 1
Ranganathan, 1
Repair 1
Python, 2
Relocation: 2
Phipps 1
Q0 13
PFN, 1
Queue 8
Rashid, 1
RAND 5
Q5 1
Results 1
Plenty 1
Q8 1
PTBR 5
Replacements 1
Ready: 1
RDLK 2
Quarterman. 1
Robin 3
Plus 1
Quicksort, 1
PTE.present 1
Resort, 2
Recall, 1
REMATURE 1
Quote 1
S). 2
PowerPC, 3
RANSFER 1
PTHREAD 4
Resources 2
PTHREAD_MUTEX_INITIALIZER; 7
RISC, 2
R.H. 1
SDS 2
Prentice-Hall, 7
REATE 2
Record 1
Rules 5
PTIMIZATION 1
RR) 1
R.P. 1
SER 1
Presumably 1
REEMPTIVE 1
Refers 1
Running: 1
PT_MASK) 1
RUN 5
R10k 1
SHIFT, 1
Priority(A) 4
Regions 1
RISC 14
Pages 5
RUNNING, 1
Paging: 4
SIGMETRICS 2
Problems 1
Relocation” 1
ROBLEM 4
R4000 5
Proc 14
Paperbacks, 1
SIZESORT+, 1
Remember 5
ROCEDURE 1
RaiseException(SEGMENTATION_FAULT) 5
RAM. 1
Provides 1
Parts”.) 2
Patterson 2
Remzi 6
ROP 3
Random, 5
Pthread_cond_wait(&c); 1
ROPORTIONAL 13
RANSLATIONS 15
Perry. 1
Repeatedly 1
Readings 1
SJF/STCF 1
Pthread_cond_wait(&c, 3
SWITCH 6
Peter 5
Replacement” 1
README 20
ROVIDE 1
Pthread_join(p1, 5
SYNCHRONIZATION 1
Pthread_mutex_unlock(&m); 6
Ready 58
Response 3
S 379
RINCIPLE 2
RTFM 2
Peterson 2
Q3 1
San 12
Recheck 1
Responsibility” 1
S.Sahni). 2
ROM 2
Rago 1
Ph.D. 3
Queue_Enqueue(queue_t 2
Santiago, 1
Reclaim 1
Revolution 1
SEG_MASK) 2
ROPORTIONALLY 1
Raiders” 2
Physics), 1
Queues, 2
Schedulers 1
Red-Black 2
Right! 1
Raiders, 2
RaiseException(TLB_MISS) 1
SJF 21
Pilot 5
Random 21
Seward, 1
Register 8
Rings, 1
RaiseException(PROTECTION_FAULT) 9
SJF/STCF) 1
RADE 1
Policies 3
Ratios” 1
Shan 2
Reprinted 1
River” 1
Randomization” 1
SLEEPING, 1
RAM, 1
Policy 6
Really 3
Similarly, 6
Research 3
Round-Robin 1
Rather 1
Simple 29
REAT 3
Single 7
Recent 1
Restoring 1
Run: 2
STDOUT 1
Reboots 1
Pons 1
Slab 1
REE 19
Reducing 1
Resulting 4
Runs? 1
Saavedra-Barrera 1
Recollections 1
Poor 1
Smaalders. 2
Relationships, 1
RR 14
Reuter. 2
S, 6
Saying 1
Recovery” 1
Portland, 1
Relocation) 2
RSS, 2
So 30
Riak. 1
Sometimes, 9
Scott. 4
Redell. 1
Segment 10
Required 1
RaiseException(PAGE_FAULT) 1
S09]. 2
Sorry3 1
Richard 9
PowerPC 1
Redell’s 1
Segregated 1
Research, 2
Randall. 1
SCHEDULER 1
Speaking 1
Prentice-Hall 1
Remove 2
Sequential 2
Restartable 1
Run 68
Rate 4
SEFUL 2
Spend 3
Pretty 8
Return-into-libc 2
Sequin. 1
Restricted 1
Running, 1
SEG 2
Spider-Man: 2
Principles” 2
Read 38
Review, 3
Shacham. 2
RetryInstruction() 4
Russ 1
SHIFT) 8
Spin 7
Prints 1
Read-Execute 1
Ritchie. 1
Share 4
Review” 2
SJCC, 1
Spin-waiting 2
Probability” 1
SIDE 40
Read-Write 2
Robert 9
Sharing” 1
Ritchie) 1
Size 10
Sploitfun. 1
Problem” 3
SOSP 9
Real 3
S+03] 1
SJF, 4
Roscoe. 1
Software 7
Spurious 1
Process1 9
SPARC, 3
Reduced 2
SHIFT 8
SPARCv9). 1
Routines 3
Sorry, 1
Stallman. 2
SUPPORT 1
Running 24
Reese 1
SIGINT 2
Save 2
South 1
Scalable 10
Program 20
S_IRWXU); 2
Referring 1
S. 22
SIGTSTP 1
Structuring 1
Spectrum 1
Scan-resistant 1
Protection) 1
Saltzer 1
Region 1
S.J. 1
SN_SHIFT 1
Success! 1
Stalin 2
Scheduler 5
Pthread 11
Say 2
Report 2
SECTION, 1
SOMETHING 1
Sullivan, 1
State: 2
Secure 1
Pthread_cond_wait(&empty, 2
Scheduling” 1
Requirements 3
SGI. 1
SPINNING 1
Sun, 2
Steinberg 1
Seg 1
Pthread_cond_wait(&fill, 2
Schroeder. 1
Rewritten 2
SIZESORT-) 1
SSD, 1
Sun.. 2
Stoica 1
Semantics 3
Pthread_create(&c, 2
Scott 10
Pthread_mutex_unlock(&lock); 6
SJF. 2
SSDs) 1
Susan 1
Strategies 2
September 13
Ritchie, 1
Secker 2
Published 1
SN 3
STCF. 1
Sweden, 2
Stride 4
Shared 2
River, 1
Section 1
Python. 1
SOLATION 1
Saint-Exupery 1
SPARC 9
Structures” 2
Shedler 1
Rudolf 1
Q1. 1
Switch 3
Same 2
STCF) 2
See 43
Student, 1
Should 4
Runtime 1
Q7 1
Switches 1
Sanjay 1
Saavedra-Barrera. 1
Seems 1
Showing 1
Such 16
SEG_SHIFT 1
Queue_Init(queue_t 2
Synchronization 8
Schedulability 1
Sadly, 2
Segmentation” 1
Sleeping 3
Supporting 1
SET 2
Queues 4
Synthesis 1
Scheduler” 2
Said 1
Server. 1
Software-based 1
Swaminathan 2
SIGNALING 1
Systems: 6
R. 33
Sanzi, 1
Scheduling 12
Shared-Memory 4
Solution: 1
Swap 4
SQMS 7
R/W 1
T. 14
Scalability 3
Schwarz, 1
Shared-memory 1
Soon 2
Swift. 2
STCF, 1
RAID 1
T2, 4
Scaling 6
Science, 1
Shavit. 2
Sorin, 1
T2), 2
RAM 5
STRUCTURES 16
Scheduled 1
Search 2
Shavit’s 4
Spaces 3
T3, 4
REASON 1
Schedulers: 1
Science). 1
Segmentation 3
Shedler. 1
Spin(), 1
RITICAL 1
TABLES 15
Scotland, 2
Scientific 1
Segments 2
TLB 173
Singh, 1
Spin(1); 2
RR, 1
TECHNICAL 1
Set 6
Scientists 1
Separating 1
TORAGE 1
Slow 1
Star.” 1
Raging 1
TERMS 1
Seward. 1
Served 1
Server” 1
TORE 1
Stephen 4
Rajimwale, 1
Solaris 18
THER 1
Servers” 1
Sharing 12
Shasha. 1
TV 1
Steve 4
Randell. 1
Solomon. 2
THREADS 1
Setup 1
Short, 2
She’s 1
Tb, 1
Stoica, 1
Redell 2
Solution 5
TLB) 3
Shacham, 1
Shortest 6
Simple, 1
Tc2) 2
Streams 1
Redirection 1
Soyeon 2
TLB-miss 1
Shortly, 1
Signaling 2
Simply 3
TestAndSet(int 2
Subsequent 1
Reduce 1
Specification, 1
Silicon 1
Signals; 1
TO 26
Sizes 1
Tf 1
Support: 1
Reese, 1
Stack? 1
Similar 3
Silas 3
TPDS 1
Slutz, 1
They 5
Surprisingly, 1
Reeves. 2
Stanford, 1
Simulation, 1
Simpler 2
Tables 9
Smotherman 1
Thread2 6
Swap-Based 1
Registers 1
Statement 1
Sitaram 1
Single-Queue 1
Tamil, 1
So, 1
Threads? 2
Switzerland 1
Threads” 6
Steven 1
Smotherman. 1
Tc, 1
Sometimes 9
Sleep 40
Relocation 1
System: 1
Tim 2
Storage 10
Smotherman’s 1
Technical 4
Specific 1
Small 2
Replacement 6
Systems” 7
Times 1
Store-Conditional” 2
Solaris” 1
Texas. 2
Spectre 3
Solaris, 7
Report, 2
T3 8
To? 1
Stretch 1
Than 1
Spin-based 1
Some 25
Sood, 2
Represent 1
TCB. 2
Together 1
Subramanian, 3
Spinning 4
Then, 19
Sopena. 1
Sound 2
Resource 4
TILIZATION 1
Tony 1
Suli 1
Splitting 1
Therein, 1
Sounds 6
Special 1
Responsibilities 1
TIP: 9
Too 3
Sun). 1
Sriram 2
Things. 1
Standard 2
Space 20
Ronald 1
TLBWR, 1
Transforming 1
Support 9
Stack 14
Third 1
Stanford 1
Round 3
TOPLAS, 2
Translations 2
Surveys, 1
Specifically, 52
Staelin. 1
Those 2
Starts 1
TS 1
Rule 14
Transparent 2
Swapping, 1
Spectre. 1
Stan 1
Threads 5
Table? 1
State 12
SE 11
Trevor 1
Swift 2
Springer-Verlag, 1
Start 5
Time-Shared 1
Tc1). 1
System 37
System/370” 1
Tucker, 1
Staelin, 1
Status: 1
TimeSharing 1
Steinberg. 1
Thanks. 1
SPINNING: 1
Stallman 1
Stick 1
Two 11
T1 30
Strachey. 1
That’s 6
SS+10]) 1
Stan. 1
Store-Conditional 2
U.S.S.R; 1
TAKE 1
Strachey’s 1
SSD. 1
States 1
STACK: 2
Store-conditional 2
UIDELINES 1
To 152
TLB; 1
Structure 3
Then 17
Stevens, 2
Structures: 1
STCF 8
UPPORT 2
Tp). 1
TLBs 10
There? 1
Storage” 1
Third, 5
Undefined 1
Summary 30
Tracking 1
TOCS, 3
Student: 36
StoreConditional(int 2
Though 5
University 6
SYSTEMS 42
Sun 5
Traditional 2
Ta 3
Study 8
Structures 6
Tickets 1
Upon 3
Saving 1
Users 2
Scheduling: 6
Take 2
Summer 1
Tarrival 3
Superpages” 1
TeX, 2
Trees 1
Time 29
Sun. 2
Sundararaman, 4
VAX/VMS. 1
Support) 1
Test-and-set, 2
Second, 31
Tresponse 1
Today’s 1
Sun’s 1
Supervisor” 1
VAXen 1
Survey 3
TestAndSet(flag, 4
Security 2
Tron 1
Torvalds 1
Support” 1
Swapping 1
VERLAP 1
Systems. 1
Theodorus 2
Segmentation: 1
UMMARY 3
Systems, 3
Trace 9
Swift, 1
VMS, 1
TlbEntry) 4
Self-Tuning, 1
UPERUSER 1
T2 38
Translation 5
Symbiosis” 1
VMware 1
Synchronization” 2
Tolerance 1
Shah, 2
USTERHOUT 1
THINK 1
Trap 2
System” 22
VPN. 1
System, 2
Tuning 1
Sharedmemory 1
UTUAL 1
Trials 1
TLB, 21
VPNs; 1
Systems.’ 1
Types 1
Short 1
Usually, 3
Try 11
TLBP, 1
Va3 2
T1, 12
Single-Threaded 2
V.A. 1
Turning 2
TLBWI, 1
Vegas, 1
Sleeping) 1
THE 9
Typically, 2
U 89
TLB_Insert(VPN, 3
VM 18
Visualization 1
Smaller 1
U/S 1
TLBs, 6
ULL 1
TLBs) 1
VMMs 1
Wanjohi: 1
Sorry! 1
ULTIPLE 2
TM 2
URL: 1
TR 1
VMS), 1
Warburg 1
Space-time 1
UNSW-CSE-TR-0321, 1
TOOLS 1
USE 3
TR-95-22, 1
Va4 2
Warm-start 1
Spending 1
URSE 1
Uh 2
TRUCTURE 3
Valley. 1
Weaver 1
TRUCTURES 17
Spinning: 2
USA. 1
Up 2
Tb 2
T 378
Tcompletion 2
Weiwei 2
Tc2 7
Stack11 2
Undoubtedly 1
Von 2
T1). 4
Technique 1
We’ve 2
Use 35
TeX 1
Stanley 1
Vyssotsky, 1
User 14
T2. 4
Technische 2
What’s 4
User’s 4
Techniques 2
Stevens 6
WAITING 1
VA 1
TENEX 3
Think 12
VAX’s 1
Tell 1
Still 5
WARY 4
TLB: 2
VAX 5
Thompson. 1
VMM-level 1
Terminology 1
Stockholm, 2
Tc1, 2
VAX-11/750. 1
Threading 2
VPN=39 1
Test-And-Set 2
When 122
Stodolsky, 1
Tel-Aviv, 1
VM, 3
Tickets? 1
VPN=42. 1
Test-and-set 4
Wilson. 1
Stored? 1
Thesis, 1
VPN; 2
WWW. 166
Time-to-Completion 2
Value 1
Texas, 1
Wilson’s 1
Structure” 1
This, 2
VPNs 5
Wahbe, 1
Time” 1
Van 4
Thanks 5
Win, 2
Summary: 2
Thomas 3
Va0 3
Waiting 8
Timothy 1
Vancouver, 5
Wisconsin—Madison, 1
That 14
Sumner. 4
Valgrind 2
Thus 24
Wanted 2
Tix:250 1
VirtualAddress 7
Worse: 2
SunOS 1
Vasileios 2
Ticket 3
Was 1
Traffic” 1
Virtualization 5
X/macOS 1
Sure! 1
Tiny 1
Virtual 12
Were 2
Trans. 2
Visually, 1
X11 1
Switching 4
Tix:50 1
Vol. 5
We’d 1
Transformers 1
Vyssotsky. 2
YSTEM 2
Torrellas, 1
Systems 18
W 17
Where 7
Transitions 1
Yet 2
Tp 3
W. 18
TABLE 2
WITCH 1
Tricky 2
Which 12
Yuanyuan 2
Traiger. 1
WAIT 1
TD 2
WITCHES 1
Tturnaround 3
Windows 10
Zhou, 2
Turner, 1
WRONG 1
TEST 2
WORST 1
Tudor 2
Wish 2
[2] 2
Turns 2
Wait 1
WORST)? 1
THREAD 12
Typical 1
Within 4
[A79]) 1
U.C. 2
Waiting: 2
Waciuma 1
UCB/CSD-92-684, 1
Woodlands 1
[A90] 1
THREE 37
Wakeup 2
Wait: 1
UEUE 11
UILD 3
Work 1
[AC97]. 1
Weihl, 2
TLB. 13
Watch 4
UK, 2
ULE 2
[B+18], 1
Workload 11
Whichever 1
Write 11
Weihl. 1
ULLER 1
[B89, 2
ULTI 11
The 821
TLBR, 1
While, 1
We’ll 38
UNIX 7
[B94]; 1
TLB_Lookup(VPN) 4
ULTIPROCESSOR 12
Yale 1
Wikipedia. 1
Whereas 3
These 24
US, 1
[B97] 2
TLBs; 1
Yang, 1
Wilkes. 1
Through 1
Whether 4
USENIX 8
[BC05] 3
TLB’s 1
Yet) 1
Wisconsin 1
Timer 1
Why? 5
UST 1
[BC91]; 1
Yield, 4
Workshop 2
Table 18
Tomlinson. 2
Wikipedia 3
[BH00] 1
Yupu 2
USSEAU 154
XCLUSION 1
Takes 2
Tools 1
Unfortunately, 37
Trace: 4
[BNS69] 1
Transactions 3
Understanding 2
YBRIDS 1
Tc1 9
William 3
Unix 1
Zhiqiang 2
[BOH10] 3
Trigonakis. 2
Unfairness 1
YOU 2
True) 9
Wood. 1
Unknown.. 1
[3] 1
[C+04] 1
University, 2
Tc2). 1
Turing 5
Workstations” 1
Unlock 2
[B72] 1
[C63]. 1
Techni-cal 1
Turn 1
Using 19
Worst 2
Until 3
Unused 2
XECUTION 15
Technique: 1
UNESCO, 1
[B89] 2
V 31
[C69] 1
Useful 1
Y. 1
Techniques” 2
USA 1
TestAndSet() 6
VAX-11 4
[CK68]. 1
V. 3
YNCHRONIZATION 1
YSTEMS 203
[BJ81]. 1
There 42
VERY 1
[CP78] 1
VAX-11/780 1
YOUR 1
UT 1
[C69]) 1
Uman 3
VICT 1
[D68] 7
VAX/VMS 11
Yes. 1
Yes, 9
[CP78]) 1
Uncontrolled 2
VLSI 1
[D97]. 1
VMS. 2
VMS 16
VPN: 1
Variable 2
Version 4
Very 2
Virtual” 1
W.C. 1
WAPPING 1
Underlying 3
Waldspurger. 2
Yield 2
You 89
[DV66], 1
VPN 69
[CS94] 1
Unsafe” 2
This 201
Waldspurger’s 1
Your 1
Zel-dovich 1
[EF78] 1
Va5 3
[CSG99], 1
Thompson 1
VARIABLES 18
Wanjohi. 1
You’re 2
Zonkey), 1
[Free] 1
Virtually 5
[D+13] 2
Thrashing 1
VAX/VMS), 1
Warburg, 1
Zero” 1
[AD00] 1
[G+17] 1
WITH 1
[D70] 1
VM. 1
Weaver, 2
Zorn. 1
[B+00] 2
[G83] 1
[D72]. 1
[GR92]. 2
Weighting 1
[H91] 2
[B+19]. 1
WWW.OSTEP.ORG 42
VPN=0 1
[E06] 1
[AC97]; 1
Thread 95
We’re 1
[I09] 4
[B+79] 1
Wales 1
VPN_SHIFT 1
[E95] 1
[B+13]. 1
Three 4
When, 1
[J91]. 1
Who 4
VS 1
[EF78]) 1
[B+19] 1
[B94]. 1
[JS94] 1
Wiggins. 1
Va2 2
[FLR98]. 1
Variables 3
[BJ81] 1
[K+61,L78]. 1
Wiggins’s 1
[B94] 1
[G04] 1
Virtual-Storage 1
[C93]. 1
[KE+62, 1
Wikipedia? 2
[BC05,G04]. 1
We 166
[H74] 1
WHILE 2
[D01] 1
[L60] 1
Wiley, 1
[BC91] 1
Thus, 206
Well 1
[HP06]), 1
Wei, 1
[D65,D68] 2
[LL82] 4
Windows; 1
[C06]. 2
Time) 2
Werthman. 1
[High 1
Weihl 1
[D68]; 1
[LR80], 1
Woke 1
[C93] 1
Time-Sharing 8
[I11] 2
[D72] 1
[M07]. 1
Wow! 1
[C95]. 1
Times?” 2
[J09] 1
While 31
[FLR98] 1
[M11]; 1
X. 1
[CG68, 1
Tix:100 1
[K64]. 1
Winter 1
[FP89]. 1
[MM00] 2
Xerox 2
[CK+08]. 1
Tom 2
[KE+62] 2
Working 2
[G83]; 1
What 214
[MS04]. 8
ZOMBIE 1
[CSG99] 1
Tp, 1
[L+13] 2
Tracing 8
[H87]. 1
Whenever 2
[MS91] 2
Zeldovich. 2
[CV65,DD68]) 1
Wow, 2
[L+75] 1
Transactions” 2
[HJ92] 2
Whew! 1
[O49]. 1
Zwaenepoel, 1
[D65] 2
Wrapper 2
[L+93] 2
Tree 1
[HP06]). 1
Why, 1
[PS81]. 1
[AD03]. 1
[D70], 1
Write-back 1
[L78] 3
Tricks 1
[J16], 1
Wilson 2
[R97] 2
[B+10] 3
[E95], 1
Xiong, 2
[L83], 1
True 1
[K+61] 2
[S+04] 1
[B+18] 1
[FP89] 1
Y 3
[M06] 1
Two-Phase 2
[K+96] 2
[S04]; 1
[B+72] 2
[G62] 1
With 82
YNAMIC 1
[M11], 1
Two-phase 2
[K64] 1
[S07] 2
[B66] 2
[H61] 1
YPES 2
Without 15
[M15] 4
UNIX-based 1
[KL88]. 1
[SHW11]. 1
[B75] 1
[H74], 1
Yes 1
Word 1
[M82], 4
UNUSED, 1
[KR88] 2
[SR05] 6
[C+62] 2
[H87] 1
York, 6
Worried 1
[MM03]. 1
Unfortunately 1
[L09] 4
[SS+10] 1
[C03] 1
[J09], 1
[1] 2
Worse, 3
[N+02] 1
Unlike 5
[L81] 4
[W03] 1
[C69], 1
[K68]. 1
[A79] 1
Wulf. 1
[N+07]; 1
VALID 3
[LL82]; 1
[WG00], 1
[CM00]. 1
[KL88] 1
[A91]. 1
X, 1
[PP03] 2
VAX/VMS, 2
[LM+89] 1
[WL+93] 1
[CS97] 2
[L83] 2
[B+10]; 2
XD 1
[R97]! 2
VLDB 2
[Low 1
[Y+18]), 1
[D82] 1
[M+63]. 2
[B+13] 1
XIST, 1
[RK68] 1
VMWare’s 1
[M+70]. 1
[virtual 5
[D91] 2
[M+70] 1
[B+79], 1
Xerox. 1
[SA96] 1
VPN, 2
[M62] 1
__lock_t 8
[DD68] 1
[M06], 1
[B72]. 1
Years 4
[TTG95]. 1
VPN_MASK) 7
[MM03] 1
a1 1
[DV66] 3
[M11] 2
[BC05, 2
ZFS) 1
[W06]. 1
Va1 2
[MS96]. 1
a:30:200 1
[E06]; 1
[M28] 1
[BH70] 2
Zebra 1
[W15]. 1
Values 2
[O11], 1
a[1] 1
[G+95]. 1
[M82] 2
[BOH10]). 1
Zhang, 4
[W95]. 1
Virtualizing 2
[P10]); 1
a[9] 1
[H61, 1
[MB91]. 1
[BS+09] 1
Zuckerberg 1
[WW94] 1
[RL81]. 2
a[i] 1
[HP06] 2
Volume 35
[MS96] 2
[C06] 2
[4] 1
a2 1
[S15], 1
abbreviated) 1
[JM98]. 1
Voorhis. 1
[MS98]. 2
[C54,PV56] 1
[AC97] 1
a:100:100,b:100:50, 1
[TTG95] 1
abilities, 1
[JS94], 1
Waiting-Line 1
[N+02], 1
[C95] 1
[B+18]. 1
a[2] 2
[W06] 1
above), 3
[K65] 1
Waldspurger 6
[NM92]) 2
[CD85]), 1
[B+96] 2
a[9]) 2
[W15] 1
[L11] 1
Warehouse-scale 1
abstraction 15
[P81]. 2
[CK+08] 1
[B,C 2
[W95] 1
[LL82], 1
abused. 2
[RL81] 1
Well, 27
[CS94]. 1
[D+13]. 2
[D70]. 1
Why 28
[Y+18] 1
[LR80] 1
[S+04]), 1
[E95]. 1
[B75]. 1
Will 6
] 2
[M28]? 1
__hash_t 2
[G04]. 1
[BB+72], 1
Wilson, 2
[S+11]). 2
access 133
[M65]. 2
__list_t 2
[H74]. 2
[BH73] 2
Wood-lands 1
[S04] 1
accessed? 1
about 294
[NM92] 2
a4 1
[J16] 1
[C03]. 1
Wouldn’t 1
[SS74]. 1
[O16] 1
a[4] 1
above. 20
[K68] 1
[C54] 1
accesses 47
X 3
[V+65,BH70]. 1
[O90]. 1
a[i]; 1
[KE+62]. 1
[C63] 1
accesses)? 1
X-windows 1
accessed 42
[QI15]. 1
[VPN 11
about: 1
[L+75]. 1
[CD85] 1
accesses?) 1
XITS 1
accident 1
[R+89] 1
[W02]. 1
[L+93]. 2
[CK68] 1
accessible, 1
XXX 2
[S07], 1
[W17] 2
above 50
accomplish 9
[L78]. 2
[CV65] 2
according 3
Yandong 3
[SN05] 1
[W95]: 1
abstractions 7
accomplishes 1
[LR80]; 1
[D82]. 1
Yes? 1
[SR05], 3
[WW94], 1
access; 1
account. 1
[M+63] 2
[D91]. 2
acquire 57
You’ll 3
[W+95]. 2
[anon 1
accesses; 1
accounting 4
[M04] 2
[D97] 1
acquire/release 2
Zeedonk 1
[W09]. 2
__Node_t 2
accuracy 1
[MB91] 1
accidentally 12
[DV66,V+65]. 1
acquired, 2
Zeldovich 1
[WG00] 3
achieves; 1
__node_t 10
[MS98] 2
accommodate 4
[G85] 1
active. 1
Zelenka. 1
__queue_t 2
a:100:100,b:100:50,c:100:50). 1
[O11] 1
acquiring 22
accordingly. 3
[GR92] 2
actively) 1
[AD00]; 1
a:0,b:1,c:1 1
a[6] 1
[P+95] 1
[H93] 4
account 6
[AD03] 1
across 30
actual 15
a[1], 1
about, 2
[P10] 1
[HP06]. 3
[B86] 1
achieve 12
activity. 2
adapt 1
a[5] 1
absolute 6
[P81] 2
[J91] 1
[BB+72] 1
achieved, 1
addr 2
abilities 1
added 12
acceptance 2
[P90] 1
[K+15] 1
[BH00]. 2
acquires 8
address), 1
address); 1
ability 11
accessed, 12
[PV56] 1
[K65]. 1
[BH70, 1
acquisition, 2
addressed, 1
address, 7
about; 3
accesses), 1
[R69] 1
[L09, 2
[BH73], 2
actions, 1
adjust 1
address-based 1
above) 6
accommodated. 1
[RK68]. 1
[L11]. 1
[BNS69]. 1
activities 3
admit, 1
address-translation 4
accordingly 1
access, 9
[RT74] 1
[LM+89, 1
[BS+09, 1
activity 3
addresses, 3
advantage 14
accounting, 1
accesses, 4
[S+03] 1
[M07] 1
[C+04]. 1
ad 3
advance 1
affords. 1
accrued 1
accessible 3
[S+68]), 1
achieving 7
[CG68] 1
add, 3
advanced, 2
again; 3
accumulates 1
[M83], 1
[S05]) 2
[CM00] 1
addl 2
acquired 15
addr:0 4
ago, 5
achieved. 3
[MS04] 2
[S15] 1
[CV65], 1
advantageous 1
address(es). 1
action 15
ahead 8
acquisition. 4
[O16]. 1
[S59] 2
[D01]; 1
advent 1
address). 1
added, 1
akin 2
actions. 1
[O45], 1
[S68] 1
[D68]. 2
advocates 1
address? 1
additionally 1
al. 5
active; 2
[O49] 1
[SA96]. 1
[D70]), 1
affected 1
addresses). 1
addr:10 1
algorithm, 8
actively-used 1
[O72], 1
[SN05]; 1
[G+17]. 1
affinity 8
addresses? 1
algorithmic 1
[PS81] 1
[SS74] 1
[G+95] 1
advances 1
all... 1
[R69]; 1
[G85], 1
affinity; 1
actually 38
after 54
alloc 1
[S09] 2
[H91]. 2
alas, 3
again!) 1
algorithm. 2
[SB92], 1
[H93], 3
allocate(100), 1
again: 2
alive, 1
[SHW11] 1
adding 35
[I09]. 2
allocate. 1
[V 166
[SN05]. 1
additions 1
[JM98] 1
addr:20 2
address! 1
alright 1
[V+65] 1
[K+61,L78], 1
age), 2
[LL82]. 3
address) 2
[VERSION 42
also, 1
[W+95], 1
all, 17
aims 1
all-too-trusting 1
[W02] 2
address-space 5
alternates 1
[X+10] 2
[LM+89]; 1
algorithm; 2
[stack 1
addressed 2
alternatives! 1
a3 1
[M65] 1
a; 4
__counter_t 6
altogether, 1
allocate 31
algorithms 26
[M83] 1
admission 1
a[3] 1
amazing, 2
allocate(10). 1
allocated, 2
[MS04], 2
admit 1
adversely 1
alike, 1
allocation). 2
[MS91]. 2
amortize 2
advertise 1
able 59
all) 1
[N+07] 1
allocator, 5
amt) 2
advisors, 1
about) 1
allocation, 2
[NS07] 1
allowed), 1
analogy 1
affecting 1
above). 7
allocators. 3
[O45] 1
analysis” 1
address 561
again? 2
allowing 22
above? 3
[O72] 1
alternately 1
access: 1
[O90] 1
against 9
allows 37
always, 5
accessible. 2
[P+95]). 1
agent 1
amortized. 1
addresses 42
amt; 2
[Page 2
ago 1
already 28
accomplished 9
adoption 1
animals 1
[QI15] 1
anon) 1
alternatives 4
accumulate 1
advanced 7
agreed-upon 1
[S+11] 2
amazingly!), 1
[S05] 2
another, 12
advantages 5
ahead, 3
among 14
[S07]. 1
answered, 1
affinity, 1
accuracy/performance 2
accurate); 2
again. 24
[S59, 1
anyhow). 1
ain’t 2
amount. 2
action. 1
algorithm). 1
[SB92] 1
[W+95] 4
active 13
ancient 2
algorithms, 3
applicable 2
alas. 4
[W03]. 1
actuality, 1
and? 1
annotate 2
answer: 2
[W09] 2
all), 1
applications. 12
addition 13
anticipate 1
algorithm 34
[WL+93]. 1
all!), 3
[X+10], 2
anyhow, 2
alloc()/free() 1
address. 21
approach). 4
approach? 3
approaches? 1
approximates 1
allocating 19
all. 9
anymore? 1
address> 1
a:30:200. 1
arbitrarily 2
allegorical 1
anyone 3
addresses. 4
a[1]. 1
aren’t 5
anything 17
allocated. 5
a[3], 1
adds 24
arg; 7
allocation 24
application. 4
allocator. 2
a[6]) 2
adios, 1
argc 1
allowed. 1
allocators; 1
a[7] 2
about), 1
args 8
altering 1
approach, 25
administrators 2
allow 22
args->a, 4
alone 6
approaches, 1
advice 4
am 16
answering 1
argument: 2
affairs 1
above; 7
approximate 20
answers; 2
arises. 2
affects 2
abstraction. 1
approximation? 1
abuse 1
architects 4
again, 31
also 213
anything, 5
appeared, 1
around, 4
architectures, 1
array. 4
are: 2
always. 1
accept 2
applications? 1
alike. 1
array’s 1
am! 1
arguments, 5
applies 1
access. 8
all; 4
arrived 6
amazing 9
arise. 3
apply 1
accessed), 1
art. 1
allocation. 7
asking 4
aspiring 1
arithmetic 2
appreciate 1
accesses. 5
arose 5
amount; 3
assertion), 1
amounts 7
approach 138
approaches 31
appropriately-named 1
approximations 2
arcane, 1
architectures 2
archive, 1
are. 4
arg); 8
arg, 2
args->b); 4
argument; 2
arguments 23
arise2 1
arose, 1
arrays, 2
arrive), 1
arrive] 2
aside 4
ask? 2
asks, 1
asleep, 1
assigned 7
assume 80
assumptions 14
astute 2
atomics. 2
attempts, 3
attention 10
authors 8
auto-matically 1
automate. 1
avoids 5
award-winning 1
baby 2
baby!” 2
background. 2
backwards, 1
balance 15
base/bounds) 2
bases 2
be? 9
becomes 18
begins. 1
beguiling 1
behaves 11
behavior. 4
behaviors; 1
benefits. 1
best 31
best-fit 7
better 88
beware 1
beyond), 1
bible 2
big!”, 1
big, 3
bit). 3
bits, 7
black) 1
blocks 9
bodies 2
body 2
book; 1
books 21
both) 1
botte 1
bounds; 2
bounds”); 1
branch 3
broadcasts 1
brutal, 1
an 545
array; 1
allocators 9
assign 3
accessibility 1
bucket 2
bucks. 1
buffer); 1
buffer, 11
buffer[fill_ptr] 1
bug 4
buggy 1
accessing 36
arrays 5
allotment, 1
assignment, 3
association 1
and, 5
accidental 1
arrives. 2
although 15
build. 2
amazingly 3
building 41
built. 1
burden. 1
bus, 1
bus-based 1
accom-plish 1
arriving 2
assumption: 1
amount 37
anomalous 1
butter 1
accumulated 1
aside, 2
assumptions? 1
an- 1
buying 2
bx=2,bx=2 2
bytes). 3
bytes? 1
c->value; 4
c3 10
c; 3
cache: 1
calculate 5
call: 2
caller; 2
calls). 1
came 12
can, 4
capacity 2
careful, 3
cares 2
case: 4
cases). 1
cases? 2
cast; 1
casts 1
cen-tral 1
certain 26
chains 1
challenges 2
chanced 1
another. 6
accurate 2
answer? 3
an-THREE 1
accused 1
analysis 5
answers, 2
accustomed 1
asks 4
analyze 3
asleep 3
anti-hero 1
achieves 7
change 55
another; 1
assert 3
any? 1
act 3
changed, 3
assert(p 1
answer, 8
anti-gaming 1
active, 2
chaos 2
assists 1
anymore, 1
anyhow. 2
activity; 1
chapter). 3
assume, 2
anytime 1
chapter? 9
assumed 12
appealing; 1
addition, 4
appearing 1
appears 1
chapters, 9
assumptions, 6
addr:21 1
application 29
application; 1
address: 8
address>, 1
administer 1
atoi(argv[1]); 1
approach. 8
char 35
applications 29
a 3927
advice, 1
atomically; 2
approaches. 2
a+b,b+c,c+d,c+e,c-. 1
applied 5
affected. 1
attack: 1
affinity. 4
a1). 1
appreciation 1
check 46
approaching 1
attackers 2
aforementioned 2
a:100:100,b:100:100,c:100:100) 1
approach) 1
child: 1
appropriately 3
attained 1
a:100:100,b:100:50,c:100:50) 1
approached 1
chosen. 1
architectures. 1
attempts 4
a[0] 2
appropriate 3
circuitry 2
are, 4
attention, 3
again 58
a[8] 1
approximately 1
citations 1
arg: 1
authors.. 4
age; 1
about-to-be-run 4
architecture, 4
clarity. 1
argc/argv 1
average). 1
aggressive 3
about. 6
area. 1
argue 1
class 12
at 576
avoided. 2
alas). 1
arena 1
argued, 1
argument, 11
arguments. 4
above, 39
algorithms. 5
away 12
all? 8
classic, 1
and 2770
atomic 25
argv[1]; 1
atomically. 2
arguments) 1
awesome! 1
allocate(int 1
clean; 2
answer; 3
abundant, 1
attacks2 1
arise; 1
backwards 1
arise 12
allocates 11
cleans 2
answers 3
cleverness, 1
attempting 1
arose: 1
balanced 6
allotment 2
arises 21
abusing 1
anticipating 1
attributes. 2
arranged 1
close 11
base/bound 1
allowed 8
accessed. 4
automatically, 2
anywhere 6
arrangement 1
clustering. 1
bash, 1
array 46
accesses). 1
auxw 1
ap-proaches 1
almost 13
array), 1
code; 3
arrives; 1
codes 2
available, 11
applications, 6
alone! 1
arrive; 1
achieved 1
art 1
collect 1
away; 1
approach), 2
alter 2
arrives 4
achievement 1
articles 2
awesome, 3
column 5
approximate! 2
alternate 5
article 3
acquisition 6
basic 94
awoken 3
batch 7
batches 1
approximating 1
combat 2
alternatives. 2
axis 4
ask 12
actions 18
beauty 2
approximation 1
amazed. 1
combinations 3
b; 4
asking: 3
activate 1
architectural 2
amazingly, 1
combining 7
assembly). 1
back, 4
actively 4
amplifying 1
commands, 1
architecture 18
assembly? 2
commonly 13
analyses 1
bad. 7
been 100
assert(rc 5
adapted. 1
commonplace 1
argument 22
communicating 3
bandwidth 3
before? 2
assume) 1
analyzed 2
arise? 3
arises, 4
barons 1
arising. 2
communication 2
base/bounds 5
begins: 1
arranges 1
assuming 25
array, 7
company). 1
basics 13
behalf 2
add 82
assured 1
array-based 2
answer 29
compare? 1
atomically 16
be. 11
additional 15
array[1000]; 1
behave? 4
competing 6
beautiful, 1
attacker 4
address; 3
arrive: 1
behaves, 1
compiler; 2
attacks, 3
addresses): 1
ask, 1
behavior: 1
compilers 1
attaining 1
became 21
addresses; 4
began 4
completely 6
attempt 14
administrator 2
attr, 4
completion); 1
behind 31
aspects 10
adopted 1
attributes 4
completion, 2
below) 3
assert(count 2
advantage. 1
begin 32
automatic 2
complex. 2
beneficial 1
benefits: 1
affect 10
begin\n"); 5
any 171
assert(tmp 2
anything. 1
complexity 10
affordable; 1
better, 14
begin\n", 2
available. 14
assigning 1
apologize. 1
components 1
afterwards. 1
comprised 3
avoided; 2
computation; 2
apparently 1
beginning, 1
again) 3
associative 1
awake. 1
computations 1
append 2
begun, 1
age-old 1
between 79
award 4
computers, 1
assumption 10
appetite, 1
behavioral 1
ago: 1
away.” 1
atomic. 2
applicable; 1
computing 16
approach: 5
approaches: 1
atomic_decrement 2
big 44
ahead. 1
concatenating 1
axes. 2
appropriate) 1
being 54
atomically, 2
bit; 1
al-though 1
concept: 2
back-to-back 1
below, 2
back. 2
al.’s 2
atomicity 8
conceptual 4
arbitrary 13
benefit 1
as 1029
backing 1
alas 1
backward 1
concert 2
bits 70
architectures: 2
blocked. 2
asked, 1
attacker, 1
albeit 2
concluding 1
better-than-expected 1
blocks, 1
asleep... 1
attacks 5
algorithm: 2
concurrency; 2
bad 31
better? 1
assembly, 3
attempt, 2
book). 5
algorithms). 1
concurrently-running 1
base); 1
big; 1
assert(fd 1
biggest 4
book? 1
concurrently. 1
base, 1
attr 2
assigned. 1
billions) 1
born! 1
condition). 1
author 2
assistance. 1
both), 1
assumptions. 2
binary 14
condition3, 1
avalanche 1
based 17
bounds). 1
battles 2
bind 1
condition? 1
average 16
atop 1
bounds? 1
bit. 5
conference. 1
attains 1
break), 1
bitmap 2
confidence 2
attempts: 2
breed 1
black 3
configured 1
attention. 1
bring 4
books). 1
confined 1
confirm 6
avoid 50
browser. 1
bookshelves 2
attentive 1
confuses 1
avoided? 1
brutal 1
all 247
boost. 1
attribute 2
congratulations! 1
background; 1
born, 1
authors. 1
buffer 43
consists 8
backward, 1
constructed 4
bug, 1
allocated 46
both 87
base 66
available; 1
consumed 2
bugs) 1
allocations 8
base-and-bounds 4
bash), 1
basic) 1
basics. 1
avenue 1
be, 2
allocator 26
building, 1
bumping 1
along 10
bottom 10
avoided 2
contents 28
also: 1
bouncing 1
become 32
badly 1
bus 3
altered 1
continues. 6
box, 1
balance. 1
bx 2
alternately, 2
continuing 4
alternating 2
break 5
bx=3 2
balanced: 1
basically 6
bytes; 2
contrast 7
briefly 7
basing 1
brings 1
controlled 8
bytesLeft 3
batch-like 1
broadly 1
before 130
broken, 2
c->global; 2
battle 1
always 53
controversy 1
convention; 1
c->local[i] 2
because, 1
buffer; 6
always!). 3
before!” 1
are 870
convoy 2
c;, 1
becoming 2
buffers 6
amortization 1
begin. 3
amt>0) 2
cooperatively 1
be 785
bugs, 2
cache. 9
byte) 2
arg. 2
beginning: 1
arguments: 3
copy-onwrite. 1
before, 7
begin” 6
caches; 1
bytes. 3
calamity. 1
argv 3
behave 12
correct, 2
begin... 1
behaves. 5
analogous 1
calculated 1
c2 10
arise, 4
behaviors 2
behaved 1
correctly? 3
behaving 1
anonymous 4
c6, 1
belt, 1
arrange 4
call. 17
behavior? 2
corruptions. 1
below. 13
costly 7
c:100:50 1
benchmark 3
arrangement, 1
benefit. 1
best-case 1
count--; 1
cache) 1
behavior, 3
array) 3
bet 2
calling 55
better) 1
caches. 1
counter. 12
behaviors) 1
array.c 2
better.” 1
beyond. 1
caching 9
counter_t; 6
believe 5
array[i] 1
binary. 1
another 105
bidding. 1
answer! 1
counterbalance 1
below; 1
aside: 1
call) 1
bit, 10
answer) 1
counter’s 2
better. 7
asked 2
call1 1
bits) 1
answered 1
created. 3
bit 93
bits1 1
aspect 15
answers. 2
critical; 2
assembly 13
bits), 2
anymore. 1
critique 2
curious, 1
block 22
assertion 2
bits”. 1
anything? 3
bigger, 2
curr->pass 1
called 111
bitwise 1
appear 4
billions 1
associated 18
currency; 1
calls. 5
bizarre 3
arbitrarily, 1
bit), 1
book 47
assume: 1
currently-running 9
camp, 1
block, 2
architecture. 4
bits: 1
boost, 1
cycle. 1
candidate 3
attack 9
bombs, 1
architectures; 2
black). 1
boots, 1
dandy. 1
carts 1
attempted 2
are! 3
book, 18
born: 1
darned 1
carved 1
blocked 16
avoidance. 2
area 5
boost 8
borrow 2
boots 2
blocks. 2
avoided, 1
data, 18
case) 1
argc, 23
both. 4
born. 1
book! 1
aware 2
date 2
cases. 3
day 5
bottleneck 1
boundary; 1
books. 1
awful! 1
argument. 2
caused 2
deadlock). 2
background 15
boot 11
arguments; 1
centralized 1
bounds, 5
bad! 1
bounds 48
borrowed 1
deal 16
arises: 1
challenge: 9
brand 2
badly, 1
break. 1
both? 2
deallocate 1
chances 4
break: 1
base-and-bound 3
basics; 1
bother 1
changes, 1
brilliant. 1
breaking 1
decide 23
around 42
bottom). 2
brk 1
chapter. 25
breathe 2
array.c) 1
bounce 1
broader 1
characterize 1
broken. 3
decision 15
can 699
array: 1
bounds) 1
brk, 1
cheat 2
because 93
brutally 1
declaration 5
cannot? 1
arrival 1
bowels 1
broadcast 1
child/parent 1
before), 2
buffer), 1
decreases? 1
can’t) 1
brag 4
broaden 2
arrive 21
children, 3
buffer[use_ptr]; 1
begins 13
buggy! 2
deep 7
breath. 1
broadly. 1
asides 1
choice: 1
brought 10
behalf. 1
bugs. 11
defaults. 2
browser 1
ask: 2
chops 1
capacity, 1
btrees. 1
builder 1
defend 2
buffers? 1
associative. 1
chunk, 3
card 1
behavior 35
buffer[MAX]; 1
assumes 14
defense, 1
build, 2
circular 1
below). 3
but, 1
builds 1
assumption. 2
defer 2
careful 16
built-in 1
cite 2
below? 1
bx=100). 2
built; 2
atomic_increment 2
deletes 1
carefully; 1
business 1
case. 3
benefits 5
atomically: 2
demand-zero 1
bx=1000,bx=1000 2
class? 2
causing 3
biased 2
bytes 41
attachment 1
demonstrate 5
bye, 1
clean-page 2
challenges, 1
depending 12
c->global 4
attacks. 3
clear. 2
big. 3
challenging. 1
dequeue 5
byte 15
c4 6
attain 3
clearing 2
chan 1
dereference. 2
chance 4
bytes), 3
cache; 2
attainable, 1
clever, 1
bigger 19
derivatives 1
c->local[cpu]; 2
author. 1
client. 1
bit! 1
changed 18
descheduled, 1
but 288
c->threshold) 2
authors’ 1
client/server 1
bit) 1
chapter; 1
caches 16
descriptor). 1
bx=0,bx=1 2
c->value++; 4
auto-magically 1
client’s 2
bits. 2
calculation 1
chapters 14
descriptor? 1
closest 1
descriptors, 2
clues) 1
c1 10
call-ing 1
co-authors 5
automatically 6
coarse 1
design, 1
c5, 1
charge 7
call3 1
child. 2
cocoon, 1
desired. 9
blank 1
call; 2
children! 1
available 31
desk? 2
blocked); 2
code: 7
caller, 4
chip’s 1
average. 1
despairing 1
blocked, 3
cold-start 2
calloc() 1
chocolate 2
avoid. 3
blocks: 1
despite 6
combine 7
chooses. 2
bold). 1
detail; 1
avoiding 16
choosing 2
cache 86
chop 5
cake 4
bolts, 1
awake 1
coming 7
chose 1
book), 2
awesome 2
calls 88
command. 2
chunks. 3
bookstore 1
details 46
ax 4
care, 2
commands; 1
class, 3
boolean 2
determining 4
ax=0,ax=1 2
careful), 1
common, 1
classic 26
developed. 1
ax=1,ax=0 2
boosted 3
communicate 2
bound 4
developer 2
carefully 17
clean). 1
community 3
bounded-buffer 1
developments 1
break; 5
case; 3
back 65
compact. 1
compaction 3
company’s 1
breaks 2
cases 29
device. 1
clear; 1
did), 2
back-and-forth 1
brief 4
cause. 1
comparison: 1
clears 5
balances 1
didn’t 11
broad 4
certainly, 1
compete 1
close, 1
barest 1
die, 1
broadcast(), 1
challenge, 1
compile-time 1
cluster 2
base. 1
died 1
browser, 1
change! 2
compiled 6
co-advisors 1
basi-cally 1
differences 2
changes. 1
buddy 11
complete, 7
buffer. 6
call 230
be: 2
digest. 1
changing 9
coalesces 2
completed 5
buffering 1
care! 2
beautiful 9
directly. 3
code? 9
dirty-page 2
bed. 2
completes1 1
codes, 2
chapter 37
disassembler 2
before. 7
completion; 5
beginning 15
complicated 13
case 62
coined 2
begins! 2
complications 1
cheapskate. 1
cold 3
begs 2
caught 8
comprises 1
discuss 53
chips 3
comfortably 3
behave. 2
build 118
causes 5
compulsory 5
discusses 1
by 705
choice, 2
commands 2
behaviors. 2
centers 1
discussion: 1
byte). 1
compute 12
chosen). 1
built 19
common) 1
behind-thescenes 1
cesses. 1
disk; 4
computer. 1
bytes, 10
con- 1
commonplace, 3
bunch 6
compares 1
below 11
disks 4
chunk. 4
display 2
chagrin 1
burst 3
compiling 1
best; 1
concatenate 2
chunks; 1
challenging 6
dividing 6
complete) 1
buy 6
bet. 2
concerned, 2
clear 12
change. 6
do; 2
completed), 2
bx=1 2
conclude 2
beyond 20
client 5
changes; 3
clock; 1
chapter), 1
completes. 4
concurrency: 2
big? 1
concurrently), 2
byte(s) 1
closing 2
bytes) 3
characteristics 2
completing 1
documents, 1
big” 1
condition. 8
c 177
cloud 2
c->value--; 4
cheaper, 1
completion 4
doing.” 1
binaries, 1
conditionals. 2
c->threshold 2
coalesce 2
c5 5
complexity, 1
check. 4
comprise 3
conditions; 2
c->value 4
code); 2
c4, 1
binary, 1
compromised 1
configure; 1
done 72
cache, 11
cache). 1
bits). 4
checking 6
confines 1
computers 7
done\n", 2
cached 3
cache? 2
bits? 1
connects 2
computing, 4
don’t. 1
caches) 1
caches, 5
blame 3
consider. 2
conception 2
double-check 1
code, 73
call); 1
caching. 1
block. 3
child 59
conceptualized 1
considering 6
double-click 1
constants 2
calculation, 1
blocking 2
chip 1
call, 19
concerns? 2
cofounded 1
doubt 2
constitutes 1
call). 5
choices. 1
construct 5
concurrency). 1
consulted, 1
book. 23
down-wards 1
campaign 1
call? 4
chooses 3
cold- 1
concurrency? 1
consumers. 1
boring 1
downsides. 1
born 4
called. 4
chosen, 1
colleagues’ 1
condition3 1
collected 1
can. 3
downward 1
both, 1
chucking 2
caller 14
consumes 2
conditions 9
collectively 2
canonical 3
draw 2
bottleneck. 2
calls, 3
chunks 13
contention, 2
configure 5
collector 2
capability. 1
drive, 2
bottom, 2
can) 1
classically 1
conflict 2
color 1
careful. 1
bounded 8
canceled, 1
bounds. 5
confusion. 1
context 70
carefully! 2
due 19
cleaned 1
candidates; 1
boxes 2
columns. 1
consideration 2
contiguously 2
comes 14
duration 2
bragging 2
clearly 17
case); 2
consistency 3
cannot 21
continue 10
command 12
break, 1
commandline 1
clock 11
constant 1
control, 4
ease 4
care 10
brilliant!” 1
commentary 1
close(fd); 1
constructed, 1
convenience 2
easy, 1
broken 1
carefully, 6
commonlyused 1
cloud), 1
compact 3
consume 5
bug; 2
companies 6
case? 5
eax 20
converse 2
clustering, 1
consumer. 2
case, 105
bugs 6
company 1
cases, 27
convince 1
cmpl 1
containing 4
cat 3
busy. 1
eax=50. 2
compare 6
eax=51), 2
cast 4
co-authors). 1
contents, 1
categories: 1
c->local[cpu] 4
convoys, 1
c2, 1
ecosphere 1
catches 1
co-exist 1
context-switching 2
cell 1
compare-and-exchange 2
cooked 1
c6 6
edit 2
caused. 1
co-workers 1
centers, 1
contrast, 10
cabinets 1
compare-and-swap 10
editor? 1
cool 17
caution 1
century. 1
coalescing, 4
control-c) 1
calculates 1
comparison, 3
effectively 5
copy-on-write 5
challenging, 1
core, 5
conventions, 1
calculation: 1
certainly 32
calculations? 2
efficient) 1
coarse-grained 2
chance. 2
correct; 1
converted 1
competitive. 1
chain 2
call), 1
efficiently, 1
code) 3
changes? 2
correctly-working 1
cooking 1
compiled(!) 1
challenge 5
effort 3
called, 10
code/stack/heap? 1
chapter! 1
cores. 1
corn 1
correctly. 8
element, 2
correctness: 2
chapter, 16
codes. 2
chapters. 6
compiler, 2
corner-case 4
caller. 2
employ 4
chapters) 1
coherence 3
corresponding 10
characteristics, 1
complete. 6
corre-sponding 1
caller’s 1
encounters 2
character. 1
colleagues 3
cost, 5
checking, 1
completion), 1
calls: 3
endless 4
cheating 1
collection 3
counter1, 1
complex-instruction 1
child, 8
correct 42
end” 8
child? 2
com- 1
countermeasures 1
can’t 30
complicated: 2
chip, 2
correctly; 1
engineering; 1
choice 8
come 9
casting 1
computation, 2
chopping 1
costly, 6
chopped 5
come–great 1
catastrophic, 1
chosen 5
costs. 1
chunks). 1
enough 32
command-line 2
chunk). 1
couldn’t. 2
citation 1
cause 24
commands: 1
chunks, 4
count) 3
class), 2
caused, 1
course, 73
circumvent 1
commercial 3
clarify. 1
enter 32
count++; 1
classmates; 1
counter: 1
computer 59
covering 7
commonalities 1
clean), 1
entries); 1
center 2
clean 9
entries, 5
computers), 2
crash, 1
commonly-used 2
closer 2
counting; 2
central 7
clear, 5
challenge. 4
crashes, 3
concepts 7
complete; 5
clustering 3
coupling) 2
entry, 8
client, 2
cream.” 1
concrete, 1
changes 20
channel 1
cmp 1
course) 1
equation 1
close(), 1
create() 11
concurrency, 10
completes 6
chapters). 2
covers 4
coalescing 6
era. 1
closing, 2
concurrent, 2
creating 9
check; 1
complex, 4
crazy! 1
coarse-grained, 1
cloud-based 1
error, 3
concurrently? 2
checkbook 1
complexity. 2
creation 20
crazy) 1
clustered 1
code), 4
etc.); 1
code.” 2
components. 1
cruces 1
credentials, 1
cond; 2
etc., 1
cond_t 5
condition 81
configurations, 1
confused 1
confusing; 1
code 391
coherence, 2
computing. 1
combina-tion 1
combines 1
checks 25
columns: 2
curr->stride; 1
consider 26
concept 9
considerably 1
cross 1
current: 1
combination 11
communicates 1
even 148
concern, 3
ever, 1
conspired 1
crux 3
daemon1 1
command, 4
compacted 1
children 1
concise 7
evicts 3
const 3
example... 1
darn 1
community. 1
choice. 1
comparing 5
concurrent) 2
curious 3
constantly 3
curse 3
companies, 1
example: 8
choose 5
complementary 1
concurrently, 1
data; 1
consumer; 1
customer 2
cycles). 2
excited 2
dark 3
complete). 1
consumers 9
complete? 3
consumption 1
company, 2
chores.” 1
database 13
cond 17
completed; 1
exec() 13
compare-and-swap, 2
days, 6
conditional 1
completely: 1
chunk 44
deal? 2
compared 7
confusing 2
execl(), 1
completes, 9
contains 32
completion. 2
debate 2
comparison 7
consider-ably 1
execlp(), 2
citation. 2
contention. 2
debug. 1
consisted 1
executable, 3
cited 2
compiler 26
continuous 1
complex 22
constraints, 1
debugger 6
claims 2
complain 2
control. 1
components: 3
constructed. 1
decimal. 1
cleaning 1
executes 23
complete: 1
cope 1
comprehensive 2
decisions, 2
compromised. 1
execution: 1
completes? 1
copy, 1
complicated. 4
decreasing 1
computers. 1
exhaustive 3
clear: 6
consumer 26
copying. 1
component 5
deeper 5
computing2 1
existed 1
consumers), 1
concern 5
core. 2
contain 6
corollary 2
default 7
exists. 4
clever 5
concludes 1
computation 2
data 252
correctly 19
defense; 1
exiting. 1
correctness, 4
conclusions 1
computational-overhead 1
contention; 2
computer, 3
contents. 2
close(STDOUT_FILENO); 1
expectations? 2
closes 3
concurrency), 1
datacenters, 1
defined. 1
computers) 2
context-switch 4
cost. 1
expected, 4
coalescing) 1
date, 2
concepts, 1
concurrently 9
definitely 4
context-switches 1
costing 1
expires. 1
daunting 1
conceptually 2
condition) 1
delaying 2
conditions. 5
exploited 2
code. 44
day, 2
concern; 1
contexts, 1
deletion) 1
configuration 2
exploits. 1
collaboration 1
deallocated 4
concerns 3
continuing. 2
deploy 1
controls 5
extracts 3
columns 1
eyes 2
concrete 1
confusing, 2
deployment, 1
convenience). 1
deallocations 2
converts 2
facets 2
connection 1
depth 2
combined 1
decided 6
copy! 1
concurrency 36
fact 20
considered 10
decision, 4
cores 1
failure. 1
constant. 1
correct: 1
decrement(counter_t 4
cost; 4
constituent 1
could 137
count. 2
dedication. 1
fair, 1
described 36
costly. 3
constraints 2
common 61
consult 2
deep, 1
design-ers, 1
fashion. 3
defense 3
community, 1
costs 8
consumer, 6
designer, 1
counterpart 1
concurrent 80
fast 19
compete, 1
couldn’t 2
context; 1
designs 1
demanded 2
counters, 6
demands. 1
fetch, 2
competitive 1
counter); 6
contexts 2
desktops 1
concurrently; 1
counting 7
demonstrated 2
course. 4
compile 11
dest_buffer[100]; 1
condition); 1
cover 11
condition, 7
fetches, 2
demoted 1
few, 2
details). 4
contiguous 13
crash. 1
counter, 15
confections 1
compiled, 1
depicted 2
fewer), 1
continue; 2
crazy. 2
counts 4
complete 23
depressing. 1
fewest 2
determine 34
confining 1
continues 7
coverage 2
complete?) 2
describing 4
field: 1
creates 34
confuse 1
developing 7
continuously, 1
completed, 2
descriptors 5
create 49
figure, 15
device), 1
connected 4
control-z 1
complicate 1
creation: 1
figured 2
created, 14
connections 1
diagram 10
consist 2
complicated, 1
criterion 2
critical, 2
creativity 1
design 22
control? 3
did, 1
constructing 3
difference: 4
file. 2
customized 1
construction 7
designers. 2
control” 2
compulsory, 1
different. 2
file.txt 2
crime, 1
cycles, 3
consults 1
desire. 1
cooperative? 1
computation. 2
differentiates 1
file’s 2
critically, 1
cyclic 2
consume! 1
desktop 4
copyon-write 1
computed 1
direction, 4
filled. 1
crux: 5
cyclic-sequential 1
curr 6
destination 2
correct. 2
concerned 5
fine, 1
consumers, 2
directory 18
data), 1
currency) 6
destroy 1
correcting 1
concurrency. 7
finish), 1
consuming 3
dirty) 2
datacenter, 1
cycles) 1
destructive 1
correctly! 2
concurrently) 1
context. 2
finished, 10
disabling 5
day! 1
details); 2
daemon 8
costs, 1
concurrentlyrunning 1
contiguous; 1
first-out) 1
disaster. 1
days. 1
details, 4
dangling 1
condition: 1
continue. 7
discipline1 1
first. 10
deadlock 5
detector 1
datacenters. 2
configurable 1
contributed 1
disciplines. 1
fit; 1
discrepancy 1
deterministic. 2
date. 1
confront 1
contributions 1
debug 1
discussed. 1
fits 9
developer, 1
dealing 2
cons. 1
counter 116
control: 1
decayed 1
disk-like 1
devices). 1
debugging 1
flag, 14
constants, 1
conundrum 1
couple 10
deciding 5
devices? 1
divide 6
decade. 2
focus. 1
construction. 1
convention 2
course). 1
decimal 2
diagnose 1
decisions. 2
decimal), 1
focusing 2
decision. 2
coverage, 2
copies 12
do: 2
die 1
decodes 1
consulted 1
copy 18
follows 6
covered 2
does: 2
differentiate 2
declared 1
decreases 3
correct) 1
contending 14
for? 2
doing, 3
cpu 4
differently. 3
decrease 2
dedicated 2
correct-ness; 1
forget-ting 1
contention 4
done? 1
craft 2
decreased, 1
difficult 10
defined 5
correctly, 3
fork(); 4
context, 2
downfall. 2
crazier 1
default? 1
create(); 1
defaults, 2
create, 2
formula 2
correctness 9
downward). 1
cost: 4
dramatic 2
continue, 1
defeats 1
forth; 1
directed. 1
forward! 1
directions. 3
drives 2
continued 1
created 22
degenerate 1
definitive 1
degree 3
forwarded 1
directives 1
drop 4
creation; 1
costs? 1
degenerates 2
delivered 2
fourteen. 1
discuss, 1
dx) 4
creator 1
could, 1
delay 2
demands 2
fraction 5
discussion. 1
control 79
curious. 1
counter; 2
delete, 2
dynamic 20
depicts 1
fragmentation? 1
disk). 3
control-c 1
curr); 1
deleted 1
counters 14
dynamically-allocated 1
deployed. 1
fragmented) 1
disk-access 1
convenience, 1
current->next; 1
demand. 1
counting, 2
demanding 3
depressing 1
disk-drive 1
frames 5
convenient 1
current->tickets; 1
e 1
counting-based 1
demise 1
depths, 1
disk? 2
framework 3
converge 1
each, 1
cover, 2
dependence, 1
currently 27
describes 6
disks, 1
free(50). 1
cool, 1
eagerly, 1
create()6 1
dependent 1
currently-pointed 1
dismantling 1
description 9
free(rvals); 2
coolest 2
earlier) 1
creators 1
depiction 2
cycle 4
distinct 2
design: 1
diverse 1
cooperative 5
creature 1
deployment. 2
dangerous 5
free(x); 1
designate 1
copy-on-write, 1
do? 9
credit 3
derive 1
data. 9
free, 5
copy. 1
designers 9
early 68
documentation 3
desire 7
databases 5
freed 3
copying 4
easier, 1
descheduling 2
does). 1
desired, 1
deadlock) 2
full; 2
describe. 1
easily. 3
core 8
dominant 4
destination: 1
debugging, 1
descriptor 1
easy; 1
correct? 3
done, 6
destroy()) 2
decay-usage 2
desired). 1
edi; 1
function 41
correctness. 3
downward, 1
destruction 2
decide: 1
detail10 1
future; 1
effect 4
dread: 1
desires 1
decides). 1
desk 1
effective, 2
detailed 8
drive 5
game, 1
decisions? 1
critical 140
detail, 6
crucial 2
d’un 1
gcc) 1
declare 4
cost 49
efficiencies 1
details! 1
crude 2
details) 1
gdb) 1
deep... 1
details. 34
costly; 2
earlier. 2
efficiency 8
ctxt 1
details1 1
defaults 3
count 25
ease-of-use 1
culprit 1
detecting 1
detects 1
definite 1
counter) 1
currency 4
deterministically) 1
efficient 19
general 41
deterministic 8
deletion, 1
counter++; 1
efficiently; 1
easy 50
generalize 1
deterministically. 1
develop 12
delve 5
counter1 1
elements 8
current 37
generalized, 1
eat 6
developer. 2
developers. 2
demand? 1
customer! 1
else, 7
course 20
eax, 3
generates 10
developments. 1
devices, 2
demand” 1
else-where, 1
cycles 11
court, 1
ebp; 1
getpid() 1
device, 1
gettid()); 4
depend 3
empty. 1
data) 2
cpu.c 2
ebx; 1
did. 2
deviously 1
gettimeofday(); 1
depends.” 1
emptying 1
data[100] 1
crash 2
edition. 1
differ? 1
diagram). 1
difference, 4
emulate 2
datacenter 1
gives 15
crashes 2
effective) 2
dereference 1
differ, 2
enable. 2
days... 1
globally 4
crazy 3
effectively, 1
descheduled. 1
differences. 2
encouraged 1
days: 2
end-of-string 1
efficacy 2
description, 1
differently 1
create()); 2
de-queue 1
end. 1
descriptors. 1
go 37
digested; 1
efficiently 10
create(), 2
deallocation, 1
ending 1
debug, 2
direction; 1
egomaniac. 1
creation, 6
design. 2
goals 15
enemy? 2
declares 2
directly, 5
criteria. 2
different 196
curr->next; 4
element 14
enjoy 3
decrees 1
designated 2
different-size 1
currency. 2
elsewhere. 2
dirty 11
enormously 1
goes 27
dedicate 1
designers, 1
differently; 1
currently-executing 2
embarrassment. 1
disable 3
goodness); 1
deeper. 1
ensures 14
designing 3
direction. 3
cycles. 4
emphasis 1
disappears 2
good”. 1
deeply 1
entities 5
desire, 1
directory: 1
dairy 1
disassemble 2
goofs 1
deeply-nested 1
enables 23
entries; 2
disciplines 2
danger 2
disassembler. 2
granularity, 2
define 9
ends 4
entry; 2
darker 1
desired 52
discipline 1
deleted); 1
graph, 6
discussed 24
enforcement, 1
enum 2
data). 1
desktop. 1
discredited 1
deliver 8
disk); 1
grep 7
enough, 5
environment 4
data? 1
destination. 1
discretion 1
dense, 1
groups. 2
equally 1
disk, 14
datacenter. 1
destroying 1
days 4
depends 5
grows, 4
ensure 34
error; 1
discussing 4
do, 11
destruction, 1
de 1
descriptor, 2
guard; 2
enterprising 2
discussion 17
document 1
deallocates 1
design) 1
guide 1
errors 9
entirely. 4
determines 17
disk) 3
does, 6
decides 11
designed 9
habits; 1
essay 1
entity), 1
deterministic, 2
disposal.” 1
doesn’t). 2
decisions 7
designs. 1
hacker 2
do) 1
doesn’t? 1
essentially 11
declaring 1
entries 22
destroy() 2
halted, 1
developed 23
doesn’t, 3
doing. 3
events 5
deeply. 2
destroyed 1
hand-controlled 1
doing; 1
domains, 1
device 11
eventually, 1
default, 2
done! 3
diagrams 1
entry 55
done. 10
evermore 1
defeat 1
detail 26
done) 1
handler 24
differ 2
don’t, 2
everyone 1
error 17
defensive 1
detour 1
double-ing! 1
hands 4
differently, 1
double) 1
etc. 5
definition 6
develop, 2
everything 12
doubt! 1
hang 1
difficult. 3
double-precision 1
etc.)? 1
delight 1
developed; 1
evil.” 2
draconian 1
happen: 1
doubt. 1
directly 8
event 3
delving 1
evolution 3
development 13
evolved 1
device; 1
down, 1
downsides, 1
dramatically 2
happens? 2
demand 11
ever 19
devices 15
dream. 1
downward. 3
harder 4
demonstrates 3
exact 26
directory; 1
everywhere, 1
drivers 1
draw. 1
drops? 1
deployable 1
dynamically 1
example) 10
evicted. 2
difference 18
drawn 1
dirty, 2
deschedules 3
examples. 3
each. 4
different-sized 1
dreams 1
disappear). 1
exception. 1
earlier; 2
describe 14
differentiation 1
exactly 39
driver 1
discipline, 1
exchange1) 1
easier. 1
descrip-tion 1
differs 1
exam? 1
driver8 1
disciplines) 1
excludes 2
designs, 1
difficulties 2
examines 3
dummy 4
disconnection 1
duty. 1
design” 1
dx 2
difficulty 4
excuse 1
dx=3,dx=3 4
easily 17
desirable. 1
digest; 1
discovered 4
exec 2
eaters; 1
example. 31
e.g., 8
discussion, 1
execl, 1
direct 14
executed. 1
earlier 18
eax=51. 4
disk), 2
detail. 12
executing) 1
examples; 2
directory. 6
ease. 1
disabled; 3
distribution 1
details; 3
hardware 263
exhibit 3
exception; 2
economist. 1
easy-to-use 2
discussed, 1
dive 4
harming 2
detect 5
exceptions 3
editor 2
easy: 2
exist 11
discussion). 1
haul, 1
divides 6
have: 2
effective. 3
eaters 2
exit; 1
exclusion 21
deter- 1
do), 1
head, 1
either. 1
head_lock, 2
exited2 1
exec(), 6
documented 1
eax. 5
determined 9
disk 54
ele-ment 1
exits 3
does), 1
edx; 1
developer; 2
effectively. 3
effect” 1
executable 13
employed 4
expect, 2
developers 12
elapsed. 1
executes, 3
employs. 1
expected; 3
devices. 4
expensive. 2
disrupt 1
executing. 1
elsewhere 3
heap 76
doesn’t 51
diagram); 1
execution. 17
distinguish 2
empty 14
emailing. 1
hearing 3
doing? 2
experiment, 1
execvp(). 1
diagram, 6
distributed 7
en-us/um/people/mbj/Mars 2
empty), 1
held) 1
explicitly. 2
execvp(myargs[0], 2
here: 10
dives 1
enacted 1
exit 13
dictates 1
high. 3
enable 24
encountered 1
exploit 1
expected 7
higher-priority 2
end), 1
enabled, 4
exploration 1
did 22
experimentation. 1
him 1
end”. 1
don’t 81
exports 1
die). 1
explained 2
hints 4
energy-efficiency 1
extension 1
dies, 2
history, 3
different: 2
facility 3
enough. 2
hit! 1
difficulties. 1
down 25
fact). 1
explicit 22
end 46
ensued 1
hits. 1
digging 1
download 2
fail! 2
express 1
end\n"); 5
hogging; 1
extreme 4
hold? 2
drink 2
failed 8
endeavors 1
digit 1
entering 9
holder 2
drive. 2
failed\n"); 4
endlessly, 2
directing 1
entirely 4
holds, 2
driven 1
failure), 1
fact, 28
enough! 1
fail. 2
entirety 2
honor 1
dynamics 1
fairshare 1
direction 1
entries: 1
failing 3
directory, 8
falling 1
earlier, 3
envisager 1
host 2
faint 1
disappear 1
familiar 2
equal, 2
fanatics, 2
hour 1
entire 46
easy. 3
equivalent. 2
fancifully 1
do 328
disk. 14
fair 19
entirely; 2
eating 1
era, 1
eax=50 2
documents/R4400 1
displays 1
entry), 1
dissertation 6
fantastic 1
effects 1
efficiency; 1
establish 3
fair-share 7
divided 8
far, 13
errant 3
efficiently. 1
estimator? 1
electrical 1
diving 1
farmer 1
errantly-freed 1
families 1
errorprone. 1
errors? 2
element. 1
family 5
do. 18
evaluate 6
esi; 1
faster 16
elements; 1
far) 2
does. 1
eviction. 1
est 1
fast” 1
estimate 2
fast, 6
else? 2
fault) 1
evicted 3
fault. 7
elsewhere, 1
faulting 2
email 2
favor, 1
does 256
faulting”, 1
examine 36
embracing 1
fd 1
doing: 1
faulty 1
doing 76
features. 2
domains 1
fetch 29
doivent 1
examples 21
dollars 2
emptied 1
double 3
feedback 5
excellent; 2
fetch-ing 1
dominate 3
driving 1
fetches 10
fg 1
enabling 15
figures 4
enacted, 1
earlier). 1
exception 15
done; 1
excessive 3
engineers 2
enjoys 1
double. 1
doubts 1
execute, 2
easy-to-read 1
ebx, 1
file), 1
downside, 1
enlisted 1
executed 17
execvpe(). 2
fill. 1
downwards 1
enqueue 4
ecx; 1
exist: 1
filling 1
dream 1
example 131
entity; 1
editor, 1
fine; 2
exit(1); 6
drives, 1
exceeding 1
effect. 1
few 102
efficiency. 3
how 441
finish, 2
exit), 1
dump”, 2
exiting? 1
expect. 2
eight-page 1
hptr 1
finishes, 1
entries. 3
fire). 1
during 29
emails 1
dustbin 2
http://people.freebsd.org/˜jasone/jemalloc/bsdcan2006/jemalloc.pdf. 1
field. 1
first-level 2
excellent 42
empty, 3
dynamically-allocated, 1
entry. 10
expectations 1
http://www-formal.stanford.edu/jmc/ 1
fitting 3
https://birrell.org/andrew/papers/035-Threads.pdf 2
enabled 4
hugely 3
exceptional 5
fix. 1
figure 35
enact 1
file-system 1
equal 19
hybrid, 1
excessively 1
expensive 3
flag; 6
ence 1
file: 1
exchange1 1
era 7
expensive!). 1
files” 1
encounter 7
flags 10
exciting! 1
end, 5
i.e., 29
fill; 2
flaws 1
essential 3
explicitly 12
exec(). 2
endlessly 2
i5 2
fills 3
flexibility 2
evicted, 1
executed), 2
evil 1
engineering 2
i=0 1
enough), 2
explore 5
exam- 1
executing 26
focused, 1
examining 4
exploring? 1
idea; 1
final 51
ideal? 1
ensuring 14
extremely 3
for. 3
findings 2
execution 48
fine 7
face 4
forefront 2
entered, 2
factor 8
entirety? 1
execvp() 1
forever, 6
ideas 36
fails 5
entry) 1
exist). 1
finished 14
fork.py, 1
environment. 4
idle 5
existed. 2
fit? 1
exists, 3
fork; 1
equals 3
ignored. 1
fairly 9
fits, 1
exit()) 1
formal, 1
errors. 1
formed 3
each 340
fairness, 2
exits? 2
illegal, 1
five 8
escalation 1
forward 4
expect; 1
fall 5
earliest 13
illegally). 1
esp; 1
fought 1
expected: 2
far-reaching 1
eases 1
illusions, 1
fragmentation. 6
expects 3
far. 1
especially 13
imagine, 4
fragmented 3
immense 1
easier 19
flag 73
fascinating 9
establishment 1
experiments 3
free(): 1
impact 5
eater 2
flag)? 1
fashion). 1
expert, 1
etc.) 11
explains 2
implementation 7
flag[0] 2
fault3 1
effective 12
free(ptr), 1
evenly 3
expose 1
implementation)” 2
flash-based 2
fault; 2
efficiency, 3
free; 5
implements 6
extra 18
flavor 2
faults 3
efficient, 5
importance, 1
frees 6
every 52
fact. 2
features 17
frequencies; 2
efficiently? 5
example, 262
flight, 1
fellow. 1
evict 9
frequency; 1
fail 13
efforts 2
floor 1
excellent, 4
fetch), 2
evidence 1
frequently-used 1
far; 1
eight 1
flush 5
few), 2
exclusion. 6
example). 3
frequently. 1
important 63
eip; 1
foil 2
fewer. 1
exec(): 1
example? 2
fashion, 1
friendly 5
forces 2
improved 6
fields 2
executing, 2
examples, 3
frightening 1
exception, 3
forever! 2
improvement 3
figure), 1
fast. 5
execution, 8
in-between 5
either 49
excess 1
forgets 1
files, 3
from) 2
fastpath) 2
fork 7
in-terface 1
fill 11
exchange 2
fault 12
form. 2
in/out 1
execv(), 2
func() 4
finally 27
else 45
feature 5
formally, 1
in? 2
execvp(), 2
excluding 1
exercise 4
find. 1
employs 3
forms; 1
feel 8
incl 1
functionality, 2
execle(), 2
exert 2
emulator 1
formula, 1
fewest-possible 1
finding 15
functions, 1
incorporate 7
exhibits 2
increased 3
forth). 1
execute 29
fine-tuned 1
funky 1
field 15
en.wikipedia.org/wiki/LoadLink/Store-Conditional. 2
exist; 2
incrementalism; 1
found. 2
executed, 5
finish. 2
furthest 5
enabled. 1
file, 9
existence 3
incremented 4
fragmentation; 1
execution” 1
finishes. 1
enacting 1
gaining 5
file.txt|wc 1
exists 3
independent 4
exit. 5
first” 1
encapsulated 2
garbage-collected 2
files) 1
exercises 4
index. 1
exiting 2
gcc 10
encounter. 1
fill_ptr 2
encountering 1
fit, 2
indexing 1
exits; 2
inexpensive 1
gdb 5
finally), 1
encourage 3
five-level 1
exhibit. 1
expand 1
exist. 5
engineering. 1
infinite 6
finds 10
fix 3
general? 1
expected. 4
enough; 1
influential; 1
existing 14
info: 1
flag), 2
flag=0 2
experience 9
finegrained 1
exit() 6
generated. 1
enters 21
flag[2]; 2
expert 3
free 187
exited 1
entitled 2
generic 4
first, 20
exploring 2
free()? 1
flags: 9
entity, 3
exits. 4
getrandom(0, 1
expect: 4
exporting 1
freedom 1
information 57
flexibility: 2
entries). 2
first-fit, 1
globallyshared 1
expected) 4
exposed 1
frequency 5
informs 1
flexible, 1
entry). 1
first-in 2
goal: 1
expensive, 6
extend 2
frequent 4
infrequently 1
flexibly 1
entry? 1
experts 1
goals? 2
extent 1
fixed-sized 11
frequently; 1
inherits 1
folks 1
environment, 2
explanation 1
good, 2
fact: 3
flag[self] 4
friend: 1
init: 2
follow, 1
epic 1
explored 2
government 3
failed; 2
floating 1
from. 5
initialization. 3
equation; 1
expressed 2
graduate 9
followed 5
failure 21
full). 2
equivalent; 1
initialized 8
function, 3
graphs 1
follows. 4
fair. 1
error-prone. 1
extents 2
injected 2
game 4
foo 4
familiar; 1
external 10
group 12
innocent 1
forays 1
extract 7
family. 1
grow. 1
innovations. 1
error? 2
foreground) 1
fail? 1
general, 18
et 7
inodes, 1
growing 5
forever; 2
famously 3
generalized 1
fails, 3
etc.). 1
insert(queue, 1
growth: 1
fancy? 1
get: 4
failure; 2
etc.? 2
inserted 2
gruesome. 1
fashion 4
failures 1
getpid()); 9
insight 1
form 46
inspired 1
faster; 1
eventually 15
getpid(), 2
guarantees. 2
format; 2
fairness 7
installation, 1
fault, 7
evict. 3
gettid() 2
guy 3
fortuitous 1
familiarity 2
instead. 4
faulting. 1
evicting 1
gettimeofday()). 1
hack. 1
instruction(s) 2
famous 21
favorite 8
hacking 1
found 84
instruction, 19
eviction 3
far: 2
getting 33
fetch-and-add 8
foundational 2
instructions) 2
exactly? 2
intact; 1
example), 10
exceeds 8
except 6
fetch. 2
fashion; 1
integer 17
exceptionally 2
fetching 4
faster. 6
few. 1
had 57
four 52
glance 1
exclusion? 2
integers), 1
fault? 1
field, 2
handler). 1
free()) 1
globally-shared 1
handlers, 3
free(void 4
faults, 2
fight. 1
exec(); 1
gnu 2
intense 2
free-page 1
feasible 1
freed. 3
features, 2
friend, 2
go, 2
execution), 3
handling 14
feeble 2
interactive 20
goals, 1
exist, 1
going. 1
happened 5
interest 3
fell 2
existed; 2
good! 2
exit). 2
felt 3
interrupted 14
file 95
got 16
happens. 3
exit? 1
fetched 5
intervals. 1
gracefully, 1
filled 6
hard-andfast 1
exits, 2
few) 1
into, 1
fields, 1
fine. 2
hard-to-find 1
intricacy 1
field” 1
expect 15
figuring 1
finished. 2
hard-working 1
granting 1
introducing 5
expected? 2
file; 1
graph 11
experiment 5
grasshopper, 1
hard. 1
introduction, 1
explain 1
files 10
extended 5
intuitively 1
hardware). 3
inventory 1
eyes...) 1
finally, 8
greater 4
hardware? 1
invocation, 1
harmful. 1
hates 1
greater-than 1
failed, 1
find!) 1
is: 9
grow; 1
failures. 2
fine! 1
fairness. 6
first; 6
isolation, 2
grows 16
guarantee. 1
handle. 1
it! 14
having 29
fit 27
family? 2
handler, 3
it) 5
flag) 5
fancy 7
happen. 2
fantastic, 1
flag.s 2
he 20
flag[1] 2
it?!) 1
flags. 2
head->value; 1
first 278
iterations, 1
happening 1
far 21
happens; 2
head; 2
first-fit 3
iterations/threads: 2
flaws. 3
fares 1
happy 5
header, 4
itself? 1
heap). 1
fixed 13
hard-and-fast 1
flexible 9
fast; 1
jacket, 1
heap? 3
faster, 6
flushed 1
feasible. 1
harddisk 1
heavy 5
flag. 13
heavyweight 1
flag’s 2
flavor. 1
fly 1
feature-filled 1
hardware, 15
from 443
flexibility; 1
fullness 1
fellow 1
held 25
hardware-based 5
follow 2
few). 1
flow 14
fully 8
harsh, 2
following: 8
helgrind 16
flushing 1
fully-associative 1
fewer 13
has. 1
for, 2
hash_t; 2
function. 2
jobs 102
figures, 1
help, 1
forced 2
hate 1
functions; 1
join. 2
fundamentally 3
here! 1
further, 2
here) 4
forcefully 2
have. 3
files. 1
for 1176
focus 21
forget, 1
hex 4
futex 16
force 2
forest, 1
forever. 1
forewarned: 1
hides 1
gates 1
fork() 25
focuses 3
forget 8
hierarchy. 2
general. 1
form). 1
high-level 6
fork(), 9
generalization 5
follows: 21
generalpurpose 2
head 39
highest-order 1
forms 3
formed. 1
footnote: 1
forth, 4
for) 1
generating 2
heap); 1
former 5
highly 7
find 86
forward-growing 1
forcing 1
generation 1
forth 3
highly-networked 1
heap, 22
foreman 1
get(); 5
found? 1
fine). 1
fragmentation 13
heart. 1
fine-grained 3
fork()/exec() 1
ghastly 1
history; 1
form, 6
frankly 3
heavily 2
free(), 2
github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
formally: 1
heavy-handed, 1
fingertips. 1
free(16500) 1
free(tmp); 3
hit 32
giving 15
finish 13
fragmentation, 6
free), 2
hogs, 1
freed) 1
forth), 1
global; 2
holding 12
held), 7
freely 2
finishes 6
forthcoming 3
globally-allocated 2
homeworks. 1
help) 1
fires 1
frequently 7
found, 2
goals. 2
hoping 6
helped 2
first) 1
friends, 2
fourth 4
frame 40
http://en.wikipedia.org/wiki/You 1
flag). 2
http://stackoverflow.com/questions/2509679/ 1
flag.s. 2
free() 8
here. 11
friend” 1
fragmented; 1
going 29
http://www-formal.stanford.edu/jmc/history/timesharing/timesharing.html. 1
flag? 3
just 304
free) 5
here’s 1
from; 1
free(10), 1
http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF. 1
flags, 1
kernel), 1
grab 11
free-list 1
hexadecimal), 1
full, 6
humans) 1
focused 3
free. 13
grabbing 2
free-space 4
hey, 1
freely, 1
humble 2
freeing 6
grand 1
fully-operational 2
hide 1
frees. 1
kind 54
hundreds 5
friend 3
gray) 3
from, 3
hierarchy; 1
following 55
frequently, 3
knows, 1
hybrids 1
functional, 1
grows: 1
functionality. 3
high: 1
functioned 1
friends 3
l/stl 2
hypervisors). 1
fully-associative, 1
for: 1
highlyfragmented 1
fringe 1
late 4
icon, 1
funny 1
forcefully. 1
guarantee 21
fundamental 18
from). 2
latency. 1
idea: 1
historical 14
forever 6
fundamentalist 1
forewarned, 2
ideas? 1
guessed, 5
further 31
later. 9
forget: 1
full 33
guide. 1
fusion, 1
identical 6
futex_wait 2
idioms 1
future, 5
forgetting 2
func(). 1
hair 4
history 16
layout 2
gained 1
illusion. 2
gadgets 1
forgot 2
functions: 1
hallmark 1
hit), 4
gains. 1
imbalances. 1
fork(). 2
futex_wake 2
hoc 2
gates, 1
hand-over-hand 8
generality, 1
fork()ing 1
gain 16
implement!) 1
future 21
formal 2
gaming, 1
implementations, 1
handed 4
lead 50
gaming 2
forms: 1
general) 1
important). 1
leaked 2
holds 38
formulae. 1
handle 17
generalizing 1
gather 1
important? 1
forth. 10
honor, 1
handled, 1
learn, 1
impressive. 1
least- 1
generally, 7
fortunately, 2
honorable 1
handler. 2
generated 12
least-frequentlyused 1
improves 4
four-level 1
hood 1
gave 3
handlers; 1
fprintf(stderr, 6
leaving 3
in-kernel 5
leftmost 1
generally 28
fragmentation2 1
hope. 1
fragmentation: 1
how, 1
happen 15
however: 1
generations 1
generate 28
in-memory 2
fragmented, 2
length, 1
harder. 1
get 126
http://www.sparc.org/standards/SPARCV9.pdf. 2
in. 11
generator 2
frames; 1
lesson: 2
hardly 3
good? 1
generated, 1
http://www.unix.org/version3/. 1
inability 1
get? 1
level. 7
graph. 1
libc, 1
gently 1
hardware. 10
inaccessible 2
gigabytes 1
incentive 1
free(). 6
greater. 1
libraries) 1
get(counter_t 6
hardware’s 1
hundred 7
goal, 1
free? 4
greatly 4
library) 5
hybrid 10
hypervisors, 1
good. 6
greedy 3
life. 2
freed; 1
lifted. 1
groups 3
gets 51
including 51
grabs 16
front 10
iMac 4
like) 2
grows. 1
gettimeofday() 5
grade, 1
frustrating 1
idea? 2
increases 6
limits, 1
guaranteed 1
line. 1
guessed 1
frustration 1
guest 1
giant 1
guide: 1
incredibly 8
ideas, 3
link 6
identifiers, 1
list-like 1
idle, 1
grammar 1
habit 2
increment 14
list: 3
great, 1
give 30
fully-developed 1
hacked 1
incrementally. 1
illegal 11
greater), 1
glock; 2
hand-assembled 1
illusions 1
greatest 1
fun 20
ground 1
functionality 2
functions 7
handle, 1
indeed, 11
little 103
indefinitely) 2
handled 4
fundamen-tally 1
grow 18
goal 19
load. 2
indeterminate, 2
load/store: 1
gruesome 1
imagine 41
google’s 1
future. 9
hands-on 1
indicated 4
imbalance. 1
influenced 2
loading 6
gray 3
inherent 5
happen, 2
guarantees 6
immediately. 2
gadget), 1
locally-allocated 2
happened; 1
init() 6
happy. 4
initializes 5
impact, 3
guess 8
location.” 2
garbage 2
inject 2
hardware-managed 9
implementation, 2
guesses 3
lock(&mutex); 2
gcc, 1
innovation 2
has 348
inputs: 2
implications. 1
guts, 1
great 79
gdb, 2
hardware: 3
lock(), 8
insert 12
hackers. 1
importance 8
grocery 2
general-purpose 8
hash 17
harm 3
lock), 2
inspires 2
hand, 3
grossly 1
important, 7
generalizes 1
has, 1
installing 1
lock->flag 6
hand-coded 1
locks: 3
have, 1
get() 7
improve 17
instance 3
grouping 4
instant, 1
head->size 1
logic 7
header). 1
handle; 1
grow, 1
instead), 1
in; 2
headers, 1
inadvisable 1
instruction; 3
handles 14
happen?4 1
given 80
glibc 3
happens 78
hard 51
hardware) 3
hardware/OS 2
hardwaremanaged, 1
head), 1
growth 1
heap: 2
inc 1
global 56
instructions 78
long-running 15
head->next; 1
hear 1
header. 1
looked 8
insufficient. 2
lookup, 2
inconclusive 1
heavily-used 1
gods, 1
header_t; 1
guard 14
integer). 2
loop, 10
guess, 3
incorporated 4
guesses, 1
heap) 2
integers, 2
held; 2
interactivity. 2
gone 5
habits 1
held: 2
lost, 3
interconnected 1
increase 20
hello, 8
increased, 1
help. 1
helping 2
interesting) 1
hack, 1
incremental 1
lottery.py, 1
hence, 3
here, 22
interludes. 1
incremented, 1
half 8
love 2
here; 4
hand 6
low, 3
hand-over-hand). 2
herein, 1
indefinitely. 2
internal 12
have 487
good 99
havoc’ 1
handling. 1
hierarchies 2
index: 1
herein), 1
interposed 1
indicating 8
grande 1
head->next 1
hierarchy 2
happen? 8
heuristic 2
lowered, 1
interpret 1
indivisible 2
graphics 2
headaches. 1
high-performance 1
high-priority 2
high 36
highlight 3
hire 1
history. 3
hit; 1
hits 13
higher 24
industry 2
lowest 9
header_t 1
great. 1
hole 1
historically 2
inefficiencies. 1
hits). 1
headers 2
inefficient. 4
homework, 9
lwarx/stwcx 2
greater). 1
heap-allocated 1
green 1
information, 6
grew, 1
heap. 10
machine) 2
honor: 1
interrupt 77
machinery. 3
inherently 2
hopefully 6
initial 5
heard 1
happening! 1
happens, 4
how: 1
interval 8
machines. 6
intervention 1
heart 2
hold 27
initialize 15
hard-hitting 1
however 1
hardwaremanaged 1
madvise), 1
intrinsically 1
held). 2
grows? 2
homeworks 5
initiates 4
http://en.wikipedia.org/wiki/ 1
harmful, 1
http://ostep.org/Citations/inside-cfs.pdf. 1
helgrind? 2
gum 1
hopes 1
input: 1
horrible 1
magnitude 1
harmless, 1
http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD123.PDF. 5
has). 2
hello 5
introduce 12
ins 1
main() 11
hackers 1
https://en.wikipedia.org/wiki/Buffer_overflow 1
has? 2
halt 5
hours. 1
invalid. 2
inseparably 1
main-deadlock-global.c. 2
https://quoteinvestigator.com/2015/07/23/great-power. 1
helpful, 1
have? 2
hand. 3
how-to-generate-a-random-number-from-within-a-range. 1
installation 1
invented 5
installs 2
main-race) 2
helps 5
headed 3
handed-out 1
http://ftp.gnu.org/gnu/glibc. 2
humans, 1
inversion 6
header: 2
invisible 1
headway 1
https://lwn.net/Articles/170003. 2
hung. 2
main.c 6
hybrid. 1
involved. 2
heap), 1
is! 2
handlers 5
heavilyused 1
humorously 1
i++) 18
handling, 1
hy-brid 1
isn’t, 2
isolated 2
idea, 7
isolation; 3
held. 16
here 46
illegal. 2
happening? 1
imbalance, 1
issue, 3
helgrind. 2
heyday 1
ideal 4
happens: 5
identifier, 2
help: 1
issued 7
immediately, 4
implicitly 2
hardware-interpreted 2
improve. 1
hidden 4
hardware-specific 1
instruction 130
hardware; 2
high, 4
in) 2
hence 20
high-end 4
included 4
haven’t 4
instructions), 1
havoc 2
increasingly 6
increment(counter_t 4
integer, 4
header 15
higher-level 1
here? 3
herein 3
heuristics 1
hierarchies, 1
make 214
increments 7
heap; 2
highest 20
intend 2
hierarchy, 1
indefinitely, 1
heavy, 2
hint 4
intensively 1
himself, 1
hinted 3
historically, 1
held, 6
intent 5
helgrind, 2
index 20
malicious 14
historically-based 1
indexes 1
hit. 5
indicative 1
hold, 1
his 37
indirection 3
history... 2
holes 1
malloc(sizeof(node_t)); 8
interact 15
help 38
hit). 1
inefficient, 2
homeworks, 3
malloc. 1
interactive, 1
here), 2
hits, 2
inflation, 1
hostility: 1
mandated 1
interesting. 2
herein. 5
informed, 1
homework 9
hot 1
manifesto 1
intergalactic 2
highlighted 1
inheritance. 2
honor. 1
init(); 2
manual 13
init(lock_t 4
many! 1
interposing 1
hope 13
interrupt), 1
initialization 8
interrupted, 3
map 7
hopefully, 3
mapping: 1
however; 2
initiating 1
http://portal.acm.org/citation.cfm?id=540365. 2
hit, 28
house 2
market... 1
intervals: 4
inkernel 1
https://gruss.cc/files/kaiser.pdf 1
huh?? 1
humorously, 1
hurt 3
hog; 1
marks 4
innovations 2
home 3
marvelous 1
innovator 1
honest 1
masses: 1
however, 49
inode) 2
http://books.google.com/ngrams). 1
matters. 3
idea 92
http://cag.csail.mit.edu/raw/ 1
identifier 3
mature 1
http://linux.die.net/man/3/pthread 1
max 1
http://cag.csail.mit.edu/raw/documents/R4400 2
if, 4
http://www.ostep.org/Citations/notes-solaris.pdf. 1
input 20
http://history-computer.com/Library/AltoUsersHandbook.pdf. 1
maximum 8
https://events.static.linuxfound.org/sites/events/files/slides/elc 1
input/output 3
illusion, 2
http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF 1
maybe 4
insert; 2
insisting 1
http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1303.PDF. 1
inspiration 1
http://www.ibm.com/developerworks/linux/library/l-solar/. 2
installed 1
http://www.intel.com/products/processor/manuals. 3
huge 20
imagining 1
meaningful 5
immensely 1
http://www.multicians.org/history.html. 1
human 4
instances 2
meanwhile, 1
https://github.com/mit-pdos/xv6-public. 1
measured 2
hurting 2
hundreds). 1
measurement 3
hurts; 2
mem-access 1
implement 30
i; 16
idle! 1
instead 95
instruction. 22
instructions; 2
int), 2
interact. 1
interacting 1
interaction 13
mem? 1
implemented? 1
idea! 1
into 339
interchangeably 1
implicit 1
memory), 5
ideally 1
introduces: 1
interest: 2
memoryintensive 1
idiom: 1
implies 7
interested! 1
introduction 17
ignore 5
memorymanagement 1
imply 2
interesting, 4
intuition? 1
imbalance 3
merely 1
importantly 1
interfaces, 1
invention 1
messages. 2
improving 4
interleaving 4
investigating. 2
met 1
i 22
metric: 1
in, 6
interlude, 2
inaccessible. 1
interpretation 1
immediately 23
ice 1
microkernels 3
invocation 1
inactive 4
interrupt; 1
implementation. 4
identical, 1
mild 1
illusion: 2
is. 7
milliseconds 6
implemented 10
isolating 1
increases. 5
illustrate 5
mind. 1
important. 5
isolation 3
imaginary 1
increasing 10
minute?), 1
improvement. 1
interrupts 33
in- 1
issuing 6
mirrors 1
impacts 1
incrementing 12
in-between. 3
intervals 6
miss-handling 2
it), 4
implement. 5
it.” 1
implementations 4
item; 1
interval’ 1
miss: 1
incarnation. 1
independently 8
implementing 8
intriguing 1
mistake 3
include 18
indicated. 1
implication 1
introduces 6
mistakes), 1
items 9
inclusion 1
inefficient? 2
iterations 4
invoked 2
mix 1
incorrectly. 1
implying 1
mode) 9
itself; 3
modes. 2
important; 4
modification 2
is, 22
increased. 5
job). 1
influential 4
improbable, 2
modified), 1
it3 1
modifying 2
job? 1
inform 4
in-depth 1
initializing 1
modularity, 1
jobs); 1
independently! 1
it; 14
in-use 1
initially, 2
module 1
indicated). 1
in: 1
jobs, 14
indicates 3
inaccessible, 3
inefficiencies 1
initiated 1
jumping 2
moment. 1
incorporates 2
innocently 1
inefficient 4
kernel) 2
monitoring 3
if 483
monolithic 1
illegally 3
inopportune 2
key) 16
increase? 2
increases, 2
infinite. 1
inputs 2
illusion 20
kick 8
incremented; 2
inflation 2
most-recently 1
insert. 2
imag-ine 1
kill. 1
imbalanced? 1
it 1299
mouse), 1
insertion 2
incur 1
killing 2
info 1
immediate 2
it?) 1
move). 1
installations. 1
incurring 1
instruction) 9
movl 28
instructions. 5
information. 9
item. 1
immediately; 7
ms. 5
informative 3
iteration. 1
indeed 26
kind, 1
indeterminate 2
multiple-queue 1
indexed 3
imperatives. 1
itself. 19
knows 18
impetus 1
implement, 1
laid 4
indicate 15
multiprocessors 5
landmark 3
implementations. 4
multiprogramming 8
informed 3
individual 3
inducing 1
important) 1
ineffec1 1
mutex; 6
init 4
importantly, 9
jne 3
infinitum. 1
jobs? 3
initializer 2
language. 3
impossible 1
its 295
mutex_t 5
influence 1
join()); 1
inner 1
larger), 1
itself) 1
join(), 7
it’ll 1
innovations, 1
jars 1
larger-scale 1
mutex_unlock 2
largest 2
informally, 1
input); 1
jobs: 2
my 6
last. 1
informing 1
input, 1
joke, 1
lations 1
join 12
ld-2.23.so 1
infrastructure 1
inserted. 1
jump) 1
jumped 1
just-finished 1
myarg_t; 4
n 4
inside 30
init(), 2
namely 5
leap 3
judiciousness 1
jumps) 1
k-stack(A) 1
inputs. 1
near 13
keep 48
nearly-endless 1
inquiry 2
int 260
keeps 13
kernel, 7
nearly-infinite 1
insparable 1
neat. 1
kernel” 1
learn 65
kicking 1
instead, 5
intellectually 1
instant 3
networking. 2
key); 4
new, 1
killed; 1
instruction: 1
intelligence 1
instruction? 3
learned? 1
key, 2
kind: 1
new->key 4
know! 1
intensive. 1
least) 1
instructions, 10
instrument 1
instructions). 1
new_head->value; 2
interactions 4
keyboard, 1
least-recently-used 4
knowledge 14
integers 4
instrumentation 1
new_head; 2
interface: 1
kicks 2
left). 2
known; 1
intelligence. 1
int) 2
newfile.txt. 1
interleavings 4
kidding; 1
legends 2
laborious 1
intensive, 1
intermediate 1
kill() 1
laptop 2
interactions. 2
len:10 6
node 12
interrupt. 4
killed 2
large-file 1
len:9 1
nonconcurrent 1
interval. 1
nonetheless. 1
large-scale 1
normally 2
knew 5
interesting 46
intervention. 1
interface 16
last); 1
not), 3
know. 3
length 16
intricate 3
interleavings. 2
last, 1
interfaces 17
lest2 1
knowing 6
internet 1
intuition 3
last-in 1
interfere 2
libc 2
interpose 1
note 27
invalid, 8
interrupt, 4
lie 1
latency 9
interleaving, 2
notice, 3
investigate 1
interrupt-based 2
life: 1
interrupted. 2
noticeable 2
invited 1
interval, 1
interrupts, 4
noticed 5
later 36
intervals) 2
intricacies. 2
involved, 6
now: 1
latter, 2
known 90
intervening 3
nptl 4
is? 2
lazy 5
intro 3
la 3
number), 1
it!), 1
invent 3
introduced 25
inverse 1
leaks 1
languages. 2
lean 1
involving 1
invalidate 1
likely 73
numerous 12
learning 2
obliged 1
left), 1
legal; 1
limits 6
invented, 1
observe 6
larger 23
lets 10
line: 2
letter 3
lingo) 1
level 23
later), 1
it. 68
inversely 1
observed, 1
levels), 1
itself); 1
list. 21
latest 8
obtained 1
inversion, 4
ocean 1
list_t; 2
itself, 8
leak 2
library; 1
learns 1
of) 3
listens 2
off; 2
least, 7
listing 4
inverted 4
list’s 1
older 13
lie. 1
it’s 33
least-significant 1
literally 1
on! 2
located. 2
on) 1
locations. 1
leave 13
on-chip 4
is), 1
on-going 4
led 8
legal 6
life 22
isn’t 26
legitimate 1
lock() 38
light 1
isolate 1
one, 26
lengths 5
open, 1
lock) 4
let 36
lightweight 1
like; 2
levels: 1
issue 33
locked 7
job 144
likes 1
operation), 2
limit) 1
junctures 1
operational 1
libcrypt, 1
locks. 6
opposites 1
logic, 1
looking? 1
lookup 12
optimal 20
libraries 3
limited 17
keeping 14
it, 68
optimizations, 3
limits. 1
optional 2
ordering, 2
other, 5
others) 2
line 14
iterations? 1
loop 41
job. 8
library 47
job’s 2
list, 26
lost 4
lies 4
join() 9
live 12
journaling 3
our 230
like 215
out"); 1
lots 12
lives), 1
k-stack(B) 2
out. 11
outcomes? 4
over-written 1
overcome. 2
load 35
load-linked, 2
kernel-owned 1
loved 1
overhead 12
locale 2
kicked 2
overheads), 1
killall. 1
locate 3
locations, 1
low 10
killer 1
overseas. 1
kindly 1
lower-case 3
oversubscribed, 1
kinds: 1
lock). 10
lowered 1
p. 1
know, 5
m->flag 6
knowing. 1
macro 1
p6 5
main(), 1
main-deadlock.c 2
page) 4
known. 1
lock->ticket 2
lock-free 3
page-fault 3
l/stq 2
maintains. 1
kernel 123
limitations 1
lock? 10
limiting 1
lack 4
make, 2
languages, 2
lock_init(lock_t 4
limits; 1
key 28
pages. 28
keyboard 2
keystroke 1
locks, 22
malicious, 1
kinds 5
managed), 1
logically 6
kmalloc. 1
paging 28
know: 2
linker 1
managing 9
knowing, 1
list) 5
listed 1
manifests 2
paging-policy.py, 1
known, 2
manual, 2
paid 1
pain. 1
labeled 3
paper. 1
masking 4
large 93
lists. 1
larger. 1
math 4
large-memory 1
lively 1
par-allel, 1
long 68
launch 2
mathematical 1
large. 3
maximum, 1
paragraph 1
launches 2
parallel) 2
parameters: 1
ll/sc 2
lazy; 2
me 6
larger, 2
park 6
loathe 1
leaking 3
looks 39
laser-like 1
locality, 8
lookup. 3
latency) 1
learned 13
measure 21
partition, 1
location, 6
laugh 1
loop. 8
memory! 2
lock(&m) 1
paths. 2
laughably 1
looping 1
lay-out. 1
looping-race-nolock.s, 2
patient! 1
left 21
memory) 5
length) 1
lock(lock_t 14
looping-sequential 3
memory-mapping 1
pattern 5
mention 1
patterns), 1
loops; 13
mentioning: 1
lost. 2
pause 2
lot! 1
low-cost 1
percentage 5
low. 1
methods. 3
lays 1
let’s 73
lazily, 1
lower-priority 2
metric. 4
lock, 61
levels 9
perfectly 2
lock->turn 8
locked; 2
performance, 14
luck! 1
microcode), 1
libcrypt-2.23.so 1
locking. 3
laziness 2
mid 1
ldq 2
libraries. 2
locks) 3
logs 1
longer-running 1
mighty 4
performs 21
library. 10
period; 1
lucky 3
migrating 2
m; 1
libtinfo, 1
periods 4
leads 13
migration 5
machine; 2
life; 1
persistently 1
leak, 1
milliseconds, 2
learn? 1
perspective, 1
minicomputer. 1
phone, 1
machinery 10
minimize 11
minimum. 2
least 35
legality. 1
lifetime, 1
length). 2
machines 21
miss. 9
length? 1
piece 36
look 121
lookups 1
misses. 7
like. 6
lengths, 1
pipe 8
loop; 2
pipeline 1
main(int 23
library, 10
loops 18
missing 4
lowest-priority 1
main-deadlock.c. 2
ls. 1
linear 34
mistakes) 1
place! 2
libtinfo.so.5.9 1
main-two-cvs-if.c. 1
luck. 1
mainframe 2
lifesaver 1
lines 14
placing 7
list). 2
mmap(NULL, 1
malfeasance 1
like, 3
m 1
plans 1
list? 1
mocked). 1
liked 1
mode), 1
malloc 8
likely). 1
platforms. 1
lists, 7
modification, 2
malloc(sizeof(double)); 1
linear. 1
lists[BUCKETS]; 2
play 4
links 3
machine 34
list), 1
more). 1
pleasant. 1
malloc(sizeof(int)); 2
lives 7
macros 1
literature 1
more? 1
manipulate 2
pmap 5
llock[NUMCPUS]; 2
made. 2
lives. 1
magnificently; 2
manner? 1
load; 1
manufacturers 1
lmbench 4
in 2103
mapping, 1
point, 30
massive 4
includes 13
pointier, 1
loads 19
master, 1
loaded 17
materials. 1
local-to-global 2
policies. 7
local[NUMCPUS]; 2
math. 1
policy. 4
matter; 1
measurements? 1
portions 7
locality 18
possession 2
local 56
main 66
preempted 4
motivating 1
locality: 2
main-signal-cv.c. 2
preserved. 2
locates 2
locking, 2
mechanisms 32
main.c). 2
megabytes). 1
maintain, 1
logarithmic 3
pressed 2
mem.c 2
location 39
incorrect. 1
makes, 2
mov 33
memory). 6
logical 15
incurred; 1
previously, 1
malloc()); 1
movement). 1
memory-access 1
long-term. 1
independently, 2
principle 6
malloc(), 3
memory-constrained 1
long; 1
init(counter_t 6
moves 15
malloc(strlen(src)); 1
longer, 1
memory-failing 2
managed 6
initially 3
multi.py 2
initiate 3
printed 6
inode 3
multiplexing 2
lookaside 4
memory? 9
printf("%d 4
management 29
insidious 1
multiprocessorbased 1
memoryreference 1
looking 13
insights. 2
printf("%d\n", 7
multiprocessors, 2
memory” 1
lookups. 1
manner, 11
install 1
printf("%lld\n", 2
must-read 3
men-tioned 1
loop) 2
merest 1
printf("location 3
merge 2
loop.s 6
mythread, 14
instantaneously. 1
printf("returned 4
instructions: 2
priority, 7
naming 1
mesmerizing. 1
integer) 2
mess 1
priority-based 1
nanoseconds). 1
loops. 1
integrity 1
intelligent 2
interactivity 2
interested 11
interesting; 2
interface. 4
interposition 2
lottery 24
privacy 1
nary 1
privileged; 2
nearest 1
pro-cessor) 1
problematic, 1
problems: 2
proceeding. 1
necessarily 8
process). 2
need. 2
interrupt: 4
needs; 1
message; 1
negative). 1
lovely 1
ls, 1
lying 2
process? 4
negatives, 2
processes? 3
messages 1
network 2
meters 1
m->guard 10
processes” 5
network-connected 1
machine. 9
methods, 1
processor. 9
is 2736
metric, 2
lock 370
new 140
machines; 1
interrupted) 1
many 252
produced 2
issue; 1
microcosm, 1
professors 3
newly-freed 1
interruption, 2
made, 5
mappings. 3
logical. 1
microprocessor. 1
long-list 1
migration. 1
marking, 1
profilers 2
magic: 7
next; 4
invalid 8
issues 26
nicely. 2
long-lived 3
mail 1
match 12
investigator 1
million); 1
it). 3
nightmares 1
longrunning 1
malloc.py, 1
matches 1
it? 11
involved 9
nitty-gritty: 1
lookup? 1
malloc; 2
mind 5
itself), 3
material. 3
program. 46
involvement 1
node, 1
loop? 1
management. 3
miss); 1
it’d 1
manager 3
programmed 1
irstrun 1
manipulates 2
loops, 4
miss, 10
it” 1
nodes) 2
programs; 3
non-ASLR 1
manner: 1
is; 3
loss 2
job) 3
mathematician 2
misses, 8
non-executable 1
manually 1
program’s 9
isn’t. 3
lottery. 1
jobs. 7
mobile 1
join, 2
matter 13
many. 5
projects, 1
low-priority 1
mark 6
nonsolution: 1
mode; 2
jokes 1
maximizing 1
promote 1
iss 6
match. 1
lower 13
journalism 1
modes 2
note, 5
meant 1
proportionally 1
isses 1
matching 1
lower-half 1
judiciously 1
modified). 1
noted 3
measurements, 1
protocol, 1
measures 2
matter. 2
lowlevellock.h 2
modifies 1
issue. 3
proverbial 1
jump 22
m;) 1
measuring 5
modify 3
it!) 2
pthread.h 2
notice 34
mechanisms; 1
mechanism 18
kept 12
modulo 1
it... 1
machine, 8
moment 5
mem. 1
noticeably 4
meet 5
kernel; 2
it1! 1
pthread_cond_signal(pthread_cond_t 3
machinery) 1
money 1
memcheck 1
now-standard 1
memories, 1
it: 4
key; 6
machines) 1
pthread_cond_t 3
monopolized 1
item 9
now. 7
memory); 2
made: 3
memory-intensive 1
pthread_create(pthread_t 2
kill 10
mostly 4
nuance 1
memory-like 1
pthread_mutex_trylock(pthread_mutex_t 2
memory-management 2
killed). 1
movie 1
nuclear 1
itself 32
magic 7
memory?”, 1
moving 13
mentioned 7
main(); 1
message. 1
nuts 1
metal 1
main); 1
mid-execution 1
mainstream 1
ptr 16
job, 19
objects 5
kind. 1
ms 14
middle, 1
pulled 1
maintain 4
jobs) 1
observed 1
join(). 2
much-improved 1
judicious 1
much; 1
occasion; 1
millisecond 1
purpose 9
knowledge, 3
juggling 1
pushing 2
occasions 1
minds 1
known). 1
muck 1
memory, 124
jump; 1
major 28
put(i); 5
minimizing 1
occur. 3
multi-CPU 3
language 8
memory-mapped 3
jumps 7
miss). 1
q->head 4
occurs; 3
large) 1
ocean, 1
kernel. 6
miss? 1
q->tail 4
memory-reference 1
query 1
memory-user 4
odds 1
kernel?” 1
question. 7
misses). 1
larger? 1
mesh 1
old; 4
makes 57
kernel’s 4
questioning 1
mjtsai.com/blog/2015/12/16/osspinlock 2
message 10
olden 1
kids, 1
multi-level 30
queue) 1
mlfq.py, 1
microkernel-like 1
omitted, 1
kills 2
last 37
queues. 2
mocked 1
multi-processor 4
microseconds, 2
multiply 2
kind) 1
later); 1
malloc() 32
mode. 4
once), 3
quote 7
mid-instruction, 2
multiprocessing 1
later, 5
malloc(10 2
monitors 5
race): 2
milliseconds). 1
latter 5
minicomputers. 1
mutex->flag 6
races 4
malloc(100e6)); 1
raised. 1
malloc(strlen(src) 1
minimal. 2
law 2
randomly 4
layout. 1
ranging 1
ldl 2
manage 19
mutual 29
know 71
rather 29
myarg 2
ldrex/strex 2
managed, 2
minimizes 2
knowledge? 1
minutes 1
myturn) 2
management, 1
re-acquire 1
leading 9
known: 1
misbehaved), 1
left) 1
read/write 1
manager. 4
lags 2
name). 1
misbehaving 2
len:30 1
readable. 1
languages 4
nanoseconds), 1
manner 7
naturally, 1
level, 3
readers 1
libc-2.23.so 1
reading, 1
miss) 1
manuals 2
library” 1
maps 7
neat 8
readonly 1
missed 2
life, 3
laptops, 1
marking 2
necessary; 1
reads” 1
misses! 1
lightweight, 1
large, 7
matter, 3
laughing 2
matters! 1
laws 2
likes, 1
necessity! 2
need, 1
lawyers 1
reality, 1
line, 7
needed; 1
linear) 1
learned, 1
reason. 3
mode 23
linking 3
list 103
lived 1
load, 3
load-linked 14
load/store 3
located 13
location; 2
locations 11
more 470
modern 90
mean 6
left, 6
reasonably. 1
needlessly 3
left-shifted 2
reasoning 1
measure? 2
moreover, 1
moglie 1
lock; 24
lengths: 1
network. 2
reboots 1
measurements 4
mother. 2
lock_t 2
networking 3
receives 4
less 29
ms), 4
recently 6
lessons 5
recollections 1
recover 1
letting 6
referenced; 1
lifeless 1
never 38
mechanism, 2
references, 1
meeting 1
new. 3
megabytes 3
refers? 1
newfile.txt 2
regain 1
memories 4
newlyrunning 1
next-to-last 1
register) 2
lifetime 1
noble 1
locks 79
registers. 3
like: 3
most 130
non-contiguous 2
logically-different 1
limit 6
one 500
relatively-short 1
long, 5
non-synchronized 2
lines, 1
one-third 1
moved 6
rele-vant 1
longlived 1
non-zero 3
link) 1
onelevel 1
much. 6
much?). 1
nondeterminism, 1
looping-race-nolock.s 8
multilevel 2
loops? 1
lowers 1
none 3
multipro-gramming 1
linked 18
relocated; 1
list; 4
list_t 2
norm, 2
much 135
not? 2
multi-queue 4
multiprocessor 19
relocation. 2
lists 13
lowest. 4
multitude 1
note: 4
munication, 1
nothing) 4
lives, 2
lucky, 2
must, 1
mutex 17
notice. 1
loader 4
machine? 2
myargs[2] 2
remaining, 1
mutex_lock 2
noticeably. 2
load” 1
machinery, 1
mystery 1
locality. 4
noticed: 2
myarg_t 8
machines, 5
only 202
n). 1
remedy 2
location. 3
magic; 1
myargs[0] 2
oops! 1
mythread(), 2
name, 4
lock()), 2
remove 10
main(). 1
now, 18
naive 3
open 7
named 8
main-race.c. 2
napping 1
naturally-occurring 1
replacement. 4
nanoseconds 1
open("./p4.output", 1
main-signal-cv. 2
now-extinct 1
neatly 4
replies: 1
open()? 1
nature, 2
near-term 1
main-two-cvs-while-extra-unlock.c. 1
reply: 1
necessary 9
now-sleeping 2
operations. 8
main-two-cvs-while.c 1
nearly 9
lock. 64
representing 2
num 1
operator. 3
objects. 1
opinions; 1
requested, 2
mainframe, 1
necessary. 1
lock_t; 8
obvious) 2
opposed 3
maintains 1
necessitates 1
requiring 11
obviously, 1
majors 1
optimal, 5
resident 2
occur, 2
make. 1
off), 2
optimizations 1
needed 44
resource. 2
needed. 11
resources; 2
locking 34
optimizing 2
new; 8
needless 2
offending 10
respect 2
maliciously! 2
lock’s 2
options. 3
newly-allocated 2
needs, 2
offset=000000, 1
responds 2
maliciously) 1
newlyfreed 1
ordering 9
negative 14
longer 17
responsible 6
often, 7
malloc(20);. 1
news 2
originally 2
new) 4
next, 1
nice, 3
no?). 2
oh! 1
non-concurrent 1
next. 10
responsive 1
malloc(3) 1
on; 1
non-practical 1
lot 35
none-too-subtle 1
rest 18
malloc(strlen(s) 1
once; 4
once”, 1
not: 3
restored. 1
memory 568
restricting 1
notes: 2
results, 4
man 21
retains 1
one. 24
noticing 1
manages 9
manipulations 2
manner; 1
onto 17
mental 2
retries 4
now? 7
low-level 16
manual. 4
oops.y 2
mentor, 2
null 2
lowering 1
no 140
retry 6
many” 2
open-source 2
mess! 1
numbers). 1
lowest-order 1
message, 2
return. 1
open. 2
numer-ous 1
operations, 3
mapping 13
lowly 2
ls 1
marked 11
marriage, 1
luck 5
mask 1
obscure 1
none.” 2
operator, 2
messy 2
optimizations. 1
returning 27
master 4
obtaining 4
macOS, 1
metadata 1
not, 14
rewrite, 2
order, 5
matter? 3
obvious, 2
machinery? 1
notes); 1
method 8
rich 2
ordering. 2
matters, 2
occur? 2
machines). 1
notes, 3
other 303
origin 2
maximize 2
others), 3
microseconds 2
made 23
magic. 1
main-one-cv-while.c. 1
otherwise 14
occurred, 4
original; 2
main-signal.c. 2
out-of-bounds 1
ory. 1
means 31
right 42
measurement. 1
occurs, 14
mem- 1
robin, 2
nothing. 2
outcome. 6
odd, 1
other. 8
main: 12
memory): 1
maintaining 1
outputs. 2
odd-sized 1
others; 1
notices 2
makes. 1
over. 1
memory-allocation 10
other’s 1
now! 1
of. 1
overflow. 1
memory-bug 1
ourselves 3
nuances 3
off 30
overhead, 1
memory-user.c. 1
offered 1
making 63
offerings 2
overload. 1
number, 4
malloc(). 4
routine 60
offset, 2
overwrites 1
numbers) 1
malloc’d 3
running), 1
memory; 19
might 218
migrate 1
own. 2
obey. 1
malloc” 1
meta-level 1
manager, 3
often? 1
migration? 1
object. 1
p2 7
runs. 11
manages; 1
rw- 1
obtain 10
methods 4
millisecond. 1
p3). 1
old, 1
manner. 7
sad. 3
obviates 1
obvious. 2
metric 5
oldest 1
safe? 2
p: 18
micro-instructions 1
mapped 14
milliseconds; 1
page), 2
microsecond. 1
on. 9
miniscule 1
page-replacement 6
once. 5
mappings 8
occurs. 3
miss), 3
one! 1
misses), 1
occurs?” 1
marvel 1
one) 4
mistakes 3
one-quarter 1
mobility 1
masks 2
out 181
one-word 2
material 8
out-of-memory 1
page-table 31
million 17
ones. 3
mode, 13
outrage! 1
open() 6
min 3
opened 1
over, 1
operate): 1
pagedirectory 1
mind, 4
pages: 2
overcome 3
operates 4
overheads? 1
paging, 4
mines 1
overwriting 2
mini-computer; 1
operating-system 3
minicomputer 5
minimally 1
opposite 5
model 8
own, 3
painful; 2
minimum 2
paper: 1
models), 2
p 1
opt 1
same 145
minus 5
parameters. 2
p1.c. 1
optimization, 3
saying; 1
may 123
p1–p3). 1
organization. 1
modified 15
origins 1
meaning 3
p3.c, 1
scale. 1
molecules 1
other) 1
monster! 1
ours: 1
out; 1
meltdownattack.com 1
miss 32
packaged 2
scare 1
more. 14
parent 44
most. 1
mem 10
packed 4
outcome? 5
scheduler? 5
parentheses 2
motivate 1
mem.pdf 1
misses 21
packet 3
outdated) 1
schedulers, 1
park(); 4
moustache 1
park, 2
mmap() 7
page; 5
outlines 6
memories. 1
much, 1
participated 1
mode). 1
memory-add 2
output: 4
multi-threaded 44
outs 1
models 2
overall. 1
partition 1
multiplied 3
memory-related 1
mode” 1
multiprogrammed 3
modification. 2
music 2
monopolize 6
parts 19
month. 1
pause, 1
scheduling 102
scientist 1
pay 12
overhead), 2
peep 1
scorned 1
own? 1
screen. 3
percentage, 1
owner 4
perfectly, 1
scribble 2
ownership, 1
se. 1
perform? 1
pages 195
p1.c) 1
pain 1
pals 1
p2.c 1
memory. 103
search 20
method. 3
p3 5
searches 3
p4.output 1
metrics 7
second: 1
p; 7
secondchance 1
middle 11
packages, 1
must 152
seconds). 1
page-number 1
millions 3
sections. 4
mind-blowing 1
mutex. 1
minimal 7
myret 4
misbehaves 1
page. 21
security. 1
n; 1
see! 2
pages; 9
paging-multilevel-translate.py; 1
performance 91
segment; 4
pains 1
perl). 1
paper 85
more! 1
pairs, 1
permanent 1
parameters, 5
name 22
more) 1
miss; 1
papers 8
ms, 5
parent. 4
nanoseconds. 3
segmentation 26
mitigates 1
perror("malloc"); 4
paradigm. 1
part) 1
nearby 2
multicore 6
nearly-complete 1
mmap(); 1
persistently, 1
parameters). 1
modifications. 2
segments 22
person; 1
passed 18
nears 2
parent) 1
modified. 1
selection 1
persons 1
semaphores” 1
past 6
park(), 2
necessitating 1
more, 6
semi-nal 1
perspective 8
part, 2
patch 5
most-significant 1
needed, 7
pessimal, 1
patches 2
mother 2
paths 4
negatively) 3
particular, 28
sense 26
multiple 95
move 31
phone 1
paying 3
networks, 1
passive 2
sense?) 1
multiplex 1
ms). 3
physically 2
peach? 1
newer 2
penalize 1
sensed, 2
much... 1
multiprocessors. 4
physics). 1
password 1
per-futex 2
next: 9
much: 1
multiprogramming. 1
multiples 1
path. 3
multiprocessing). 2
performance-minded 2
multiprocessor, 2
separation 5
myargs[1] 2
picks 5
pdflush), 1
no, 1
mutex, 4
myret_t 6
piece, 1
peeking 1
pioneer 2
performance. 35
mythread. 2
penalties. 1
name; 1
pipe, 2
servers, 2
node_t 24
setpark(); 2
mutual-exclusion 2
people. 1
names 1
people.cs.clemson.edu/ 1
performed, 2
non-blocking 2
myargs); 2
non-computer-types 1
natively 1
setting 15
person! 1
pipeline, 2
myret_t; 2
per-process 12
non-cooperative 2
perfect... 2
share; 1
perspective. 2
please 3
mythread() 2
naturally 4
non-preemptive 2
sharing: 1
physically-indexed 1
shells; 1
myturn 2
necessarily!) 2
non-stop; 1
plots 3
shift 1
name. 4
picture, 5
normal 11
pmap, 1
perform 70
short-circuiting 2
nanoseconds, 2
nasty 1
natural 9
short-running 4
short. 3
shortcomings. 1
nature 8
pid; 1
perhaps 39
point 39
policies: 2
pioneering 6
politely 1
period 8
shot 2
place; 1
ponder: 1
pool 1
shrink). 1
places 6
persistence. 2
platforms 2
need 152
players 1
needed). 2
point. 7
needs 32
philosophical, 1
needed? 6
negative, 3
pointer). 2
phrase 2
populated, 1
neighboring 1
newly 3
pointer? 1
physical. 1
power-of-two-sized 1
networking, 1
newly-fetched 1
signal 28
pointing 2
physics 1
power.” 1
new->next 4
pioneered 4
similar), 1
points; 1
newly-opened 1
powerful. 3
news: 2
similarly 3
newly-created 3
pre-configured 1
nice), 1
simple, 9
place. 16
pre-initialized 1
policies 35
next 101
nicely 1
no? 8
node. 1
node_t; 5
pleasure: 1
ploticus 1
node’s 4
nice 34
simplified 2
precious 2
point1 1
non-performant. 1
non-scalable 2
policy 50
not 449
simply 128
predictable; 1
notably 5
pointed 15
pollutes 1
simulator. 2
nor 1
preferred; 2
non-zero, 1
notes 5
pointers? 2
poor 10
prerequisite 1
simultaneously 11
nothing”; 2
nondeterminism 1
points. 1
possess 1
not. 14
sincerely 1
notice? 1
presented 8
none, 1
policies; 1
notes. 1
single, 1
now), 1
potential 12
not; 1
pretend 5
poorly. 2
nothing 5
situation. 2
null-pointer 2
powerful, 2
notion), 1
preventing 3
popl 1
notion 12
size; 6
powers 1
null. 2
prevention 2
number. 2
popular 7
pragmatic 1
sizes 8
previously 3
numbering 1
porting 2
pre-specified 2
sleeping). 1
precisely 2
primitive! 2
o 2
predates 1
obey 1
preempts 1
preparing 1
portion 20
slice. 1
object 10
posed 5
observing 1
slices; 2
positive 4
primitives. 8
obvious 12
pretty 26
occurred 3
previously. 2
occurrence. 1
pri- 1
possibility 5
printf("%p\n", 1
possible: 1
primitives, 3
power. 1
slowed 1
occurs 19
printf(), 1
slowly, 4
priorities 5
small-scale 1
odd 6
now 184
priority 61
practical 8
smarter 1
oddity: 2
null.c 1
prints 41
problematic 2
numbers 12
of... 3
priorities. 1
number 198
problems. 11
practice 4
object), 1
priority. 8
so, 37
oblivious 1
off, 3
proceed 6
objdump 8
precise 4
proactively. 1
software; 1
process; 13
solutions. 4
observation 5
objectives; 1
problem? 2
offender. 1
predict 16
somehow, 1
processes; 7
objectoriented 1
obviously 5
predictors, 2
processes’ 1
someone 3
problems, 12
processes”, 2
preemption 2
observes 2
occur 9
problem” 1
prepared 1
occurring 3
proc-struct(A) 1
produce 9
pressing 1
produced, 1
previously) 1
producer. 2
occurs), 1
proceeding 1
oddly 1
odds: 1
process) 6
offset 42
primitives? 2
professor? 1
obvious: 2
offset), 1
process-run.py 1
oh 2
printing 3
professors, 1
occasionally 3
offset=04); 1
occurs)! 2
prior). 1
processed 2
program: 6
processes) 1
occurs: 1
priority) 1
old 60
programmer. 5
processing; 1
something 132
online: 1
often 69
progressed, 2
private 18
onnv/onnv-gate/usr/src/lib/libc/port/threads/synch.c. 2
prohibitively 2
old_ptr 4
oops.x 2
on). 1
projects 3
open(), 1
processor 28
off. 1
privileged 24
once). 1
promoted 1
once? 2
producer, 2
operation. 5
pro2 1
offset: 1
prompt 4
one: 3
prone. 2
opinions 2
omit 2
protected 4
sometimes 73
protection; 2
somewhere). 1
protections 4
opposing 2
professionals 3
sooner 1
on, 11
opposite, 1
oops; 2
protocol 3
probably 32
sorting 1
probes 1
sources: 1
once); 1
space-management 1
space-usage 1
problem: 25
providing 16
once, 9
operations 26
space: 2
proceed! 1
pthread_join(pthread_t 2
one). 1
optimal) 1
operator 3
spaces). 1
process); 1
pthread_mutex_lock(&c->glock); 4
one-to-one 1
opinion 1
optimization 6
pthread_mutex_lock(&q->head_lock); 2
one? 1
sparse 7
pthread_mutex_lock(&q->tail_lock); 2
order; 1
pthread_mutex_timedlock(pthread_mutex_t 2
optimal. 1
orders 2
ones, 2
spatial 7
optimality 1
pthread_mutex_unlock(&c->llock[cpu]); 2
organize 1
optimizes 4
pthread_mutex_unlock(pthread_mutex_t 2
ority 1
options 3
out). 1
ptr, 3
out? 1
purpose, 1
outcomes 1
specific 21
process, 51
put() 4
one” 1
output. 2
spin, 2
puzzle 2
ongoing 1
python 1
online, 2
quest 3
oops 2
open("/tmp/file", 1
question: 7
processes, 31
queue), 1
processing. 1
spinning 27
overcome? 1
order 80
processor; 5
overflows 4
splitting 3
queue_add(m->q, 4
others). 1
spot 2
program 321
overheads. 4
queues: 1
otherwise: 2
overview 12
operating 151
src.opensolaris.org/source/xref/ 2
programmer, 1
overwrite 4
programs5 1
out, 27
processors 16
operation 20
quickly 21
overzealous 1
stack 79
projects. 1
stack”! 1
producers, 1
stance 1
own; 3
races, 4
outcome 4
opposite. 1
output; 1
optimal; 2
optimize 4
option 1
prompt> 37
proofs” 1
proper 14
properties; 1
proponents 1
proportion, 1
protocol. 4
protocols; 1
provides, 1
start 58
starving 1
states: 1
over 90
producing 1
randomly-generated 3
ownership 1
over-designed 1
production, 1
owns 2
stop 21
overflow 3
productive. 1
randomness 6
pthread 57
p1.c), 1
store-conditional 7
professor 2
rare 2
pthread_mutex_init(&lock, 2
stores. 1
overhead. 1
page-directory 5
overheads; 1
rate. 3
pthread_mutex_unlock(&lock); 2
storing 1
program; 3
published 4
straightforward; 1
rather, 11
programming 7
ratios 1
re-check 3
re3 1
reacts 1
own 72
read. 6
push 2
q->tail->next 2
p); 1
readability 1
readers, 1
readied, 1
readily 5
p3) 1
question 27
p3.c 3
queue; 5
p4 7
queue_t 2
package 4
reading 21
page). 1
queues 6
strdup("p3.c"); 1
ready), 2
page? 1
stream: 2
quickly. 5
pages); 1
strictly 2
reality 7
stringent 1
realization 1
structures: 2
really) 2
page: 1
reason: 3
programs 85
pages, 26
pages). 3
progress. 3
reasonable. 3
paging-linear-translate.py, 1
prohibitive. 3
painful 7
recall). 1
stub 1
paging. 4
project, 2
stuck, 1
papers, 6
recently, 1
quite 114
reclaimed, 1
parallelization, 1
subset 3
properly. 1
quote: 2
recognized 1
parcel 1
pair 21
substantial, 2
properties. 1
successful. 1
recommend 2
park() 4
paper, 3
radical 2
proportions, 1
successfully) 1
records 1
parallelism. 2
recourse: 2
paralleliza-tion, 1
recursion 1
protection, 2
recycles 1
suffers 5
random-access 1
parameter; 2
redirect 2
summary 5
randomness. 1
or 469
range; 1
reduced. 2
order), 1
part 52
superuser 3
provided. 2
parameters 9
ranges 1
paranoid. 1
supports. 1
rate, 3
orderly 1
parent: 2
surfing 1
ps 2
references 28
organization, 1
rc; 4
park. 2
region. 1
original, 1
surprising 7
pseudocode 7
partially-ordered 1
rdtsc 3
register), 1
orphaned 1
particular 60
pthread_mutex_init(&c->llock[i], 2
re-create 1
register-level 1
survey 16
pthread_t 14
re-duces 1
other? 1
regular 2
re-initialized. 1
pthreads 8
swaps 3
particularly 27
relaxing 1
others, 4
purchase 1
otherwise). 1
read, 7
switch, 8
purify, 2
partner 1
out! 1
releasing 16
readable 1
switches, 2
pass 54
passed, 1
reliability 2
real, 2
swpd 1
putting 17
passes 5
relinquishing 2
patterns. 2
realistic 3
pause) 1
quantum 5
output 36
past, 4
swtch(struct 1
pausing 2
remaining 13
overall, 1
remarkably 1
question; 1
realized 8
patent 1
symbol 3
peach. 6
overcoming 2
remembers 2
reap 1
pattern. 2
system! 2
peaches. 1
questions 13
remove_min(queue); 1
rearranging 1
peaches; 1
system) 1
removed 6
per-CPU 5
renewed 1
system-call 5
overheads 14
queue. 12
performance2 1
reporting 2
system1 1
queue_t; 2
queues; 1
performance: 4
overlap 6
requested 8
reason 32
per 57
race 28
requests. 6
randomization, 1
range. 1
perceived 3
re-awaken 1
reasonably 3
performed 11
overlays, 1
performs. 2
percentages. 1
re-enable 2
rebooted, 1
researchers/engineers, 1
overly 3
permanently-valid 1
perfect. 2
re-reads 1
rechecks 2
systems. 64
reside. 1
overly-large 1
permissions 1
overwhelm 1
re-referenced, 1
reclaims 1
t(A) 1
resources? 1
perfection 1
personal 1
reach 2
recommending 2
p1 8
responsiveness; 1
perform, 1
pesky 1
reaches 2
p3.c), 1
phases 2
rest, 1
performance), 1
recorded 3
react, 1
table. 26
performant) 2
picture 5
recourse 1
p4.output. 1
read-only 1
tables; 1
perhaps, 1
piece. 3
recursive 1
page(s) 1
redirection 2
results 17
periodic 1
place? 1
read-write). 1
redoing 2
taking 11
resuming 1
periodically. 1
plain 2
read? 2
planet 1
retry, 1
page, 28
return-tolibc 1
person 3
plenty 3
reader 7
targets, 1
ready. 1
page-not-present 1
returned) 2
phenomenon 1
reduce 15
realloc() 4
task; 3
page-sized 4
plus 11
tasks 2
philosophy 1
reference) 1
rearrangement 1
pageable 1
returning, 2
pmap. 1
tcsh, 2
reasons 6
pick 15
review 2
pieces. 1
pointers 5
reboot 6
references. 2
pipe() 2
rewrite 8
referencing 1
placed. 1
policies, 7
right); 2
technique 29
played 1
pleases: 1
reg/PC 1
paged 1
right, 3
receive 11
pages) 3
policy, 12
pointer. 3
regards 2
tends 5
road, 1
reclaiming 1
pal, 2
poorly? 1
policies? 1
testing 2
rogue 1
region, 5
recommended 1
regions) 1
redirected 2
register; 2
thank 2
positivity 1
thankfully, 1
pop 1
reduced-instruction 1
role 11
papers. 4
possible; 2
reduces 9
rolls. 1
parallel, 2
possibly-failing 2
popular, 1
posterity) 2
popular-sized 1
postulates 1
parameter 6
registers 48
parameterize 1
reference, 2
parent? 1
part: 4
possible. 14
roughly 24
referenced 6
relates 3
roused 2
pouvoir”, 1
powerful 21
path, 2
prac-tice, 1
release? 2
practice! 1
region). 1
patience 2
practice, 1
reliability. 2
pre-WWII 1
regions, 2
routine, 10
pragmatists 1
patterns 4
precisely, 1
rule: 2
reliable 6
precisely? 1
register. 4
pauses 1
them 99
run), 2
relocating 1
predictors 1
precision 2
registers; 4
then? 2
peach 4
runnable; 2
preemption, 2
rvalue; 2
prefer 2
regs(A) 3
peaches 2
preferably 2
relocation 6
preferring 1
rw45 1
relatively-slow 1
there. 6
people, 1
preferred 2
released. 6
percent 6
rx 4
there’s 1
repeats, 1
prematurely-optimized 1
replaced 2
relocated 6
same, 3
perfect 7
saved? 2
thing, 6
relocation; 1
prefetching 2
presents 7
performance? 3
remain? 1
prepare 1
preserve 1
performance” 1
saves 9
remains, 1
say), 2
replacement 30
presumably 4
presenting 1
remembering. 2
says: 1
repository 1
performing 14
presumes 1
represent 5
request? 1
requests, 2
renders 1
sbrk 3
periodically 9
prevent 8
permission 1
required). 1
scale: 1
repair 3
preserves 1
permit 1
required? 2
persistence, 1
scales? 2
pressure. 2
think 66
repeatedly, 3
primary 9
persistent 4
scary 1
thinking: 2
scenario. 4
replace? 3
persistently; 1
primitives 15
thinks), 1
prevents 3
scheduler.py, 1
replacement; 1
requires 25
persists, 1
principle. 1
primer 1
this. 4
scheduler; 2
replacements 2
research; 1
personally 2
primitive. 6
reserved 6
printf("main: 8
report? 4
of 3668
representation 1
primitives; 2
those; 1
schedulers 14
reside, 1
printf() 1
phase 3
offers 1
physical, 1
thoughtful, 1
printf("%s: 4
resided 1
printf("(%d) 2
represents 4
printf("Final 1
physics. 1
offset. 6
prioritizes 1
thoughts 5
scheduling, 15
printf("Initial 1
school: 2
resource 14
omniscient, 1
privileged) 2
thr 7
requests? 2
pieces 19
prio_to_weight[40] 1
scientist, 1
responsibility 6
problem; 2
require. 1
pigs. 1
thr_join() 3
private, 3
scope 2
scorned, 1
problematic: 1
requirement: 2
pipe; 1
responsibility!” 1
privilege 8
restarts 1
research. 1
seamlessly 1
pipes 4
probabilistic 1
thread. 20
seasoned 1
threads; 2
reset 3
restored 4
place, 9
restricted? 1
reside). 1
result! 2
problems 55
placed 24
problem. 26
placement 1
resides, 1
platform, 1
resource; 1
problem”, 1
second. 5
procedure. 1
resources 6
resulted 2
player, 1
secretary 2
proc 5
respectively, 1
plays 2
results. 6
section), 2
respond 1
proc_state 2
ple 1
security: 1
response-time 1
restricts 1
seem 7
process), 3
segment? 1
process-run.py, 1
result, 12
segmentation, 4
pleasure 1
ret 1
plural) 2
retain 1
segments, 5
processor, 13
return; 10
send 13
produced. 1
thread’s 14
sense, 6
threshold) 2
sensitive 1
pointer 55
sent 3
thumb. 1
thus: 1
producer 26
sequential” 1
policy) 1
pool? 1
poorly, 1
poorly-programmed) 1
professor! 2
popular. 1
serious 10
returns 61
tight. 1
profit 1
popularity 1
servers 1
reverts 1
services. 1
time). 3
positively) 3
servicing 5
revolutionized 1
possibilities. 1
return 169
time? 9
right.” 1
return-fromtrap 3
rightly 2
program, 58
returns), 1
rip 1
program-debug 1
rise 2
times, 10
program4 1
tmp->next; 2
possible 31
root). 1
set. 2
to; 1
potentially-starving) 1
setting, 1
routed 3
programmer 12
reused 1
together, 3
powerhouse 1
several 1
preemptive 2
routine), 4
revert 1
tolerate. 1
proofing 1
routine1, 1
severe 3
ridiculously 1
rights). 1
proportion 5
rules 6
too, 2
sharing. 3
root, 1
pros 1
present 36
run. 22
too4 1
shells). 1
round 2
prove 5
routinecalling 1
rude 1
tool 15
pressure 5
shipping 2
primarily 3
shouldn’t. 2
rule 4
topmost 7
run; 1
showed 4
provides 30
running: 1
trace? 2
runnable) 1
primitive 9
shrinks 1
provisions 1
runs...) 1
tracked 2
running). 2
sidebar 2
pseudo-random. 1
principles 5
runs; 3
tract 1
trade-off. 1
running? 4
printf("child\n"); 3
process 403
pthread_mutex_lock(&L->lock); 8
signal, 1
on 719
transac-tions 1
on-disk 5
transaction 4
printf("hello 3
transfers. 1
printf("parent: 6
priority). 1
rv; 2
priorityadjustment 1
signal/wakeup 1
translate 19
publicized) 1
rvals->x 2
probabilistically 2
signaling. 1
translated, 1
pure 2
similarly, 3
purpose. 2
probability 2
runs 83
translations, 6
rvals; 2
pursue 1
rvalue); 2
once 60
pushl 1
runtime, 2
treating 2
ones 8
put(int 2
rv 4
sampling 2
ones!). 1
tree. 5
processes 107
satisfies 1
trees; 1
tremendous 1
rvals->y); 2
satisfy 9
puts 19
processors, 9
producer/consumer 9
trends. 1
sad 4
quantum) 1
saved 11
question, 1
online 6
sage 1
producer; 1
queue). 5
oops, 1
sanity 1
producers 3
tricky 10
savings 9
queue? 1
problem 121
sat 2
product. 1
opens 4
true. 3
proc-struct(B) 1
saves/restores 1
saw 12
professor, 1
tuned. 2
program). 2
operation, 9
procedure 12
saving 6
queues, 12
say. 2
says 2
opportunities 1
program? 6
process: 2
two, 3
quote. 4
saying 4
rabbit 1
opportunity 1
programmer; 4
processes: 4
sbrk. 1
sbrk() 1
processing, 3
scale 4
opposite: 1
raise 10
type, 4
programmers 13
sbrk) 1
processors. 3
scans 1
scales 6
raised, 2
typeset 2
scenario, 3
schedulers. 5
product 1
scenarios, 2
programming, 2
ran; 1
optimization. 1
professor. 2
schedules 4
program) 1
simple 196
random; 1
option, 2
randomizes 1
scheduler); 2
programmer), 1
schemes 5
programs, 16
simpler. 1
typical 26
or, 5
randomly-accessed. 1
order! 1
programming. 5
simplicity; 2
unanswered: 1
project 4
school 2
scheduler, 20
ordered 4
simply, 4
promise 1
science. 2
prone; 2
scratch 3
ordering; 1
screen 1
schedulers) 1
under 18
properties: 1
rate 27
programs. 25
re-referencing 1
orderings 2
school; 1
organization 2
second, 6
underneath 2
simultaneously, 1
progress, 1
reached 1
proportionality 1
scripting 1
proportions 1
second-chance 1
section; 2
since 7
sections 6
understanding 19
undo 4
security 21
original 19
seconds, 2
undoes 1
protection 22
seeds, 2
secretly 3
provably 1
unfairness 4
seek 2
proves 1
uniform. 1
others 14
sees 4
unimaginatively 1
pthread_mutex_init(&L->lock, 4
otool 2
segment), 3
units; 4
segments: 1
unrealistic; 1
pthread_mutex_lock(&c->llock[cpu]); 2
our-selves 1
section. 34
out-of-bounds; 1
update(counter_t 2
out.” 1
sections; 4
select 4
pthread_mutex_lock(pthread_mutex_t 2
update; 1
read 91
output, 2
security; 2
outside 4
pthread_mutex_unlock(&L->lock); 12
see. 4
purify 1
seeing 1
sending 1
overall 9
question). 1
seemed 1
real 53
sense: 2
overlap, 1
questions, 3
overlays 1
updates 33
realize 5
upon, 1
overstate 1
serves 6
quoting 1
us. 4
services, 1
oversubscribed; 1
reason, 8
set, 3
usability 1
r-x 5
owns. 1
seen 31
severe. 1
r-x-rw--r-x-r-x-r-x-r-x-rw--- 1
reasonable 9
segfault 1
p1, 5
use) 10
sharing, 3
recall1 1
useful2 1
p2; 5
rage 3
recently. 2
users, 1
shell 12
p4.c 2
redirection, 1
raises 8
uses. 3
p5 5
reduced 5
ran. 1
packing 2
short 29
refer 27
random. 1
segment 56
randomization 3
shorter! 2
single 203
proliferation; 1
references: 1
segmentation.” 1
referring 2
shortest, 1
promotes 2
regardless 2
sitting 4
segregated 3
rarely 1
proofs 1
shrink) 1
size). 2
region 25
properly, 1
semantics, 5
sibling 1
rarely-taken 2
register). 1
silently, 2
register? 2
sentence. 2
rates 1
sizes, 2
property, 2
similarly-named 2
proportional 3
registers, 10
re-accessed 1
regs(B) 3
sketch 3
separa-tion 1
proportional-share 6
sequence: 1
simple. 10
relative 3
skimmed 1
protect 11
simpler, 2
skip-ping 1
simulated 1
sequential 8
skips 1
re-referenced 2
relax 10
reac-quiring 1
simulations 4
series 9
slab 5
seriously, 3
sleep) 1
server, 1
react 1
server-based 2
read-only, 2
releases 14
sleep-ing. 1
serviced. 2
simulator 16
using 140
reader, 1
provide 65
slogan. 1
reliably 3
setassociativity; 1
relies 1
usual, 3
provided, 2
reads 10
single-threaded 4
set” 2
utilize 5
relinquish 5
ps. 1
sit 6
pthread_create(..., 4
realizes 3
v 2
relinquishes 1
slot 7
really. 1
pthread_mutex_lock(mutex); 2
val; 2
ptr; 2
rearrange 2
slower. 3
relocation, 5
share 36
situation 9
rely 5
purely 1
reasons, 6
purposes 2
valgrind? 1
sixteen 1
reassurance; 1
she’ll 2
slowly 12
remain 8
valid. 2
sizeof(int)); 2
reboot, 1
shooting 1
recall, 1
slumber 2
skills. 2
remote 1
replace 9
value) 13
small! 1
values. 1
put 41
vantage 1
received 3
small) 1
replacement, 3
rechecking, 2
q->head; 2
quantify 3
report 9
record 6
question! 1
request; 1
slice 36
slightly 19
questions. 3
slip 1
requests 28
slow; 2
shown, 2
slower, 1
simple) 1
slowly. 2
simplest: 2
queue, 17
small). 3
queued 1
variable 75
quick, 1
variables), 1
qu’une 1
varies, 2
variety: 1
require? 1
smaller 14
requirements 1
race. 4
researcher 2
vast 2
simplicity, 16
snapshot 1
reference 57
vectors 1
reserve 4
simplifying 3
ran 15
simulation. 1
so. 15
reside 11
software), 1
referenced, 1
softwaremanaged 1
resource, 4
version 31
random 37
referred 27
sits 3
so 197
responsibility, 1
ravages 1
situations 3
solely 1
sockets. 2
refers 9
regained 2
region; 1
regions 11
relaxation 1
relaxed: 1
responsive. 1
rc, 3
solution; 1
software? 1
very 60
relevant. 2
rest. 2
rc_wait 3
solutions 11
solve? 1
re-acquires 4
virtualized; 1
re-energized 1
visible 2
restore 17
reload 1
re-place 1
some, 2
solving 4
vruntime, 1
restored, 1
relocate 5
re-use 1
sort 6
w/ 2
somebody 5
relocation.py 1
resumes 5
reaching 1
returning. 1
remainder 1
read(), 1
somehow 6
reuse 1
read), 1
remains 11
page 635
reused, 1
page-frame 1
wait() 26
ready, 3
waited 1
something, 2
walling 1
revenge 1
remedied 2
real-world 2
size 124
sometimes, 2
was; 1
pagereplacement 1
space, 50
pages), 1
sizeof(PDE)) 1
sounded 1
right. 5
wasted. 3
spaces) 1
remember 20
pagetable 4
sounds. 1
sizeof(PTE)) 7
root 3
watermark 2
sparc/ 2
remind 1
paging). 1
space-efficient, 1
sketch/review 1
way), 1
removing 8
species, 1
painful. 1
sketched 1
pairs. 1
ways: 2
panacea, 1
routine. 2
specifically 6
really 52
sleeping, 3
wc, 3
paradigm 1
repeatedly 15
specified, 1
parallel 6
slicek 1
reasons. 10
rudimentary 4
repeating 1
web 10
speed-of-light 1
websites 1
reboot. 1
parameter, 4
slices 10
spell 1
replaces 7
weird; 1
run? 8
reports 2
space. 45
parent; 1
slight 2
spending 3
receive. 1
well-known 4
running; 3
request. 7
park(). 2
sparked 3
slightly; 1
spin-lock 2
recency 1
went 3
requesting 1
requests; 1
runs, 21
spin-waiting. 2
slow. 3
we’re 3
part. 1
sparse, 1
recent 16
runtime 2
required. 5
rvals->y 2
spin. 4
spawn() 1
safely 3
slower? 1
passing 12
whatever 15
recognizes 1
splitting: 1
recommended. 1
species. 1
sake 5
slowly) 1
passion 1
when, 3
researchers 8
sponse 1
recursion). 2
speeds. 1
stack: 3
small: 3
path 8
resides 9
reducing 6
standpoint, 1
sneaky 2
patience, 1
spend 10
satisfaction, 1
resizing, 2
satisfactory 1
snippet 9
staring 1
pays 1
resort 1
reduction, 1
satisfied 1
spent 7
who 41
starve; 1
software 17
refer- 1
resources, 4
say? 1
stateful 2
whose 8
solidify 1
responsabilit 1
refine 3
says, 1
stateless 1
scale, 1
solution. 8
regains 3
statements 1
why. 2
scaling; 2
solve: 1
regard, 2
solved. 1
scenario 4
sometime 1
response 31
register, 6
states, 1
widely 9
registers) 2
somewhere, 1
restores 4
scenarios), 1
willing 3
regs 3
soon, 1
restricted. 1
scheduled3 1
win 1
static 21
sorry, 1
stdlib.h 1
peach, 3
related 18
within; 2
spin 79
peaches, 1
scheduled; 1
step, 5
sorts 9
woke 1
peanut 1
result 30
spin-waiting 4
scheduler), 1
wonder? 1
space). 3
peek 1
space? 6
retrospective 3
spinning, 2
return-oriented 1
penalty 2
scheduling. 9
relatively 16
wonderful 11
school, 2
return-to-libc 1
spurious 2
pending 1
spaces, 5
spaceshared 1
space” 1
sparsely 1
work; 6
return? 2
release 23
still 59
spear-headed 1
worker, 2
returned. 2
stack, 18
scourge, 2
stored? 1
screen, 1
workgroup. 1
specifies 5
returning) 2
relevant 13
stand 1
people 28
se, 2
specify 10
remains: 2
performance; 5
state1 1
stores 16
workloads 14
spectreattack.com 1
returns, 7
searching 4
remember: 1
performance”, 1
states. 1
strategy), 2
speculation, 2
returnsfrom-trap, 1
removes 1
permissible. 1
statistics). 1
stream, 2
spinning), 2
reveal 1
spring 1
persistence 1
stop, 1
string) 2
rent 1
revisited 1
stack), 2
perspectives 1
strings. 1
store), 3
repeat 1
rid 1
replacement) 1
peterson.s, 2
replete 1
store-conditional, 4
right) 1
started, 1
works 54
represented 3
phase, 4
storeconditional) 1
structures, 13
roam 1
second 78
starvation 3
world. 3
seconds), 3
phones 3
strcpy(dest_buffer, 1
robust 9
reproduce 1
room: 1
stuff 8
worse. 6
photos 1
section? 4
strdup 1
stash 1
wreak, 1
subject 4
phrase... 1
round-robin 11
sections, 2
stream. 2
stashes 1
subsequently, 1
state: 2
substituted 1
request 35
subsystems. 1
routine1 1
security, 1
writes 21
statement. 2
streaming 2
subtract 1
routines. 1
see). 1
successful 5
statistics 4
strengths 2
required 15
rules, 1
www.ajwm.net/amayer/papers/B5000.html. 2
suddenly 2
step). 1
see? 6
strike 1
research, 4
run: 3
x-axis, 2
sufficient 2
step? 1
strings 1
reset. 2
runaway 1
x. 2
summarizes 1
strongly 5
support; 4
structure) 1
supports 5
surrounding 2
survive, 1
survived 1
swapon 2
seeds 11
resistance 1
running. 23
stopped, 1
switch. 4
x86 23
resource) 2
segmentation. 3
runs? 2
storage. 1
structures. 22
switches. 1
x86)” 2
resources. 5
x86-64) 1
segmented 4
strut 2
straightforward 9
restricted 7
switching 17
restrictions 1
yet, 10
result: 2
results? 2
stuck 16
students 3
strangest 1
rvals->x, 2
segments. 3
resume 8
zero. 11
resumed, 1
studied 5
rw59 1
self)) 2
strategies 8
swoop 1
retaining 3
zeroing 4
sub-job 3
rwrw- 1
semaphore 1
strategy 6
subjunctive 1
strdup() 1
synchronized 10
rw— 2
zombie 2
physical 236
subsections 1
streams, 1
sense. 11
returned 15
system; 8
safe 6
subsystems 1
picking 6
suc-cessfully 1
returning; 1
sequences 5
sane 2
stretching 1
pieces, 5
succeed. 3
services 1
returns. 3
success! 4
revolutionary. 1
right; 1
piece” 1
right”, 1
stride 17
suggest 3
piena 1
string, 2
risen 2
struction 1
save 27
pioneers 4
saying, 1
structure: 2
pipes, 2
structures? 1
scalability. 1
strung 1
scalable 15
routines 41
scaling. 1
ruins 2
student, 3
scenarios 2
place 46
subproblem 1
sched 7
suite 1
placed, 1
supervisor 1
run, 24
sure; 1
succeeded. 1
surprising, 1
schedule: 2
set 146
run-and-yield 2
placement, 1
succeeds, 2
surround 2
scheduled. 2
set-it-to-1 2
player 1
run-time 7
success: 2
pointer, 10
set-top 1
— 131
’05. 1
sharing 30
’07, 2
’94. 1
’Precise’), 2
points 15
poorly 3
shell, 5
shifting 1
ship 1
shoppers 1
possible, 14
possibly 1
suspend 2
short, 3
“01” 1
potentially 7
swap? 1
shortest 2
power 8
shouldn’t 5
systems 185
“100x” 1
sz; 1
precautions 2
shown), 1
predate 1
“ARC: 1
t, 2
“Alto 1
preempt 2
switch 62
scheduler 110
shows 94
such 274
running 227
table 175
preemptive, 1
“A” 8
shutdown 1
scream, 2
sudden 1
searched 1
rw 6
premature 2
“CPU 1
premise 1
side). 2
suffer 8
second; 1
rwx 4
switches 14
“Control-c” 1
tables), 1
signal. 3
presence 11
synchroniza-tions 1
“Evaluating 1
suggested 8
sad! 1
“Evaluation 1
signal?? 1
seconds 9
present, 2
tackled 2
superpages, 1
tail. 2
“Experience 1
seconds!). 2
preserving 1
safer 2
synchronization 26
signaling 17
“E”, 2
signals; 1
secure 3
pressure, 2
support. 9
pretends 1
“Get 1
see: 2
supporting 1
prevented 5
“Hoard: 1
system), 3
system.” 1
seed. 1
“Ils 1
seeds; 1
simple: 39
previous 19
“Man-Computer 1
suppose, 2
“Program 1
previously; 2
simpler 6
said 43
supposed 4
systems: 5
takes 50
segment, 14
“Pthread 1
primitive, 2
simplicity), 1
satisfying 2
surprise. 1
targeted 1
t. 2
“Relocating 1
semantics 8
simulate 3
techniques? 1
say, 5
table2 1
“Reminiscences 1
semaphores 1
surprisingly 7
sentence: 1
tell? 2
scalability 2
“TENEX, 2
table: 3
simulator, 1
print 25
susceptible 3
sequence. 2
scales. 1
suspicion. 2
tables? 1
“THE” 2
single-queue 4
“Test 1
temporarily 5
scaling 2
printf("%s\n", 3
tail 5
server 11
six 3
“There 1
tempting 4
scanning 3
taken? 1
tension 3
talking 5
swap 34
“Time-Sharing 1
size) 5
printf("hello, 6
“Volume 4
task). 2
switch() 3
term 15
service. 3
terminal, 1
sizes. 3
scheduled 11
“Why 2
tasks, 1
printf("this 1
switched 2
setaffinity() 1
scheduling; 4
terrific 4
“core” 1
sleep; 4
tcsh 2
switching; 1
priori 3
scheme, 1
“first 1
test 7
sleeps 4
swtch: 1
technique, 2
priorities; 1
scientific 1
“fun” 1
test-and-set.s. 2
symbiotic 1
tests), 1
technologies. 1
priority; 1
sets 27
scientists 4
“havoc” 1
slice, 7
textbook 1
slides 1
technology. 1
shape. 1
scoff 1
“hello, 1
that? 7
slow? 1
tens 2
problem, 24
syscall 3
slower 6
“high 1
themselves 4
small/random; 2
proceeds 4
terminating 5
scratched 2
“lock” 2
scream. 1
termination 4
“loop.s”. 2
terminology) 1
second-level 3
“looping 1
“out 1
test-and-set! 1
smaller, 1
snuck 1
shared 67
system. 57
“real-world” 2
section, 24
shells, 1
software) 2
short). 1
“reserved 2
test-and-set.s 2
systems; 9
solution). 1
process. 69
see, 15
“running” 2
shorter 6
system’s 3
solutions, 3
segment. 8
“starts” 2
them, 20
“steal” 1
t). 2
segmentation; 2
processes. 22
segmenting 1
table; 5
segments; 1
processing 4
“test 2
then; 1
solves 7
segment’s 1
there 250
“tried 1
therein; 2
“turn” 2
thesis 1
process’s 18
tables 49
should 274
tailor 1
they 149
seminal 1
produces 7
professional 1
sense; 5
taken 16
thing. 2
programmers. 2
showing 8
senses 1
takes; 1
things; 3
programming: 2
thinking, 2
progress 8
task 16
sequence 24
teaching 1
pronounced 1
thing 38
serve, 1
shown 35
think, 2
served 3
shudder 1
properly 15
shuts 1
properties 8
service 11
technical 3
serviced, 1
signal() 4
setpark(). 2
signaled 1
tend 7
property 10
sets: 2
significant 4
terminated. 1
proportional-share, 1
settle 1
similar. 2
terms 10
prot 8
shaded 1
similarity 1
shmget() 1
tests 5
protection. 3
this: 49
simplicity 7
text. 1
protective 1
short) 5
single-CPU 2
though; 4
protocols 2
short-lived 2
thoughtful 1
single-processor 5
thousand, 1
singlequeue 1
thread!) 2
site: 2
threads). 2
provided 20
size); 2
show 24
pthread_attr_t 2
sign 3
pthread_cond_wait(pthread_cond_t 3
size, 12
pthread_create(&p, 2
signals 13
pthread_mutex_init(&c->glock, 2
sizeof(int); 1
pthread_mutex_init(&q->head_lock, 2
skill 2
pthread_mutex_init(&q->tail_lock, 2
skip 5
pthread_mutex_lock(&lock); 2
sleep. 8
sleeping 5
sleeping/waking 2
similar 45
than 149
pthread_mutex_t 22
threads? 4
that: 3
slice). 1
three-queue 1
them), 2
pthread_mutex_unlock(&c->glock); 4
similarly; 2
slices, 2
three: 1
theme 6
pthread_mutex_unlock(&q->head_lock); 4
throughput?) 1
sloppy 4
themselves; 2
pthread_mutex_unlock(&q->tail_lock); 2
thrown 1
simplest 13
small. 1
publishing 2
smaller? 1
simplified; 1
ticket. 2
pull 2
simultaneous 1
then, 16
tickets; 1
single-entry 2
smart 13
theory 4
time; 16
sinister 1
so), 1
there; 5
situations. 1
software, 4
thereby 1
six-level 1
software-based 1
therein, 2
software4 1
solution: 1
size. 7
things. 7
solve. 1
thinking? 1
queue 55
some 505
sizeof() 7
times 40
some_function(char 1
queue_init(m->q); 2
something. 2
sometimes) 2
timespec 2
queuingbased 1
sizeof(PDE)). 1
third 18
quick 4
tn 2
somewhere 4
soon-to-be-executing 4
to? 2
soon-to-be-exec’d 1
quickly; 3
rage. 1
together 12
raising 3
sophisticated 13
ran, 1
random, 1
soon 25
sounds 6
randomized 2
soup.” 1
range 7
sorry 1
sizes; 2
source. 1
space; 11
those 84
sleep 30
rapidly 1
sources 6
too 85
sloth” 1
spaces 20
rarely-used 1
though, 8
slots, 3
spawning 1
rarely. 2
tool, 6
spectrum, 1
rate) 2
slow, 8
toolbars, 1
speculation 2
thought 17
speeding 2
thr_exit(); 1
topics 5
speeds; 1
rc 13
thread; 7
trace; 1
splintering 1
rc_wait, 2
threadID. 2
traces 3
splits 1
re-checks 4
sploitfun.wordpress.com/ 1
trade-off: 1
small 61
reaction 2
sprawling 1
transaction, 2
snatch 1
read() 1
transcript 1
reader: 2
spread 9
snippet. 1
sptr. 1
snooping, 1
spuriously 2
so). 1
stack) 7
so? 5
transforming 3
software. 2
solid-state 1
transistors. 1
translated 3
solution, 10
ready 33
translation; 1
realizing 1
threads 197
solve 20
stages 1
space 278
translations 22
threshold. 2
someday). 1
really, 4
special; 1
rears 1
tick 1
somewhere... 1
started 11
transparency 1
specific. 1
recent, 1
tick-by-tick 1
soon-to-be-faulted-in 1
starvation, 1
ticket.s. 2
transparent 4
reclaim 3
soon-to-be-running 1
starve: 1
specifically, 13
recursively 1
trap; 2
sorted 1
tickets, 4
state. 10
trapframe 1
red-black 4
specified 8
sound 5
tidbits 2
stealing 1
redirects 1
speeds 4
traps 5
steps 3
reduction 2
stipulated 1
tricks: 1
source 23
reference. 8
space), 4
refined 5
stitch 1
speedup. 1
sparsely-used 2
trust 14
reflect 4
stopped 2
turn) 2
spin-wait 10
stops. 1
refuses 1
time, 75
spinning. 2
store-conditional) 1
region) 1
time-shared 2
storeconditional. 1
time-slicing. 1
special 22
split 9
specialize 1
src); 3
timeline, 1
specification 1
stack-allocated 2
turnaround 30
timer-interrupt 1
turned 2
specifics 1
times) 1
stored. 1
stack. 17
straightforward, 2
speed 12
stage 3
strange; 1
spins, 2
standpoint 1
strategy, 2
start. 1
strdup("p4.c"); 1
splay 1
streams 2
register 75
sptr 2
tmp->next 4
src) 1
registers), 2
starting 14
stack; 3
reject 4
starve). 1
relate 1
stacks 4
relaxed 2
state; 2
stale 1
stride, 1
released 10
states 15
standard 22
this 1109
relegated 2
standards/SPARCV9.pdf. 1
status 5
stays 4
thorough 2
remainder. 1
string 12
thr_exit() 3
remains. 1
starts 25
structure. 16
stems 1
thrashing 2
repeat, 1
two 241
repeatedly. 2
step 2
starvation. 7
structures; 2
two-fold. 1
repeating. 1
stopping 4
starved 1
student 3
replacing 3
store-conditional. 3
reproduce, 1
studies. 1
reproduced 1
study. 2
strange 8
request, 10
studying 9
requester), 1
strcpy(dst, 4
stuff? 1
strdup("wc"); 2
style. 1
subdirectory 2
stream 7
stride) 1
type 73
stronger 2
ubiquitous 2
stronghold 1
stronglytyped, 1
ultimately 1
state 73
structure; 2
understand2 1
subsequent 24
understand: 1
unexpectedly 1
stated, 2
subsystem 4
require 10
unless 1
statement, 1
subtle 1
required, 3
unlock. 4
stay 3
unmapped 1
steal 3
unmasks 2
succeeds 3
stood 1
unpack 2
research 18
success. 3
storage, 2
unpark() 2
structures 59
research.microsoft.com/ 2
stuff, 1
store, 2
unrealistic? 1
super 2
reside) 1
sub-sequent 1
store-conditional; 2
super-linear 1
unsafe 4
resides. 3
unsurprisingly, 1
subsequently 4
residing 2
storeconditional 1
unused. 2
substitute 3
resize; 2
subtleties 2
upcoming 1
respectively. 2
stored 15
straightforward. 2
restart 5
strategies. 1
strategy. 1
restoring 5
sure 56
surface. 1
surprise: 1
surprised. 2
result. 11
strength: 1
surprisingly, 6
suspect 1
strict 1
subverted 1
swath 1
succeed 2
upon 40
success; 1
system: 6
sufficient, 1
resulting 24
stride. 1
upside 1
systems). 1
rethink 1
support? 4
strings? 1
usable. 2
survive 2
systems? 2
strong, 1
swapoff. 1
use_ptr 2
t(B) 1
used) 1
t; 2
table). 3
useful. 10
table? 3
swapped 12
return-from-trap 17
user; 3
return-to-libc. 1
returned, 2
tables, 8
reusing 1
taken, 5
rewrites 1
talents, 1
richer 1
talks 1
right). 2
users 27
right? 8
target 6
road” 1
switching); 1
switching, 2
usual 2
symbol. 1
utilization. 1
room 17
synchronize 2
rosy 1
rotational 1
structure 73
utilized 4
task, 5
system). 4
rough 3
studies 4
v); 2
system? 4
valid: 1
tcsh), 1
value), 3
variable, 8
routines, 5
variable-sized 7
variables) 1
variants: 1
study 52
varies 5
systems, 49
team 2
sub-jobs, 1
vary 4
system” 1
vectors, 1
victim. 1
view). 1
subsystem: 1
t 10
telling 1
virtualizes 3
visualization 1
vmalloc, 1
table, 26
tables! 1
tables) 2
tackle 4
take? 2
takes, 1
talk 10
tasked 1
tasks. 1
tech 1
technique. 1
thread 449
thread-local 2
technology 7
thread-safe, 2
threat 1
ten 7
tells 11
terminate. 3
temporal 7
terms, 3
terminal 4
test-and-set. 4
terminates 1
test? 2
terms) 1
thanked 1
terrific, 1
testand-set 1
that. 9
text). 2
textbook, 1
that’s 8
the?? 1
them) 1
themselves). 1
three 69
threshold; 4
void 153
subtle: 2
succeeded, 2
success 9
successfully, 1
such. 1
vruntime 10
suffering 2
suggested. 1
vulnerabilities 2
suitable 2
thus, 54
their 91
wait(), 6
sum, 1
ticket, 2
walks 1
summarize, 1
time! 2
them. 16
run 374
want 50
sun.com/solaris/articles/atomic 2
warm-start 1
time) 4
themselves, 1
theoretical 1
waste. 7
there, 2
time-sharing 7
support, 16
way! 1
therefore 2
running, 30
time-space 2
runtimei 1
safe. 2
way) 1
therein), 2
then 227
timer? 3
surface 3
thing... 1
theory, 1
said, 10
timers, 2
thing: 4
ways. 11
surprised 2
think. 2
times. 7
wc 11
timing 5
swapping 12
there). 1
say 29
thinking 23
tips 2
scalable. 5
switch? 2
there? 4
switches? 1
weightB 1
tired 1
scaling, 1
thirty 1
therein 1
scan 5
thermodynamics 1
tirelessly 2
scenarios. 1
think) 1
to), 1
scenes, 2
third, 2
together. 5
this? 5
tolerate 1
schedule 14
those, 1
well. 30
tomes 1
schedule(curr); 1
this, 32
switching) 1
too. 6
swtch 1
top), 1
scheduler. 10
top-level 2
we’ve 21
though 29
scheduler’s 1
what’s 2
thread? 2
traces. 2
threads); 2
tracing 6
scheduling? 1
thread, 48
threads) 1
scheme 6
three, 3
script 2
three-quarters 1
system, 65
seconds. 3
throw 6
secretary; 1
track; 1
systems) 4
table! 1
table) 2
tracks 8
trade-off 4
tables. 6
traditionally 1
take, 3
transferred 4
threads, 38
taken. 1
transfers 7
translation) 1
tandem 5
section 55
translations. 6
task. 7
trapped 2
taste 2
tread 1
tcsh). 1
treasure-trove 1
treat 4
treatment, 2
thread” 1
tree 15
threats, 1
trees), 1
tricks 2
tricky: 1
techniques 24
technology-driven 1
tried 4
true 14
three-instruction 3
ticket; 2
truly 9
trylock 4
turnaround. 1
twice, 5
two-phase 6
two. 3
type. 1
typesetting 2
uber-engineer 1
tickets 30
tell 28
uint 1
undefined. 1
tennis 1
terminate 6
terrible 3
see 272
understand 112
understandable, 1
seemingly 12
test-and-set 15
understanding: 2
seems 12
test-and-set.s? 2
unfortunately 4
thus 486
tested 1
unified, 1
segment: 10
when 480
ticket 27
text, 2
unimaginably 1
segmentation). 2
which). 1
tickets), 1
uniprocessor, 2
thanks 4
while) 1
segmentation.py 5
time), 4
winner). 1
unit 7
segmentation? 1
unknown 1
time-slice 5
segmentation” 1
winning 7
unlock(&m) 1
timedlock 4
woken. 2
timely 3
work? 7
self; 2
timer; 1
unlock(lock_t 10
worked. 1
semantics. 2
timing, 3
unlock, 2
worker 6
time 306
time-share 1
unmodified, 1
unnecessary 1
timeline 3
working-set 1
sends 3
unpacking 2
sense? 1
workloads, 1
tiny 21
timeout 4
unsurprisingly: 1
timer. 1
tmp; 7
sensible 4
unsuspecting 1
works, 15
times), 1
to! 1
sentence 1
unused, 1
worse: 2
timing? 1
up; 2
tip: 1
to) 1
updated) 1
wrap 2
tlb.c, 1
separate 17
upon. 1
tons 2
wreak 1
too: 2
writes, 4
to, 13
tool. 1
sequence, 8
written), 1
top) 1
wrote) 1
www.gnu.org/gnu/manifesto.html. 1
x-axis 1
x86); 2
total 26
today. 6
serve 2
towards 3
today’s 2
tracing, 1
serviced 4
x86, 8
us 84
tragically 2
usage; 1
xchg 2
sets. 2
transfers, 1
xv6. 1
use; 4
setup, 2
used? 1
y-axis? 1
topic 18
transform 4
shade 1
totals 2
years. 4
transistors 2
useful, 11
shared. 1
totaltickets); 1
yes! 1
translation), 2
user/supervisor 1
short-lived, 1
tough 2
shortly 1
translations: 2
users. 1
transparency2 1
trap), 1
trace 24
yet 20
traversal 3
transformation 2
traverse 1
yields 5
transforms 4
tree, 4
young 3
translated), 2
trend? 1
yourself! 3
tried, 1
zeroing, 1
trigger 2
uses 70
× 1
should. 1
’83, 1
show, 1
true, 3
use”, 1
’d’ 1
tune 1
side 4
usual. 2
signal(). 1
’his/their 1
signals, 2
“Analysis 1
utilization, 1
simplicity. 3
“A”, 2
utilized. 1
turn; 4
simplify 1
translation 46
“CPU-bound” 1
utopian 1
simulating 1
translation-lookaside 1
“Exterminator: 1
transparently 3
simulation 7
site 1
sitting; 1
turns 37
tweak 1
“Hmm... 1
size: 16
“Informed 1
size=100); 1
sizeof(), 1
twice 5
“Inside 3
two: 1
type: 1
“Intel 4
sizeof(node_t); 1
valid 51
trap 52
unallocated 2
“Is 1
traversals 2
sizeof(x)); 2
tree? 1
“Nonblocking 2
unbounded 1
slabs 1
“Policy/mechanism 1
trees, 4
“Segmented 1
value; 22
trials 2
uncommon 2
sleep, 13
underpowered 1
sleeping. 4
understand, 3
slice), 2
understandable 2
“Towards 1
slots 7
“Wait-free 2
“What 5
understanding. 1
“With 1
slow 15
undertaken; 1
“as 2
tries 41
slowdown 2
slowly; 1
unfortunately, 14
“brain 2
uniform, 1
values 75
“have 1
variable-sized. 1
“hello 1
small, 7
try 64
variable: 2
unlock 13
unlucky) 1
small-sized 1
variants 4
turning 9
“modern” 1
smallest 5
vary. 2
sneaks 2
“owned” 1
snippet: 3
“parent: 1
tweaks 2
varying 2
snooping 1
two-CPU 1
“ready” 2
versus 5
so; 2
“what 1
two-level 7
software-managed 5
until 52
→ 17
typing, 1
via 53
virtualization; 1
unblocked 2
unused 14
undesirable) 2
up? 3
undoubtedly 2
virtualizing 14
update) 1
vision 1
unique 7
visualization. 1
units, 2
void. 1
unlock): 2
updating 13
unmask 1
upper 1
volatile 5
solution 44
upper-half 1
unpark(threadID) 2
vruntime. 1
unqualified 1
upwards. 1
solved 2
vulnerabilities. 1
unrealistic, 3
urging 1
somewhere. 3
vulnerable 2
us, 2
soon-to-be-run 1
untimely 6
waits 36
usable 2
soon. 1
update, 1
used; 2
sorry. 1
sounds! 1
source, 1
updated 8
space! 2
wake 33
space) 4
wakeups 2
space1 1
wall 1
want. 1
used. 15
warmed 1
spaces. 7
wasn’t 2
spans 1
wasted 4
specialized 4
way). 1
specifying, 1
way? 1
speculative 1
ways, 1
spends 1
weight 1
weight0 1
weirdly 1
spins 11
splits. 1
well, 15
stack). 4
well-defined 1
stack-smashing 1
useful 69
well-meaning 1
weren’t 1
useful2. 1
stacks, 3
when. 2
useless 2
stands 1
wherever 2
user-facing 1
starting) 1
whet 1
while? 1
starts, 3
user-level 6
whims 2
starvation: 1
usermode 1
starve 2
users: 1
using. 2
utilities 1
state, 13
utility 3
stated 2
utilization 5
statement 3
user 117
statically-initialized 1
why 58
step-by-step 2
widespread 1
valid, 14
stolen 1
wild 1
valuable 3
value? 2
storage 12
values, 12
usually 52
variable. 8
store 24
variable’s 1
utilizing 4
str); 1
variety 3
v9 1
vengeance’.” 1
straightforward: 6
streams. 1
viewed 4
stringing 1
virtualization). 1
valgrind 15
virtualization? 1
valid). 1
strive 5
strlen(), 1
valid? 3
strong 2
values). 2
virtually 9
values? 3
visible. 2
vanishes. 1
visionary 1
variable) 1
visited, 1
visualize 1
vruntime: 1
variables. 13
wait(). 3
vector, 1
wait(NULL); 3
versa. 1
waiter 2
vice 1
warmup 1
view, 1
violations). 1
struct 49
waste 23
structure, 24
stuck; 3
study, 3
studying. 1
ways 19
style, 1
sub-microsecond 1
submitted, 1
substrate 1
succeeded 4
success, 5
successfully 5
suffering, 1
suffice 3
suggests 2
suit 1
sum 3
summarize 5
supply 1
support 110
sure. 2
surely) 1
surprise 2
surprising? 2
surprisingly!) 1
swapping, 1
switches; 1
switching), 1
synchronizations 1
will 580
virtual 253
window 3
wise 1
woken, 2
wondered 1
wonders. 1
word, 1
virtualize 13
worked, 2
virtualized, 1
workings, 2
virtue 2
vmstat 2
world 26
vs. 8
world\n", 1
wait()) 1
worse 9
wait(address, 2
worst-case 5
wait-for-me.s. 2
wouldn’t 5
waiters 4
wrappers, 2
wrapping 2
waiting, 5
write(), 1
writes: 1
waitpid()); 1
written; 1
wake(address) 2
wake? 1
wakeup/waiting 2
x 12
walk 1
xv6, 1
yeah! 1
warm 3
warnings. 2
years, 9
yet. 4
yield() 2
yield.s 2
wastes 10
you; 1
yours. 2
watch 5
watches 2
that 1398
way. 6
wc), 1
weaknesses. 1
you’ll 37
well-regarded 2
zero 10
well-suited 2
zeroes 2
well; 1
|| 2
}; 8
’09, 1
’10, 4
’14 1
’18, 2
’81, 5
’89, 1
’98, 1
’b’ 1
’flag’ 2
’new’ 2
’peek 1
’self’ 2
“21” 2
“Ah! 1
“Aleph 1
“Algorithms 2
system 363
“Animal 1
systems), 1
“Dahm 2
table), 1
tail_lock; 2
“Introduction 3
“One 1
we’ll 112
“Performance 1
whatever) 1
“Principled 1
“Priority 1
“Profiling 1
“Reese’s 1
whereas 14
“SDS 1
“They 2
“big 1
“bounds” 1
“catch” 1
“crux 1
“easy 1
“got 1
“hot” 2
take 97
“other 1
taken: 2
“privileged” 1
tapes 1
“ticket-assignment 1
target. 1
target’s 2
“too 3
task: 1
taught?! 2
← 2
teach 1
whether 59
techniques, 7
which, 4
terminated 2
while. 2
terribly 1
test-and-test-and-set.s. 2
testand-set! 1
whole 5
why? 2
text 9
wikipedia 1
thanks, 1
windows, 1
wine, 1
winter. 1
that, 11
within, 1
them). 2
wonder 3
them? 3
then. 1
wondering: 4
theory-types 2
won’t, 1
words 2
therein. 5
these, 4
thing; 1
work, 23
work-stealing 2
worker(), 1
workload, 11
world? 1
world” 1
things 46
worst 7
think? 1
worst-fit 2
thinking! 1
write, 3
thousands, 1
x86) 1
thread), 2
x? 1
threadID 2
years; 2
three-level 1
yell) 1
yes. 3
yet), 1
threshold 11
through, 1
tickets. 5
tightly 1
yield 21
time-slicing 1
you: 1
time-tested 1
we 992
web. 1
weight, 1
time. 66
timeline. 2
timer, 4
times; 3
tip 2
tmp); 5
today, 4
too; 1
took 16
tool? 1
to 4068
tools, 3
together! 1
top-to-bottom 1
told 2
topic. 1
too! 2
total) 2
track 27
well 88
traffic. 1
trans- 1
transfer 10
top 32
transformed 2
your 201
topic, 4
yourself. 1
translation. 10
total). 1
translations; 1
transparency; 1
touch 4
trap. 1
touches 2
trapping 3
toughest 1
traversing 2
you’re 18
trials. 1
zero). 1
trace, 3
trick 3
zplot. 1
’95. 1
tracking 2
’a’ 4
trouble 9
’threshold’, 2
trade-offs 5
trusts 4
tradeoff 1
truth. 1
try. 1
“A 15
traditional 11
trying 15
transfer. 1
“B” 8
tuning 1
“Earliest 1
twins!” 1
“Electrochemically 1
two-thirds 1
transition 6
“History” 2
“I 1
“Jack 1
“Javascript: 2
“MIPS 3
“Mac 1
types 33
“Membrane: 1
translation, 15
u 2
“Memory 1
ubriaca. 1
translations! 1
“OS” 1
unaffected 1
“Operating 2
trap, 3
unfair 2
“Purify: 1
treasure 1
unlikely 3
“RISC-I: 1
treats 1
“Run-Time 1
“Structure 1
trees 4
unlock() 14
trials, 1
unlocked 2
trickier. 1
unpacks 1
triggers, 1
unrealistically 2
unsatisfying) 1
trivial 2
unsigned 2
unusable. 1
trouble. 3
unused) 1
twenty 1
unusual 3
twice). 1
“The 40
type) 1
“Tolerating 1
typically 1
“Valgrind: 1
“a 1
“all 4
“batch” 1
typing 9
“cold” 2
unasked 1
“correct” 4
uncaught, 1
“fault.” 1
under- 1
“free” 1
“glibc 2
undergraduate 4
“lost” 1
“operating 1
underlies 2
“out-of-bounds” 1
underly 1
“response”; 1
undertake 1
“the 1
“uninitialized 1
unexpected. 2
“wreaked”? 1
” 4
unfortunate 5
units 1
unit”, 2
unlock? 2
unrealistic 2
unreasonably 1
up 156
up. 7
update: 2
updating) 1
upper-case 1
upsides 1
what 280
whenever 3
usage 16
why, 1
will, 2
window, 3
winner) 2
wished 2
update 54
updated, 2
uplifting! 1
upward 1
usage. 4
use. 16
useful? 1
user, 3
user-defined 2
usually, 2
utility? 2
val 2
valid; 1
value. 12
varied 2
vastly 1
vector 1
vi, 1
vice-versa. 1
view 14
virtual, 1
virtualization. 4
virtualized 6
vmstat, 1
voo-doo 2
vruntimei 2
use 317
wait. 2
use?) 1
used, 8
user. 7
user’s 4
uses), 1
using). 2
using? 2
valgrind. 1
valid), 1
waiting 94
waitpid() 2
wakes 15
wanted 3
wary 7
value 233
variable). 1
variable-length 2
variables, 5
variable” 1
variant 3
vector-like 1
vengeance’. 1
version? 2
viewpoint 1
violation 2
virtual-memory 1
virtualization 20
virtuallyindexed 1
void; 2
wait 53
waitFirst 2
waking, 1
want; 1
wants 16
wary: 1
waste! 1
watch. 1
watching 1
way, 20
welcome! 1
well) 1
which... 1
whichever 4
while, 8
wily 2
winner: 2
with) 2
wondering 2
work: 1
workers 1
workload: 1
works? 3
worlds: 1
world”. 1
worry: 1
worthwhile 2
write: 1
was 188
water 1
written 18
way: 5
website 2
weightk 1
weights 2
wrong 15
www.stanford.edu/˜ouster/. 1
weird 3
x86). 2
x86” 2
yes, 6
yielding 5
were 76
with 638
we’d 9
when! 2
without 70
woken 13
won 3
word 14
work! 3
worked 6
workflows. 1
workloads. 3
works. 22
world!”, 1
world, 6
worried 1
worry! 2
worse, 8
where 166
worth 20
wrapper; 2
wrappers 2
wreakers 1
write() 5
writing 21
written). 1
written? 2
x, 2
x86. 1
x[10]; 1
xv6 6
y; 2
years 19
yelling 1
yet: 2
yield.s, 2
you). 1
you? 9
yours: 1
yourself2! 1
yourself; 3
you’d 9
zero, 3
zeroing. 2
| 8
ˆC 2
’03. 1
’63 3
’85, 1
’92. 1
’94, 2
’Approximate’, 2
’b’, 2
“...with 1
“010101”, 1
“80-20” 1
“Advanced 4
“Change 1
“Extending 1
“Fact 1
“Guide 2
“Hints 3
“Hoare” 1
“Information 1
“Just 2
“My 1
“Our 1
“RTFM.” 1
“Shared-access 1
“She’s 1
“Someone 2
“Survey 1
“Think 1
“Transaction 2
“Understanding 5
“Using 2
“baby 1
“bad” 3
“demon”, 1
“ease 1
“familial” 1
“goodbye”. 1
“hello”; 1
“jemalloc” 1
“just 3
“perfect”. 1
“right 1
“second-system 1
“smart” 1
“walk” 1
“yes.” 1
• 69
− 7
which 501
while2 1
whom 2
widely), 1
winner 5
wired 2
wisdom 1
wish 26
wishes 16
with? 1
you 995
yourself, 2
yuck! 1
zero), 1
zero.” 1
zombies, 1
zsh 2
within 89
won’t 21
words, 5
} 271
˜mark/syscall.html. 1
– 19
’15, 1
’93. 1
’95, 2
’Classic 1
’c’, 1
’pedantry’ 1
’wreak 2
’w’ 1
“An 9
“Bell 1
“B”. 2
“Cloud 3
“Computer 6
“Converting 1
“Idleness 1
“If 2
“John 1
“Load-Link, 2
“Making 2
“Observations 2
“One-Level 2
“One-level 2
“OpenSolaris 2
“Perfection 1
“Practical, 1
“TLB”. 1
“Time 1
“T”, 2
“Virtual 8
“bad 1
work 150
“buddy” 1
“child”, 1
“condition 1
“daemon”, 1
“discovered” 1
“drum” 1
“interrupts” 1
workload 14
“limited” 1
world; 1
“main: 14
“process 1
“ten-items-or-less” 1
“test” 2
“the”). 2
worry 21
worst-fit, 2
worstcase 1
worthwhile. 3
would 200
wreak1 1
write 63
wrong. 3
wrote: 1
www.takeourword.com/TOW146 1
x; 4
y-axis 2
yes: 3
yet! 1
yield(); 2
yield, 2
yield-based 2
you. 8
yourself2 1
you’ve 6
{ 281
© 21
’ 11
’04, 2
’13, 5
’75, 1
’a’, 1
“1984” 1
“2Q: 1
“Ad 2
“Atomic 2
“A”), 1
“Cold-start 1
“Dynamic 3
“Efficient 2
“Everything 2
“He 1
“It 2
“KASLR 1
“Machine 1
“Mesa” 1
“Microreboot 1
“Monitors: 1
“Myths 2
“OSSpinLock 2
“OS”, 1
“On 2
“Parallel 1
“Premature 2
“Solaris 3
“Solution 2
“Symmetric 1
“System 1
“Take 1
“U 1
“You 2
“at 1
“atomic 2
“being 1
“best” 2
“commoncase 1
“emulation” 1
“implements” 2
“interactive” 1
“it 1
“older” 1
“on 1
“page 1
“reliability”, 1
“right” 1
“same” 1
“setting” 2
“works” 1
the 8323
them; 2
there! 1
therein: 2
these 222
they? 2
things); 1
things, 6
thing” 1
think-ing 1
thinks 7
this! 2
thousands 10
thr_join(); 1
thread.c 1
threadID, 2
threaded 2
threads. 19
three) 1
threshold, 2
through 56
throughout 13
tickets: 1
time-efficient 1
time: 2
timer 36
times). 2
times? 2
timings. 1
tip, 4
tive) 1
tmp 8
tmp->value 2
to. 4
today 7
too). 2
took, 1
tools 16
too” 1
touching 1
trace: 1
track, 1
trading 1
transactions 1
transitioning 4
translates 5
translations). 1
transparent” 1
treated 6
trouble, 2
true! 1
truth: 2
turn 32
type). 1
typedef 33
ugly 3
uncommon), 1
underlying 9
understand! 2
unfair, 1
uniformly, 1
unifying 1
uninitialized 1
uninteresting: 1
unit) 1
units. 3
universal 1
unlock(&mutex); 2
unlock(), 2
unpark 2
unpark(queue_remove(m->q)); 2
unpleasant. 1
unrealistic. 1
up, 12
update. 1
upper-level 2
urgent, 1
usage, 2
use, 15
used 175
user-managed 1
user-mode 3
using; 2
utilized? 1
utilizes 1
v; 2
value); 2
value, 17
variable; 2
variables 33
variablesized, 1
variants) 1
various 27
vary). 1
vector. 1
versions 8
viewing 2
violation, 2
virtual-to-physical 6
virtualization, 7
virtualized. 1
visually 1
voluminous 2
wait(); 1
wait, 4
wait-for-me.s 4
wakeup, 1
waking 5
was. 1
wasteful. 2
way 97
weakness 1
weaknesses 1
weightA 1
weighted 1
weighti 2
well), 2
were. 1
while 170
wide 1
winner. 2
wishing 3
within. 1
work. 24
workers, 2
working 28
workload. 6
works3 1
works; 1
workshop, 1
worlds. 2
worry. 3
worse! 1
wrangling 1
wrapper 3
wreaked?” 1
write(fd, 1
write. 2
written, 1
wrong, 4
wrote 10
www.cs.tau.ac.il/˜shanir/concurrent-data-structures.pdf. 2
www.nds.rub.de/lehre/seminar/SS06/Werthmann 1
www.sparc.org/ 1
x) 1
x86-version 2
x86.py, 4
you, 11
younger 1
yourself 7
zeroed 1
zombies 1
· 4
’02, 2
’11, 2
’19, 1
’68 1
’current’ 1
’c’ 3
’e’. 1
’mutex’ 2
“Aspects 1
“Before 1
“But 1
“Concurrent 2
“Cooperating 7
“H-Pucks”) 1
“H”, 2
“Improving 1
“It’s 2
“Lottery 2
“Mach: 1
“Multics: 1
“Multilevel 1
“PThreads 2
“Programming 7
“cooperating 2
“direct 1
“double 1
“fault” 2
“first-in” 2
“foo” 1
“lmbench: 1
“longword” 1
“pinning 1
“private 1
“prove” 2
“real” 3
“reasonable” 1
“yeah, 1
