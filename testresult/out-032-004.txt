3 1
12 19
16 9
C 16
S 28
"common.h" 7
"hello"; 3
# 16
#2: 2
2 25
20 1
#include 62
$0x0,(%edi,%eax,4) 1
$0x03, 1
$0x03e8,%eax 1
%bx 2
10 21
14 14
18 4
I 26
M 20
! 2
!zero, 2
"A" 1
"A"); 4
"common_threads.h" 4
"usage: 2
$0x0) 1
$0x1 2
$0x1, 6
% 8
%d 5
%d\n", 9
%dx 6
%eax,8049a1c 4
%ecx 1
%ecx, 1
%esp 1
%esp, 1
%lld\n", 2
%dx. 2
6 22
%p\n", 4
&; 1
B 13
F 8
&mutex); 8
&rvalue); 2
(-L 2
(-c) 1
(-l 4
(-p 2
(-s) 3
(-w) 1
(1 1
(10 1
(100 4
(1000 1
(117 1
(212 1
(24114) 5
(256 1
PAGING 21
!= 7
!StoreConditional(&lock->flag, 2
"B"); 4
"hello 1
"wc" 1
#1: 2
#define 2
%ax 4
%d)\n", 4
%eax). 1
%edx 1
%edx, 1
%esi 1
%esi, 1
(32 2
(32-bit 1
(34KB), 1
(4KB 1
(5 1
 32628
 26
22 1
(9.1) 1
(@PFN:101) 1
%eax 24
4 23
8 22
L 17
T 10
"fork 4
"wc"... 1
#3: 1
$0x1,%eax 4
%eax), 1
%eax,0x0(%ebx) 1
%ebp 1
%ebp, 1
%ebx 1
%ebx, 1
&& 2
&stack); 1
( 6
(*start_routine)(void 2
(-1KB) 1
(-T). 1
(-p). 1
(-s 2
(/tmp/file) 1
(A 14
%eax, 8
& 29
(0, 3
(010101), 1
(1110) 1
(117). 1
(20%), 1
(2012-01-30-1-g1c41342) 1
(21) 1
(22.1) 1
(224 1
&oops; 2
&rvals); 2
&x); 1
((flag[1-self] 2
(-M 1
(-P) 1
(-m 2
(A, 5
(AS) 1
(ASLR). 1
(./x86.py 4
(01) 1
(24113) 5
(26 1
(28KB) 1
(3) 2
(3764 1
(4 3
%edi 3
%edi, 1
&args); 4
&lock); 2
&m); 3
(-a) 2
(-i) 4
(-n 1
(-q) 1
(0x200000), 1
(0xC0000000 1
(101) 2
(11) 1
(120−0)+(20−10)+(30−10) 1
(16 3
(4088 1
(0x1) 2
(Again) 1
(2) 4
(20-ms 1
(1) 13
(100) 1
(1024). 1
(104) 1
(14th) 1
(4096), 1
(2134) 6
(232 1
(32768) 1
(34K) 1
(400)2 1
(4200) 1
(7.1) 1
(7030) 1
(15th, 1
(1e7) 2
(200 1
(256) 1
(28 1
(64 1
(9.2) 1
(A) 2
(Another 1
(ARM). 2
(512 2
(APIs) 2
(August, 1
(Bounded 1
(CFS) 2
(ASID) 1
(B 3
(BFS)2 1
(CFS), 1
(COW 1
(7.2) 1
(CTSS), 1
(CanAccess(TlbEntry.ProtectBits) 4
(CompareAndSwap(&lock->flag, 2
(8 1
(@PFN:100) 1
(AMAT) 1
(As 1
(BKL). 2
(BSD). 1
(C’s 1
(Advanced) 1
(Editors 2
(B’s 2
(Dynamic 2
(Alpha), 2
(And 1
(A’s 2
(B) 1
(Bad 1
(C) 1
(FCFS). 1
(Figure 45
(I/O). 1
(LDE) 1
(MIPS), 2
(OS 1
(OS)3 1
(FIFO) 2
(Blocks) 4
(C 1
(C, 1
(Good 1
(CPU 2
(P1) 3
(P1), 1
(P=0), 1
(Code) 8
(D); 1
(Linux) 2
(PA) 3
(PA), 1
(G) 2
(M 1
(MFU) 1
(PCB), 2
(G), 1
(Gulps) 1
(MLFQ) 1
(PDE) 2
(PID), 1
(KASLR). 1
(NOT 1
(CanAccess(PTE.ProtectBits) 4
(PTE) 9
(Q0), 1
(Q2). 1
(R 1
(R, 1
(Niceness) 1
(Chapter 2
(KNUTH’S 1
(RDLK) 2
(No 1
(OS). 1
(P0) 1
(PCB); 2
(DEC). 1
(L 2
(ROP) 1
(PFN) 6
(DMA) 1
(EEVDF) 1
(HW 1
(PFN), 2
(LFU) 1
(SN) 1
(Hardware) 1
(Hardware-based) 1
(LRU) 1
(SSDs) 1
(PM 2
(K 1
(Left) 3
(Simulation) 16
(PTEs) 1
(LAUER’S 1
(Line 5
(Linux, 1
(Page 1
(LW 1
(T1) 4
(LoadLinked(&lock->flag) 4
(PowerPC), 2
(Lines 6
(London), 1
(Logical) 1
(MMU) 1
(MMU), 1
(MLFQ). 2
(R/W) 1
(THE), 2
(P 1
(MMU); 1
(RR) 2
(Ready, 1
(P); 1
(MQMS) 1
(TLB 16
(Run 1
(P0 1
(MRU). 1
(Measurement) 3
(SQMS) 1
(STCF) 2
(StoreConditional(&lock->flag, 2
(NULL 1
(O 1
(Offset 1
(Success 4
(PC) 4
(TLBs) 1
(P). 1
(Success, 4
(PCB). 1
(Tc2) 1
(P2) 1
(T1 2
(PD 2
(PDE). 1
(P2), 1
(TCBs) 2
(Thousands) 2
(PDIndex 3
(P=1), 1
(TM 1
(TlbEntry.PFN 4
(PFN 2
(PDE.PFN 2
(Tarrival 1
(VP 3
(PID). 1
(PDE.Valid 1
(Tc1) 2
(VPN=1, 1
(a) 5
(PFN). 1
(Tc1), 1
(PSJF) 1
(a[0]) 2
(PTE.PFN 2
(Tc2 1
(PTE): 1
(above), 1
(PTE.Valid 4
(Timer 1
(PTE.Present 2
(address 2
(PWT, 1
(Tp) 1
(PTIndex 3
(Pmiss 1
(Proc 2
(VAX/VMS) 1
(after 4
(Process 1
(S) 3
(VPN) 2
(always) 1
(among 3
(S), 1
(VPN), 2
(R) 1
(assume 2
(SJF) 1
(VPN=07), 1
(RSS). 1
(bash?) 1
(SJF), 1
(VirtualAddress 9
(Right) 3
(broken) 1
(Software) 1
(a 21
(SJF, 1
(STDOUT 1
(September 1
(a[4] 1
(bugs) 1
(Spring), 3
(T2) 2
(a[8] 1
(bytesLeft 1
(TD 1
(T2), 2
(all 6
(c1–c3). 1
(Tc1 2
(TestAndSet(&flag, 2
(allocated 3
(c2), 3
(TestAndSet(&m->guard, 4
(TestAndSet(&lock->flag, 2
(almost) 1
(c4). 1
(This 1
(Third 2
(another 1
(causing 2
(Thread 2
(Tp). 1
(argc 2
(char 8
(conservatively); 1
(cpu.c) 1
(assumes 2
(at 12
(VPN). 1
(depending 2
(done 4
(atomic_bit_test_set 4
(VPN=06, 1
(U/S) 1
(due 6
(available 1
(average: 1
(VA) 2
(effectively 1
(VPNs 1
(bigger) 1
(VM) 1
(even 3
(Virtual 1
(binary 1
(VPN 14
(eventually) 2
(a.k.a. 6
(both 2
(VPN=06), 1
(flag 4
(a.k.a., 2
(c->local[cpu] 2
(VPN=08). 1
(forever), 1
(a3). 1
(c1), 1
(Virtual) 1
(free 1
(about 1
(c3). 3
(Volume 1
(hardware 1
(also 7
(c5), 1
(With 1
(https://github.com/remzi-arpacidusseau/ostep-projects) 1
(an 2
(called 9
(Without 1
(i.e., 96
(cleared), 1
(a2), 1
(a[3] 1
(imagine 2
(continue 1
(and 111
(a[7] 1
(incredulous) 1
(count 8
(approximate) 2
(again 3
(interrupt) 1
(curr) 4
(assuming 5
(again, 3
(into 4
(described 5
(atomically); 1
(alas). 2
(io.c) 1
(dramatic 1
(b) 5
(arbitrarily; 1
(just 5
(during 1
(but 14
(array-based) 2
(kernel) 1
(each 2
(but, 2
(lazily) 1
(as 49
(either 3
(by 13
(ldstub); 2
(assert(hptr->magic 1
(emacs 1
(bytes 2
(left). 1
(atomic_add_zero 2
(fun!). 1
(c3) 1
(lots 1
(because 8
(given 1
(c3), 1
(code, 7
(c) 3
(global 3
(m->flag 2
(continuing) 1
(c1, 1
(he 1
(main) 4
(discussed 1
(c2). 2
(hex 2
(managing 2
(do 5
(c4), 1
(highly 1
(max 2
(done) 2
(clearly 1
(hint: 6
(milliseconds); 1
(double 1
(counter 17
(holding 1
(modified), 1
(especially 2
(created 1
(hopefully) 3
(my 1
(evicts) 1
(curr->key 4
(i 19
(myturn). 2
(flag) 2
(current) 1
(i); 1
(namely, 1
(for 24
(dare 1
(ignoring 1
(new 7
(free) 21
(implicitly) 2
(non-paged) 1
(e.g., 108
(gadgets, 1
(implying 2
(non-restricted) 1
(easily) 2
(generated 1
(including 10
(normally 1
(erroneously) 1
(hence 1
(indeed, 4
(notably) 1
(fill_ptr 1
(hence, 2
(insert 1
(note 4
(finally) 1
(if 13
(it 12
(note, 1
(first-in, 1
(kernel 6
(in 45
(ns) 1
(formerly 1
(known 1
(initial) 1
(older 1
(four 1
(labeled 6
(int 6
(ironically) 1
(freeing 1
(latter) 2
(one 6
(job 2
(from 16
(ld.so) 1
(only 5
(left 1
(full) 1
(like 5
(other 1
(let’s 4
(gasp) 2
(lock->turn 2
(our 4
(likely) 1
(generally) 1
(locked). 2
(p1), 1
(literally) 2
(get 1
(long) 1
(p1– 1
(lowest), 1
(header_t 1
(many 4
(p2); 1
(making 1
(highest 1
(mem.c) 1
(p4.c) 1
(mentioned 2
(hopefully 2
(minimally) 1
(p6, 1
(middle 2
(horribly) 1
(modern 1
(pause 3
(more 3
(include 2
(no 4
(nods) 1
(most 2
(instead 1
(physical) 1
(non-contiguous) 1
(mutex 2
(int) 10
(pid:29146) 4
(non-toy) 2
(mutex); 6
(its 2
(pid:29267) 1
(not 20
(mutex, 8
(large) 2
(pid:29384) 1
(of 10
(myarg_t 4
(myturn 2
(potentially) 1
(on 11
(limit) 1
(line 3
(potentially), 2
(once 4
(n) 1
(load 1
(queue_empty(m->q)) 2
(nearly 2
(lock-holding) 2
(or 83
(rather, 1
(new) 1
(log2 1
(or, 5
(rc_wait:29267) 1
(new_head 2
(long 2
(original 2
(rc_wait:29384) 1
(next 1
(maliciousness) 1
(p.81).” 1
(realistically, 2
(nice 1
(marked 1
(p2). 1
(releasing 1
(p1.c) 1
(minus 1
(p3.c) 1
(repeat) 8
(p2), 1
(modulo 1
(requiring 1
(page 49
(p4). 1
(mutex->flag 2
(results 1
(physical 1
(part 2
(myarg 2
(returning 2
(pid:%d)\n", 9
(perhaps 7
(note: 2
(roughly 2
(pid:29266) 2
(pid:29147) 2
(now 6
(simple 2
(pid:29383) 2
(pointed 1
(often 2
(slow) 1
(pointers) 1
(preempting 2
(onto 2
(something 2
(quite) 1
(pretend) 1
(out 3
(sometimes 10
(rc 8
(probably 1
(p2.c) 1
(sometimes, 1
(rc_wait:%d) 2
(quantum 1
(p2.c), 1
(source) 1
(ready 4
(quickly) 1
(p5). 1
(spinning 2
(real) 1
(recall 1
(particularly 7
(start 2
(reduction 1
(remember, 1
(privileged) 1
(stop 1
(remember: 2
(right) 2
(probabilistic) 1
(stride=100) 1
(required 1
(roughly) 2
(probably) 1
(stuck 2
(result: 1
(sched 1
(probably), 1
(studied 1
(resulting 1
(scheduling) 1
(pthread_create) 2
(t0.c) 2
(running 1
(shown 5
(pthread_join) 2
(taking 2
(running, 2
(simplified) 1
(read 1
(thank 1
(runtimei 1
(size 1
(reduced 1
(they 3
(said 2
(size=200) 1
(regardless 2
(think 5
(say 17
(sorry!). 2
(sadly). 1
(too 1
(say, 11
(specifically). 1
(seconds) 6
(trustingly) 1
(see 12
(shaded 1
(si 1
(turned 1
(stop) 1
(similar 3
(some 1
(upon 1
(stride=200) 1
(size: 1
(such 25
(use_ptr 1
(starting 3
(somewhat) 1
(t1.c) 2
(using 9
(still 1
(store 1
(that’s 3
(v 2
(swapd) 1
(stride=40) 1
(though 6
(version 1
(switching 1
(thanks 1
(to 10
(void 12
(target) 1
(that 5
(too) 1
(way) 1
(there 3
(that, 2
(turning 2
(web 2
(this 4
(untimely?) 2
(when 3
(the 61
(thread 6
(user 3
(who 2
(threads.c) 1
(through 1
(usually 7
* 17
(thus 9
(tiny) 2
(usually, 1
**value_ptr); 2
(too!) 2
(tmp 1
(v9 1
*H, 4
(usually) 2
(total) 1
(virtual 1
*L, 8
(v1) 3
(turn 2
(waiting 2
*abs_timeout); 2
(via 6
(unrealistically 1
(we’ll 2
*c) 18
(virtual) 3
(unused) 6
(where 12
*cond); 2
(we 2
(use 1
(whether 2
*cond, 2
(what 4
(v2) 1
*curr 4
(which 39
(with 21
(without 1
*d 1
(which, 2
(va.c) 1
(word 3
*kstack; 1
(yet) 3
(value 2
(worst-case 1
*mutex) 12
). 3
(vruntime). 1
*) 23
*mythread(void 12
(write) 1
(wait 1
*), 2
*old_ptr 2
(you’ll 1
(wc). 1
**old, 1
*old_ptr, 2
(“0101”th) 1
); 1
*(*start_routine)(int), 2
*p 6
(xchg). 2
*H) 2
*arg); 4
*p); 1
(yes, 4
*L) 4
*child(void 3
*q; 2
(you 5
*args 4
*consumer(void 5
*rvals 2
(“Buzz 2
*argv[]) 23
*dst; 1
*src 3
) 46
*head 1
*chan; 1
*thread, 2
*(*start_routine)(void*), 2
*hptr 1
*cwd; 1
*worker(void 1
**) 4
*lock) 20
*head; 4
*x 3
*/ 16
*m) 6
*input) 1
*arg) 26
*malloc(size_t 1
*x); 1
*m); 1
*attr, 2
*mem; 1
--l0 1
*myargs[3]; 2
*c); 1
*mutex; 2
--tool=helgrind 2
*parent; 1
*c, 5
*new 4
--tool=lackey 1
*ptr; 6
*current 1
*new); 1
-1); 1
*q, 4
*dst 2
*next; 6
-1, 1
*str 1
*malloc(size 1
*producer(void 5
-10 1
*tail; 2
*mutex); 8
*ptr 9
-5 1
*tf; 1
*mutex, 2
*ptr, 5
-= 1
*tmp 7
*new_head 2
*q) 2
-A 6
*value 2
*ofile[NOFILE]; 1
*value) 2
-I 6
*old_ptr; 2
+1 1
+ 45
-M 15
*ptr) 7
+= 9
--l1 1
-X) 1
*rvals; 2
, 15
--trace-mem=yes 1
+19 1
-a 41
--b0 1
- 25
-c. 1
-1) 1
--leak-check=yes 2
--b1 1
-i 18
-15 1
-C 6
-1; 8
-is-unsafe. 2
-20 2
-O 1
-1KB. 1
-m 3
-5), 1
-S 24
-5; 1
-m, 1
-> 10
-S, 1
-nw 1
-c 22
-B 4
-p) 1
-g 3
-F 3
-u 6
-R 13
-D 154
. 53
-b 3
-i. 2
-H 1
... 84
-k 2
-f 1
..., 2
-L 18
-o 9
-l. 1
./fork.py 4
-pthread; 2
-P 19
-n 19
./main 6
-s 21
-Wall 7
-r 5
./p1 2
-t). 1
-d 2
-v 17
./random 3
.... 1
./multi.py 4
-l 19
./x86.py 14
................ 1
./p2 1
-l, 1
.globl 1
./array 1
/ 1
-p 44
./main-two-cvs-while 2
/proc 1
-pthread 5
./mem 5
0). 2
./p3 1
-t 20
0,0,0,0,0,0,1:0,0,0,0,0,0,1:0,0,0,0,0,0,1 1
.EXE 1
...; 1
0,0,0,1,0,0,0:0,0,0,1,0,0,0:0,0,0,1,0,0,0 1
//acquire 4
./cpu 5
0-9), 1
/bin/ls. 1
./main). 1
// 294
0.1 2
/proc/meminfo; 1
./p4 1
0+ebx 1
00000000019d5000 1
./process-run.py 2
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 1
00007f4e7d2d0000 1
0. 11
./thread 3
00007f4e7d932000 1
0.0 2
/* 16
0111 1
0.1). 1
/dev/zero 1
03 1
0.10). 1
/proc/meminfo 1
07 1
0.4 1
0% 5
0 384
0.8 1
0(%eax) 2
0) 40
00007f4e7d508000 1
0); 8
0), 1
0011 1
0+5+10 1
0; 116
0+1+2 1
0101 1
0? 3
0-byte 1
0, 55
0110 2
0x03, 1
0.03 2
0,0,0,0,0,0,1? 1
02 1
0x1024 1
0.5. 1
0.001), 1
06 1
0x1096008c0 1
0.9. 1
0.2 1
0: 4
0x30 1
0001 1
0.6 1
0x00000FFF, 1
0x300, 1
0010 1
00 4
0x068, 1
0x3000, 1
01 2
00, 1
0x200, 1
0x37) 1
01, 2
0000 14
0x200000 4
0x700, 1
0100 1
0000000000400000 1
0x600, 1
0x7ffe1033b8f4 1
05 1
00007f4e7cf06000 1
00007f4e7d731000 1
0x900. 1
09 1
0x7fff691aea64 1
010000; 1
0xC0000000 2
0KB 13
0x80000000)) 2
04 2
0xC0000000, 1
0] 4
0x8049a1c 6
08 2
1)) 2
0th) 1
0x8049a1c, 8
0th 2
1-GB 1
0x0(%ebx) 1
1% 1
0x0(%ebx),%eax 1
0x0(%ebx), 2
1. 43
0x000, 1
0x0DC0. 1
1) 52
1.0 1
0x00000000 1
0x100, 1
1), 5
1.0, 1
0x00000000, 1
0x3C00). 1
1-byte 1
10. 7
0x03e8, 1
0x3F80, 1
1-second 1
10.2: 1
0x1095afe50 1
0x500, 1
1.0; 1
10.4 1
0x200000. 1
0x7ffd3e55d2b4 1
1.3.37 1
100%), 1
0x400, 1
0x8049a1c). 2
10% 5
100. 6
0x7ffe45522e94 1
0xC0000FFF 1
10) 2
1000. 2
0x800, 1
0xFFFFFFFF) 1
10), 1
1024 10
0x80000000 2
10-byte 1
1024, 1
0x8049a1c. 2
10-ms 4
1028 1
0xBFFFFFFF 1
10.1: 1
104. 1
0xFFF. 1
10.3 1
10:1,10:100). 1
1). 6
10.7 1
110000) 1
1.0001 1
100% 5
1101 2
1.00] 5
100%, 1
1110 2
10). 3
100) 3
11–12), 1
1 461
10+20+120 1
100), 1
1); 4
10+20+30 1
100ns 2
12 89
10-entry 1
101 4
12(%eax) 1
10.1 2
1, 80
1032 1
12(%eax), 1
10.2? 1
1036 1
12(3), 2
10.3. 1
105 6
12, 2
10.3: 1
109 1
12-bit 2
10.5 1
1.01] 203
120 9
100%. 1
1.2.1) 1
12000 1
100). 2
100+(110−10)+(120−10) 1
128 13
100+110+120 1
11 110
128, 1
1000). 1
110 2
12:6, 1
1000; 1
10 165
110, 1
13.1 2
1000s 1
10); 1
1100 3
13.2; 1
100? 1
10, 14
111). 1
13.3: 1
100K 1
10,000 8
11916, 1
13.5 1
100s 1
10,000,000 2
12). 1
135: 1
101. 2
10.1), 1
1234567)) 1
137, 1
103.33 1
10.2 1
128; 1
14. 4
1030 1
10.6 1
13. 2
14.4 1
105-117, 1
13.2: 1
143012 1
107 1
13.4 1
100 87
14949, 1
1074 2
132 2
100); 2
15) 4
108). 1
137298 1
100, 6
15), 1
10; 2
13: 2
100,000 1
15.1. 1
11. 3
13:4, 2
100,000, 1
15.1: 1
1111 7
14.3 1
100-bytes 2
15.3 1
112 2
14.7 1
1000 10
15.3, 1
1124 2
14:7 1
1000, 5
15.5: 1
115–116, 2
14KB 2
100000 2
152K 1
12) 1
100:100,100:100), 1
15:3, 2
1234567 7
100byte 1
15KB 7
128) 1
1024. 3
15KB, 1
128-Byte 1
15 96
104 1
128-byte 2
15, 7
108 11
128KB 1
15.2 3
10ms, 1
12:7, 1
16 92
15.4: 1
10th 3
16(%eax) 1
15.6 2
11). 1
13 93
16(%eax), 1
150 10
110). 1
13); 2
16.2 2
16.1 2
1110101 1
13, 2
16.4: 2
16.1, 2
11168, 1
13.1), 1
16.6 3
16.3: 1
113 4
13.2 2
160 2
16.5 1
117, 1
13.2, 1
16KB; 1
16384 1
1174 1
132: 1
17.1 1
16384, 1
11:1, 1
13:2, 1
17.3. 1
16492 1
11:5, 2
14). 2
17.3: 1
16708 2
11–19 1
14.1 1
17.5 1
16K 1
12. 2
14.5 1
17.6). 1
16KB)1 1
120. 1
148K 1
17.7: 1
16k 5
1224 1
15. 1
1780K 1
17.1). 1
1277, 1
15.2. 1
179–180, 1
17.2. 1
128: 2
15.2: 1
17:10, 1
17.2: 1
13.1: 1
15.4 1
18.2: 1
17.4 1
13.3 2
15.6: 1
18.4 2
17.6: 1
135 2
1586, 1
18.6: 1
17.8, 1
13–14). 1
16), 3
184–199. 1
170. 1
16-byte 4
19.1: 1
172, 1
14 71
19.3 1
16.1. 1
1792K 1
14, 2
19.3, 1
16.1: 1
17: 1
14-bit 4
19.5: 1
16.3 2
17:4, 1
14.2 1
19.7 1
16.5. 1
18.1: 1
14.6 1
1956. 1
16.5: 1
18.3 1
140 2
1961. 1
16.7 1
18.5: 1
143,012. 1
1963, 1
16500 1
18.7 1
14KB; 1
1965. 6
15). 1
16KB 24
1969. 3
15.1 2
19 58
16KB, 1
1970. 4
15.3: 1
19.1), 2
1970’s 2
15.5 2
19.2 2
1974. 3
15:5, 2
19.4. 1
17 66
1978. 5
16.1). 1
19.4: 1
17, 1
1980’s; 1
16.2: 1
19.6 1
17.2 1
1983. 4
16.4 1
1957 1
17.4. 1
1987. 1
16.6: 1
1959. 1
17.4: 1
1992. 4
16KB] 5
1960. 1
17.7). 1
1996. 4
17.1: 1
1960’s 5
17.8: 1
1998 2
17.3 1
1960’s, 2
170 3
1: 7
17.5. 1
1962 2
1793, 1
1KB) 1
17.5: 1
1964. 2
18). 1
1Note 2
1966 1
18.1 2
2) 7
1968. 11
18 54
18.3: 1
2), 3
1973. 2
18, 2
18.5 2
2- 1
1982. 7
18-bit 1
18.7: 1
2.1: 1
1986. 1
18.2 1
1800s, 1
2.3 1
1990). 1
18.2, 3
19.1). 1
2.4). 1
1990s, 1
18.3). 1
19.2: 1
2.5: 1
1991. 9
18.4: 1
19.3), 1
2.7 3
1995. 6
18.6 2
19.4 1
20% 7
1999. 1
18705, 1
19.8 1
20), 1
1:0,4:100 2
18–21); 1
1928 1
20.1: 1
1Each 1
19). 2
19345221) 2
20.3 2
19.1 2
1KB 13
1957. 1
20.5: 1
19.3: 1
1KB, 1
1959 1
2000) 2
19.5 2
1] 4
1960’s. 1
20000000) 2
19221041) 2
1m 6
1962. 7
2003. 4
192KB 1
1963.” 1
2007. 3
19384 1
1964 1
201 4
1945. 1
1966. 3
2010, 2
1949. 1
1968 2
2014 1
1950’s 1
1970; 1
2015). 1
1954. 1
1970s 1
2016. 1
2 257
1963. 2
1971. 1
2018, 1
1965, 1
1975. 2
2, 38
20KB 2
1970 1
1979. 2
2-MB 1
1970’s. 1
1980. 1
2-bit 1
21 45
1972. 5
1980’s, 2
2.2 2
21, 4
1980s 1
1988. 2
2.4: 1
21-bit 1
21.1), 1
1991, 1
2.6 3
1981. 7
21.2 2
1993. 6
1985. 2
21.2, 1
1997. 5
1989. 5
21.6 1
1:0,4:100. 1
20 95
1990. 2
214 1
1:1, 3
20(%eax) 1
1992.. 1
218 1
20(%eax), 1
1994. 1
22.1 2
20); 1
1; 42
1996 3
1998. 2
20, 3
1? 1
22.10 1
1We 1
20-bit 3
1K 1
22.3: 1
1ms, 1
20.2 1
2). 7
22.5 2
1KB. 1
20.4: 1
2.1 2
22.7: 1
1MB 1
20.6 1
2.3: 1
22.9 1
1e7; 2
2.5 1
200 24
2212 1
1k 9
2.9 2
200, 3
22–23), 1
1” 1
20-29): 1
200,000, 1
23.2: 1
20.1 1
200-MHz 1
24113 1
2. 29
20.1); 1
2000 15
24KB 3
2.2: 1
20.3: 1
2000, 1
2.3) 1
25 33
20.5 3
2002. 1
2.4 1
250 5
20.6). 1
2006. 6
2.5). 1
250, 1
2000; 2
2011. 7
2.6: 1
254 3
2001. 1
2013, 1
20,000,000. 2
26.1 2
2003, 2
2015. 1
20. 1
26.1, 4
2005. 9
2015/02/10/understanding-glibc-malloc/. 1
20.2. 1
26.3: 2
2007, 2
204 3
20.2: 1
26.5 4
2008). 1
20th 1
20.4 2
26.7: 2
21.1 1
20.5). 1
27.2. 2
21.3: 1
20.6: 1
27.2: 2
21.5 1
200. 3
2008–19, 138
27.4 4
21:1, 5
2000. 9
272, 1
21:10, 1
2008–20, 49
28.10: 2
2004. 7
22.2: 1
2008–18, 5
28.12 2
2009. 5
22.4 2
2013. 4
28.16 2
2010. 7
22.6: 1
2015, 1
28.1: 2
2016 1
22.8 2
2017. 2
28.3 2
2016.. 1
23.1. 1
2018), 1
28.5. 2
203 1
23.1: 1
202 1
28.5: 2
21.2: 1
23.3 1
21.1: 1
28.7 4
21.4 1
21.3 3
24 37
28.9: 2
21: 1
21.3, 1
24(%eax) 1
28KB 2
22.12 1
21.7 1
24(%eax), 1
28KB, 1
22.1: 1
215, 1
24-bit 1
22.3 1
29 25
24:2, 1
22.5: 1
29, 3
25%. 1
22 38
22.7 2
29.10) 2
256-byte 1
22, 1
22.9. 1
29.11 2
256KB 1
22.11 1
22.9: 1
29.2 4
256m 1
22.2 1
29.3). 2
26.2: 2
22.2, 1
29.4: 2
23 37
26.4 4
22.3). 1
29.6 2
23, 2
26.6: 2
22.4: 1
29.8: 2
23-bit 1
27.1. 2
22.6 2
29147 2
23.2 2
27.1: 2
22.8: 1
2:70, 1
23:2, 1
27.3 4
220 1
2Fortunately 1
25. 1
2KB 8
28 33
23.1 1
254: 1
2Q 3
28(%eax) 1
23254, 1
24. 1
2] 2
28(%eax), 1
256 6
24114 1
2m 1
28.1), 2
26.1: 2
25% 1
2”. 2
28.11 2
26.3 2
2501, 1
28.15 2
26.3, 2
255 2
28.2 2
26.5: 2
28.4. 2
26.7 4
26 32
28.4: 2
26KB, 1
26, 1
28.6 2
26.2 4
28.8: 2
3 231
26.4: 2
29.1 2
27 32
3); 1
26.6 4
29.3: 2
27.2 2
27.1 2
3, 25
29.5 6
27.2, 2
27.3: 2
29.7: 2
27.4: 2
30 31
27.5 2
29.9 2
27.6 2
30, 3
27KB. 2
29267 1
28.1 2
30-bit 1
28.10 4
29384 1
28.13 2
30.11 1
28.14 2
2KB). 1
28.17 2
30.13: 1
28.2; 2
2This 1
28.2: 2
30.15 1
28.3. 2
2github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
28.4 2
30.2 1
28.3: 2
3). 5
28.6. 2
30.4: 1
28.5 2
3): 2
28.6: 2
30.5) 1
28.7: 2
3.33). 1
28.8 4
30.6 1
28.9 4
30.1 1
28KB1 1
30.8: 1
28.9, 2
30.12: 1
29.1. 2
300 4
28K 3
30.3: 1
29.10: 2
300, 2
29.11: 2
30.4) 1
29.1: 2
3000 4
29.2: 2
30.7: 1
29.3 2
3000, 1
29.4 4
30.8), 1
29.5: 2
3121, 2
29.6: 2
30.9 1
29.7 2
32896; 1
29.8 2
3000; 1
29.9: 2
335, 1
29146; 1
320KB 2
2: 3
34 12
29154, 1
32KB 5
2KB), 1
3412382, 1
2; 5
32KB, 1
2N 2
33 12
2K 6
372K 1
2’s 1
34K 3
2k 1
37 8
3) 2
38 8
3-GHz 1
3906, 1
3), 3
39016, 1
3:50,3:50. 1
30-byte 1
3. 32
3B: 3
3; 3
30.1. 1
30. 2
4). 7
3A: 2
30.10: 1
30.10): 1
4.1 1
3K 3
30.12 1
30.11: 1
4.3: 1
3KB. 2
30.13). 1
30.14). 1
4.5 2
3KB: 1
30.14: 1
30.15: 1
400MB 1
3” 1
30.1: 1
30.2. 1
4096 3
4(%esp), 2
30.3 1
30.2: 1
4096, 2
4-GB 1
30.5: 1
30.3) 1
4146 1
4-KB 3
30.7 1
30.4 1
43 8
30.9: 1
30.6: 1
4. 27
47 2
300), 1
30.8 1
4.1). 1
49).” 1
300. 3
4.2. 1
31 21
4:1, 1
31) 4
4.2: 1
32-bits 1
4:10, 1
4.3) 1
32K 3
32k 6
4MB 2
4.3BSD 1
32 33
34920. 1
4a: 1
4.4 2
32, 1
34KB 1
4k 1
4.8 1
32-bit 16
35 12
40%) 2
324 1
36.4% 1
5. 27
40. 2
32868. 2
36K 1
5.1; 1
36 11
4088. 1
3764 4
5.2: 1
36, 1
42 7
384KB 1
5.4 2
36291, 1
4200 4
39 11
50. 1
3752 1
4200, 1
3980 3
5121024 1
3764-byte 3
44:1/2. 1
3:50,3:50 2
54.5%. 1
3: 3
46273, 1
3A 1
56, 1
3:0,5:100,5:100,5:100 1
4: 2
3KB 3
5: 2
3One 1
4b 4
3Like 1
5→0 2
4) 2
4b, 1
3] 1
6) 5
4), 2
5% 3
3a); 1
6.1: 1
4-byte 3
5(2): 1
6.2) 1
6.3 1
5) 3
4.1: 1
60% 4
5), 5
4.3 1
6100, 1
5.1: 1
4.5: 1
64-Byte 1
5.3 1
40% 5
64-bit) 1
5.7 1
40-ms 1
4 164
64-byte 7
50) 1
40050 1
4(%eax) 1
64GB 1
50), 1
64KB 9
4(%eax), 1
40100 1
50-ms 2
6= 2
4, 5
4088), 1
6KB 1
4-bit 3
51 18
40KB 2
4.2 1
51, 3
41 10
4.3). 1
55 1
423, 1
4.4: 1
56483, 1
448KB 1
4.6 1
7 127
5:100,5:100. 1
45 6
7); 2
5KB 1
45, 1
40 28
7, 2
5–7), 1
48KB 4
40, 2
7.2 1
49 1
400 1
7.2, 1
49, 2
4000 3
7.4. 1
4904, 1
4000, 1
7.4: 1
4:3, 1
40000 2
7.6 1
4GB 1
4088 1
7.7). 1
4096-byte 1
4KB 16
7.8: 1
6 116
4196 1
4KB, 3
70 2
4a 4
44 6
6+5 1
70, 1
4m 1
4400 1
6.2 1
7282 1
4page 1
44000 1
6.4: 1
48 9
7332 1
4:100,1:0. 1
7354 1
60 13
4K) 2
74 1
6000, 1
4KB). 2
7620, 1
4MB) 1
8.1 1
64 17
4MB), 1
8.3: 1
64, 1
4b: 1
8.5 2
5). 6
64-bit 10
8.7: 1
5.1 1
68 1
80-20 4
5.3: 1
7). 2
5 169
82% 1
5.5 1
7.1 1
5, 6
83 1
50? 1
7.1, 1
5.2 2
85.7% 1
51. 4
7.10 1
512 9
87, 1
5.3). 1
7.3: 1
549–557, 1
8:10, 1
5.4: 1
7.5 2
55. 1
8k 1
5.6 1
7.6). 1
56KB 2
9. 9
7.7: 1
57.1% 1
9.1). 1
7.9 1
9.2: 1
70%. 1
50 46
6. 20
9.4 2
7232 1
50, 5
6.2: 1
9.8 1
73-96, 1
50,000 2
6.4 2
96 2
7353 1
500 4
62 2
99% 2
78-101, 1
5000, 1
655, 1
991 1
8-page 1
50th 1
7) 3
; 25
512-byte 1
8. 12
7), 3
;load 1
512KB 2
8.1). 1
7.1: 1
<fcntl.h> 2
512m 7
8.2: 1
7.3 2
52. 2
<stdio.h> 15
8.4 2
7.5: 1
526, 1
<string.h> 2
8.6: 1
7.7 1
59–73, 1
<sys/types.h> 1
820, 1
7.8). 1
5th 1
<sys/wait.h> 3
846 1
7.9: 1
6). 1
<unistd.h> 6
86 2
7094 1
6.1 2
<value>\n"); 1
88761, 1
7355 1
6.3. 1
<virtual 2
8KB) 1
75 3
6.3: 1
>= 5
9) 1
? 9
6.5 1
76–86, 1
63 3
9), 1
7KB 3
64). 1
A. 29
9.1: 1
64-bits); 1
A2 1
9.3 2
64bit 1
A2, 1
9.5. 1
64k 1
9.5: 1
A: 13
8 109
9.7 1
7. 16
ABOUT 1
8(%eax) 1
90% 1
7.2: 1
ACM. 2
8(%eax), 1
90%, 1
7.4 1
ADDRSORT, 1
8(9):569, 2
9548, 1
7.6: 1
AFIPS 4
8, 1
7.8 1
99 7
AMAT 4
8-bit 3
7.9). 1
99, 1
AMAT, 1
8.2 2
70–76, 1
99.9% 1
AME 1
8.4: 1
71755, 1
8.6 2
AN 18
7356 1
AND 6
80 18
75% 1
ANGRY. 1
9). 1
76 1
APIs. 1
9.1 1
8) 3
APPING 1
9.3: 1
8), 1
ARGE 1
9.5 1
8-byte 1
93 1
8.1: 1
ARPACI-DUSSEAU 38
9” 4
8.3 2
AVOID 7
;add 1
8.5: 1
About 5
;store 1
8.7 1
Abstract” 1
< 24
AccessMemory(PhysAddr) 6
80% 7
<< 9
Accounting 1
801, 1
<pthread.h> 8
Actually 4
8049a1c,%eax 4
: 289
Actually, 1
>> 11
85 1
@ 8
Adam 1
<assert.h> 4
A1’s 1
8KB 6
Adding 7
A; 2
<stdlib.h> 9
Address-space 1
AIN 1
Afraid 2
ALLS 2
Aha! 1
ANAGE 3
Ahead 2
ANAGEMENT 17
Algorithm 5
ANDLE 1
Allocator: 1
ANDOMNESS 1
Also 10
ANY 1
Also, 1
== 91
9 119
> 5
API. 5
9, 6
A) 2
ARM 2
An 65
9-bit 2
A), 2
AS 10
9.2 2
A1 3
ASIDE: 4
9.4: 1
ABCABCABCABCABC 1
ASIDs, 1
9.6 1
ACHING 1
ASPLOS-IX, 1
And 108
90 1
ACKGROUND 1
ATC 2
And, 2
940 1
AIX 1
ATTACK 1
Andrea 7
9:2, 1
ALGORITHMS 1
AW 5
Annual 1
<string>\n"); 1
AM 2
AZY 1
Anomaly. 1
<sys/time.h> 1
AMD 1
Abstraction: 3
Anticipatory 2
AMPSON 1
AccessMemory(PDEAddr) 1
Applications 4
AccessMemory(PTEAddr) 4
Approximating 1
Accessing 2
Approximation 2
Accurate 1
Architecture 9
Addison-Wesley, 11
Argument 2
AddressOfPTE 1
API 62
Arpaci-Dusseau 3
Again 2
API, 1
Arpaci-Dusseau, 10
Again, 3
ARC 1
Array 4
Alan 3
ARC, 1
Art 3
Allocation: 2
ARDWARE 2
Assuming 10
Allocators 1
ASLR 1
Atlas. 2
Allocator” 2
ASPLOS, 1
Atlas: 3
Almost 1
Atlas”; 1
Atomically, 2
ATA 21
Although 16
Atomicity 2
AUSE 1
Alto 2
Attacks 1
Abdel-Wahab. 1
Amazing! 1
Attempt 3
Ability 2
Amazingly 1
Abstraction 2
Amazingly, 4
Available: 29
Amazon’s 1
Access 9
Average 1
Analysis 5
Accesses 2
Avere 1
And...? 1
Account.html. 2
Award 2
Anderson. 1
A’s 7
Achieving 2
Answer 1
A’s, 1
Act. 1
Any 3
B) 3
Apparently 1
B-tree 2
Apparently, 2
= 415
B-tree, 2
Address 25
Apple’s 1
B1 1
Advanced 1
Approach: 5
B5000 4
Affinity 1
April 10
BASED 17
April, 3
BE 1
After 21
Are 6
BFS 1
Aleksey 3
ArpaciDusseau. 1
BFS, 2
Algorithms 4
Arrivals 1
BIQUITY 1
Algorithm” 1
Artificial 1
BSD. 1
Allocated] 2
Bad 3
Allocating 1
Base 3
Allocation 3
Base-and-bounds 2
Allows 1
Basu, 1
Alpha, 2
Be 5
Alternatives 1
Amazon, 1
Analysis: 1
Before 21
Anderson, 2
Before, 2
As 158
Andreas 2
Beginning: 1
Atlas” 1
Android), 1
Belady. 1
Atlas”, 1
Animal 1
Belady’s 2
Austin 3
Antoine 1
Bell 2
Austin, 1
Anyhow, 1
Berger 2
Authors: 1
Anything 1
Berger, 2
B+96, 2
Appavoo, 1
Berkeley 7
B-Trees: 1
Apple 3
Berkeley, 2
Apple, 2
Beth 1
B. 18
Applications” 1
Bill 1
Approach 1
B: 12
Bit 3
Approaches 1
BAD! 2
Bit-precision” 1
BF 2
Approximate 10
Björn 1
BUCKETS; 2
Aq 1
Block 9
BUILD 1
Architectures 4
Bobrow, 2
Baby: 2
Architecture” 3
Boles. 2
Bach. 1
Aside 1
Bonwick. 1
Base[SN] 1
Ask” 2
Boost 2
Basically, 5
Bosch, 1
Battle 1
Bounds[Segment]) 1
Boyd-Wickizer, 3
Assume 33
Broken: 1
Assume, 3
Buffer) 1
Because 50
Assumptions 3
Benchmarking” 1
A’s). 1
Bertinoro, 1
Beyond” 1
But 49
Bigger 1
But, 7
Blasgen, 1
Blocked 4
Boot 1
Borg. 1
Bovet 2
By 58
Bovet, 1
B’s). 1
Bradford 2
Brian 2
Brooks 1
Bryant 4
A 728
Buddy 1
BufferOverflow.pdf. 1
Build 4
A, 16
Burchfiel, 2
A2’s 1
B 157
Burnett 1
ACE 1
Buy 1
ACHE 1
Bye 1
B, 22
B’s 8
ACM 11
B-trees); 2
C) 3
C 212
B-tree” 2
ACM, 19
C), 5
C, 12
B97, 2
ADD 1
C-callable 2
C.H. 1
BEST 1
AKE 1
C-language 1
CFS” 1
BETTER 1
ALICIOUS 1
C.A.R. 1
CHEDULERS 1
BOUT 1
ALLOCATED 2
C9 1
BSD) 1
ALWAYS 1
BUCKETS], 4
C95]. 1
AMAT: 1
CHEDULING 50
Baby 2
CA, 7
CODE 2
APIs 10
Background: 1
CACM 1
COMPCON 1
APIs, 4
Balakrishnan 1
CACM, 5
CONCURRENCY 3
Baron, 1
ASID 9
Barton 3
ASID, 1
Base[Segment] 1
CONCURRENT 15
Basic 10
Batch 1
CFS 40
Baumann, 1
CFS, 3
CONDITION 19
Behind 4
CHEDULER 1
CONDITION, 1
Best 2
CISC. 1
CPU). 1
Better 4
CLOCK 2
Better, 1
CPU; 11
COND 2
Between 2
CPU? 11
Bhandarkar 1
Big 2
ASY 154
Birrell. 2
AT 1
Bits 1
AT&T/Bell 1
Blocked: 1
ATOMIC 2
CPUs 37
Blumofe, 1
AUER 1
Bone: 2
Above 3
Boneh. 1
CPUs, 14
Abstractions 1
Brinch 7
CRITICAL 1
Acta 1
Brooks. 2
Cache-Affinity 1
Adaptation 1
Buddy-managed 1
Caches 3
Buffer 9
Ah 1
Cache” 1
Building 5
Ah, 2
Bus 1
Calls 4
Ajay 2
Butler 3
Candy 1
Al 8
Butter 2
CPU 255
Certainly 1
Algorithms” 1
Buttlar, 2
CPU(s) 1
Certainly, 2
B’s. 1
All 21
Cesati. 3
C; 2
Allocate 3
Chapter 1
CPU, 33
CHEDULE 2
Allocated 9
Chile. 1
CPU-bound; 1
CISC 7
Allocation” 3
Chou, 1
CPUbound 1
CISC, 1
Allocator 1
Cilk 1
CPUs) 1
CONDITIONS 1
Along 2
Clark. 1
CPUs), 1
CPU-intensive 4
Alternately, 2
Claypool 1
CR3 1
CPU-optimized, 1
Always 4
Clear 1
CREATE 1
Andrew 4
Clements, 3
CPU. 31
CRUX: 6
Anita 1
CPU: 1
CVs 2
Annals 1
Code 24
CPUs). 4
Anomaly 2
Cache 18
Code00 2
CPUs; 2
Anoop 2
Caching” 1
Coherence” 1
California, 6
CPUs? 3
Colorado, 1
Another 38
CS 1
Call 8
Com-puting, 1
Approach” 3
Calculate 1
Canada, 4
Comes 1
Architecture. 1
California. 3
Candea, 1
Comment 2
Architecture: 4
Callers 2
Canyon 1
Calling 8
Aren’t 1
Compare-And-Swap 2
Case 4
Cambridge, 2
Arpaci-Dusseau. 3
Compare-and-swap 2
Case, 1
Came 2
Assign 1
Compared 2
Cassandra, 1
Assignment 1
Chapman 2
Can 40
Computer 20
Characteristics 1
Canada. 2
At 31
Computer, 6
Chemistry, 1
Carl 5
Atlas 10
Concepts 2
Child 1
Certain 1
Atomic 2
Conceptually, 2
Chunks 2
Change 4
Attempt: 4
Concept” 1
Clearly, 9
Charles 1
August 5
Concurrency 1
Clock 2
Check 8
August, 1
Clustering 1
Child: 2
Automatically 1
Concurrent 25
Coalescing 2
Christenson. 1
Available 8
Condition 6
Coarse-grained 1
Circuitry 1
Avoiding 1
Conference; 1
Cobham. 1
Classic 1
Award. 1
Consider 2
Cobham’s 1
Clayton 1
B). 2
Control: 1
Coding 1
Close 2
B.W. 1
Controlling 2
Coherence 1
Coffman 1
B1’s 1
Conway. 1
Come 3
Commu-nications 1
B5000: 2
Cores” 2
Come, 1
Compilers 1
B86], 1
Corporation” 1
Compacted 3
Compiling 2
B; 1
Could 1
CompareAndSwap(int 2
Completely 5
B? 1
Couleur 1
Comparing 2
Completion 4
BFS. 1
Couleur, 2
Compatible 1
Computers 2
BSD 3
Counters 8
Complex 1
Computers, 3
Counting 2
BSTRACTION 20
Concurrency), 1
Computer” 5
Creation: 1
BUCKETS 2
Conditions: 1
Computing 4
Critical 2
Babaoglu 1
Conference 1
Computing, 3
Crockford’s 2
Babaoglu, 1
Concept: 1
Conference, 7
Culler, 2
Bairavasundaram, 1
Concurrency? 1
Considered 2
Currency 1
Bart 2
Conditions 1
Contents: 1
Current 3
Base/Bounds 1
Consistency 1
Corbato. 1
Cutler, 1
Base/bounds 2
Contents 1
Corbato’s 1
D.B.G. 4
Bayer. 1
Contrast 2
Cores 1
DBMS), 1
Became 1
Conversely, 3
Corporation 1
DO 1
Begin 1
Convoy 1
Corporation, 1
DVICE 1
Being 3
Corbato 4
Correcting 1
Daily 1
Belady 3
Corbato, 5
Costs 1
Daley 1
Belady, 1
Davis 8
Counter 6
Corporation. 1
Below 2
DeWitt. 1
Countermeasures” 2
December 8
Berkeley. 1
Correct 4
Cox. 1
Deciding 1
Bershad, 1
Correspondingly, 1
Craft 1
Delete 1
Corwin, 1
Beyond 14
Create 3
Denning 1
Counters” 2
Binary 1
Critically, 1
Dennis. 1
Cox, 1
Bits” 1
Cup 1
Detail 1
Create: 1
Black 1
Cybertron 1
Detection 1
Cups” 1
Boilen, 2
Deterministic? 1
Custer 1
Bonwick 3
Deuterium” 1
Custer, 1
Boston 1
Development 2
Boston, 3
Development, 1
D. 33
Dick 2
D.R. 1
Both 7
Dickey. 2
D 109
DATA 16
Bottom 1
Different 5
D, 2
DOO 1
Bouron 1
Dijkstra; 1
D.H.J. 1
Direct 8
Bouron, 1
DOS 1
DD 1
Disk 5
Broken 3
Dahm 4
DEC 3
Distributed 5
Brother” 1
Darago, 1
DEKKER’S 1
Bruce 1
Do 18
DRAM 1
Data 13
Buffer” 1
DRAM, 1
Deadline 2
Does 29
Burroughs 5
Daggett, 1
Death 1
Douglas 1
Burroughs, 1
Data: 2
Decepticons1 1
Butenhof. 2
E. 20
Dave 3
Decision 1
C++ 2
EALLY 1
Dekker, 2
David 19
EC-11, 1
Dennis) 1
C. 24
David, 2
EC-11:2, 1
Depending 2
C.J. 1
Dead: 1
ECHANISMS 11
Descheduled 1
C: 2
Dealing 1
EEDBACK 11
Design 3
CCESSES 1
Debugging 2
Design, 1
EGMENTATION 12
CCS 3
Decay-Usage 1
Despite 1
ELADY 1
CFS) 1
Dekker’s 6
Details 1
END, 1
CMU 1
Department, 1
Determining 1
ERFORM 1
CONCURRENCY: 15
Destroy: 1
Dharmendra 1
ERMS 4
CONTROL 2
Detailed 1
Dialogue 3
ESS 1
COW 3
Developer’s 4
Digital 2
ESTRICTED 1
CPU), 6
Diego, 4
Dijkstra. 9
ETTING 1
CPU-bound 2
Dijkstra’s 5
Dijkstra 12
EVELOP 1
CPUintensive 1
Discusses 2
Dijkstra, 4
CPUs. 7
Donald 1
Dilemma” 1
CPUs: 1
EYOND 27
Done 1
Dirty 2
CV 2
Ed2.pdf 1
Druschel, 1
DisableInterrupts(); 2
Caching 1
Edward 2
E) 1
DiskRead(PTE.DiskAddr, 1
Caching, 1
Electronics, 1
EAD 1
Distribution 1
Capel 2
Emacs. 1
EAKED 1
Distribution, 1
Casting 1
Embedding 1
EAL 1
Doctoral 1
Center, 1
EnableInterrupts(); 2
EARN 1
Doesn’t 1
Chang, 1
Engineering 1
EASON 1
Donkey. 1
Cheap 1
Envision 1
Chevalley, 1
Don’t 17
Evans. 1
Chunk 1
EASY 38
Download 4
Every 1
Cilk-5 1
EC2 1
Dr. 1
Evict 4
Class? 2
ECIDE 1
D′ 2
Cocke 1
Examine 9
ECTION 1
E.W. 2
Cocke, 1
Examples 3
EDUCE 1
EALING 1
Code: 2
Exception 1
EE 1
Execute 7
Cohen, 1
ECESSARILY 1
EKKER 1
Extract 1
Commodity 1
FAULTS 2
ELOCATION 2
FIFO; 2
Common 3
ECHANISM 30
EMBRYO, 1
FIFO? 1
ECHNOLOGIES 1
EMORY-M 1
Communications 20
FOR 2
ECURE 2
Compaction 2
Facebook) 1
EMORY: 26
EECS 1
Compile 1
Factor 2
END? 1
EG 1
Complete 1
Fagin. 1
EPARATE 1
EGAIN 2
Computations” 3
Fairness 2
EPLACEMENT 2
Fall 5
Compute 4
EPRESENT 1
Fill 1
Computers” 1
EMORY 36
ERSISTENTLY 1
Computing; 1
END), 1
ESIGN 1
Concurrency. 1
EXCLUSION 1
Concurrency: 2
EY 4
Conditions? 2
Easton, 1
Finally, 70
Considering 1
Easy, 2
Finding 2
Context 3
Edsger 8
Finite 1
Edwards, 4
Finnish 1
Effectiveness 1
Control 11
Firefox, 1
Elias 1
Control, 1
Fit 4
Embedded 1
Convention. 1
Flexible 3
Emery 1
Cool, 1
English 1
ERSION 166
Cooperative 1
Enough 1
ESX 2
Copper 1
Entry 3
ETERSON 1
Copy-on-write 1
EnvyFS” 1
ETTER 1
Corbet. 2
Epema. 1
Epema’s 1
Core 3
EVEL 11
Couleur. 1
Even 20
Earl 3
Covering 2
Ever 2
For 194
Earlier 2
Creating 2
Exactly 1
Forget 1
Earth 2
Creation 6
Example: 6
Fox. 1
Edition)” 2
Culler. 1
Exclusion 4
Frame 1
Eindhoven 2
Culler’s 1
Experimental 2
Fredkin, 2
Electroanalytical 1
C’s 1
Free-Space 1
Electronic 2
C’s, 2
F 36
FreeBSD 3
Emacs7 1
D) 3
F.H. 4
FreeBSD, 1
FAST 7
D.A. 1
Engineers 1
Frigo, 1
FIFO. 4
Future, 1
Environment” 4
FIFO: 1
DDRESS 25
Equipment 2
G 12
FIFO’s 1
DID 1
Era 2
G.L. 2
Facebook, 1
DMA). 1
Errors” 1
Gain 2
Factors 1
Europe(!). 1
Gaming 2
DVANCED 13
Failing 3
Evaluating 4
Gandhi, 1
Daley. 1
Fair 6
Evaluation 2
Garner 1
Daniel 3
Farm 1
Evolution” 2
Generally 1
Database 1
Fast 4
Exactly. 2
Generally, 1
Days 1
Fast, 2
Generate 2
Declaring 1
Example 18
Fekete. 2
Gets 2
Default 1
Examples”. 1
Fetch 5
Goodman. 1
Definitely 1
Excellent 1
Goodman’s 1
Definition 1
Execution 8
Gray 6
Denning. 2
Extra 1
Gray, 1
Denning’s 1
F. 8
Dennis 6
Great 5
F.J. 1
Dennis, 2
Greenfield. 1
FAULT 1
Design” 4
Grove, 3
FFICIENT 1
Detect 1
Guerraoui, 2
Devang 2
Gupta. 2
HAPTERS 1
Directory 5
HARES 1
Directory, 1
HEN 4
FIFO 37
Discovering 1
HOLD 1
FIFO, 7
Dissertation 1
HREADS 1
FILENO). 1
Dissertation, 1
HW 1
FIRST 1
Handles 1
FIRST)? 1
Figure 335
Hansen. 5
Doing 23
FLOW 1
File-System 1
Hansen’s 2
Dominion 1
FOOLISH 1
Final 4
Hard 1
Dynamic 7
Facebook. 1
FindFreePhysicalPage() 1
Hash_Insert(hash_t 2
Failure 4
Heap01 2
First-in→ 11
Hence 2
First: 1
False) 10
Herlihy. 2
Flag 2
Farrell, 2
Hill. 1
Flash-based 1
Hit/Miss? 4
Fault 4
Flesh 2
Hoare 4
Forin, 1
Hochshule 2
Framework 1
Hong-Tai 1
Frans 4
February 16
Humorously, 2
Free 8
February, 1
Hussein 1
FreeBSD” 1
Fellner, 1
Hydra” 1
Freedom 1
Fetch-And-Add 2
I. 1
French 2
FetchAndAdd(&lock->ticket); 2
Frequency 1
E 195
File 3
Friedman, 1
EASUREMENT 1
From: 1
EBOOT 1
Fujiki, 1
First 23
EFERENCE 1
I/O 86
Full? 1
ENERALITY 1
I/O, 3
Function 2
ERFECT 1
IBM” 1
G62]. 1
ERMINOLOGY 1
ICKETS 1
First, 58
GAINST 1
ESOURCES 1
IFIPS 1
Fleischmann 1
GB) 2
ETH 1
IGHER 1
Fleischmann, 1
GNU 3
II) 1
Generalized 1
Each 19
Flow 6
IME 2
Germond. 3
Earliest 1
Form 1
IMMEDIATE 2
Getting 1
Early 3
Fourth, 1
IO). 1
Gibson, 1
Ed2.pdf. 2
Francisco, 1
Efficiency 2
Go 4
Frankenstein 1
IRECT 15
Efficient 2
Goals 2
Freeing 2
IRTUALIZATION 5
Either 4
Goh, 1
ISSES 1
Eligible 2
From 23
IZES 1
Goodness, 1
Elliott 1
Idea 2
Further, 8
Gorman. 1
Emacs 1
Graham. 2
Fusion 1
Errors 3
Grows 2
Futex 2
Evans 1
G) 1
Guide 3
Everyone 1
G.A. 1
H&P 2
EvictPage() 1
GB). 1
Evolution 1
GBs 1
Examination 1
GE, 1
Experiment 1
Gates 1
H. 20
Gecsei, 1
HINK 1
FASTER 17
Geometry 2
FFICIENTLY 2
HOW 6
Get 5
Handbook 2
FILENO 1
Ginting, 1
Hank 2
Facebook). 1
Glaser. 1
If 167
Failed 2
Glenn 4
Hardware 18
Far 1
If, 9
Going 1
Harmful” 2
Farm” 1
Implement 4
Golding, 1
Harper 1
Faster 2
Gollum, 1
Harry 2
Feedback 5
Gruss, 1
Hash_Init(hash_t 2
Festschrift 1
Guide. 1
FetchAndAdd(int 2
Figures 2
Heap 16
Find 4
Henry 1
Fine-grained 1
Follow-on 1
H 42
Forgetting 3
Here’s 4
Formalizations” 2
Hershey. 1
HARE 14
Fortunately 2
Hey, 1
HERE 1
Fortunately, 9
Hierarchies” 1
HFE-1:1, 1
Fred 1
HICH 1
Historical 4
Fun 3
HP, 1
History 4
G. 9
HREAD 12
GB 7
Hoc 2
GHz 2
GUIDELINES 1
George 2
Given 15
Golub, 1
Good 8
Good, 1
Google 2
Google, 2
Gouicem, 1
Gray. 2
Gray’s 2
HREE 154
Group, 1
HTTP 1
Growing 1
Hall/CRC 2
Guide” 1
Handle 4
HARING 2
Harcourt, 2
Hardware/Software 1
Hardware?” 1
Has 1
Hash 8
Hash_Lookup(hash_t 2
Heap: 1
Hear 1
HE 83
Heart 2
HINGS 1
Heinrich. 3
HPUX 1
Helen 1
HY 5
Here 30
How 141
HYSICAL 27
How, 1
Here, 13
Hybrid 2
Hall, 5
Hershey 1
Hydra. 1
In 387
Handbook” 1
High 2
I! 1
In, 2
Handled) 1
His 3
I/O). 3
Includes 2
I/O; 3
History: 1
Happened 2
Incorporating 1
I/O? 1
Hits 2
Hastings, 1
Incrementalism, 1
I/Os 3
Hits+M 1
Having 4
Indeed. 1
IALOGUE 4
Hive/HDFS, 1
Hawkins, 1
Inputs 1
INITIALIZER. 2
Hmm... 2
Hazelwood, 1
Instrumentation” 1
INTERLUDE: 11
He 3
Intelligence 1
Homework 28
Header 2
INTRODUCTION 15
Intel’s), 1
Hopefully 2
Heavyweight 1
IP) 1
Interludes 1
Hopefully, 4
Hennessy 3
ISTORY 1
Interposition 1
House, 1
Hill 1
IT! 1
Introduction), 1
Hovav 1
Hill, 3
Ideas 2
Invalid 2
Hint: 2
History” 1
Issue: 3
It’s 4
Hit 29
Jacob, 1
Hoare. 1
Imagine 39
Jason 1
Holding 1
Imagine, 4
Jaswinder 1
Holt. 1
However, 120
Implementation 6
Javascript 2
Home 1
Hugh 4
Inc.. 1
Jeff 3
Horn. 3
Hydra 1
Incorrectly 1
Jeffrey 1
HotOS 2
I/O) 2
Job 11
How? 1
Increase 1
I/O), 3
Information 6
Huge 2
Job:B 1
I/Os. 1
Initial 3
Human 1
IA-32 4
Initialize 3
John 14
IBM 9
Innocent 2
Johnson, 1
IBM, 1
Innovator’s 1
Jonathan 3
Instruction 4
IDs 2
Journal 7
Intel. 1
IEEE 7
Journal, 2
Interactive 1
IF) 1
K 6
IGHT 1
Interlude: 4
KB-32 2
Internals: 3
IMITED 15
KB. 4
Interrupt) 1
INITIALIZER, 2
KB64 1
I 171
INUX 1
Introduction 8
KNOW 1
I, 1
IO 7
Intuitively, 1
Kaashoek, 4
I/O-intensive 2
IRE 5
Ion 2
Kawamoto, 1
IRIX 1
I/O. 10
Isolation 1
Keeping 2
IS 1
I/O: 4
Israel. 1
Kernighan, 1
ISBEHAVIOR 1
Kilburn, 4
Italian, 1
ID 7
ISCA 4
Know 2
J 1
IST 2
L3 1
Jackson-Edwards. 1
ITS 1
LATER? 1
Idea1 1
January 14
LESS 1
Ideally, 2
January, 2
Included 1
Jiaqi 2
Index 11
Job:A 1
Induced 1
LRU 33
Jobs 2
Inserts 2
Joe 3
LRU, 11
IECES 154
Joy 2
LW 1
Instead 20
IKE 1
Joy, 1
Languages 2
Instead, 7
IMER 1
Jozef 2
Language” 2
Instinct, 1
INDETERMINATE, 1
Jr., 1
Large 2
INVERSION 1
Intel 10
Juan 1
Lauder. 1
Intel, 2
Julin, 1
Lauer. 2
Interaction 1
IP 41
June 13
Interesting 1
Lauer’s 2
June, 1
International 3
IRTUAL 19
Least-Frequently-Used 1
International, 2
Just 15
IRTUALIZE 5
Lectures 1
Interrupts 2
KB) 3
ISN’T 1
Lepers, 1
Interscience, 1
KB), 1
IT 3
Letters 3
Karels, 1
Is 14
ITH 4
Letters, 2
Ken 2
ITHOUT 2
Issues 6
Knowlton. 1
Implementation” 1
Its 4
Implementing 2
It” 1
Knuth 6
In-ternational, 1
I’d 1
Indeed 1
I’ll 3
I” 1
L. 10
Indeed, 20
L1) 1
Influenced 1
L2 1
Informatica, 1
L4. 1
Let’s 90
Ingo 1
J. 33
L60, 1
Levels 1
Instructions 1
Jain. 1
L78]. 1
Libraries: 1
Interestingly, 3
Jain’s 1
LLUSION 1
Limits) 1
Internet 1
James 1
LOW 1
Lindberg, 1
Introduced 3
Java. 1
LRU? 2
Linear 2
Inverted 1
Jim 8
LaTeX, 1
Investigator. 1
Linked 8
Jing 1
Labs 2
Isn’t 2
Linus 1
Job:C 1
Lampson 6
Isolation” 1
Linux). 5
Joe’s, 1
Lampson, 2
Issue 4
Linux” 1
Johnstone, 2
Lanigan, 4
Lipman. 4
Joint 5
Lanyue 4
List_Insert(list_t 4
Joy. 1
Larry 1
List_Pop() 1
Joyce. 1
Late 1
Lists 5
July 4
It 92
Law. 2
LoadLinked 2
K+96]. 2
Italy. 1
Learn 1
Locking 2
KASLR” 1
Iyer, 1
Length 1
Longer 1
KB). 1
I’m 5
Levin, 1
Lottery 6
KB-64 1
J.S. 1
Levy. 2
Jack 5
KB; 2
Louisiana. 1
Lighting 1
Jacqueline 2
KPTI 1
Low-level 1
Linux. 8
Jones. 2
KPTI, 1
Lu. 2
Linux’s 2
Jose, 7
Keeps 2
List: 2
Josep 1
Kernel” 1
Joseph 1
List_Init(list_t 4
Kleinrock. 2
K. 1
M. 35
Little 2
Knowlton 1
KASLR, 1
Liu, 1
M.J. 6
Knuth. 1
LoadLinked(int 2
M83]. 1
KB 18
Kuehner. 1
Loads/Stores 2
MAX) 1
KB); 1
Locks: 2
MB 1
KB, 1
Long-Running 1
MB, 1
KEY 1
Long-running 1
MBALANCE 1
L 59
KPTI) 1
Lots 2
MIN). 1
Kanev 1
L->head; 8
Low 2
MIT), 1
Kanev, 1
L4 3
Lucco, 1
MLFQs 1
Kathryn 1
LATER 1
Lynch, 2
MMU 3
LATER, 1
Kaufmann, 5
MA, 2
MMU, 1
LDE). 1
Kay 1
MALICIOUS 1
MORE 2
LISP 1
Keep 4
MANUAL, 1
MS-DOS 1
LLOCATE 1
Keith 1
MIT 5
MUTEX 2
Kenneth 2
MIT, 1
Mac. 1
LOCKS 23
MLFQ. 2
Maintenance 1
Kernel 14
LWAYS 1
MLFQ: 3
Making 3
Key 1
Lampson. 2
MMU; 1
Manual”. 1
Kleiman, 2
Lampson’s 1
MPLEMENT 1
Las 1
Knowing 3
March 14
MQMS 2
Last 1
Krieger, 1
March, 1
MQMS, 1
Later 2
Mac! 1
L->head 8
Later, 2
L1 4
Mac) 1
Mark 14
Lavington. 3
Mars 5
Macintosh 2
L4) 1
Law, 2
Martin 1
Make 5
LAW) 2
Leaks 1
Man-Month” 1
May 11
LDE 1
Learning 2
Manager” 1
May, 1
LEXIBLY 1
Lee. 1
Managing 1
McCarthy 2
LGORITHMS 1
Leffler, 1
Manchester 3
McCarthy, 2
LL/SC 2
Leiserson, 1
Marco 2
McGee. 1
LOCK 2
Levy 1
Massachusetts. 2
McGraw-Hill, 2
LOCK-BASED 15
Levy, 5
Matteo 1
Measuring 2
LRU-like 1
Library” 2
Mattson, 1
Mechanism: 2
LRU. 3
Life 1
Maurice 2
Melvin 1
LRU’s 3
Maurice, 1
Limited 6
Membrane 1
Maybe 1
LRU→ 11
Line 3
Memory: 3
McCall. 2
LWN 2
Merritt, 2
McDougall. 3
Labs” 1
Metha 2
McKusick, 1
Lacking 1
Metrics 1
McVoy 1
Lamport’s 1
Michael 10
Laszlo 1
Measure 5
Michael, 2
Lauer 2
Measurement 2
Microsoft) 1
Lawall, 1
Measurement, 1
Miller. 2
Laziness 2
Mellor-Crummey 4
Milton 1
Least-RecentlyUsed 1
Meltdown 2
Minneapolis, 1
Leave 1
Meltdown, 1
Miss? 1
Mesa 4
Led 1
Mitoma, 1
Mesa, 1
Leonard 2
Linux 107
Mixed 1
Metric: 1
Linux); 1
Models” 1
Let 18
Microprocessor 3
Modha. 1
Libraries 1
Moir 6
Microsoft 4
Licklider. 3
Linux, 15
Monitors 1
Microsoft, 1
Like 6
Linux-based 3
Microsystems 1
Like, 1
More 24
Microsystems, 1
List 7
Linux) 2
Mike 2
Most 9
List_Init(&H->lists[i]); 2
Lipman 1
Minimize 2
Mountain, 1
List_Insert(&H->lists[key 2
Lipp, 1
Modadugu, 1
Multics. 1
List_Lookup(list_t 4
Lisa 1
Modeling” 1
Multiprocessor 4
Live 1
List_Lookup(&H->lists[key 2
MongoDB, 1
Mythical 1
Load 4
Montreal, 1
NDERSTAND 1
Load-Linked 2
Lock 12
Load-linked 2
NE 1
Morgan-Kaufmann, 2
Lock-based 2
Loading: 2
NGINEERS 1
Moseley, 1
Locks.” 2
Motivating 1
Logistics 1
Multiprocessing. 2
Look 1
Locks 29
Multiprogramming 4
Loops 1
Locks, 1
Lord 1
Locks”) 2
NIX 55
Lower 1
Long 1
NIX, 2
Looping 1
Lu, 4
Looping-Sequential 1
NIX-based 6
M.I.T., 1
M.K. 1
N 41
MASK 3
NCE 1
MAX_HEAP_SIZE; 1
NCREMENTALISM 1
MB) 1
MIN 1
MIT. 1
NTERLUDE 35
MIT’s 1
ND 10
NECESSARILY 1
NULL 20
NPUTS 1
MLFQ 32
MORTIZATION 1
NT 4
MRU 2
NT, 1
MUTUAL 1
NULL); 35
NTERLUDES 1
Ma. 2
NTERPOSITION 1
Machine” 1
NULL, 20
Man 3
NUTH 1
Management” 2
NY, 1
Mangard. 1
M 139
NeXTStep 1
NULL; 22
Manual: 3
M62, 1
Negative-Growth 1
NUMCPUS; 4
Manuals” 3
MAC 2
Neither 1
NUMPAGES. 1
Markowitz, 1
MAC, 1
Nelson 1
NX 1
Markstein. 1
Namely, 1
Nelson, 1
Massachusetts, 1
MALLER 15
National 1
Nethercote. 1
Mauro 2
MAP_ANON|MAP_PRIVATE, 1
Naval 1
Nevada, 1
Maxwell’s 2
MAX; 2
Nemacolin 2
Newell, 1
Mayer. 2
MEMORY 1
Network 1
Next 2
McKinley, 1
Neumann 2
Next, 9
Mechanisms 3
MIPS 14
No-Locality 2
New 9
Media, 3
MIPS, 2
No. 6
Nichols. 2
Memory” 1
MM00]. 2
Nobel-prize 1
Nickolai 4
Methods 1
MMU. 2
Non-Coalesced 1
No-eXecute), 1
Microsoft’s 1
MPORTANCE 1
Nothing 4
Nope, 1
Microsystems. 1
MQMS). 1
Now? 2
Minimally, 3
MS-DOS. 1
Nucleus 2
Miscellaneous 1
MULATING 1
Numbering 1
Note 34
Mac 12
Note, 2
Mac, 1
Mach 1
November 10
Mail. 1
Miss 29
Main 1
Nuclear 1
Mitchell. 1
Malcolm 1
O(n) 1
Mogul, 1
Malloc(), 2
OFFS 1
Malloc(sizeof(myret_t)); 2
Morgan 6
OFFSET_MASK 7
Morris, 4
Morse. 1
Management 11
OK 4
Most-Recently-Used 1
Management, 2
MostFrequently-Used 1
OK, 11
Manchester; 1
Moving 1
OMPILED 1
Manifesto” 1
Mozilla 1
Manuals 1
Mudge. 1
Manual” 3
Multi-Level 4
OMPLETE 19
Multi-level 7
Multics” 1
Multiple 1
Multiprocessors. 2
Many 21
Multithreaded 3
ONCURRENCY: 15
Mao, 3
Mutual 4
ONSTANTS 1
O 247
Mysterious 1
Mars?” 2
ONTEXT 2
OES 1
N. 7
Marvin 1
OFFSET 1
ONTROL 8
NDETERMINATE 1
McCarthy. 2
OK! 2
OO 1
NIX! 1
McCarthy’s 2
OMEWORKS 2
OOT 1
NOMALY 1
Mechanism 1
OMPLEXITY 1
OPT? 1
NOW 1
Meehean. 1
ONTENTS 1
ORE 2
NTERRUPT 1
Meehean’s 1
NULL) 6
Megiddo 1
OPT 4
NUMPAGES 2
OPTIMIZATION 1
NVERSION 1
ORRECT 2
Neat 1
OS) 2
Need 2
OS), 2
NetBSD, 1
Netzer 2
OSDI 10
Node_t; 1
Obtaining 1
Non-compacted 1
Offset 15
Oh 5
Oh, 1
Old 2
One”. 1
OpenSolaris 1
Memory 58
Orr, 1
Memory, 1
Orwell. 2
Memory-mapped 1
Now 79
Orwell’s 1
Menace 1
Overflows 1
MenuMeters 1
Overview 3
Mesa” 1
O’Hallaron 2
Now, 26
Microprocessors 1
O’Reilly 3
OAD 1
Mistakes 1
O’Reilly, 2
OBS 1
P1’s 1
Modern 3
P3 1
Molnar 1
OCKS 23
Mr. 1
PC 16
ODE 2
OFTWARE 1
PC, 7
OK. 2
PCD 1
Much 9
OK: 1
Muller, 1
PCD, 1
Multi-Queue 1
PDE. 1
OLICIES 16
Multi-Threaded 2
PFN=55 1
OLICY 4
Multi-threaded 1
PID. 1
ONCURRENCY 3
PINNING 2
ONCURRENT 16
POSIX 20
ONDITION 1
Multics 14
POSIX, 2
ONG 1
PPLICATION 1
ONSIDER 1
Multics, 6
PPN) 1
OOPERATION 1
PROT_READ|PROT_WRITE, 1
OPERATIONS 1
Multiprocessors” 5
PTE. 3
PTE.PFN 1
Multiprogrammed 5
PTE.PFN, 3
Murphy, 2
PTE.ProtectBits) 3
Must 2
PTE: 1
NABLES 1
PTEs). 1
NBA 1
PTIMAL 1
PWT 1
NIX. 2
Pacific 3
NIX/C 1
PageDirBase 1
NIX: 1
Paranoia 1
NOT 1
Part 6
NOWLEDGE 1
Pass(C) 1
NSA? 1
Pathfinder. 2
Per 5
Perfection, 1
Perhaps 15
Perl, 2
Pfaff, 1
Phoebe 1
PhysAddr 8
Pick 3
Pioneered 1
Plot 1
ORG 166
Pn−1 1
ORK 1
Pointed 2
NTRODUCTION 59
OR’d 1
Positive 1
NT” 2
Precise 2
NULL2 1
Preemption-safe 2
Prefetching 1
Nancy 2
Pren-tice 1
Narrow 1
OS. 26
Primer 1
Navarro, 1
Priority] 2
OS: 1
OS 504
OSTEP! 2
Privileged 3
Needed 1
OSes. 1
Neely, 2
OS’s 4
OS, 31
Probably 11
Nethercote, 1
OU 1
OS-ignorant) 1
Ngram 1
Problem: 6
Nice. 1
OSes 2
OWERFUL 1
Problems” 1
Nimrod 1
OSes, 1
O_CREAT|O_WRONLY|O_TRUNC, 1
Proceedings 2
Nir 2
OUBT, 1
O_WRONLY|O_CREAT|O_TRUNC, 1
OUR 2
Obviously 1
Occur 1
No 10
Oddly 1
No, 2
Often 1
Node_t 1
Operations 3
OW 34
Non-Cooperative 1
Process 35
Oregon. 1
Organick. 1
Process0 12
Organization” 1
Orleans, 1
Processes 8
October 17
Processes, 1
Ousterhout. 3
Not 23
Processing: 2
Ousterhout’s 2
Processor” 1
Notes 4
Out 2
Producer/Consumer 5
Novark 1
Producers 1
Over 6
Novark, 1
Professor 5
Overflow 1
Nucleus. 1
Professor, 1
Programmers 4
Number 8
Programming 15
O(1) 4
Programs 4
O(log 1
Project 3
O. 1
OCALITY 1
Protection 7
Pthread_create(&p2, 5
Pthread_join(p, 4
Pthread_mutex_lock(&c->lock); 6
OCK 16
Pthread_mutex_lock(&mutex); 8
ODING 1
Pthread_mutex_lock(pthread_mutex_t 2
One 135
OESN 1
Purify 1
Putting 1
Only 10
OF 9
Oops! 2
OINTER 1
Open 2
OK; 1
Q2 9
Optimal 3
Q6 1
Oracle 3
OK? 2
Quantitative 2
Orran 1
OLUTIONS 1
OMPARING 1
Other 15
Otherwise, 1
ON 12
OOK 1
Questions 26
OOLS 1
RACE 1
RAIDs, 1
Our 25
Ousterhout 3
Ousterhout, 2
RANSLATION 15
Overhead 3
RE 1
OPERATING 42
RISC-like 3
OPT. 1
P. 12
OS). 2
P 280
P1) 1
OS; 8
P2 3
P0 4
OS? 4
P4 1
P6 1
OSSIBLE 2
ROCESS 30
P4, 1
OSSpinLock 2
ROCESSES 1
PACES 8
ROGRAMS 1
PAGES 2
PAGING 22
ROP. 1
PAGESIZE 1
PCs, 2
PD 2
PEED 1
PDBR 2
PDEAddr 2
PDIndex 1
PDP 1
PDPTA’97, 1
PD_MASK) 1
PFN 43
PFN, 1
PID). 1
PROGRAMMER 1
PT 2
PTBR 5
PTE.present 1
RPACI 154
PTEAddr 6
RR? 1
PTEs 3
RUNNABLE, 1
OSTEP. 166
PTHREAD 4
OSTS 1
OS” 1
Object-Caching 1
PTHREAD_MUTEX_INITIALIZER; 7
PTIMIZATION 1
PTIndex 1
RUX 33
PT_MASK) 1
RY 1
Pages 5
Race 2
Page” 2
Rachid 2
Rafael 1
Paging: 4
Rago. 4
Palo 1
Ranganathan, 1
Paperbacks, 1
PERATING 184
Rashid, 1
Particularly 1
PETERSON’S 1
Ready: 1
Parts”.) 2
PF 3
Of 70
Patel. 1
PFN_SHIFT) 1
Recall 9
Patent 1
PID) 1
Recall, 1
Patterson 2
On 21
PPROPRIATE 1
Recommended 1
Patterson, 1
PRIORITY 1
Record 1
Pennsylvania, 2
PT: 2
Refers 1
Perry. 1
PTEs. 1
Regions 1
Once 41
Personal 2
Padegs. 1
Relational 1
Peter 5
Page-Fault 2
Relocated 2
Peterson 2
PageTable[1] 1
Relocation” 1
Operating 38
Ph.D. 3
Paging 6
Operation 1
Remember 5
Phipps 1
Paging, 1
Or 9
Physics), 1
Remzi 6
Parent 6
Or, 7
Repair 1
Pilot 5
Park, 2
Organization 1
Repeatedly 1
Plenty 1
Pass(B) 1
Ott. 1
Replacements 1
Plus 1
Patel 1
Overall, 3
Replacement” 1
Policies 3
Patterson. 2
Overlap 2
Resort, 2
Policy 6
Paul 3
O’Hallaron. 2
Resources 2
Pons 1
O’Reilly. 2
Response 3
Performance 11
Poor 1
P.M. 1
Responsibility” 1
Pesterev, 3
Portland, 1
P0), 1
Revolution 1
Peterson. 2
PowerPC 1
Right! 1
P1 6
Peterson’s 6
PowerPC, 3
Rings, 1
P1, 2
Phenomenon” 1
Prentice-Hall 1
River” 1
P=0 1
Round-Robin 1
Physical) 1
Prentice-Hall, 7
Rules 5
Placing 1
Presumably 1
Run: 2
Play 1
PACE 21
Running: 1
Point 1
Pretty 8
Runs? 1
PAGE 6
Policy: 2
Principles” 2
PAT 1
Pollack, 1
Prints 1
PAT, 1
Pons. 1
Priority(A) 4
Positive? 2
PDE 8
Probability” 1
Prentice 4
PDE, 1
Problems 1
Presented 1
PDP-10” 2
Previously, 1
Problem” 3
PD_SHIFT 1
Priority 4
PERATIONS 2
Priority, 1
PFN) 2
Problems: 1
PHit 1
Proc 14
Processes” 2
PID 5
Processor-Memory 1
Professor? 1
Process1 9
Programmer’s 2
Protected 1
Protection” 1
Protocol 3
PIECES 38
Program 20
PLDI 3
Protection) 1
Pthread_cond_signal(&cond); 6
PM 4
Provides 1
PREMATURE 1
Pthread_create(&p1, 5
Pthread_mutex_init(&c->lock, 2
Pthread 11
PTE 17
Pthread_mutex_unlock(&c->lock); 6
Pthread_cond_wait(&c); 1
PTE, 6
Pthread_cond_wait(&c, 3
Pthread_mutex_unlock(&mutex); 8
PTHREAD_COND_INITIALIZER; 3
Pthread_cond_wait(&empty, 2
Python, 2
PT_SHIFT 1
Pthread_cond_wait(&fill, 2
Pthread_create(&c, 2
Q1 15
Pthread_join(p1, 5
Q5 1
Quanta 1
Pthread_mutex_unlock(&lock); 6
Quarterman. 1
Page 39
Queue_Dequeue(queue_t 2
Page, 1
Pthread_mutex_unlock(&m); 6
Queues: 2
Published 1
Page-Reference 1
Quote 1
Python. 1
PageTableBaseRegister 1
Q1. 1
PageTable[39] 1
Q3 1
Paged 2
Q7 1
R 21
Pal 1
Queue_Enqueue(queue_t 2
R+89, 1
Parallel 3
R.H. 1
Queue_Init(queue_t 2
Pass(A) 1
R.P. 1
Passing 2
R10k 1
Pathfinder/Authoritative 2
Queues 4
Patt 1
R4000 5
Patt, 1
Queues, 2
RAM. 1
Peanut 2
Performance” 1
Persistence 1
RANSLATIONS 15
Perspective” 5
Physical 13
README 20
S 379
Pieces 2
R. 33
README, 1
Pillay. 1
S, 6
R/W 1
S.Sahni). 2
Pioneers, 1
RINCIPLE 2
RADE 1
S09]. 2
Portable 1
RIORITY 1
RAID 1
SCHEDULER 1
Power 1
ROM 2
RAM 5
SEFUL 2
Prediction 1
ROPORTIONALLY 1
RAM, 1
SEG 2
Preemptive 1
ROTECTED 1
REASON 1
SEG_MASK) 2
Present 1
RR. 2
REAT 3
SHIFT) 8
Raiders, 2
Press, 7
SJCC, 1
Price. 1
RaiseException(PROTECTION_FAULT) 9
Priority(B), 4
Randal 1
REE 19
Problem 3
Randell 1
RITICAL 1
SJF 21
Process: 2
Random) 1
Processes: 1
Randomization” 1
SJF, 4
Rather 1
RR 14
Processing 5
SJF/STCF) 1
Rather, 4
RR, 1
Processing, 1
SLEEPING, 1
Producer/Consumer: 3
RSS, 2
Reboots 1
SPARCv9). 1
Prof. 1
Raging 1
Recognized 1
STDOUT 1
RaiseException(PAGE_FAULT) 1
Recollections 1
Saavedra-Barrera 1
Rajimwale, 1
Recovery” 1
Save 2
Randall. 1
Redell. 1
Saying 1
Randell. 1
Professor: 37
Redell’s 1
Programming: 3
Rate 4
Reese’s 1
Scalable 10
Proportional 2
Scan-resistant 1
Proportional-Share 3
Scheduler 5
Proportional-share 1
References 28
Scott. 4
Pthread_cond_signal(&c); 4
Reliability 1
Secure 1
Pthread_cond_signal(&empty); 2
Read 38
Relocation: 2
Seg 1
Pthread_cond_signal(&fill); 2
Read-Execute 1
Remove 2
Pthread_cond_wait(&cond, 6
Results 1
Read-Write 2
Segment 10
Real 3
Return-into-libc 2
Pthread_create(&p, 5
Segregated 1
Redell 2
Review, 3
Pthread_join(p2, 5
Semantics 3
Redirection 1
Ritchie. 1
Pthread_mutex_lock(&lock); 6
Reduce 1
September 13
Reduced 2
Sequential 2
Robert 9
Pthread_mutex_lock(&m); 6
Robin 3
Sequin. 1
Reese 1
Publishers, 1
S). 2
Shacham. 2
Reese, 1
Put 4
S+03] 1
Share 4
Reeves. 2
SDS 2
Shared 2
Referring 1
Q 12
SER 1
Sharing” 1
Region 1
Shedler 1
Registers 1
SHIFT 8
Should 4
Relocation 1
Q0 13
SHIFT, 1
Showing 1
Q4 1
Replacement 6
SIGINT 2
Q8 1
Report 2
Size 10
Report, 2
Quarterly, 1
SIGMETRICS 2
Sleeping 3
Represent 1
SIGTSTP 1
Queue 8
SIZESORT+, 1
Requirements 3
Software 7
Quicksort, 1
SJF/STCF 1
Resource 4
Software-based 1
SN_SHIFT 1
RAND 5
Responsibilities 1
Solution: 1
SOMETHING 1
RANSFER 1
Rewritten 2
RDLK 2
SPINNING 1
Soon 2
Ritchie, 1
REATE 2
SSD, 1
Sorin, 1
River, 1
REEMPTIVE 1
SSDs) 1
Sorry, 1
Ronald 1
REMATURE 1
Round 3
South 1
STCF. 1
Rudolf 1
RISC 14
Spaces 3
SWITCH 6
RISC, 2
Spectrum 1
SYNCHRONIZATION 1
Rule 14
ROBLEM 4
Spin(), 1
Saint-Exupery 1
Spin(1); 2
ROCEDURE 1
Runtime 1
ROP 3
Stalin 2
Same 2
Star.” 1
SE 11
State: 2
SEG_SHIFT 1
ROPORTIONAL 13
Steinberg 1
San 12
SET 2
ROVIDE 1
Sanjay 1
Stephen 4
SIGNALING 1
RR) 1
Santiago, 1
Steve 4
SPINNING: 1
RTFM 2
Schedulability 1
Stoica 1
SQMS 7
Schedulers 1
RUN 5
Stoica, 1
SS+10]) 1
Scheduler” 2
RUNNING, 1
Strategies 2
SSD. 1
Rago 1
Streams 1
STACK: 2
Scheduling 12
Raiders” 2
Stride 4
Schwarz, 1
STCF 8
RaiseException(SEGMENTATION_FAULT) 5
Structures” 2
Science, 1
STCF, 1
RaiseException(TLB_MISS) 1
Student, 1
Search 2
Subsequent 1
STRUCTURES 16
Segmentation 3
Segments 2
Such 16
Random 21
Separating 1
Support: 1
Server” 1
Random, 5
Supporting 1
SYSTEMS 42
Seward, 1
Ratios” 1
Shan 2
Saving 1
Surprisingly, 1
Readings 1
Shasha. 1
Schedulers: 1
Swaminathan 2
She’s 1
Scheduling: 6
Swap 4
Scotland, 2
Swap-Based 1
Similarly, 6
Swift. 2
Switzerland 1
System: 1
Second, 31
Systems” 7
Security 2
T2), 2
Segmentation: 1
Self-Tuning, 1
T3 8
Set 6
Ready 58
T3, 4
Seward. 1
Simple 29
Really 3
Shah, 2
Simple, 1
TABLES 15
Recent 1
Sharedmemory 1
Simply 3
TCB. 2
Recheck 1
TECHNICAL 1
Reclaim 1
Single 7
TERMS 1
Red-Black 2
THER 1
Reducing 1
Sharing 12
Sizes 1
THREADS 1
Short 1
TILIZATION 1
Register 8
Slab 1
Short, 2
Relationships, 1
Slutz, 1
TIP: 9
Relocation) 2
Smaalders. 2
TLB) 3
Shortest 6
Reprinted 1
Smotherman 1
TLB-miss 1
Signaling 2
Required 1
TLBWR, 1
Signals; 1
Research 3
Silas 3
Research, 2
Simpler 2
Restartable 1
Single-Queue 1
Restoring 1
Single-Threaded 2
Restricted 1
Sleeping) 1
Smaller 1
So 30
Resulting 4
So, 1
Smotherman. 1
TO 26
RetryInstruction() 4
TOPLAS, 2
Smotherman’s 1
Reuter. 2
TPDS 1
Sometimes 9
Solaris” 1
TS 1
Review” 2
Sometimes, 9
Table? 1
Riak. 1
Sorry3 1
Speaking 1
Tables 9
Specific 1
Tamil, 1
Richard 9
Spectre 3
Ritchie) 1
Some 25
Tc, 1
Sopena. 1
Roscoe. 1
Sorry! 1
Tc1). 1
Spend 3
Routines 3
Technical 4
Spider-Man: 2
Texas. 2
Sounds 6
Than 1
Spin 7
Thanks. 1
Spin-based 1
That’s 6
Spin-waiting 2
Spinning 4
Space 20
Splitting 1
Space-time 1
Then 17
Sploitfun. 1
Spurious 1
Sriram 2
Then, 19
There? 1
Therein, 1
Stack 14
Things. 1
Staelin. 1
Third 1
Stallman. 2
Run 68
Stan 1
Third, 5
Start 5
Those 2
Status: 1
Stick 1
Though 5
Specifically, 52
Store-Conditional 2
Threads 5
Spectre. 1
Store-conditional 2
Tickets 1
Running 24
Spending 1
Structures: 1
Running, 1
Spinning: 2
Structuring 1
Russ 1
Springer-Verlag, 1
Success! 1
Stack11 2
Time 29
Sullivan, 1
Staelin, 1
Time-Shared 1
Stallman 1
TimeSharing 1
Stan. 1
S. 22
Stanley 1
S.J. 1
States 1
SECTION, 1
SGI. 1
Stevens 6
Summary 30
Stevens, 2
Sun 5
Still 5
Sun, 2
Stockholm, 2
Sun.. 2
Stodolsky, 1
Superpages” 1
Storage” 1
Support) 1
StoreConditional(int 2
SIDE 40
Survey 3
Stored? 1
SIZESORT-) 1
Susan 1
SJF. 2
Structures 6
Sweden, 2
Structure” 1
SN 3
Switch 3
SOLATION 1
Switches 1
Summary: 2
Sumner. 4
SOSP 9
Synchronization 8
To 152
Sun. 2
Synthesis 1
Today’s 1
SunOS 1
Systems. 1
Torvalds 1
SPARC 9
Sun’s 1
Tp). 1
Systems: 6
Support” 1
SPARC, 3
Trace 9
Sure! 1
STCF) 2
Tracking 1
SUPPORT 1
Traditional 2
Switching 4
T. 14
S_IRWXU); 2
Translation 5
Saavedra-Barrera. 1
Trap 2
Sadly, 2
Trees 1
Said 1
Tresponse 1
Saltzer 1
Trials 1
Sanzi, 1
Systems 18
Tron 1
Say 2
Systems, 3
Try 11
Scalability 3
Turning 2
Typically, 2
U/S 1
Scaling 6
ULTIPLE 2
Scheduled 1
T2 38
UMMARY 3
Scheduling” 1
UNSW-CSE-TR-0321, 1
Schroeder. 1
T2, 4
UPERUSER 1
Science). 1
System” 22
THINK 1
URSE 1
Scientific 1
USA. 1
Scientists 1
USTERHOUT 1
UTUAL 1
Undoubtedly 1
Scott 10
Secker 2
User 14
Section 1
Usually, 3
V.A. 1
VA 1
VAX 5
VAX-11/750. 1
VM 18
VM, 3
VMMs 1
VMS), 1
VPN; 2
VPNs 5
Va0 3
See 43
Va4 2
Seems 1
Valgrind 2
Segmentation” 1
Valley. 1
Served 1
Vasileios 2
Server. 1
Servers” 1
Virtual 12
Setup 1
Vol. 5
Shacham, 1
Von 2
Vyssotsky, 1
Shared-Memory 4
Shared-memory 1
W 17
Shavit. 2
WAITING 1
Shavit’s 4
WARY 4
Shedler. 1
WITCH 1
Shortly, 1
WITCHES 1
Silicon 1
WORST 1
Similar 3
WORST)? 1
Simulation, 1
Singh, 1
Sitaram 1
Sleep 40
Slow 1
TLB 173
Small 2
Solaris 18
TLB, 21
TLBP, 1
WWW. 166
Solaris, 7
TLBWI, 1
Waciuma 1
Solomon. 2
Wahbe, 1
TLB_Insert(VPN, 3
Wait: 1
TLBs) 1
Solution 5
Waiting 8
TORAGE 1
Wanted 2
Sood, 2
TORE 1
Was 1
Sound 2
TR 1
Watch 4
Soyeon 2
Weihl. 1
TR-95-22, 1
Were 2
Special 1
We’d 1
TRUCTURE 3
Specification, 1
TV 1
Stack? 1
Tb 2
Standard 2
Tb, 1
Stanford 1
Tc2) 2
Stanford, 1
We’ll 38
Tcompletion 2
Starts 1
Technique 1
Where 7
Whereas 3
Technische 2
Whether 4
State 12
TestAndSet(int 2
Statement 1
Tf 1
Which 12
Steinberg. 1
Steven 1
Why? 5
They 5
Wikipedia 3
William 3
Storage 10
Windows 10
Think 12
Store-Conditional” 2
Wish 2
Thompson. 1
Strachey. 1
Within 4
Strachey’s 1
Wood. 1
Thread2 6
Stretch 1
Woodlands 1
Threading 2
Work 1
Structure 3
Threads? 2
Workload 11
Threads” 6
Workstations” 1
Tickets? 1
Worst 2
Tim 2
Time-to-Completion 2
Times 1
Time” 1
Write 11
Timothy 1
Tix:250 1
To? 1
Together 1
XECUTION 15
Tony 1
Y. 1
Student: 36
YNCHRONIZATION 1
Too 3
YOUR 1
Traffic” 1
Yale 1
Trans. 2
Study 8
Yang, 1
Transformers 1
Yes. 1
Subramanian, 3
Yet) 1
Suli 1
T 378
Transforming 1
Yield 2
Summer 1
Transitions 1
T1). 4
Sun). 1
Yield, 4
Translations 2
Your 1
T2. 4
Transparent 2
Sundararaman, 4
You’re 2
TABLE 2
Trevor 1
Supervisor” 1
Tricky 2
TD 2
Tturnaround 3
Yupu 2
Tucker, 1
TENEX 3
Zero” 1
TEST 2
Tudor 2
Support 9
Zhiqiang 2
Surveys, 1
Two 11
THREAD 12
Typical 1
Zorn. 1
Swapping 1
U.S.S.R; 1
Swapping, 1
[3] 1
UCB/CSD-92-684, 1
Swift 2
UIDELINES 1
[AC97]; 1
Swift, 1
UILD 3
[B+13]. 1
Symbiosis” 1
ULE 2
[B+19] 1
Synchronization” 2
THREE 37
[B72] 1
ULTI 11
[B89] 2
[B94] 1
TLB. 13
ULTIPROCESSOR 12
[BC05,G04]. 1
TLB: 2
UPPORT 2
System 37
[BC91] 1
TLBR, 1
System, 2
[BJ81]. 1
System/370” 1
[C06]. 2
TLB_Lookup(VPN) 4
[C69]) 1
Systems.’ 1
TLBs; 1
[C93] 1
TLB’s 1
[C95]. 1
[CG68, 1
T1 30
[CK+08]. 1
Table 18
[CP78]) 1
Takes 2
T1, 12
[CS94] 1
TAKE 1
[CSG99] 1
Tc1 9
[CSG99], 1
THE 9
Tc1, 2
[CV65,DD68]) 1
TLB; 1
Tc2). 1
[D+13] 2
Techni-cal 1
TLBs 10
[D65] 2
Technique: 1
[D70] 1
TLBs, 6
Techniques” 2
[D70], 1
TM 2
Tel-Aviv, 1
[D72]. 1
TOCS, 3
[E06] 1
TestAndSet() 6
TOOLS 1
[E95] 1
[E95], 1
[EF78]) 1
TRUCTURES 17
[FLR98]. 1
USSEAU 154
Ta 3
[FP89] 1
Undefined 1
Take 2
Understanding 2
[G04] 1
Tarrival 3
Unfairness 1
There 42
[G62] 1
University 6
Thesis, 1
[H61] 1
Tc2 7
University, 2
[H74] 1
TeX 1
Upon 3
[H74], 1
TeX, 2
Users 2
[H87] 1
Techniques 2
Tell 1
[HP06]), 1
Terminology 1
Using 19
[High 1
Test-And-Set 2
[I11] 2
Test-and-set 4
[J09] 1
Test-and-set, 2
[J09], 1
[K64]. 1
TestAndSet(flag, 4
[K68]. 1
Texas, 1
V 31
[KE+62] 2
[KL88] 1
Thanks 5
VAX-11 4
[L+13] 2
VAX/VMS. 1
[L+75] 1
VAXen 1
[L+93] 2
VERLAP 1
That 14
VERY 1
[L78] 3
VICT 1
[L83] 2
VLSI 1
[L83], 1
[M+63]. 2
[M+70] 1
[M06] 1
VMS 16
[M06], 1
VMS, 1
[M11] 2
VMware 1
[M11], 1
VPN. 1
VPN: 1
[M15] 4
VPNs; 1
[M28] 1
Va3 2
[M82] 2
Variable 2
Vegas, 1
[M82], 4
[MB91]. 1
Version 4
[MM03]. 1
Very 2
[MS96] 2
Virtual” 1
Visualization 1
[MS98]. 2
W.C. 1
[N+02] 1
WAPPING 1
[N+02], 1
Waldspurger. 2
[N+07]; 1
Waldspurger’s 1
[NM92]) 2
This 201
Wanjohi. 1
[P81]. 2
This, 2
Wanjohi: 1
[PP03] 2
Warburg 1
Thomas 3
[R97]! 2
Warburg, 1
Thompson 1
[RK68] 1
Warm-start 1
[RL81] 1
Thrashing 1
Weaver 1
[S+04]), 1
Weaver, 2
[S+11]). 2
Weighting 1
[S04] 1
Weiwei 2
[SA96] 1
We’re 1
[SS74]. 1
We’ve 2
[TTG95]. 1
[V+65,BH70]. 1
What’s 4
[VPN 11
[W02]. 1
[W06]. 1
[W15]. 1
[W17] 2
[W95]. 1
[W95]: 1
[WW94] 1
[WW94], 1
[anon 1
__Node_t 2
__node_t 10
a2 1
a:100:100,b:100:50, 1
a:100:100,b:100:50,c:100:50). 1
a[2] 2
a[6] 1
a[9]) 2
Thread 95
Three 4
Thus 24
When 122
When, 1
Who 4
Wiggins. 1
Wiggins’s 1
Wikipedia? 2
Wiley, 1
Wilson. 1
Wilson’s 1
Win, 2
Windows; 1
Wisconsin—Madison, 1
Woke 1
Worse: 2
Wow! 1
X. 1
X/macOS 1
X11 1
about 294
Xerox 2
about, 2
YSTEM 2
Yet 2
Yuanyuan 2
above. 20
ZOMBIE 1
absolute 6
Zeldovich. 2
acceptance 2
Zhou, 2
Zwaenepoel, 1
[2] 2
[A79]) 1
[A90] 1
accessed 42
[AC97]. 1
[AD03]. 1
accessed, 12
[B+10] 3
accesses), 1
[B+18] 1
accident 1
[B+18], 1
accommodated. 1
Thus, 206
[B+72] 2
Ticket 3
[B66] 2
accomplish 9
[B75] 1
Time) 2
[B89, 2
accomplishes 1
[B94]; 1
accordingly 1
Time-Sharing 8
[B97] 2
account. 1
Times?” 2
[BC05] 3
accounting 4
Tiny 1
[BC91]; 1
accounting, 1
Tix:100 1
[BH00] 1
accrued 1
Tix:50 1
[BNS69] 1
Tom 2
accumulates 1
[BOH10] 3
Torrellas, 1
accuracy 1
[C+04] 1
achieved. 3
Tp 3
[C+62] 2
achieves; 1
Tp, 1
[C03] 1
[C63]. 1
Tracing 8
[C69] 1
Traiger. 1
acquiring 22
[C69], 1
Transactions” 2
acquisition. 4
[CK68]. 1
Tree 1
[CM00]. 1
Tricks 1
[CP78] 1
True 1
[CS97] 2
Turner, 1
across 30
Turns 2
[D68] 7
actions. 1
Two-Phase 2
[D82] 1
active; 2
Two-phase 2
[D91] 2
actively-used 1
U.C. 2
[D97]. 1
activity. 2
[DD68] 1
UEUE 11
[DV66] 3
UK, 2
[DV66], 1
[E06]; 1
ULLER 1
[EF78] 1
[Free] 1
[G+17] 1
[G+95]. 1
UNIX 7
[G83] 1
actually 38
UNIX-based 1
[GR92]. 2
The 821
[H61, 1
UNUSED, 1
Theodorus 2
[H91] 2
US, 1
[HP06] 2
[I09] 4
[J91]. 1
These 24
USENIX 8
[JM98]. 1
Through 1
UST 1
[JS94] 1
Timer 1
adding 35
Unfortunately 1
[JS94], 1
TlbEntry) 4
additions 1
[K+61,L78]. 1
Tolerance 1
[K65] 1
addr 2
Tomlinson. 2
[KE+62, 1
Tools 1
addr:20 2
[L11] 1
Trace: 4
address! 1
[L60] 1
Unfortunately, 37
Transactions 3
address) 2
[LL82] 4
Unix 1
Trigonakis. 2
address), 1
[LL82], 1
address-space 5
[LR80] 1
Unknown.. 1
True) 9
addressed 2
[LR80], 1
Unlike 5
Tuning 1
addressed, 1
[M07]. 1
Unlock 2
Turing 5
adjust 1
[M11]; 1
Turn 1
Until 3
admission 1
[M28]? 1
Types 1
Unused 2
admit 1
[M65]. 2
Useful 1
admit, 1
[MM00] 2
V. 3
VALID 3
VAX-11/780 1
[MS04]. 8
[MS91] 2
[NM92] 2
VAX/VMS 11
advantage 14
[O16] 1
VAX/VMS, 2
adversely 1
[O49]. 1
VLDB 2
advertise 1
[O90]. 1
VMS. 2
advisors, 1
[PS81]. 1
VMWare’s 1
affecting 1
[QI15]. 1
affords. 1
[R+89] 1
[R97] 2
again; 3
[S+04] 1
U 89
again? 2
[S04]; 1
ULL 1
[S07] 2
UNESCO, 1
[S07], 1
against 9
[SHW11]. 1
URL: 1
agent 1
[SN05] 1
VPN 69
ago 1
USA 1
VPN, 2
[SR05] 6
ago, 5
USE 3
VPN_MASK) 7
[SR05], 3
Va1 2
UT 1
agreed-upon 1
[SS+10] 1
Va5 3
Uh 2
[W+95]. 2
Values 2
ahead 8
Uman 3
[W03] 1
ahead, 3
Virtualizing 2
Uncontrolled 2
[W09]. 2
ain’t 2
[WG00] 3
Underlying 3
Virtually 5
akin 2
[WG00], 1
Unsafe” 2
[WL+93] 1
al. 5
Up 2
[Y+18]), 1
alas. 4
[virtual 5
Volume 35
Voorhis. 1
__lock_t 8
WITH 1
__queue_t 2
a1 1
a:0,b:1,c:1 1
a:30:200 1
a[1] 1
a[1], 1
a[5] 1
WWW.OSTEP.ORG 42
a[9] 1
Waiting-Line 1
a[i] 1
Use 35
abbreviated) 1
Waldspurger 6
abilities 1
Wales 1
User’s 4
abilities, 1
algorithm 34
Warehouse-scale 1
ability 11
about; 3
algorithm, 8
VARIABLES 18
above) 6
algorithmic 1
VAX/VMS), 1
above), 3
all!), 3
VAX’s 1
VM. 1
abstraction 15
VMM-level 1
abused. 2
all. 9
VPN=0 1
all... 1
VPN=39 1
allegorical 1
VPN=42. 1
alloc 1
VPN_SHIFT 1
allocate(100), 1
VS 1
allocate. 1
Va2 2
Value 1
allocated. 5
Van 4
allocator. 2
allocators; 1
Vancouver, 5
Variables 3
Virtual-Storage 1
We 166
VirtualAddress 7
allow 22
Well 1
Virtualization 5
alone 6
Visually, 1
alright 1
Vyssotsky. 2
access 133
Well, 27
Werthman. 1
access, 9
accessed? 1
W. 18
WAIT 1
WHILE 2
WRONG 1
Wait 1
accesses 47
accesses)? 1
Waiting: 2
accesses, 4
Wakeup 2
accesses?) 1
Wei, 1
accessible 3
Weihl 1
accessible, 1
Weihl, 2
according 3
Whichever 1
achieving 7
acquire 57
While 31
acquire/release 2
While, 1
Wikipedia. 1
What 214
acquired 15
Wilkes. 1
Whenever 2
acquired, 2
Winter 1
Whew! 1
Wisconsin 1
Working 2
Workshop 2
action 15
Wow, 2
active. 1
Wrapper 2
actively) 1
Why 28
Write-back 1
Why, 1
XCLUSION 1
Xiong, 2
Will 6
actual 15
Y 3
Wilson 2
adapt 1
YBRIDS 1
Wilson, 2
YNAMIC 1
YOU 2
added 12
YPES 2
added, 1
additionally 1
addr:10 1
also 213
also, 1
alternates 1
alternatives! 1
altogether, 1
always. 1
am! 1
With 82
amazing 9
amazing, 2
amortize 2
Without 15
amount; 3
Wood-lands 1
Word 1
Worried 1
amounts 7
Worse, 3
amt) 2
Wouldn’t 1
Wulf. 1
X 3
X, 1
X-windows 1
XD 1
XIST, 1
XITS 1
XXX 2
Xerox. 1
Yandong 3
Years 4
Yes? 1
You’ll 3
ZFS) 1
Zebra 1
Zeedonk 1
Zeldovich 1
Zelenka. 1
Zhang, 4
Zuckerberg 1
YSTEMS 203
[4] 1
Yes 1
[AC97] 1
[AD00]; 1
[AD03] 1
Yes, 9
[B+18]. 1
[B+96] 2
York, 6
[B,C 2
[B75]. 1
[B86] 1
[BB+72] 1
[BB+72], 1
[BH00]. 2
[BH70, 1
[BH73] 2
[BH73], 2
[BNS69]. 1
[BS+09, 1
[C+04]. 1
[C03]. 1
[C54] 1
[C63] 1
[CD85] 1
[CG68] 1
[CK68] 1
[CM00] 1
[CV65] 2
[CV65], 1
[D01]; 1
[D68]. 2
[D70]), 1
You 89
[D82]. 1
Zel-dovich 1
[D91]. 2
Zonkey), 1
[D97] 1
[1] 2
[DV66,V+65]. 1
[A79] 1
[G+17]. 1
[A91]. 1
[G+95] 1
[AD00] 1
[G85] 1
[B+00] 2
[G85], 1
[B+10]; 2
[GR92] 2
[B+13] 1
[H91]. 2
[B+19]. 1
[B+79] 1
[H93] 4
[B+79], 1
[B72]. 1
[H93], 3
[B94]. 1
[HP06]. 3
[BC05, 2
[I09]. 2
[BH70] 2
[J91] 1
[BJ81] 1
[JM98] 1
[BOH10]). 1
[K+15] 1
[BS+09] 1
[K+61,L78], 1
[C06] 2
[K65]. 1
[C54,PV56] 1
[L09, 2
[C93]. 1
[L11]. 1
[C95] 1
[CD85]), 1
[LL82]. 3
[CK+08] 1
[LM+89, 1
[CS94]. 1
[LM+89]; 1
[D+13]. 2
[M07] 1
[D01] 1
[M65] 1
[D65,D68] 2
[M83] 1
[D68]; 1
[M83], 1
[D70]. 1
[MS04] 2
[D72] 1
[MS04], 2
[E95]. 1
[MS91]. 2
[FLR98] 1
[N+07] 1
[FP89]. 1
[NS07] 1
[G04]. 1
[O16]. 1
[G83]; 1
[O45] 1
[H74]. 2
[O45], 1
[H87]. 1
[O49] 1
[HJ92] 2
[O72] 1
[HP06]). 1
[O72], 1
[J16] 1
[O90] 1
[J16], 1
[P+95]). 1
[K+61] 2
[PS81] 1
address 561
[K+96] 2
[Page 2
address); 1
[K64] 1
[QI15] 1
[K68] 1
address, 7
[R69]; 1
[KE+62]. 1
address-based 1
[S+11] 2
[KL88]. 1
[S05] 2
address-translation 4
[KR88] 2
[S07]. 1
[L+75]. 1
[S09] 2
[L+93]. 2
[S59, 1
[SB92] 1
[L09] 4
[SB92], 1
[L78]. 2
[SHW11] 1
[SN05]. 1
[L81] 4
[V+65] 1
[LL82]; 1
addresses 42
[W+95] 4
[LM+89] 1
addresses, 3
[W+95], 1
[LR80]; 1
adoption 1
[W03]. 1
[Low 1
advance 1
[W09] 2
an 545
[M+63] 2
[WL+93]. 1
advanced 7
[M+70]. 1
analogy 1
[X+10] 2
advanced, 2
[M04] 2
analysis” 1
[X+10], 2
advantageous 1
[M62] 1
a3 1
advantages 5
[MB91] 1
a:30:200. 1
advent 1
[MM03] 1
advocates 1
a; 4
[MS96]. 1
affected 1
a[1]. 1
[MS98] 2
a[3] 1
[O11] 1
affinity 8
a[3], 1
[O11], 1
a[6]) 2
affinity, 1
[P+95] 1
a[7] 2
[P10] 1
[P10]); 1
[P81] 2
[P90] 1
[PV56] 1
[R69] 1
[RK68]. 1
[RL81]. 2
[RT74] 1
[S+03] 1
[S+68]), 1
[S05]) 2
[S15] 1
after 54
[S15], 1
again!) 1
[S59] 2
able 59
[S68] 1
about) 1
[SA96]. 1
about), 1
[SN05]; 1
[SS74] 1
[TTG95] 1
above). 7
again. 24
again: 2
above; 7
age), 2
above? 3
aims 1
abstraction. 1
algorithm). 1
abuse 1
algorithm; 2
accept 2
access. 8
access: 1
accessed), 1
algorithms 26
accesses. 5
algorithms, 3
accessibility 1
alike, 1
accessible. 2
all) 1
all), 1
alloc()/free() 1
allocating 19
accessing 36
accidental 1
accom-plish 1
accomplished 9
allocation 24
accumulate 1
allocation, 2
accumulated 1
allocators. 3
accuracy/performance 2
allowed. 1
accurate 2
accurate); 2
accused 1
accustomed 1
achieves 7
act 3
allows 37
action. 1
[V 166
active 13
active, 2
activity; 1
actuality, 1
already 28
altering 1
alternatives 4
addition 13
[VERSION 42
addition, 4
[W02] 2
addr:21 1
[W06] 1
am 16
[W15] 1
amazingly!), 1
[W95] 1
[Y+18] 1
[stack 1
] 2
address. 21
among 14
amount. 2
__counter_t 6
address: 8
ancient 2
__hash_t 2
address> 1
and? 1
address>, 1
__list_t 2
annotate 2
addresses. 4
answer: 2
answering 1
answers; 2
anticipate 1
anyhow, 2
adds 24
anymore? 1
adios, 1
anyone 3
administer 1
administrators 2
advice 4
anything 17
advice, 1
affairs 1
anything, 5
affected. 1
appeared, 1
affects 2
application. 4
affinity. 4
applications? 1
aforementioned 2
applies 1
apply 1
appreciate 1
again 58
again, 31
age; 1
aggressive 3
alas). 1
algorithms. 5
alike. 1
all; 4
all? 8
allocate(int 1
approach 138
allocates 11
allocation. 7
allocators 9
approach, 25
allotment 2
allotment, 1
allowed 8
approaches 31
almost 13
approaches, 1
alone! 1
appropriately-named 1
alter 2
alternate 5
alternatives. 2
approximate 20
approximation? 1
approximations 2
although 15
arcane, 1
amazed. 1
architects 4
amazingly 3
architectures 2
amazingly, 1
architectures, 1
archive, 1
are. 4
are: 2
arg); 8
arg, 2
amount 37
amplifying 1
args->b); 4
an- 1
argument; 2
an-THREE 1
analyses 1
analysis 5
analyze 3
arguments 23
analyzed 2
another; 1
arguments, 5
arise. 3
arise2 1
arithmetic 2
arose 5
arose, 1
answer 29
array; 1
arrays 5
answer, 8
arrays, 2
anti-gaming 1
arrive), 1
arrive] 2
arrives. 2
arriving 2
aside 4
aside, 2
ask? 2
asks 4
asks, 1
asleep 3
asleep, 1
assert 3
assert(p 1
assigned 7
assists 1
assume 80
assume, 2
any 171
anyhow. 2
assumed 12
anything. 1
apologize. 1
apparently 1
appealing; 1
assumptions 14
appears 1
append 2
assumptions, 6
appetite, 1
astute 2
applicable; 1
atoi(argv[1]); 1
atomically; 2
atomics. 2
attack: 1
attackers 2
attained 1
application 29
attempts 4
attempts, 3
approach. 8
approach: 5
attention 10
approaches. 2
attention, 3
approaches: 1
approaching 1
appropriate) 1
authors 8
appropriately 3
authors.. 4
auto-matically 1
automate. 1
average). 1
arbitrary 13
avoided. 2
architectures. 1
architectures: 2
avoids 5
award-winning 1
away 12
awesome! 1
baby 2
baby!” 2
background. 2
backwards 1
backwards, 1
balance 15
balanced 6
base/bound 1
base/bounds) 2
bases 2
bash, 1
basic 94
batch 7
batches 1
be? 9
beauty 2
becomes 18
been 100
before? 2
begins. 1
begins: 1
beguiling 1
behalf 2
behave? 4
behaves 11
behaves, 1
behavior. 4
behavior: 1
behaviors; 1
behind 31
below) 3
beneficial 1
benefits. 1
benefits: 1
best 31
best-fit 7
better 88
better, 14
between 79
beware 1
beyond), 1
bible 2
big 44
big!”, 1
big, 3
bit). 3
bit; 1
are 870
are, 4
arg. 2
arg: 1
argc/argv 1
argue 1
argued, 1
bits 70
arguments. 4
bits, 7
arguments: 3
black) 1
argv 3
blocked. 2
argv[1]; 1
blocks 9
blocks, 1
arise 12
bodies 2
arise, 4
body 2
arose: 1
book). 5
arrange 4
book; 1
arranged 1
book? 1
arrangement 1
arrangement, 1
array) 3
array), 1
array.c 2
array[i] 1
books 21
arrive; 1
born! 1
both) 1
arrives 4
both), 1
article 3
botte 1
bounds). 1
bounds; 2
bounds? 1
bounds”); 1
branch 3
break), 1
breed 1
bring 4
broadcasts 1
browser. 1
brutal 1
brutal, 1
bucket 2
bucks. 1
buffer 43
buffer); 1
buffer, 11
buffer[fill_ptr] 1
bug 4
bug, 1
buggy 1
bugs) 1
build. 2
building 41
building, 1
built. 1
bumping 1
burden. 1
bus 3
bus, 1
bus-based 1
butter 1
buying 2
bx 2
bx=2,bx=2 2
bx=3 2
bytes). 3
bytes; 2
bytes? 1
bytesLeft 3
c->global; 2
c->local[i] 2
c->value; 4
c3 10
c; 3
c;, 1
cache. 9
cache: 1
caches; 1
calamity. 1
calculate 5
calculated 1
call. 17
call: 2
caller; 2
calling 55
calls). 1
came 12
as 1029
aside: 1
asked 2
asked, 1
asleep... 1
aspect 15
assembly 13
assembly, 3
assert(fd 1
assertion 2
assigned. 1
assistance. 1
associated 18
assume: 1
assumptions. 2
atop 1
attack 9
attains 1
attempted 2
attempts: 2
attention. 1
attentive 1
attribute 2
authors. 1
available; 1
avenue 1
avoidance. 2
avoided 2
avoided, 1
aware 2
awful! 1
background 15
bad! 1
badly 1
badly, 1
balance. 1
balanced: 1
base-and-bound 3
basically 6
basics; 1
basing 1
batch-like 1
battle 1
can 699
can, 4
cannot? 1
can’t) 1
capacity 2
capacity, 1
card 1
careful 16
careful, 3
carefully; 1
cares 2
case. 3
case: 4
cases). 1
because 93
cases? 2
because, 1
cast; 1
becoming 2
casts 1
before), 2
causing 3
cen-tral 1
begins 13
and 2770
begin” 6
behalf. 1
and, 5
behaves. 5
anomalous 1
behaving 1
another. 6
certain 26
answer; 3
chains 1
behavior 35
answer? 3
challenges 2
behavior, 3
behaviors) 1
challenges, 1
answers 3
challenging. 1
believe 5
answers, 2
chan 1
below). 3
anti-hero 1
below; 1
anticipating 1
below? 1
chance 4
any? 1
benefits 5
chanced 1
anymore, 1
better. 7
anytime 1
biased 2
big. 3
anywhere 6
ap-proaches 1
appearing 1
bigger 19
application; 1
bigger, 2
billions 1
bit! 1
bit) 1
bit), 1
bits. 2
bits: 1
black). 1
blank 1
blocked 16
applications 29
change 55
blocked); 2
blocked, 3
blocks. 2
applications, 6
blocks: 1
bold). 1
bolts, 1
book! 1
applied 5
book), 2
changed 18
books. 1
appreciation 1
bookstore 1
changed, 3
approach) 1
boolean 2
chaos 2
boosted 3
approach), 2
chapter). 3
approached 1
chapter; 1
boot 11
borrowed 1
appropriate 3
both? 2
bother 1
approximate! 2
bottom). 2
chapter? 9
bounce 1
approximately 1
bound 4
approximating 1
bounded-buffer 1
approximation 1
bounds) 1
bowels 1
architectural 2
brag 4
chapters 14
break; 5
breaks 2
breath. 1
brief 4
chapters, 9
broad 4
architecture 18
broadcast(), 1
browser 1
browser, 1
architecture, 4
area. 1
arena 1
buddy 11
buffer. 6
buffering 1
buffers? 1
char 35
argument 22
charge 7
argument, 11
arguments) 1
arise; 1
arise? 3
build 118
arises 21
build, 2
check 46
arises, 4
child. 2
arising. 2
child: 1
built 19
arranges 1
built-in 1
children! 1
chip’s 1
bunch 6
burst 3
chocolate 2
business 1
chooses. 2
buy 6
choosing 2
bx=1 2
bx=1000,bx=1000 2
bye, 1
chop 5
chose 1
chosen. 1
byte 15
byte(s) 1
chunks. 3
bytes) 3
bytes), 3
circuitry 2
c->local[cpu]; 2
citations 1
c->threshold) 2
array 46
clarity. 1
c->value++; 4
c->value--; 4
array, 7
array-based 2
c1 10
class 12
array[1000]; 1
c5 5
arrive: 1
c5, 1
class, 3
arrives; 1
art 1
articles 2
ask 12
ask, 1
classic 26
asking: 3
classic, 1
clean). 1
clean; 2
cache 86
cleans 2
aspects 10
clear; 1
assembly). 1
cache, 11
assembly? 2
clears 5
cached 3
assert(count 2
cleverness, 1
caches) 1
assert(rc 5
cake 4
close 11
assert(tmp 2
close, 1
assigning 1
cluster 2
associative 1
clustering. 1
assume) 1
co-advisors 1
coalesces 2
code; 3
code? 9
codes 2
codes, 2
assuming 25
coined 2
cold 3
collect 1
assumption 10
assured 1
column 5
atomic. 2
combat 2
atomic_decrement 2
combinations 3
combining 7
comfortably 3
atomically 16
commands 2
atomically, 2
commands, 1
common) 1
atomicity 8
attacker 4
commonly 13
attacker, 1
commonplace 1
call 230
call); 1
attacks 5
commonplace, 3
attacks, 3
attaining 1
communicating 3
call, 19
communication 2
campaign 1
company). 1
attempt 14
can. 3
compare? 1
attempt, 2
canonical 3
compares 1
capability. 1
attr 2
care! 2
careful. 1
attr, 4
carefully! 2
competing 6
attributes 4
compiler; 2
author 2
compilers 1
automatic 2
compiling 1
complete) 1
available. 14
avalanche 1
completed), 2
average 16
case 62
completely 6
case); 2
completes. 4
completing 1
completion 4
completion); 1
avoid 50
avoided; 2
completion, 2
avoided? 1
awake. 1
complex. 2
award 4
away.” 1
axes. 2
back-to-back 1
back. 2
complexity 10
background; 1
complexity, 1
backing 1
components 1
backward 1
backward, 1
comprise 3
comprised 3
compromised 1
bad 31
case, 105
computation; 2
cat 3
computations 1
categories: 1
caught 8
computers 7
causes 5
computers, 1
cell 1
centers 1
centers, 1
century. 1
cesses. 1
chagrin 1
challenging 6
base 66
computing 16
challenging, 1
base); 1
chance. 2
base, 1
computing, 4
change. 6
base-and-bounds 4
concatenating 1
changes; 3
concept: 2
changes? 2
conception 2
chapter! 1
conceptual 4
based 17
chapter), 1
conceptualized 1
bash), 1
basic) 1
concerns? 2
chapters. 6
basics. 1
concert 2
characteristics 2
battles 2
concluding 1
characteristics, 1
concurrency). 1
cheaper, 1
concurrency; 2
concurrency? 1
check. 4
concurrently-running 1
concurrently. 1
condition). 1
checking 6
condition3 1
checking, 1
condition3, 1
condition? 1
conditions 9
conference. 1
confidence 2
configure 5
configured 1
confined 1
confirm 6
conflict 2
confuses 1
confusion. 1
congratulations! 1
consideration 2
consistency 3
child 59
consists 8
child, 8
constant 1
chip 1
a 3927
chip, 2
a+b,b+c,c+d,c+e,c-. 1
constructed 4
a1). 1
choices. 1
a4 1
constructed, 1
a:100:100,b:100:100,c:100:100) 1
chooses 3
a:100:100,b:100:50,c:100:50) 1
a[0] 2
chopping 1
consume 5
a[4] 1
a[8] 1
consumed 2
a[i]; 1
chosen 5
about-to-be-run 4
consumer. 2
chosen, 1
about. 6
about: 1
chucking 2
containing 4
chunk). 1
above 50
chunks 13
chunks, 4
contents 28
circumvent 1
contents, 1
clarify. 1
above, 39
context-switching 2
classically 1
abstractions 7
clean), 1
abundant, 1
abusing 1
cleaned 1
continues. 6
access; 1
accessed. 4
continuing 4
accesses). 1
accesses; 1
contrast 7
accidentally 12
clearly 17
accommodate 4
accordingly. 3
contrast, 10
account 6
control-c) 1
clock 11
achieve 12
achieved 1
close(fd); 1
achieved, 1
controlled 8
achievement 1
closer 2
controversy 1
acquires 8
cloud), 1
convention; 1
acquisition 6
conventions, 1
acquisition, 2
clustering 3
converted 1
clustering, 1
convoy 2
cmp 1
actions 18
cooking 1
actions, 1
cmpl 1
cooperatively 1
activate 1
co-authors). 1
copy-onwrite. 1
actively 4
co-exist 1
cores. 1
activities 3
co-workers 1
corn 1
activity 3
ad 3
adapted. 1
corner-case 4
coalescing 6
corre-sponding 1
coalescing, 4
coarse-grained 2
coarse-grained, 1
code) 3
code), 4
code.” 2
add 82
code/stack/heap? 1
add, 3
codes. 2
coherence 3
additional 15
correct 42
addl 2
coherence, 2
addr:0 4
correct, 2
address(es). 1
address). 1
correctly; 1
colleagues 3
address; 3
address? 1
correctly? 3
addresses). 1
collection 3
addresses): 1
corruptions. 1
com- 1
addresses; 4
addresses? 1
combina-tion 1
administrator 2
adopted 1
costly 7
advances 1
combines 1
advantage. 1
costly, 6
affect 10
affinity; 1
costs. 1
affordable; 1
come 9
afterwards. 1
couldn’t. 2
come–great 1
again) 3
age-old 1
count) 3
command-line 2
ago: 1
count++; 1
ahead. 1
commands: 1
al-though 1
count--; 1
al.’s 2
alas 1
commercial 3
alas, 3
commonalities 1
albeit 2
algorithm. 2
commonly-used 2
algorithm: 2
counter. 12
algorithms). 1
communicates 1
alive, 1
counter: 1
compacted 1
counter_t; 6
comparing 5
counterbalance 1
complementary 1
counter’s 2
complete). 1
counting; 2
coupling) 2
complete; 5
course) 1
complete? 3
covers 4
completed; 1
crazy! 1
completely: 1
crazy) 1
created. 3
completes 6
credentials, 1
critical; 2
critique 2
completes, 9
cross 1
completion. 2
crux 3
curious 3
curious, 1
curr->pass 1
currency; 1
complex 22
currently-running 9
curse 3
complex, 4
customer 2
complexity. 2
all 247
cycle. 1
components. 1
cycles). 2
components: 3
dandy. 1
all, 17
comprehensive 2
all-too-trusting 1
dark 3
compromised. 1
darned 1
computers. 1
computing. 1
computing2 1
allocate 31
allocate(10). 1
concept 9
concern 5
allocated 46
allocated, 2
allocation). 2
concern, 3
allocations 8
concise 7
concludes 1
allocator 26
conclusions 1
allocator, 5
concurrency), 1
allowed), 1
concurrent) 2
allowing 22
along 10
concurrently 9
also: 1
concurrently, 1
altered 1
alternately 1
alternately, 2
alternating 2
cond 17
condition) 1
conditional 1
always 53
always!). 3
conditions. 5
always, 5
amortization 1
configuration 2
amortized. 1
amt; 2
confusing 2
amt>0) 2
analogous 1
animals 1
confusing, 2
anon) 1
connection 1
anonymous 4
consider-ably 1
considered 10
consisted 1
constant. 1
constituent 1
constraints 2
constraints, 1
another 105
constructed. 1
consult 2
another, 12
answer! 1
answer) 1
answered 1
answered, 1
answers. 2
anyhow). 1
anymore. 1
anything? 3
appear 4
applicable 2
consumer 26
applications. 12
approach). 4
approach? 3
consumer, 6
approaches? 1
approximates 1
consumers), 1
be 785
arbitrarily 2
arbitrarily, 1
be, 2
contain 6
architecture. 4
contention; 2
architectures; 2
data 252
are! 3
contents. 2
area 5
context-switch 4
aren’t 5
context-switches 1
arg; 7
context; 1
become 32
data, 18
argc 1
contexts 2
datacenters, 1
contexts, 1
date 2
date, 2
daunting 1
argc, 23
contiguous 13
day 5
args 8
continue; 2
day, 2
args->a, 4
deadlock). 2
argument. 2
continues 7
argument: 2
continuing. 2
arguments; 1
continuously, 1
arises. 2
control-z 1
arises: 1
deal 16
control? 3
deallocate 1
deallocated 4
controls 5
deallocations 2
control” 2
convenience). 1
converts 2
before 130
cooperative? 1
before!” 1
copy! 1
around 42
copyon-write 1
decide 23
before, 7
cores 1
around, 4
begin. 3
correct. 2
begin... 1
array. 4
decided 6
array.c) 1
beginning: 1
array: 1
correct: 1
array’s 1
correcting 1
arrival 1
correctly! 2
behave 12
behaved 1
decision 15
behavior? 2
cost; 4
behaviors 2
decision, 4
costly. 3
arrive 21
declaration 5
below. 13
belt, 1
costs 8
arrived 6
benchmark 3
costs, 1
decreases? 1
couldn’t 2
decrement(counter_t 4
benefit. 1
dedication. 1
best-case 1
art. 1
bet 2
asides 1
better) 1
ask: 2
deep 7
better.” 1
asking 4
deep, 1
beyond. 1
aspiring 1
bidding. 1
defaults. 2
assertion), 1
binary. 1
defend 2
assign 3
defense 3
assignment, 3
defense, 1
association 1
associative. 1
defer 2
deletes 1
demand-zero 1
demanded 2
assumes 14
demands. 1
assumption. 2
assumption: 1
demonstrate 5
assumptions? 1
demonstrated 2
demoted 1
depending 12
depicted 2
depressing. 1
bit 93
dequeue 5
counter 116
dereference. 2
bit, 10
derivatives 1
bits) 1
counter); 6
descheduled, 1
bits), 2
bits1 1
describing 4
bits”. 1
descriptor). 1
bitwise 1
descriptor? 1
counter, 15
bizarre 3
descriptors 5
counts 4
descriptors, 2
couple 10
block 22
course). 1
block, 2
coverage 2
bombs, 1
design 22
coverage, 2
design, 1
designers. 2
covered 2
desire. 1
cpu 4
desired. 9
craft 2
desk? 2
crazier 1
desktop 4
despairing 1
despite 6
destination 2
destroy 1
destructive 1
detail; 1
book 47
book, 18
create 49
create(); 1
boost 8
details 46
boost, 1
create, 2
details); 2
boots 2
details, 4
boots, 1
detector 1
born. 1
born: 1
determining 4
borrow 2
deterministic. 2
created 22
developed. 1
both. 4
developer 2
bottleneck 1
developer, 1
boundary; 1
created, 14
developments 1
creation; 1
device. 1
creativity 1
creator 1
devices). 1
crime, 1
devices? 1
critically, 1
diagnose 1
crux: 5
curious. 1
curr 6
curr); 1
currency) 6
did), 2
bounds 48
current->next; 1
current->tickets; 1
bounds, 5
didn’t 11
brand 2
currently 27
die 1
die, 1
currently-pointed 1
died 1
break. 1
cycle 4
differences 2
cycles) 1
break: 1
differentiate 2
breaking 1
daemon 8
differently. 3
breathe 2
dangerous 5
brilliant. 1
dangling 1
brk 1
brk, 1
difficult 10
data. 9
broadcast 1
digest. 1
databases 5
broaden 2
directed. 1
broader 1
datacenters. 2
broadly. 1
directions. 3
date. 1
broken. 3
directives 1
deadlock) 2
directly. 3
brought 10
dealing 2
brutally 1
dirty-page 2
btrees. 1
debugging 1
buffer), 1
disassembler 2
buffer[MAX]; 1
debugging, 1
buffer[use_ptr]; 1
decade. 2
buggy! 2
decay-usage 2
bugs. 11
decide: 1
builder 1
decides). 1
builds 1
decimal), 1
built; 2
decision. 2
decisions? 1
declare 4
declared 1
decrease 2
decreased, 1
deep... 1
default? 1
at 576
defaults 3
defaults, 2
defeats 1
discuss 53
definite 1
discuss, 1
atomic 25
degenerate 1
discusses 1
atomic_increment 2
degree 3
discussion. 1
atomically. 2
deletion, 1
discussion: 1
atomically: 2
delivered 2
attachment 1
disk). 3
attacks. 3
disk-access 1
attacks2 1
delve 5
disk-drive 1
attain 3
demand? 1
attainable, 1
attempting 1
demands 2
disk; 4
attributes. 2
demand” 1
author. 1
disk? 2
authors’ 1
depend 3
auto-magically 1
depends.” 1
disks 4
automatically 6
depicts 1
disks, 1
automatically, 2
deployed. 1
dismantling 1
auxw 1
depressing 1
display 2
depths, 1
dereference 1
distinct 2
descheduled. 1
diverse 1
describes 6
available 31
dividing 6
do; 2
description 9
available, 11
description, 1
average. 1
descriptors. 1
avoid. 3
design. 2
but 288
do? 9
design: 1
but, 1
designate 1
bx=0,bx=1 2
documentation 3
bx=100). 2
designated 2
documents, 1
avoiding 16
does). 1
awake 1
away; 1
doing.” 1
designers 9
awesome 2
designers, 1
awesome, 3
dominant 4
designing 3
awoken 3
ax 4
desire 7
ax=0,ax=1 2
desire, 1
ax=1,ax=0 2
axis 4
b; 4
desired 52
desired, 1
desktop. 1
back 65
destination. 1
destination: 1
back, 4
destroy()) 2
back-and-forth 1
destroying 1
destruction 2
bad. 7
destruction, 1
balances 1
detail10 1
done 72
bandwidth 3
barest 1
detailed 8
barons 1
base. 1
done, 6
base/bounds 5
done\n", 2
basi-cally 1
don’t. 1
double-check 1
double-click 1
basics 13
details. 34
doubt 2
detects 1
down-wards 1
be. 11
downsides. 1
be: 2
downward 1
determines 17
downward, 1
beautiful 9
draw 2
beautiful, 1
deterministic 8
dread: 1
deterministic, 2
deterministically. 1
drive 5
became 21
drive, 2
bed. 2
before. 7
developed 23
began 4
developer. 2
developments. 1
due 19
device 11
device, 1
duration 2
deviously 1
d’un 1
diagram). 1
diagrams 1
earlier. 2
begin 32
differ 2
begin\n"); 5
differ, 2
ease 4
begin\n", 2
differences. 2
ease-of-use 1
differently 1
differently, 1
beginning 15
beginning, 1
difficult. 3
begins! 2
digested; 1
begs 2
direction; 1
begun, 1
behave. 2
behavioral 1
directly 8
behaviors. 2
behind-thescenes 1
directly, 5
directory; 1
dirty 11
dirty, 2
easy 50
disable 3
being 54
easy, 1
disappear). 1
disappears 2
below 11
eat 6
disassemble 2
below, 2
benefit 1
disassembler. 2
best; 1
discipline 1
bet. 2
discipline, 1
better-than-expected 1
better? 1
disciplines) 1
eax 20
disconnection 1
eax, 3
eax=50. 2
discovered 4
discredited 1
eax=51), 2
beyond 20
discretion 1
ebp; 1
big; 1
ebx; 1
big? 1
discussing 4
ecosphere 1
biggest 4
edit 2
big” 1
edition. 1
billions) 1
editor? 1
binaries, 1
effective) 2
discussion 17
discussion, 1
effectively 5
disk) 3
effectively, 1
binary 14
disk), 2
efficacy 2
binary, 1
disposal.” 1
efficient) 1
bind 1
distribution 1
dive 4
bit. 5
efficiently 10
bitmap 2
efficiently, 1
divides 6
bits). 4
do) 1
effort 3
bits? 1
do), 1
by 705
egomaniac. 1
byte). 1
black 3
documented 1
does), 1
blame 3
block. 3
element 14
blocking 2
element, 2
elsewhere. 2
embarrassment. 1
book. 23
emphasis 1
books). 1
bytes 41
bookshelves 2
boost. 1
employ 4
boring 1
bytes, 10
born 4
doesn’t 51
born, 1
doesn’t, 3
doing; 1
doing? 2
done. 10
enables 23
encounters 2
endless 4
ends 4
both 87
end” 8
both, 1
enforcement, 1
bottleneck. 2
engineering; 1
bottom 10
bottom, 2
bouncing 1
don’t 81
don’t, 2
bounded 8
double) 1
double-precision 1
bounds. 5
doubt. 1
box, 1
boxes 2
bragging 2
break 5
enough 32
break, 1
down 25
briefly 7
down, 1
enough, 5
brilliant!” 1
download 2
brings 1
downsides, 1
broadly 1
c 177
downward. 3
broken 1
draw. 1
broken, 2
drawn 1
c->global 4
dreams 1
buffer; 6
c->threshold 2
drink 2
buffers 6
drive. 2
c->value 4
bug; 2
driven 1
driver 1
c4 6
bugs 6
driver8 1
c4, 1
bugs, 2
dummy 4
cache). 1
ensure 34
busy. 1
duty. 1
cache; 2
byte) 2
dx 2
cache? 2
bytes. 3
dx=3,dx=3 4
c->local[cpu] 4
dynamics 1
caches 16
c2 10
e.g., 8
c2, 1
caches, 5
c6 6
caching. 1
c6, 1
calculation 1
c:100:50 1
calculation, 1
earlier 18
cabinets 1
enter 32
cache) 1
earlier, 3
call). 5
caches. 1
enterprising 2
ease. 1
call-ing 1
easy-to-use 2
caching 9
call3 1
entirely. 4
calculates 1
easy. 3
call; 2
entity), 1
calculation: 1
easy: 2
calculations? 2
call? 4
eaters 2
call) 1
eating 1
call), 1
called. 4
call1 1
eax. 5
eax=50 2
edx; 1
caller 14
entries 22
effectively. 3
caller, 4
entries); 1
effects 1
calloc() 1
effect” 1
efficiency; 1
entries, 5
efficiently. 1
elapsed. 1
electrical 1
element. 1
elements; 1
else? 2
elsewhere 3
elsewhere, 1
email 2
called 111
emailing. 1
embracing 1
emptied 1
called, 10
empty), 1
caller. 2
caller’s 1
calls. 5
calls: 3
enabling 15
calls 88
camp, 1
enacted 1
calls, 3
candidate 3
enacted, 1
can) 1
encountered 1
canceled, 1
end), 1
candidates; 1
entry 55
end”. 1
energy-efficiency 1
can’t 30
engineers 2
entry, 8
carts 1
enjoys 1
equation 1
carved 1
enlisted 1
cannot 21
era. 1
case) 1
enough. 2
cases. 3
care 10
enqueue 4
casting 1
error 17
ensued 1
catastrophic, 1
care, 2
error, 3
careful), 1
entering 9
etc. 5
etc.); 1
entirely 4
etc.)? 1
entirety 2
etc., 1
carefully 17
entity; 1
carefully, 6
entries. 3
cause 24
entries: 1
case; 3
caused 2
case? 5
caused, 1
entry. 10
envisager 1
center 2
central 7
centralized 1
equal 19
cases 29
equal, 2
challenge. 4
equivalent. 2
era 7
challenge: 9
era, 1
errant 3
cases, 27
chances 4
errantly-freed 1
cast 4
errorprone. 1
catches 1
errors? 2
cause. 1
esi; 1
caused. 1
caution 1
essential 3
est 1
changes 20
estimate 2
changes, 1
evicted 3
channel 1
evicted, 1
evil 1
exam- 1
even 148
certainly 32
examining 4
event 3
certainly, 1
chain 2
challenge 5
challenge, 1
chapter. 25
change! 2
ever 19
changes. 1
ever, 1
chapters). 2
everywhere, 1
characterize 1
evicted. 2
changing 9
cheat 2
evicts 3
check; 1
checkbook 1
chapter 37
exactly 39
exam? 1
chapter, 16
checks 25
examines 3
chapters) 1
child/parent 1
character. 1
children 1
cheapskate. 1
cheating 1
children, 3
child? 2
choice. 1
chips 3
choice: 1
example. 31
example... 1
choice 8
example 131
choose 5
choice, 2
chops 1
example: 8
chores.” 1
chopped 5
examples; 2
chosen). 1
exception; 2
chunk. 4
exceptions 3
chunks). 1
excited 2
chunks; 1
citation 1
class), 2
classmates; 1
exclusion 21
clean 9
exec() 13
clear 12
chunk 44
exec(), 6
clear, 5
execl(), 1
chunk, 3
execlp(), 2
circular 1
client 5
client, 2
citation. 2
clock; 1
executable 13
cite 2
close(), 1
executable, 3
cited 2
closing 2
closing, 2
claims 2
cloud 2
class? 2
cloud-based 1
clustered 1
clean-page 2
executes 23
cleaning 1
coalesce 2
executes, 3
clear. 2
executing. 1
clear: 6
clearing 2
execution. 17
execution: 1
clever 5
execvp(). 1
clever, 1
execvp(myargs[0], 2
client. 1
exhaustive 3
client/server 1
existed 1
client’s 2
exists. 4
close(STDOUT_FILENO); 1
closes 3
closest 1
exit 13
clues) 1
exiting. 1
expectations? 2
co-authors 5
coalescing) 1
expected 7
coarse 1
expected, 4
cocoon, 1
experimentation. 1
expires. 1
explained 2
example, 262
exceeding 1
explicit 22
exploited 2
exploits. 1
express 1
extracts 3
code. 44
extreme 4
eyes 2
facets 2
code: 7
cold-start 2
collaboration 1
columns 1
excellent 42
fact 20
excellent, 4
combine 7
combined 1
exceptional 5
excessively 1
exchange1 1
exciting! 1
coming 7
fact, 28
command. 2
fail. 2
exclusion. 6
commands; 1
failing 3
exec(). 2
failure. 1
exec(): 1
faint 1
executed), 2
fair 19
fair, 1
executing 26
fair-share 7
executing, 2
code 391
families 1
code); 2
family 5
far) 2
fashion. 3
common 61
common, 1
code, 73
communicate 2
cofounded 1
fast 19
cold- 1
community 3
colleagues’ 1
fast, 6
community, 1
collected 1
execution 48
compact. 1
collectively 2
fault. 7
collector 2
compaction 3
faulting 2
color 1
favor, 1
company’s 1
execution, 8
columns. 1
fd 1
comparison: 1
columns: 2
execv(), 2
compete 1
execvp() 1
compete, 1
combination 11
competitive 1
execvp(), 2
exercise 4
fetch 29
comes 14
exert 2
fetch, 2
compile 11
exhibits 2
compile-time 1
command 12
exist). 1
fetches 10
command, 4
exist; 2
commandline 1
fetches, 2
compiled 6
commentary 1
existed. 2
commonlyused 1
compiled, 1
community. 1
existence 3
compact 3
exists 3
companies 6
companies, 1
exists, 3
company 1
exit()) 1
company, 2
compare 6
exit. 5
complete 23
compare-and-exchange 2
exiting 2
exits; 2
compare-and-swap 10
complete, 7
exits? 2
compare-and-swap, 2
complete?) 2
expand 1
expect; 1
compared 7
completed 5
expected. 4
comparison 7
completed, 2
expected: 2
comparison, 3
completes1 1
competitive. 1
expects 3
compiled(!) 1
completion; 5
complicate 1
experience 9
experiments 3
few 102
compiler 26
expert 3
few, 2
compiler, 2
fewer), 1
expert, 1
complicated 13
complain 2
fewest 2
explains 2
complicated, 1
complete. 6
field. 1
exploring 2
complications 1
complete: 1
field: 1
exporting 1
comprises 1
completes? 1
expose 1
completion), 1
exposed 1
complex-instruction 1
compulsory 5
extend 2
complicated. 4
compulsory, 1
extent 1
complicated: 2
computation. 2
component 5
computation 2
figure 35
computation, 2
computational-overhead 1
extra 18
compute 12
figure, 15
fact. 2
computed 1
figured 2
computer. 1
file-system 1
fact: 3
con- 1
file. 2
concatenate 2
file.txt 2
file: 1
files” 1
concerned 5
fail 13
file’s 2
concerned, 2
computer 59
fill; 2
failed; 2
conclude 2
computer, 3
filled. 1
computers) 2
fills 3
computers), 2
concurrency. 7
failure 21
concurrency: 2
concepts 7
fair. 1
concurrently) 1
concepts, 1
familiar; 1
conceptually 2
family. 1
concurrently), 2
concern; 1
famously 3
concurrentlyrunning 1
fancy? 1
concerns 3
far; 1
concrete 1
concrete, 1
condition. 8
fashion 4
condition: 1
fashion, 1
conditionals. 2
fast. 5
conditions; 2
faster; 1
configurable 1
fastpath) 2
concurrency 36
configure; 1
confines 1
final 51
confront 1
concurrency, 10
fault 12
findings 2
connects 2
cons. 1
fault, 7
fine 7
consider. 2
faulting. 1
fine, 1
finish), 1
considering 6
favorite 8
constants 2
finished 14
constants, 1
feature 5
constitutes 1
finished, 10
feel 8
construct 5
first-out) 1
construction. 1
concurrent 80
consulted 1
concurrent, 2
fetch-and-add 8
consulted, 1
first. 10
concurrently; 1
consumers. 1
fetch. 2
concurrently? 2
fit; 1
consumes 2
cond; 2
fit? 1
fetching 4
cond_t 5
few. 1
fewest-possible 1
fits 9
fits, 1
contending 14
five 8
contention 4
field 15
contention, 2
field, 2
fight. 1
condition 81
condition); 1
condition, 7
confections 1
configurations, 1
confining 1
confuse 1
confused 1
flag 73
confusing; 1
flag)? 1
connected 4
connections 1
flag, 14
flag[0] 2
flash-based 2
consider 26
flavor 2
considerably 1
context 70
flight, 1
consist 2
floor 1
context, 2
conspired 1
flush 5
contiguously 2
focus. 1
file 95
const 3
focusing 2
constantly 3
foil 2
constructing 3
continue 10
file, 9
follows 6
construction 7
continue, 1
file.txt|wc 1
for? 2
consults 1
files) 1
continued 1
forces 2
consume! 1
fill_ptr 2
forever! 2
consumer; 1
forget-ting 1
forgets 1
consumers 9
filled 6
consumers, 2
finally), 1
fork 7
consuming 3
consumption 1
fork(); 4
form. 2
finds 10
formally, 1
fine. 2
forms; 1
finegrained 1
formula 2
finished. 2
formula, 1
forth). 1
contains 32
forth; 1
contention. 2
forward! 1
context. 2
forwarded 1
contiguous; 1
found. 2
fourteen. 1
continue. 7
continuous 1
fraction 5
contributed 1
fragmentation; 1
contributions 1
fragmentation? 1
control. 1
fragmented) 1
control: 1
conundrum 1
frames 5
control 79
convention 2
framework 3
cope 1
control, 4
control-c 1
convenience 2
copies 12
convenience, 1
convenient 1
converge 1
copy 18
converse 2
copy, 1
convince 1
copying. 1
convoys, 1
core. 2
cooked 1
corollary 2
correct) 1
correct-ness; 1
correctly 19
cool 17
correctly, 3
cool, 1
coolest 2
correctness 9
correctness, 4
cooperative 5
cost. 1
copy-on-write 5
cost: 4
copy-on-write, 1
costing 1
copy. 1
costs? 1
copying 4
core 8
core, 5
correct; 1
correct? 3
correctly-working 1
correctly. 8
correctness. 3
correctness: 2
corresponding 10
cost 49
cost, 5
costly; 2
free 187
free()? 1
free(50). 1
free(rvals); 2
free(x); 1
count 25
free, 5
counter) 1
counter++; 1
freed 3
counter1 1
freedom 1
counter1, 1
countermeasures 1
frequency 5
frequent 4
frequently; 1
friend: 1
from. 5
full). 2
course 20
full; 2
first 278
could 137
could, 1
count. 2
counter; 2
function 41
counterpart 1
function, 3
future; 1
game 4
first, 20
game, 1
gcc) 1
gdb) 1
first-fit 3
counters 14
first-fit, 1
first-in 2
counters, 6
fixed 13
counting 7
course, 73
counting, 2
court, 1
counting-based 1
fixed-sized 11
course. 4
covering 7
flag. 13
cpu.c 2
flag[self] 4
crash 2
flag’s 2
crash, 1
cover 11
general 41
flavor. 1
crashes 2
flexibility; 1
cover, 2
floating 1
crashes, 3
crash. 1
crazy 3
crazy. 2
cream.” 1
create()6 1
flow 14
flushing 1
general, 18
create() 11
generalize 1
create()); 2
generalized 1
focus 21
create(), 2
generalized, 1
focuses 3
creating 9
followed 5
creates 34
creation: 1
creators 1
generates 10
creature 1
follows. 4
credit 3
get: 4
criterion 2
getpid() 1
creation 20
creation, 6
criteria. 2
getpid()); 9
cruces 1
getpid(), 2
follows: 21
curr->next; 4
gettid() 2
curr->stride; 1
foo 4
currency. 2
gettid()); 4
footnote: 1
current: 1
gettimeofday()). 1
for) 1
currently-executing 2
gettimeofday(); 1
forays 1
forcing 1
cycles. 4
foreground) 1
daemon1 1
foreman 1
dairy 1
danger 2
forever; 2
darker 1
fork()/exec() 1
darn 1
data). 1
data; 1
data? 1
critical 140
critical, 2
crucial 2
crude 2
getting 33
ctxt 1
database 13
culprit 1
datacenter. 1
currency 4
days 4
days, 6
de 1
gives 15
deal? 2
glance 1
current 37
deallocates 1
customer! 1
customized 1
debate 2
globally 4
debug. 1
globally-shared 1
form 46
cycles 11
gnu 2
debugger 6
cycles, 3
cyclic 2
form, 6
cyclic-sequential 1
formally: 1
data) 2
data), 1
decides 11
format; 2
data[100] 1
decimal. 1
datacenter 1
forth), 1
datacenter, 1
day! 1
days. 1
forthcoming 3
decisions 7
days... 1
fortuitous 1
days: 2
decisions, 2
de-queue 1
declaring 1
deadlock 5
decreasing 1
deallocation, 1
debug 1
debug, 2
deeper 5
decayed 1
deeply. 2
deciding 5
go 37
decimal 2
decisions. 2
go, 2
declares 2
default 7
decodes 1
default, 2
decreases 3
defeat 1
decrees 1
defense; 1
dedicate 1
defensive 1
dedicated 2
deeper. 1
defined. 1
deeply 1
deeply-nested 1
goals 15
definitely 4
goals, 1
define 9
defined 5
definition 6
definitive 1
degenerates 2
delaying 2
delay 2
deletion) 1
delete, 2
deleted 1
delight 1
deleted); 1
delving 1
deliver 8
demand. 1
demanding 3
demise 1
dense, 1
demand 11
dependence, 1
goes 27
dependent 1
demonstrates 3
going. 1
deploy 1
depends 5
deployable 1
good! 2
depiction 2
deployment, 1
goodness); 1
deployment. 2
depth 2
derive 1
good”. 1
deschedules 3
found 84
descheduling 2
goofs 1
describe. 1
found, 2
descriptor 1
describe 14
descriptor, 2
foundational 2
design) 1
designed 9
designs. 1
desired). 1
got 16
desires 1
desk 1
gracefully, 1
described 36
destroy() 2
granting 1
descrip-tion 1
destroyed 1
design-ers, 1
granularity, 2
designer, 1
designs 1
designs, 1
design” 1
desirable. 1
detail 26
desktops 1
dest_buffer[100]; 1
graph 11
detail, 6
details! 1
details) 1
detail. 12
details1 1
detecting 1
graph, 6
details). 4
deterministically) 1
grasshopper, 1
four 52
details; 3
detour 1
detect 5
greater 4
deter- 1
fourth 4
greater-than 1
develop 12
fragmented; 1
develop, 2
free()) 1
developed; 1
grep 7
free(10), 1
developers. 2
groups. 2
determine 34
free(void 4
grow; 1
free-page 1
development 13
determined 9
device; 1
developer; 2
developers 12
devices 15
devices, 2
developing 7
did. 2
device), 1
differ? 1
grows 16
free. 13
devices. 4
grows, 4
freed. 3
diagram 10
difference 18
guarantee. 1
diagram); 1
difference, 4
freeing 6
guard; 2
diagram, 6
dictates 1
guide 1
friend 3
habits; 1
friend, 2
hacker 2
halted, 1
did 22
hand-controlled 1
did, 1
die). 1
handle. 1
dies, 2
difference: 4
different. 2
different: 2
differentiates 1
difficulties. 1
digging 1
digit 1
directing 1
direction 1
direction, 4
handler 24
handler, 3
directory 18
hands 4
hang 1
directory, 8
dirty) 2
happen. 2
disabling 5
happen: 1
disappear 1
happening 1
disaster. 1
discipline1 1
happens; 2
disciplines. 1
discrepancy 1
happens? 2
discussed. 1
different 196
disk-like 1
different-size 1
different-sized 1
differentiation 1
happy 5
differently; 1
disk. 14
differs 1
displays 1
hard-and-fast 1
difficulties 2
dissertation 6
harddisk 1
difficulty 4
digest; 1
divide 6
harder 4
divided 8
direct 14
diving 1
direction. 3
directory. 6
directory: 1
disabled; 3
do. 18
disciplines 2
do: 2
does. 1
does: 2
discussed 24
discussed, 1
discussion). 1
doing 76
disk 54
disk); 1
doing, 3
doivent 1
dollars 2
disk, 14
dominate 3
disrupt 1
done; 1
distinguish 2
done? 1
double. 1
distributed 7
doubts 1
dives 1
downfall. 2
downside, 1
downward). 1
downwards 1
dramatic 2
dream 1
drives 2
drives, 1
drop 4
dump”, 2
during 29
dustbin 2
dx) 4
dynamic 20
dynamically-allocated 1
dynamically-allocated, 1
e 1
do 328
do, 11
document 1
documents/R4400 1
hardware 263
hardware, 15
hardware-based 5
harming 2
harsh, 2
has. 1
hash_t; 2
hate 1
haul, 1
each 340
each, 1
from 443
have. 3
eagerly, 1
earlier) 1
from, 3
have: 2
fullness 1
earliest 13
fully 8
fully-associative 1
fully-associative, 1
function. 2
functions; 1
fundamentally 3
funny 1
head 39
head, 1
head_lock, 2
early 68
eases 1
does 256
does, 6
further 31
easier 19
doesn’t). 2
easier, 1
doesn’t? 1
further, 2
doing. 3
easily. 3
fusion, 1
doing: 1
easy; 1
domains 1
eater 2
domains, 1
edi; 1
done! 3
done) 1
effect 4
double 3
double-ing! 1
doubt! 1
draconian 1
futex 16
effective 12
dramatically 2
dream. 1
effective, 2
futex_wait 2
drivers 1
efficiencies 1
driving 1
gained 1
drops? 1
dynamically 1
gains. 1
efficiency 8
each. 4
gates 1
earlier). 1
efficiency, 3
gates, 1
earlier; 2
heap 76
general. 1
easier. 1
heap); 1
generality, 1
efficient 19
generalization 5
easily 17
easy-to-read 1
efficient, 5
generalpurpose 2
eaters; 1
efficiently; 1
generating 2
eax=51. 4
efficiently? 5
ebx, 1
generation 1
economist. 1
heap, 22
efforts 2
ecx; 1
eight 1
editor 2
hearing 3
eip; 1
editor, 1
heart. 1
effect. 1
heavily 2
effective. 3
heavy-handed, 1
efficiency. 3
eight-page 1
held) 1
either. 1
ele-ment 1
emails 1
employed 4
held), 7
employs. 1
help) 1
helped 2
empty 14
empty, 3
either 49
en-us/um/people/mbj/Mars 2
elements 8
here. 11
enable 24
here: 10
enabled 4
here’s 1
enabled, 4
enact 1
hexadecimal), 1
ence 1
hey, 1
encounter 7
hide 1
hierarchy; 1
else 45
high. 3
else, 7
high: 1
else-where, 1
employs 3
higher-priority 2
empty. 1
emptying 1
highlyfragmented 1
emulate 2
him 1
emulator 1
end 46
en.wikipedia.org/wiki/LoadLink/Store-Conditional. 2
hints 4
end, 5
enable. 2
enabled. 1
end\n"); 5
endeavors 1
enacting 1
get 126
endlessly 2
encapsulated 2
endlessly, 2
encounter. 1
engineering 2
enough! 1
encountering 1
get(); 5
enough), 2
historical 14
ghastly 1
encourage 3
github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
encouraged 1
ensuring 14
end-of-string 1
entered, 2
end. 1
ending 1
enemy? 2
engineering. 1
history 16
giving 15
enjoy 3
enormously 1
global; 2
history, 3
enough; 1
hit! 1
globally-allocated 2
entire 46
goals. 2
entirely; 2
hit), 4
entirety? 1
entry) 1
hits. 1
entry), 1
ensures 14
hoc 2
environment. 4
equals 3
hogging; 1
errors. 1
escalation 1
esp; 1
hold? 2
holder 2
especially 13
enters 21
establish 3
going 29
establishment 1
entities 5
estimator? 1
good? 1
entitled 2
etc.) 11
entity, 3
entries). 2
evaluate 6
evenly 3
entries; 2
grab 11
entry). 1
grabbing 2
entry; 2
grand 1
entry? 1
graph. 1
enum 2
gray) 3
environment 4
greater. 1
holds 38
environment, 2
epic 1
holds, 2
greatly 4
every 52
equally 1
honor 1
equation; 1
greedy 3
honor, 1
equivalent; 1
evict 9
honorable 1
eviction. 1
error-prone. 1
groups 3
hood 1
evidence 1
error; 1
grows. 1
grows: 1
hope. 1
error? 2
host 2
hour 1
errors 9
guarantee 21
guaranteed 1
essay 1
guessed 1
guessed, 5
guest 1
guide. 1
guide: 1
essentially 11
examine 36
habit 2
hacked 1
example). 3
hair 4
et 7
hallmark 1
example? 2
etc.). 1
hand-assembled 1
etc.? 2
hand-over-hand 8
handed 4
events 5
examples 21
handle 17
handle, 1
examples, 3
eventually 15
handled 4
excellent; 2
handled, 1
eventually, 1
handler. 2
evermore 1
handlers; 1
hands-on 1
everyone 1
exception 15
happen 15
happen, 2
exception, 3
happened; 1
excess 1
everything 12
happy. 4
harder. 1
excessive 3
evict. 3
hardly 3
exchange 2
evicting 1
excluding 1
eviction 3
hardware-managed 9
execle(), 2
evil.” 2
hardware. 10
evolution 3
hardware: 3
evolved 1
hardware’s 1
harm 3
execute 29
execute, 2
exact 26
exactly? 2
executed 17
example) 10
executed, 5
execution” 1
execvpe(). 2
example), 10
exercises 4
exhibit. 1
examples. 3
exist. 5
exist: 1
exceeds 8
except 6
exception. 1
existing 14
exceptionally 2
exchange1) 1
exit() 6
excludes 2
exclusion? 2
exit(1); 6
excuse 1
exit), 1
exec 2
exited 1
exec(); 1
exiting? 1
execl, 1
executed. 1
exits. 4
executing) 1
expect. 2
execution), 3
expect: 4
exhibit 3
expectations 1
expected) 4
expensive 3
exist 11
expensive!). 1
exist, 1
existed; 2
expensive, 6
experts 1
exit). 2
explanation 1
exit; 1
exit? 1
exited2 1
exits 3
explicitly 12
exits, 2
explore 5
explored 2
exploring? 1
expressed 2
expect 15
extents 2
expect, 2
expected; 3
external 10
expected? 2
has 348
expensive. 2
has, 1
extract 7
experiment 5
extremely 3
experiment, 1
explain 1
face 4
hash 17
explicitly. 2
exploit 1
exploration 1
factor 8
exports 1
fail? 1
extended 5
fails 5
extension 1
fails, 3
eyes...) 1
failure; 2
facility 3
failures 1
fact). 1
fail! 2
fairly 9
failed 8
failed, 1
fairness 7
fairness, 2
failed\n"); 4
failure), 1
fall 5
failures. 2
familiarity 2
fairness. 6
fairshare 1
falling 1
familiar 2
family? 2
famous 21
fanatics, 2
far-reaching 1
fancifully 1
how 441
far. 1
how, 1
far: 2
however: 1
fancy 7
hptr 1
fantastic 1
http://people.freebsd.org/˜jasone/jemalloc/bsdcan2006/jemalloc.pdf. 1
fantastic, 1
http://www-formal.stanford.edu/jmc/ 1
fascinating 9
http://www.sparc.org/standards/SPARCV9.pdf. 2
fashion). 1
http://www.unix.org/version3/. 1
fashion; 1
https://birrell.org/andrew/papers/035-Threads.pdf 2
hugely 3
faster. 6
fault3 1
fault; 2
far 21
hundred 7
fault? 1
faults 3
faults, 2
hybrid 10
feasible 1
far, 13
hybrid, 1
fares 1
hypervisors, 1
farmer 1
fast; 1
features 17
faster 16
features, 2
feeble 2
faster, 6
fell 2
fast” 1
fellow. 1
i.e., 29
fault) 1
i5 2
felt 3
faulting”, 1
i=0 1
fetch), 2
faulty 1
feasible. 1
iMac 4
fetched 5
feature-filled 1
idea; 1
few) 1
features. 2
idea? 2
few), 2
ideal? 1
fewer. 1
feedback 5
fields 2
fellow 1
fields, 1
fetch-ing 1
field” 1
few). 1
figure), 1
figuring 1
file; 1
fewer 13
fg 1
files 10
figures 4
files, 3
figures, 1
ideas 36
file), 1
ideas, 3
files. 1
identifiers, 1
fill 11
fill. 1
filling 1
idle 5
idle, 1
ignored. 1
illegal 11
illegal, 1
finally 27
illegally). 1
have 487
illusions 1
have, 1
illusions, 1
havoc’ 1
finally, 8
head->next 1
head->size 1
find!) 1
headaches. 1
find. 1
header). 1
header_t 1
headers 2
headers, 1
heap-allocated 1
finding 15
heap. 10
fine! 1
heap: 2
fine-tuned 1
hear 1
heard 1
finish. 2
heart 2
imagine 41
finishes. 1
heavily-used 1
held). 2
imagine, 4
held; 2
imbalance. 1
first; 6
find 86
helgrind? 2
first” 1
immediately. 2
fine). 1
immense 1
hello 5
fine-grained 3
impact 5
hello, 8
fine; 2
helpful, 1
fingertips. 1
impact, 3
helps 5
implementation 7
fit 27
implementation)” 2
fit, 2
finish 13
five-level 1
implementation, 2
finish, 2
fix 3
implements 6
finishes 6
flag) 5
implications. 1
finishes, 1
flag), 2
fire). 1
flag.s 2
fires 1
importance 8
here 46
first) 1
flag=0 2
importance, 1
first-level 2
flag[1] 2
fitting 3
flag[2]; 2
fix. 1
flags. 2
flag). 2
flag.s. 2
here, 22
herein), 1
flags: 9
heuristic 2
flag; 6
heyday 1
flaws. 3
flag? 3
hidden 4
flexibility: 2
flags 10
flexible 9
flags, 1
flexible, 1
flaws 1
flexibly 1
flexibility 2
flushed 1
fly 1
focused 3
folks 1
focused, 1
follow 2
important 63
high 36
follow, 1
high, 4
important, 7
high-end 4
following: 8
higher-level 1
highest 20
improve 17
highlight 3
himself, 1
hinted 3
improved 6
hire 1
improvement 3
in-between 5
in-terface 1
in/out 1
following 55
in; 2
for. 3
in? 2
for: 1
inadvisable 1
forcefully. 1
inc 1
his 37
forefront 2
incl 1
history. 3
inconclusive 1
history... 2
hit). 1
forever 6
hit; 1
incorporate 7
forever, 6
incorporated 4
hits 13
forewarned, 2
forget: 1
hits, 2
hole 1
forgetting 2
forgot 2
homework 9
increase 20
fork(). 2
fork()ing 1
increased 3
fork.py, 1
homework, 9
increased, 1
fork; 1
honor. 1
incremental 1
honor: 1
formal 2
incrementalism; 1
formal, 1
incremented 4
formed 3
incremented, 1
hope 13
forms: 1
indefinitely. 2
formulae. 1
hopefully 6
independent 4
hopefully, 3
index. 1
house 2
index: 1
how: 1
indexing 1
forth. 10
however 1
fortunately, 2
indicating 8
indivisible 2
forward 4
industry 2
fought 1
inefficiencies. 1
four-level 1
inefficient. 4
inexpensive 1
fprintf(stderr, 6
infinite 6
influential; 1
however, 49
info: 1
fragmentation. 6
http://books.google.com/ngrams). 1
fragmentation2 1
http://cag.csail.mit.edu/raw/documents/R4400 2
fragmentation: 1
http://en.wikipedia.org/wiki/ 1
http://history-computer.com/Library/AltoUsersHandbook.pdf. 1
fragmented 3
http://ostep.org/Citations/inside-cfs.pdf. 1
fragmented, 2
frames; 1
http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD123.PDF. 5
http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF 1
http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1303.PDF. 1
free(). 6
http://www.ibm.com/developerworks/linux/library/l-solar/. 2
free(): 1
http://www.intel.com/products/processor/manuals. 3
free(ptr), 1
http://www.multicians.org/history.html. 1
https://en.wikipedia.org/wiki/Buffer_overflow 1
information 57
https://github.com/mit-pdos/xv6-public. 1
free; 5
https://quoteinvestigator.com/2015/07/23/great-power. 1
humans, 1
information, 6
hundreds). 1
free? 4
informs 1
hung. 2
freed; 1
hybrid. 1
infrequently 1
inherently 2
inherits 1
frees 6
init: 2
frequencies; 2
i++) 18
frequency; 1
initial 5
frequently-used 1
initialization. 3
frequently. 1
i; 16
idea! 1
friendly 5
ideally 1
frightening 1
initialize 15
idiom: 1
from) 2
initialized 8
ignore 5
initiates 4
injected 2
illegal. 2
front 10
innocent 1
innovations. 1
frustrating 1
inodes, 1
imbalance 3
frustration 1
input: 1
imbalance, 1
ins 1
fully-developed 1
inseparably 1
insert(queue, 1
inserted 2
insight 1
inspired 1
installation 1
installation, 1
installs 2
instead. 4
fun 20
func() 4
immediately 23
functionality 2
functionality, 2
immediately, 4
implementation. 4
functions 7
functions, 1
fundamen-tally 1
funky 1
implemented 10
furthest 5
implicitly 2
important. 5
future. 9
improve. 1
gadget), 1
improvement. 1
in) 2
gaining 5
in- 1
garbage 2
garbage-collected 2
in-between. 3
incarnation. 1
gcc 10
instruction 130
gcc, 1
instruction(s) 2
gdb 5
gdb, 2
include 18
instruction, 19
instructions) 2
instructions), 1
included 4
general-purpose 8
intact; 1
inclusion 1
general? 1
incorrectly. 1
generalizes 1
generated. 1
integer 17
increased. 5
integer, 4
generic 4
integers), 1
intend 2
intense 2
increasingly 6
intensively 1
get() 7
getrandom(0, 1
intent 5
increment(counter_t 4
interact 15
increments 7
indefinitely, 1
independently! 1
interactive 20
interactive, 1
interest 3
interesting. 2
intergalactic 2
interposing 1
interrupt), 1
interrupted 14
index 20
indexes 1
interrupted, 3
indicated). 1
intervals. 1
intervals: 4
indicates 3
indicative 1
indirection 3
inefficiencies 1
given 80
inefficient 4
glibc 3
inefficient, 2
infinite. 1
inflation 2
inflation, 1
info 1
information. 9
informative 3
informed 3
informed, 1
inheritance. 2
global 56
init 4
globallyshared 1
goal: 1
init(); 2
goals? 2
gods, 1
init(lock_t 4
gone 5
initialization 8
initializer 2
initiating 1
inkernel 1
inner 1
innovations 2
innovations, 1
innovator 1
inode) 2
input 20
input); 1
input, 1
input/output 3
insert; 2
inserted. 1
good 99
good, 2
government 3
graduate 9
into 339
grande 1
into, 1
intricacy 1
graphics 2
introduces: 1
inside 30
graphs 1
introducing 5
insisting 1
great. 1
inspiration 1
greater). 1
installed 1
green 1
grew, 1
instances 2
introduction 17
introduction, 1
intuition? 1
intuitively 1
group 12
invention 1
grow. 1
inventory 1
investigating. 2
growing 5
invocation 1
grows? 2
invocation, 1
growth: 1
gruesome. 1
guarantees. 2
is. 7
gum 1
guy 3
hack. 1
is: 9
hackers 1
isolating 1
hacking 1
isolation 3
isolation, 2
issuing 6
it! 14
it) 5
had 57
halt 5
it), 4
it.” 1
hand. 3
handed-out 1
it?!) 1
handler). 1
item; 1
handlers 5
instead 95
handlers, 3
items 9
instead, 5
handling 14
handling, 1
iterations 4
iterations, 1
happened 5
happening? 1
iterations/threads: 2
happens. 3
itself; 3
happens: 5
hard-andfast 1
itself? 1
hard-to-find 1
jacket, 1
hard-working 1
hard. 1
job). 1
instruction. 22
hardware). 3
job? 1
instruction: 1
hardware-interpreted 2
hardware-specific 1
instructions). 1
hardware; 2
hardware? 1
instructions; 2
harmful. 1
hates 1
instrumentation 1
haven’t 4
int) 2
int), 2
interact. 1
interacting 1
having 29
havoc 2
interaction 13
he 20
interchangeably 1
head->value; 1
head; 2
interest: 2
interested! 1
header 15
header, 4
heap). 1
heap; 2
heap? 3
heavy 5
heavy, 2
heavyweight 1
for 1176
jobs 102
jobs); 1
for, 2
force 2
forced 2
held 25
forcefully 2
held, 6
forest, 1
jobs, 14
forever. 1
join. 2
forewarned: 1
jumping 2
interesting 46
helgrind 16
helgrind, 2
forget 8
interesting, 4
forget, 1
help 38
interfaces 17
help, 1
here! 1
interfaces, 1
here) 4
fork() 25
interfere 2
here), 2
herein. 5
interleaving 4
hex 4
hides 1
fork(), 9
interleaving, 2
form). 1
hierarchy. 2
formed. 1
interlude, 2
high-level 6
interpretation 1
highest-order 1
highlighted 1
former 5
interrupt; 1
highly 7
forms 3
interrupted. 2
highly-networked 1
history; 1
forth 3
forth, 4
forward-growing 1
found? 1
hit 32
fragmentation 13
interrupts 33
fragmentation, 6
hit, 28
interrupts, 4
hog; 1
hogs, 1
intervals 6
holding 12
interval’ 1
home 3
homeworks. 1
intricacies. 2
honest 1
intriguing 1
hoping 6
intro 3
http://cag.csail.mit.edu/raw/ 1
http://en.wikipedia.org/wiki/You 1
http://linux.die.net/man/3/pthread 1
http://stackoverflow.com/questions/2509679/ 1
frame 40
introduces 6
http://www-formal.stanford.edu/jmc/history/timesharing/timesharing.html. 1
frankly 3
http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF. 1
invent 3
http://www.ostep.org/Citations/notes-solaris.pdf. 1
free() 8
inverse 1
https://events.static.linuxfound.org/sites/events/files/slides/elc 1
free(), 2
invoked 2
free(16500) 1
involving 1
free(tmp); 3
free) 5
free), 2
free-list 1
free-space 4
huge 20
freed) 1
freely 2
freely, 1
human 4
frees. 1
humans) 1
frequently 7
humble 2
frequently, 3
friends 3
hundreds 5
friends, 2
friend” 1
hurting 2
fringe 1
from). 2
hurts; 2
from; 1
hybrids 1
hypervisors). 1
full 33
full, 6
fully-operational 2
func(). 1
functional, 1
i 22
functionality. 3
ice 1
functioned 1
functions: 1
icon, 1
idea: 1
just 304
ideas? 1
kernel) 2
fundamental 18
kernel), 1
fundamentalist 1
identical 6
futex_wake 2
identical, 1
idioms 1
key) 16
illusion. 2
future 21
illusion: 2
kick 8
future, 5
kill. 1
gadgets 1
illustrate 5
killing 2
imaginary 1
imbalances. 1
gain 16
impacts 1
gaming 2
gaming, 1
implement!) 1
gather 1
gave 3
general) 1
generalizing 1
implement. 5
implementations 4
implementations, 1
generally 28
kind 54
kind, 1
generally, 7
implementing 8
implication 1
implying 1
important). 1
knows 18
knows, 1
important; 4
l/stl 2
generate 28
important? 1
impressive. 1
laid 4
generated 12
improbable, 2
landmark 3
generated, 1
generations 1
language. 3
improves 4
generator 2
larger), 1
gently 1
in-depth 1
larger-scale 1
get(counter_t 6
largest 2
get? 1
last. 1
in-kernel 5
late 4
in-memory 2
latency. 1
in-use 1
later. 9
lations 1
layout 2
ld-2.23.so 1
in. 11
gets 51
in: 1
inability 1
gettimeofday() 5
inaccessible 2
giant 1
inaccessible, 3
gigabytes 1
incentive 1
lead 50
leaked 2
leap 3
give 30
including 51
glock; 2
incorporates 2
increase? 2
increases 6
increases, 2
goal 19
incredibly 8
goal, 1
learn 65
learn, 1
good. 6
learned? 1
increment 14
google’s 1
least) 1
incrementally. 1
least- 1
incremented; 2
least-frequentlyused 1
incur 1
incurring 1
least-recently-used 4
leaving 3
grabs 16
left). 2
grade, 1
leftmost 1
grammar 1
legends 2
indeed 26
gray 3
len:10 6
len:9 1
indeed, 11
indefinitely) 2
indeterminate 2
indeterminate, 2
indexed 3
length 16
length, 1
indicate 15
lesson: 2
indicated 4
lest2 1
individual 3
inducing 1
ineffec1 1
infinitum. 1
influence 1
level. 7
influenced 2
informally, 1
libc 2
informing 1
libc, 1
infrastructure 1
libraries) 1
inherent 5
init() 6
library) 5
init(), 2
lie 1
great 79
initializes 5
life. 2
great, 1
inject 2
life: 1
greater), 1
innovation 2
lifted. 1
greatest 1
inputs. 1
like) 2
grocery 2
inputs: 2
grossly 1
inquiry 2
ground 1
grouping 4
insert 12
insparable 1
inspires 2
installing 1
instance 3
instant 3
instant, 1
grow 18
instead), 1
grow, 1
instruction; 3
growth 1
instruction? 3
gruesome 1
guarantees 6
guard 14
guess 8
likely 73
guess, 3
guesses 3
limits 6
instructions 78
guesses, 1
limits, 1
guts, 1
line. 1
habits 1
instructions, 10
line: 2
hack, 1
instrument 1
lingo) 1
hackers. 1
insufficient. 2
integer). 2
integers 4
link 6
integers, 2
half 8
list-like 1
intelligence. 1
intensive, 1
interactions. 2
hand 6
interactivity. 2
interconnected 1
hand, 3
interesting) 1
hand-coded 1
hand-over-hand). 2
handle; 1
list. 21
interface 16
interleavings. 2
list: 3
interludes. 1
list_t; 2
handles 14
listens 2
internal 12
handling. 1
internet 1
interpose 1
listing 4
interposed 1
interpret 1
list’s 1
happen? 8
literally 1
happen?4 1
happening! 1
interrupt 77
interrupt, 4
interrupt-based 2
interval 8
interval, 1
intervals) 2
intervening 3
intervention 1
intrinsically 1
introduce 12
happens 78
happens, 4
introduced 25
invalid. 2
invalidate 1
invented 5
invented, 1
inversely 1
little 103
inversion 6
load. 2
inversion, 4
load/store: 1
inverted 4
invisible 1
involved. 2
is! 2
loading 6
is), 1
locally-allocated 2
hard 51
located. 2
hard-hitting 1
location.” 2
hardware) 3
locations. 1
isn’t 26
hardware/OS 2
isn’t, 2
lock(&mutex); 2
hardwaremanaged 1
isolate 1
hardwaremanaged, 1
isolated 2
harmful, 1
isolation; 3
harmless, 1
has). 2
has? 2
have? 2
head), 1
head->next; 1
issue 33
issue, 3
headed 3
header. 1
issued 7
lock() 38
header: 2
header_t; 1
headway 1
lock(), 8
heap) 2
heap), 1
lock) 4
heavilyused 1
lock), 2
lock->flag 6
held. 16
locked 7
held: 2
helgrind. 2
locks. 6
help. 1
help: 1
locks: 3
helping 2
logic 7
logic, 1
hence 20
hence, 3
long-running 15
here; 4
here? 3
looked 8
looking? 1
herein 3
herein, 1
heuristics 1
hierarchies 2
lookup 12
hierarchies, 1
lookup, 2
hierarchy 2
hierarchy, 1
high-performance 1
high-priority 2
higher 24
loop 41
hint 4
historically 2
historically, 1
historically-based 1
loop, 10
hit. 5
lost 4
hits). 1
lost, 3
lots 12
lottery.py, 1
love 2
hold 27
loved 1
hold, 1
holes 1
homeworks 5
low 10
homeworks, 3
low, 3
hopes 1
horrible 1
lower-case 3
hostility: 1
lowered 1
hot 1
lowered, 1
hours. 1
how-to-generate-a-random-number-from-within-a-range. 1
however; 2
lowest 9
http://ftp.gnu.org/gnu/glibc. 2
lwarx/stwcx 2
http://portal.acm.org/citation.cfm?id=540365. 2
https://gruss.cc/files/kaiser.pdf 1
https://lwn.net/Articles/170003. 2
m->flag 6
huh?? 1
machine) 2
humorously 1
humorously, 1
machinery. 3
hurt 3
hy-brid 1
machines. 6
macro 1
madvise), 1
magnitude 1
main() 11
main(), 1
main-deadlock-global.c. 2
main-deadlock.c 2
main-race) 2
main.c 6
maintains. 1
idea 92
idea, 7
ideal 4
identifier 3
identifier, 2
idle! 1
make 214
make, 2
malicious 14
malicious, 1
malloc(sizeof(node_t)); 8
malloc. 1
managed), 1
managing 9
mandated 1
manifesto 1
manifests 2
manual 13
manual, 2
many! 1
map 7
mapping: 1
market... 1
marks 4
marvelous 1
masking 4
masses: 1
math 4
mathematical 1
matters. 3
mature 1
max 1
maximum 8
maximum, 1
maybe 4
me 6
meaningful 5
meanwhile, 1
measure 21
measured 2
measurement 3
mem-access 1
mem? 1
memory! 2
memory) 5
memory), 5
memory-mapping 1
memoryintensive 1
memorymanagement 1
mention 1
mentioning: 1
merely 1
messages. 2
met 1
methods. 3
metric. 4
metric: 1
microcode), 1
if 483
microkernels 3
mid 1
if, 4
illegally 3
mighty 4
migrating 2
migration 5
mild 1
illusion 20
milliseconds 6
illusion, 2
milliseconds, 2
imag-ine 1
mind. 1
imagining 1
minicomputer. 1
imbalanced? 1
immediate 2
minimize 11
immediately; 7
minimum. 2
immensely 1
minute?), 1
imperatives. 1
mirrors 1
impetus 1
miss-handling 2
miss. 9
miss: 1
misses. 7
missing 4
implement 30
mistake 3
implement, 1
mistakes) 1
mistakes), 1
implementations. 4
mix 1
implemented? 1
mmap(NULL, 1
implicit 1
mocked). 1
implies 7
imply 2
mode) 9
important) 1
mode), 1
importantly 1
modes. 2
modification 2
importantly, 9
modification, 2
impossible 1
modified), 1
improving 4
modifying 2
modularity, 1
module 1
moment. 1
monitoring 3
monolithic 1
more). 1
more? 1
most-recently 1
motivating 1
mouse), 1
mov 33
move). 1
movement). 1
moves 15
movl 28
ms. 5
multi.py 2
multiple-queue 1
multiplexing 2
multiprocessorbased 1
multiprocessors 5
multiprocessors, 2
multiprogramming 8
must-read 3
mutex; 6
mutex_t 5
mutex_unlock 2
my 6
myarg_t; 4
mythread, 14
n 4
namely 5
naming 1
nanoseconds). 1
nary 1
near 13
it 1299
nearest 1
nearly-endless 1
nearly-infinite 1
neat. 1
necessarily 8
need. 2
needs; 1
negative). 1
negatives, 2
network 2
network-connected 1
networking. 2
it, 68
it?) 1
item. 1
iteration. 1
iterations? 1
itself. 19
jne 3
job. 8
jobs? 3
job’s 2
join() 9
join()); 1
join(), 7
joke, 1
journaling 3
jump) 1
jumped 1
just-finished 1
k-stack(B) 2
new 140
new, 1
new->key 4
new_head->value; 2
new_head; 2
keep 48
newfile.txt. 1
newly-freed 1
next; 4
nicely. 2
nightmares 1
nitty-gritty: 1
node 12
node, 1
nodes) 2
non-ASLR 1
non-executable 1
nonconcurrent 1
nonetheless. 1
nonsolution: 1
normally 2
not), 3
note 27
note, 5
noted 3
kernel 123
kernel, 7
notice 34
notice, 3
key 28
noticeable 2
key); 4
key, 2
noticeably 4
keyboard 2
keyboard, 1
noticed 5
keystroke 1
now-standard 1
kicks 2
kidding; 1
kill() 1
now. 7
killed 2
now: 1
kinds 5
nptl 4
kmalloc. 1
nuance 1
nuclear 1
knew 5
number), 1
know. 3
know: 2
numerous 12
nuts 1
knowing 6
knowing, 1
objects 5
obliged 1
observe 6
observed 1
observed, 1
obtained 1
occasion; 1
occasions 1
occur. 3
occurs; 3
ocean 1
ocean, 1
odds 1
of) 3
off; 2
known 90
old; 4
known, 2
olden 1
la 3
labeled 3
languages. 2
large-memory 1
large. 3
older 13
omitted, 1
on! 2
larger 23
on) 1
larger, 2
laser-like 1
latency) 1
on-chip 4
later), 1
on-going 4
latest 8
laugh 1
laughably 1
once), 3
lay-out. 1
lays 1
lazily, 1
laziness 2
ldq 2
leads 13
leak 2
leak, 1
learn? 1
learns 1
is 2736
is, 22
least 35
issue; 1
least, 7
least-significant 1
leave 13
led 8
issues 26
legal 6
legality. 1
it). 3
legitimate 1
it3 1
length). 2
length? 1
lengths 5
lengths, 1
it; 14
it? 11
let 36
levels: 1
libcrypt, 1
libraries 3
library 47
library, 10
libtinfo.so.5.9 1
lies 4
lifesaver 1
like 215
like, 3
liked 1
likely). 1
limitations 1
its 295
limiting 1
itself) 1
limits; 1
linear. 1
itself), 3
linker 1
it’d 1
links 3
it’ll 1
it” 1
list) 5
jars 1
list), 1
listed 1
job) 3
lists. 1
literature 1
lively 1
lives. 1
jobs. 7
ll/sc 2
jobs: 2
lmbench 4
join 12
join, 2
loaded 17
loathe 1
jokes 1
local-to-global 2
journalism 1
local[NUMCPUS]; 2
judiciously 1
judiciousness 1
locality 18
locality, 8
jump 22
jumps) 1
k-stack(A) 1
keeps 13
location 39
location, 6
kept 12
kernel; 2
kernel” 1
key; 6
kicking 1
kill 10
killed). 1
killed; 1
kind. 1
kind: 1
know! 1
knowledge 14
knowledge, 3
known). 1
known; 1
laborious 1
language 8
laptop 2
large) 1
large-file 1
large-scale 1
one 500
larger? 1
one, 26
one-third 1
onelevel 1
last 37
last); 1
last, 1
last-in 1
latency 9
later 36
later); 1
later, 5
latter 5
latter, 2
law 2
lock 370
layout. 1
lock(&m) 1
only 202
oops! 1
lazy 5
open 7
lock(lock_t 14
open("./p4.output", 1
ldl 2
open()? 1
open, 1
ldrex/strex 2
operation), 2
operational 1
operations. 8
leading 9
operator. 3
leaks 1
opinions; 1
lean 1
opposed 3
opposites 1
learning 2
left) 1
left), 1
lock, 61
legal; 1
optimal 20
len:30 1
lock->turn 8
locked; 2
optimal, 5
optimizations 1
locking. 3
optimizations, 3
locks) 3
optimizing 2
logical. 1
lets 10
logs 1
optional 2
long-list 1
letter 3
options. 3
long-lived 3
longer-running 1
longrunning 1
ordering 9
ordering, 2
originally 2
level 23
level, 3
levels), 1
libc-2.23.so 1
library; 1
library” 1
lie. 1
life 22
life, 3
light 1
lightweight 1
lightweight, 1
look 121
lookup? 1
like; 2
lookups 1
likes 1
loop; 2
likes, 1
loop? 1
limit) 1
loops 18
loops, 4
loss 2
lottery. 1
limited 17
low-priority 1
limits. 1
lower 13
lower-half 1
lowest-priority 1
lowlevellock.h 2
line 14
ls. 1
luck. 1
m 1
m;) 1
line, 7
linear) 1
linking 3
machine 34
machine, 8
machinery) 1
machines) 1
macros 1
made. 2
made: 3
magic 7
magnificently; 2
other 303
main 66
main(); 1
other, 5
main); 1
others) 2
main-signal-cv.c. 2
others), 3
main.c). 2
mainstream 1
in 2103
otherwise 14
maintain 4
maintain, 1
in, 6
inaccessible. 1
list 103
inactive 4
includes 13
major 28
incorrect. 1
increases. 5
list, 26
increasing 10
live 12
lived 1
lives), 1
incrementing 12
incurred; 1
independently 8
independently, 2
indicated. 1
inefficient? 2
makes 57
makes, 2
influential 4
load 35
inform 4
load, 3
init(counter_t 6
initializing 1
initially 3
load-linked 14
initially, 2
load-linked, 2
initiate 3
load/store 3
malloc() 32
initiated 1
locale 2
malloc()); 1
innocently 1
locate 3
malloc(), 3
inode 3
malloc(10 2
inopportune 2
malloc(100e6)); 1
inputs 2
malloc(strlen(src) 1
malloc(strlen(src)); 1
insert. 2
located 13
insertion 2
location; 2
insidious 1
insights. 2
install 1
installations. 1
locations 11
instantaneously. 1
manage 19
locations, 1
instruction) 9
lock). 10
managed 6
instructions. 5
lock->ticket 2
instructions: 2
managed, 2
lock-free 3
our 230
out"); 1
out-of-bounds 1
out. 11
lock; 24
outcome. 6
lock? 10
outcomes? 4
outputs. 2
lock_init(lock_t 4
management 29
over-written 1
lock_t 2
management, 1
over. 1
overcome. 2
overflow. 1
manager. 4
manner 7
overhead 12
overhead, 1
overheads), 1
overload. 1
overseas. 1
manner, 11
oversubscribed, 1
overwrites 1
manuals 2
own. 2
p. 1
p2 7
p3). 1
locks 79
p6 5
locks, 22
p: 18
logically 6
page) 4
logically-different 1
page), 2
page-fault 3
page-replacement 6
page-table 31
pagedirectory 1
int 260
long 68
integer) 2
integrity 1
long, 5
intellectually 1
longlived 1
intelligence 1
intelligent 2
intensive. 1
interactions 4
interactivity 2
pages. 28
pages: 2
interested 11
interesting; 2
looks 39
interface. 4
lookup. 3
interface: 1
interleavings 4
loop. 8
intermediate 1
looping 1
interposition 2
interrupt. 4
looping-race-nolock.s 8
paging 28
looping-race-nolock.s, 2
interrupt: 4
interrupted) 1
paging, 4
looping-sequential 3
interruption, 2
paging-policy.py, 1
interval. 1
paid 1
intervention. 1
pain. 1
intricate 3
loops; 13
painful; 2
loops? 1
intuition 3
paper. 1
lost. 2
paper: 1
lot! 1
invalid 8
par-allel, 1
low-cost 1
paragraph 1
low. 1
invalid, 8
parallel) 2
investigate 1
lower-priority 2
investigator 1
parameters. 2
lowers 1
invited 1
parameters: 1
lowest. 4
luck! 1
involved 9
lucky 3
involved, 6
lucky, 2
involvement 1
m; 1
irstrun 1
machine; 2
is; 3
machine? 2
is? 2
isn’t. 3
machinery 10
iss 6
machinery, 1
isses 1
issue. 3
it!) 2
parent 44
it!), 1
parentheses 2
machines 21
park 6
machines, 5
magic; 1
park(); 4
main(). 1
park, 2
participated 1
partition 1
partition, 1
main(int 23
main-deadlock.c. 2
main-race.c. 2
main-signal-cv. 2
parts 19
main-two-cvs-if.c. 1
it. 68
main-two-cvs-while-extra-unlock.c. 1
paths. 2
it... 1
main-two-cvs-while.c 1
many 252
patient! 1
it1! 1
mainframe 2
mainframe, 1
mappings. 3
it: 4
maintains 1
pattern 5
majors 1
patterns), 1
make. 1
item 9
malfeasance 1
maps 7
pause 2
maliciously! 2
pause, 1
maliciously) 1
marking 2
marking, 1
malloc 8
malloc(20);. 1
malloc(3) 1
pay 12
malloc(sizeof(double)); 1
itself 32
peep 1
malloc(sizeof(int)); 2
itself); 1
malloc(strlen(s) 1
match 12
percentage 5
matches 1
itself, 8
percentage, 1
perfectly 2
material. 3
perfectly, 1
perform? 1
mathematician 2
man 21
manages 9
it’s 33
manipulate 2
manipulations 2
matter 13
manner; 1
manner? 1
matter, 3
manual. 4
matters! 1
manufacturers 1
maximizing 1
many” 2
mean 6
mapping 13
meant 1
mapping, 1
measure? 2
marked 11
measurements 4
marriage, 1
measurements, 1
mask 1
measures 2
massive 4
master 4
master, 1
materials. 1
math. 1
matter; 1
matter? 3
matters, 2
mechanism 18
maximize 2
mechanism, 2
meeting 1
performance 91
job 144
megabytes 3
mem. 1
memcheck 1
means 31
performance, 14
job, 19
measurement. 1
jobs) 1
memories 4
measurements? 1
join(). 2
memories, 1
judicious 1
juggling 1
jump; 1
jumps 7
performs 21
junctures 1
period; 1
mechanisms 32
periods 4
megabytes). 1
mem- 1
perl). 1
mem.c 2
permanent 1
keeping 14
memory). 6
kernel-owned 1
memory): 1
perror("malloc"); 4
memory-access 1
persistently 1
kernel. 6
persistently, 1
memory-allocation 10
kernel?” 1
memory-bug 1
person; 1
memory-constrained 1
persons 1
memory-failing 2
kernel’s 4
memory-user.c. 1
kicked 2
kids, 1
perspective 8
killall. 1
perspective, 1
killer 1
pessimal, 1
kills 2
memory; 19
phone 1
kind) 1
phone, 1
kindly 1
memory? 9
kinds: 1
physically 2
memoryreference 1
memory” 1
physics). 1
men-tioned 1
merest 1
merge 2
picks 5
mesmerizing. 1
mess 1
message; 1
messages 1
meta-level 1
meters 1
methods 4
methods, 1
metric 5
metric, 2
micro-instructions 1
microcosm, 1
microprocessor. 1
microsecond. 1
migration. 1
million 17
million); 1
piece 36
min 3
piece, 1
mind 5
pioneer 2
mind, 4
mines 1
know 71
mini-computer; 1
minicomputer 5
pipe 8
minimally 1
know, 5
minimum 2
pipe, 2
knowing. 1
pipeline 1
knowledge? 1
minus 5
known. 1
pipeline, 2
known: 1
place! 2
l/stq 2
lack 4
placing 7
miss 32
lags 2
miss); 1
plans 1
platforms. 1
languages 4
miss, 10
languages, 2
play 4
laptops, 1
pleasant. 1
please 3
misses 21
plots 3
misses, 8
mmap() 7
pmap 5
mobile 1
mode). 1
pmap, 1
mode; 2
models 2
modes 2
mode” 1
modification. 2
modified). 1
modifies 1
modify 3
modulo 1
moment 5
money 1
monopolize 6
monopolized 1
month. 1
more! 1
more) 1
mostly 4
movie 1
point 39
moving 13
ms 14
ms, 5
much-improved 1
much; 1
muck 1
multi-CPU 3
large 93
large, 7
larger. 1
point, 30
multi-level 30
laughing 2
pointier, 1
multi-processor 4
launch 2
multicore 6
launches 2
policies. 7
laws 2
lawyers 1
policies: 2
lazy; 2
policy. 4
leaking 3
politely 1
ponder: 1
pool 1
populated, 1
learned 13
learned, 1
portions 7
possession 2
power-of-two-sized 1
power.” 1
multiple 95
powerful. 3
multiplex 1
left 21
pre-configured 1
multiply 2
multiprocessing 1
pre-initialized 1
multiprocessors. 4
left, 6
multiprogramming. 1
precious 2
left-shifted 2
predictable; 1
mutex->flag 6
length) 1
lengths: 1
preempted 4
preferred; 2
prerequisite 1
mutual 29
myarg 2
myargs[1] 2
presented 8
myret_t 6
preserved. 2
mythread. 2
less 29
myturn) 2
pressed 2
name). 1
name; 1
lessons 5
names 1
nanoseconds), 1
pretend 5
natively 1
letting 6
naturally 4
preventing 3
naturally, 1
prevention 2
neat 8
necessarily!) 2
previously 3
necessary; 1
previously, 1
necessity! 2
primitive! 2
primitives. 8
principle 6
printed 6
printf("%d 4
printf("%d\n", 7
let’s 73
printf("%lld\n", 2
printf("%p\n", 1
levels 9
libcrypt-2.23.so 1
libraries. 2
printf("location 3
library. 10
printf("returned 4
libtinfo, 1
life; 1
lifeless 1
memory 568
lifetime 1
lifetime, 1
priorities 5
memory); 2
like. 6
like: 3
limit 6
linear 34
lines 14
lines, 1
link) 1
need 152
need, 1
linked 18
needed). 2
list). 2
needed; 1
list; 4
list? 1
list_t 2
needed? 6
needlessly 3
lists 13
neighboring 1
network. 2
lists, 7
lists[BUCKETS]; 2
priority 61
networking 3
lives 7
networking, 1
lives, 2
llock[NUMCPUS]; 2
load; 1
priority, 7
priority-based 1
loader 4
privacy 1
privileged; 2
pro-cessor) 1
loads 19
load” 1
problematic 2
problematic, 1
memory, 124
memory-mapped 3
memory-reference 1
never 38
problems. 11
memory-user 4
problems: 2
new->next 4
mental 2
local 56
new. 3
mentor, 2
proceed 6
locality. 4
mesh 1
newfile.txt 2
proceeding. 1
locality: 2
mess! 1
locates 2
newly-created 3
process). 2
location. 3
newlyrunning 1
lock()), 2
next-to-last 1
message 10
nice), 1
message, 2
nicely 1
messy 2
metadata 1
process; 13
no? 8
process? 4
noble 1
method 8
node. 1
microkernel-like 1
microseconds 2
processes; 7
node_t; 5
microseconds, 2
lock. 64
processes? 3
mid-instruction, 2
node’s 4
lock_t; 8
processes’ 1
non-contiguous 2
non-performant. 1
processes” 5
non-synchronized 2
processes”, 2
non-zero 3
non-zero, 1
locking 34
nondeterminism 1
locking, 2
nondeterminism, 1
lock’s 2
processor. 9
none 3
logarithmic 3
none, 1
norm, 2
logical 15
produce 9
not; 1
long-term. 1
long; 1
produced 2
not? 2
produced, 1
note: 4
producer. 2
longer 17
longer, 1
professor? 1
lookaside 4
nothing) 4
professors 3
notice. 1
professors, 1
noticeably. 2
looking 13
lookups. 1
profilers 2
noticed: 2
loop) 2
notion), 1
loop.s 6
loops. 1
lot 35
lottery 24
lovely 1
low-level 16
lowering 1
lowest-order 1
program. 46
lowly 2
ls 1
ls, 1
luck 5
program: 6
lying 2
programmed 1
m->guard 10
macOS, 1
programmer. 5
machine. 9
machinery? 1
programs; 3
machines). 1
machines; 1
program’s 9
made 23
progressed, 2
made, 5
prohibitively 2
magic. 1
magic: 7
projects 3
mail 1
main-one-cv-while.c. 1
projects, 1
main-signal.c. 2
promote 1
promoted 1
main: 12
maintaining 1
makes. 1
prompt 4
prone. 2
proportionally 1
might 218
migrate 1
protected 4
migration? 1
millisecond. 1
protection; 2
milliseconds). 1
milliseconds; 1
protections 4
minicomputers. 1
minimal. 2
protocol 3
making 63
minimizes 2
protocol, 1
malloc(). 4
miniscule 1
proverbial 1
malloc.py, 1
minutes 1
malloc; 2
misbehaved), 1
malloc’d 3
malloc” 1
misbehaving 2
management. 3
miss) 1
manager 3
miss), 3
manager, 3
manages; 1
missed 2
manipulates 2
misses! 1
providing 16
misses), 1
manner. 7
pthread.h 2
manner: 1
mistakes 3
manually 1
mobility 1
pthread_cond_signal(pthread_cond_t 3
many. 5
pthread_cond_t 3
mapped 14
pthread_create(pthread_t 2
now 184
mappings 8
pthread_join(pthread_t 2
mark 6
marvel 1
pthread_mutex_lock(&c->glock); 4
masks 2
match. 1
matching 1
pthread_mutex_lock(&q->head_lock); 2
mode 23
pthread_mutex_lock(&q->tail_lock); 2
material 8
now, 18
matter. 2
pthread_mutex_timedlock(pthread_mutex_t 2
now-extinct 1
pthread_mutex_trylock(pthread_mutex_t 2
now-sleeping 2
mode, 13
null.c 1
pthread_mutex_unlock(&c->llock[cpu]); 2
num 1
pthread_mutex_unlock(pthread_mutex_t 2
model 8
models), 2
numbers 12
object), 1
objects. 1
oblivious 1
ptr 16
ptr, 3
observation 5
pulled 1
obvious) 2
obviously 5
purpose 9
obviously, 1
purpose, 1
pushing 2
occur 9
put() 4
occur, 2
may 123
put(i); 5
occurring 3
meaning 3
occurs), 1
puzzle 2
oddly 1
measuring 5
python 1
odds: 1
mechanisms; 1
off), 2
meet 5
q->head 4
meltdownattack.com 1
q->tail 4
mem 10
mem.pdf 1
query 1
memories. 1
offending 10
memory-add 2
memory-intensive 1
offset), 1
quest 3
modern 90
memory-like 1
offset=000000, 1
memory-management 2
offset=04); 1
memory-related 1
question. 7
modified 15
moglie 1
molecules 1
question: 7
monster! 1
questioning 1
queue) 1
queue), 1
queue_add(m->q, 4
more. 14
most. 1
queues. 2
mother. 2
queues: 1
motivate 1
moustache 1
ms), 4
memory. 103
memory?”, 1
mentioned 7
message. 1
metal 1
quickly 21
method. 3
often 69
metrics 7
mid-execution 1
quote 7
race): 2
often, 7
middle 11
oh! 1
middle, 1
races 4
millions 3
millisecond 1
old_ptr 4
races, 4
mind-blowing 1
on). 1
minds 1
raised. 1
on; 1
once). 1
minimal 7
randomly 4
minimizing 1
misbehaves 1
once; 4
miss). 1
randomly-generated 3
miss; 1
once? 2
miss? 1
once”, 1
misses). 1
randomness 6
mitigates 1
ranging 1
mjtsai.com/blog/2015/12/16/osspinlock 2
mlfq.py, 1
mmap(); 1
rare 2
mocked 1
mode. 4
rate. 3
modifications. 2
modified. 1
monitors 5
one. 24
one: 3
rather 29
onto 17
oops.y 2
oops; 2
open-source 2
much 135
rather, 11
open. 2
much, 1
ratios 1
re-acquire 1
multi-queue 4
re-check 3
re3 1
reacts 1
read. 6
operations 26
read/write 1
readability 1
operations, 3
readable. 1
operator 3
readers 1
readers, 1
operator, 2
readied, 1
opinion 1
optimal. 1
multi-threaded 44
optimality 1
readily 5
optimizations. 1
multiplied 3
multiprogrammed 3
optimizes 4
multitude 1
music 2
options 3
reading 21
reading, 1
readonly 1
reads” 1
ready), 2
reality 7
reality, 1
realization 1
really) 2
reason. 3
reason: 3
reasonable. 3
reasonably. 1
reasoning 1
reboots 1
recall). 1
receives 4
order 80
order, 5
recently 6
ordering. 2
recently, 1
origin 2
reclaimed, 1
original; 2
recognized 1
ory. 1
recollections 1
recommend 2
records 1
other. 8
recourse: 2
others). 1
recover 1
others; 1
recursion 1
otherwise: 2
recycles 1
other’s 1
redirect 2
ourselves 3
reduced. 2
referenced; 1
must 152
must, 1
mutex. 1
more 470
myargs[2] 2
myret 4
more, 6
mystery 1
moreover, 1
n). 1
n; 1
references 28
references, 1
refers? 1
name 22
regain 1
region. 1
name, 4
register) 2
register), 1
named 8
register-level 1
nanoseconds. 3
registers. 3
napping 1
naturally-occurring 1
regular 2
nearby 2
relatively-short 1
nearly-complete 1
relaxing 1
nears 2
rele-vant 1
neatly 4
most 130
necessary 9
most-significant 1
necessitating 1
mother 2
releasing 16
reliability 2
relinquishing 2
relocated; 1
relocation. 2
move 31
moved 6
remaining 13
ms). 3
remaining, 1
remarkably 1
much. 6
remedy 2
much... 1
much: 1
remembers 2
much?). 1
multilevel 2
needed 44
multiples 1
remove 10
multipro-gramming 1
out 181
remove_min(queue); 1
multiprocessing). 2
needed, 7
removed 6
renewed 1
negatively) 3
networks, 1
replacement. 4
replies: 1
out, 27
multiprocessor 19
reply: 1
out-of-memory 1
new; 8
multiprocessor, 2
reporting 2
outcome 4
munication, 1
newer 2
representing 2
output; 1
outrage! 1
newly-allocated 2
requested 8
newlyfreed 1
requested, 2
news 2
requests. 6
mutex 17
mutex, 4
mutex_lock 2
requiring 11
next. 10
mutual-exclusion 2
researchers/engineers, 1
reside. 1
resident 2
myarg_t 8
resource. 2
next: 9
myargs); 2
resources; 2
myargs[0] 2
resources? 1
myret_t; 2
respect 2
mythread() 2
responds 2
mythread(), 2
myturn 2
responsible 6
responsive 1
naive 3
responsiveness; 1
over 90
name. 4
over, 1
nanoseconds 1
over-designed 1
nanoseconds, 2
overcome 3
nasty 1
rest 18
overflow 3
rest, 1
overhead. 1
restored. 1
overheads; 1
natural 9
restricting 1
overheads? 1
overwriting 2
nature 8
nature, 2
near-term 1
results 17
nearly 9
necessary. 1
results, 4
necessitates 1
resuming 1
retains 1
retries 4
needed. 11
needless 2
retry 6
retry, 1
return-tolibc 1
return. 1
returned) 2
own 72
own, 3
p 1
p); 1
needs 32
p1.c. 1
needs, 2
p1–p3). 1
p3) 1
returning 27
p3.c 3
returning, 2
p3.c, 1
review 2
negative 14
p4 7
negative, 3
rewrite 8
package 4
rewrite, 2
new) 4
rich 2
packaged 2
newly 3
packed 4
newly-fetched 1
newly-opened 1
packet 3
news: 2
page). 1
no 140
no, 1
page; 5
right 42
page? 1
right); 2
right, 3
road, 1
robin, 2
rogue 1
node_t 24
role 11
non-blocking 2
rolls. 1
non-computer-types 1
non-cooperative 2
non-preemptive 2
non-stop; 1
none.” 2
roughly 24
roused 2
normal 11
routine 60
routine, 10
rule: 2
run), 2
next 101
runnable; 2
next, 1
running), 1
runs. 11
rvalue; 2
rw- 1
rw45 1
rx 4
sad. 3
safe? 2
nice 34
nice, 3
no?). 2
non-concurrent 1
non-practical 1
non-scalable 2
none-too-subtle 1
nor 1
not. 14
not: 3
notes. 1
notes: 2
nothing 5
noticing 1
notion 12
same 145
same, 3
now? 7
saved? 2
pages 195
null 2
pages); 1
number. 2
saves 9
numbering 1
say), 2
saying; 1
numbers). 1
says: 1
numer-ous 1
sbrk 3
scale. 1
o 2
scale: 1
obey 1
scales? 2
scare 1
scary 1
scenario. 4
scheduler.py, 1
scheduler; 2
object 10
obscure 1
scheduler? 5
pages, 26
observing 1
paging-linear-translate.py, 1
obtaining 4
paging. 4
pain 1
schedulers 14
schedulers, 1
obvious 12
obvious, 2
occur? 2
occurred 3
pair 21
pals 1
occurred, 4
occurrence. 1
occurs 19
occurs, 14
scheduling 102
odd 6
odd, 1
scheduling, 15
odd-sized 1
school: 2
oddity: 2
scientist 1
scientist, 1
of. 1
scope 2
of... 3
scorned 1
scorned, 1
screen. 3
scribble 2
se. 1
seamlessly 1
paper 85
paper, 3
search 20
parallelism. 2
searches 3
seasoned 1
off 30
paralleliza-tion, 1
second. 5
parameter; 2
off, 3
second: 1
offender. 1
secondchance 1
offered 1
seconds). 1
parameters 9
offerings 2
secretary 2
section), 2
parameters, 5
sections. 4
security. 1
paranoid. 1
security: 1
see! 2
parent. 4
seem 7
parent: 2
segment; 4
park. 2
segment? 1
part) 1
partially-ordered 1
offset 42
offset, 2
often? 1
segmentation 26
oh 2
segmentation, 4
particularly 27
partner 1
passed 18
segments 22
passed, 1
segments, 5
past 6
selection 1
semaphores” 1
past, 4
semi-nal 1
patch 5
not 449
patches 2
old 60
patent 1
old, 1
oldest 1
send 13
paths 4
pattern. 2
on. 9
paying 3
peach? 1
once. 5
not, 14
peaches; 1
one! 1
penalize 1
one) 4
notably 5
one-quarter 1
per-CPU 5
one-word 2
per-futex 2
ones. 3
notes 5
sense 26
performance-minded 2
online: 1
notes); 1
onnv/onnv-gate/usr/src/lib/libc/port/threads/synch.c. 2
oops.x 2
sense, 6
notes, 3
sense?) 1
open() 6
nothing. 2
sensed, 2
open(), 1
nothing”; 2
sensitive 1
opened 1
notice? 1
operate): 1
sent 3
notices 2
operates 4
performance. 35
now! 1
performance2 1
operating-system 3
separation 5
now), 1
performance: 4
sequential” 1
operation. 5
nuances 3
opinions 2
opposing 2
null-pointer 2
performed 11
performed, 2
null. 2
serious 10
opposite 5
performs. 2
opposite, 1
permanently-valid 1
servers 1
opt 1
permissions 1
optimal) 1
person! 1
servers, 2
personal 1
services. 1
perspective. 2
pesky 1
phases 2
servicing 5
optimization 6
physically-indexed 1
set. 2
optimization, 3
setpark(); 2
picture 5
order; 1
picture, 5
orders 2
pid; 1
organization. 1
piece. 3
organize 1
origins 1
setting 15
ority 1
pioneering 6
setting, 1
other) 1
place; 1
several 1
ours: 1
place? 1
out). 1
severe 3
places 6
out; 1
share; 1
plain 2
out? 1
planet 1
platforms 2
sharing. 3
players 1
outcome? 5
sharing: 1
outcomes 1
plenty 3
shells). 1
outdated) 1
shells; 1
shift 1
plus 11
pmap. 1
outlines 6
shipping 2
output. 2
point. 7
short-circuiting 2
pointer). 2
pointer? 1
output: 4
pointers 5
outs 1
short-running 4
pointing 2
overall. 1
points; 1
overcome? 1
short. 3
shortcomings. 1
overflows 4
shot 2
overhead), 2
shouldn’t. 2
overheads. 4
showed 4
policies 35
shrink). 1
policies, 7
shrinks 1
sidebar 2
overview 12
overwrite 4
overzealous 1
own; 3
own? 1
owner 4
ownership 1
policy 50
ownership, 1
signal 28
owns 2
policy, 12
p1.c) 1
signal, 1
pollutes 1
p1.c), 1
signal/wakeup 1
p2.c 1
signaling. 1
poor 10
poorly? 1
similar), 1
positivity 1
p3 5
possess 1
p4.output 1
similarly 3
possible; 2
possibly-failing 2
posterity) 2
similarly, 3
number 198
postulates 1
p; 7
packages, 1
number, 4
potential 12
numbers) 1
obey. 1
page-directory 5
page-number 1
objdump 8
powerful 21
object. 1
powerful, 2
objectives; 1
powers 1
objectoriented 1
prac-tice, 1
practice! 1
observes 2
pragmatic 1
pre-WWII 1
pre-specified 2
precisely 2
page. 21
precisely, 1
obtain 10
page: 1
precision 2
obviates 1
predates 1
preempts 1
pages). 3
obvious. 2
prefer 2
obvious: 2
preferably 2
preferring 1
prematurely-optimized 1
occasionally 3
preparing 1
pages; 9
occurs)! 2
paging-multilevel-translate.py; 1
presents 7
occurs. 3
preserve 1
occurs: 1
occurs?” 1
presumably 4
painful 7
presumes 1
pains 1
pairs, 1
papers 8
pretty 26
papers, 6
prevent 8
paradigm. 1
previously. 2
parallelization, 1
pri- 1
parameters). 1
parcel 1
parent) 1
primary 9
park() 4
primitives 15
park(), 2
primitives, 3
principle. 1
printf("main: 8
printf() 1
printf(), 1
prints 41
priorities. 1
prioritizes 1
priority. 8
part 52
privileged) 2
part, 2
proactively. 1
problem; 2
problem? 2
problematic: 1
simple 196
simple, 9
simpler. 1
simplicity; 2
simplified 2
particular 60
problems 55
problems, 12
particular, 28
problem” 1
problem”, 1
proc 5
proc-struct(A) 1
proc_state 2
proceeding 1
simply 128
process) 6
simply, 4
process), 3
simulator. 2
process-run.py 1
process-run.py, 1
simultaneously 11
processed 2
simultaneously, 1
processes) 1
pass 54
processing; 1
since 7
sincerely 1
passes 5
passive 2
password 1
path. 3
patterns. 2
pause) 1
pausing 2
processor 28
pdflush), 1
peach. 6
peaches. 1
processor, 13
peeking 1
produced. 1
penalties. 1
people. 1
people.cs.clemson.edu/ 1
producer 26
producer, 2
professionals 3
professor! 2
profit 1
per 57
per-process 12
perceived 3
percentages. 1
perfect. 2
perfect... 2
perfection 1
single 203
single, 1
sitting 4
situation. 2
size). 2
size; 6
sizes 8
sizes, 2
sketch 3
skimmed 1
skip-ping 1
skips 1
slab 5
sleep) 1
perform 70
sleep-ing. 1
perform, 1
sleeping). 1
performance), 1
slice. 1
slices; 2
performant) 2
slogan. 1
slot 7
slowed 1
slower. 3
slowly 12
slowly, 4
perhaps 39
perhaps, 1
slumber 2
small! 1
period 8
small) 1
periodic 1
small-scale 1
periodically. 1
smarter 1
persistence. 2
person 3
phenomenon 1
philosophical, 1
philosophy 1
phrase 2
physical. 1
physics 1
pick 15
pieces. 1
pioneered 4
pipe() 2
place. 16
placed. 1
played 1
pleases: 1
program 321
pleasure: 1
ploticus 1
point1 1
pointed 15
pointer. 3
pointers? 2
points. 1
policies; 1
policies? 1
poorly. 2
pop 1
popl 1
popular 7
popular, 1
popular-sized 1
porting 2
program, 58
program-debug 1
program4 1
portion 20
posed 5
programmer 12
positive 4
programmer, 1
programs5 1
projects. 1
possibility 5
so 197
possible. 14
possible: 1
prompt> 37
pouvoir”, 1
proofing 1
proofs” 1
power. 1
proper 14
practical 8
properties; 1
proponents 1
practice 4
proportion 5
proportion, 1
practice, 1
pros 1
pragmatists 1
so, 37
protocol. 4
protocols; 1
sockets. 2
precise 4
software; 1
prove 5
precisely? 1
software? 1
solutions. 4
solving 4
provides 30
predict 16
provides, 1
provisions 1
predictors 1
somebody 5
pseudo-random. 1
predictors, 2
preemption 2
somehow 6
preemption, 2
somehow, 1
preferred 2
prefetching 2
someone 3
prepare 1
prepared 1
presenting 1
preserves 1
pressing 1
pressure. 2
prevents 3
previously) 1
primer 1
pthread 57
pthread_mutex_init(&lock, 2
primitive. 6
pthread_mutex_lock(&L->lock); 8
primitives; 2
pthread_mutex_unlock(&lock); 2
publicized) 1
primitives? 2
published 4
printf("%s: 4
pure 2
printf("(%d) 2
purpose. 2
pursue 1
printf("Final 1
push 2
printf("Initial 1
pushl 1
put(int 2
printing 3
prio_to_weight[40] 1
prior). 1
priority) 1
puts 19
q->tail->next 2
quantum) 1
question 27
private 18
question, 1
queue). 5
private, 3
queue; 5
queue? 1
queue_t 2
privilege 8
queues 6
queues, 12
quickly. 5
privileged 24
pro2 1
probabilistic 1
something 132
something, 2
probably 32
probes 1
quite 114
quote. 4
quote: 2
rabbit 1
radical 2
raise 10
raised, 2
ran; 1
problem. 26
random-access 1
random; 1
randomizes 1
randomly-accessed. 1
randomness. 1
range; 1
ranges 1
sometimes 73
rate 27
problem: 25
rate, 3
sometimes, 2
procedure. 1
somewhere). 1
proceed! 1
rc; 4
sooner 1
rdtsc 3
sorting 1
re-create 1
sounded 1
re-duces 1
re-initialized. 1
sounds. 1
re-referencing 1
sources: 1
reached 1
space-efficient, 1
space-management 1
space-usage 1
read 91
space. 45
read, 7
readable 1
space: 2
spaces). 1
sparked 3
sparse 7
sparse, 1
spatial 7
real 53
spawn() 1
real, 2
species. 1
realistic 3
realize 5
realized 8
reap 1
rearranging 1
specific 21
speeds. 1
reason 32
reason, 8
spend 10
reasonable 9
reasonably 3
rebooted, 1
spent 7
recall1 1
recently. 2
rechecks 2
reclaims 1
recommending 2
recorded 3
recourse 1
recursive 1
redirection 2
redirection, 1
redoing 2
reduce 15
reduced 5
refer 27
reference) 1
references. 2
references: 1
referencing 1
referring 2
reg/PC 1
regardless 2
regards 2
region 25
region, 5
regions) 1
register). 1
register; 2
register? 2
spin 79
spin, 2
spin-waiting 4
registers 48
registers, 10
regs(B) 3
relates 3
relative 3
relax 10
spinning 27
release? 2
spinning, 2
splitting 3
releases 14
spot 2
reliability. 2
spurious 2
reliable 6
src.opensolaris.org/source/xref/ 2
reliably 3
relies 1
relinquish 5
relinquishes 1
relocating 1
relocation 6
relocation, 5
rely 5
remain 8
remote 1
repeats, 1
replace 9
replaced 2
replacement 30
replacement, 3
report 9
repository 1
process 403
process); 1
represent 5
request; 1
request? 1
stack 79
requests 28
requests, 2
require? 1
required). 1
required? 2
requirements 1
stack, 18
stack”! 1
stance 1
stand 1
process, 51
requires 25
research; 1
researcher 2
reserve 4
reserved 6
reside 11
reside, 1
resided 1
resource 14
resource, 4
responsibility 6
responsibility!” 1
responsibility, 1
responsive. 1
rest. 2
restarts 1
restore 17
start 58
starving 1
restored 4
state1 1
restored, 1
restricted? 1
states. 1
result! 2
states: 1
resulted 2
statistics). 1
results. 6
resumes 5
processes 107
stop 21
stop, 1
store), 3
store-conditional 7
store-conditional, 4
processes, 31
storeconditional) 1
processing. 1
stores. 1
storing 1
processor; 5
straightforward; 1
strcpy(dest_buffer, 1
strdup 1
strdup("p3.c"); 1
stream. 2
processors 16
stream: 2
streaming 2
processors, 9
strengths 2
strictly 2
strike 1
producer/consumer 9
stringent 1
producer; 1
strings 1
producers 3
producers, 1
strongly 5
producing 1
structure) 1
product. 1
return 169
production, 1
return-fromtrap 3
productive. 1
returning. 1
returns), 1
professor 2
reuse 1
professor, 1
reused 1
reused, 1
program). 2
revenge 1
revert 1
program; 3
ridiculously 1
right. 5
rights). 1
structures. 22
program? 6
root 3
root, 1
structures: 2
round 2
programmer; 4
strut 2
routine. 2
routinecalling 1
stub 1
rude 1
rudimentary 4
rule 4
run; 1
programmers 13
run? 8
runnable) 1
running). 2
stuck 16
programming 7
running; 3
stuck, 1
programming, 2
running? 4
students 3
studied 5
sub-job 3
subjunctive 1
subsections 1
subset 3
substantial, 2
subsystems 1
suc-cessfully 1
succeed. 3
success! 4
runs 83
successful. 1
successfully) 1
suffers 5
runs, 21
suggest 3
runtime 2
runtime, 2
suite 1
rv 4
rvals->y 2
summary 5
rvals->y); 2
programs 85
sad 4
superuser 3
safely 3
supervisor 1
sage 1
supports. 1
sake 5
sure; 1
sanity 1
surfing 1
sat 2
programs, 16
satisfaction, 1
satisfactory 1
satisfied 1
progress. 3
saves/restores 1
surprising 7
prohibitive. 3
surprising, 1
saving 6
say? 1
project 4
says 2
surround 2
says, 1
project, 2
sbrk. 1
promise 1
scale 4
scale, 1
prone; 2
scaling; 2
properly. 1
scans 1
properties. 1
scenario 4
properties: 1
scenario, 3
survey 16
proportionality 1
scenarios), 1
scheduled3 1
proportions 1
suspend 2
scheduled; 1
proportions, 1
scheduler), 1
swap? 1
schedulers. 5
swaps 3
schedules 4
scheduling. 9
schemes 5
school 2
protection 22
school, 2
science. 2
protection, 2
scourge, 2
provably 1
scratch 3
proves 1
screen 1
screen, 1
provided. 2
se, 2
ps 2
searching 4
pseudocode 7
pthread_mutex_init(&L->lock, 4
pthread_mutex_init(&c->llock[i], 2
pthread_mutex_lock(&c->llock[cpu]); 2
pthread_mutex_lock(pthread_mutex_t 2
switch 62
pthread_mutex_unlock(&L->lock); 12
switch, 8
second 78
second, 6
seconds), 3
pthread_t 14
section; 2
section? 4
switches 14
pthreads 8
sections 6
switches, 2
purchase 1
sections, 2
swpd 1
purify 1
swtch(struct 1
purify, 2
symbol 3
synchroniza-tions 1
security 21
security, 1
see). 1
see? 6
putting 17
seeds 11
seeds, 2
quantum 5
seek 2
question). 1
sees 4
question; 1
segment), 3
segmentation. 3
synchronization 26
segmented 4
segments. 3
system! 2
segments: 1
system) 1
questions 13
select 4
self)) 2
questions, 3
system), 3
semaphore 1
sending 1
system-call 5
sense. 11
system.” 1
sense: 2
queue. 12
system1 1
sequences 5
queue_t; 2
queues; 1
serves 6
services 1
quoting 1
services, 1
r-x 5
r-x-rw--r-x-r-x-r-x-r-x-rw--- 1
race 28
rage 3
raises 8
ran. 1
random. 1
randomization 3
randomization, 1
systems. 64
range. 1
rarely 1
systems: 5
rarely-taken 2
t(A) 1
rates 1
re-accessed 1
t. 2
re-awaken 1
set 146
re-enable 2
set, 3
re-reads 1
set-it-to-1 2
set-top 1
re-referenced 2
severe. 1
re-referenced, 1
reac-quiring 1
reach 2
reaches 2
react 1
table. 26
react, 1
sharing 30
table2 1
read-only 1
sharing, 3
read-only, 2
table: 3
read-write). 1
tables; 1
shell 12
read? 2
tables? 1
shell, 5
shifting 1
ship 1
tail 5
shoppers 1
reader 7
taken? 1
reader, 1
reads 10
taking 11
ready. 1
short 29
short, 3
realizes 3
talking 5
shorter! 2
shortest 2
targets, 1
shortest, 1
realloc() 4
task). 2
really. 1
shouldn’t 5
shown), 1
rearrange 2
task; 3
rearrangement 1
tasks 2
tasks, 1
reasons 6
tcsh 2
tcsh, 2
reasons, 6
reassurance; 1
reboot 6
reboot, 1
recall, 1
receive 11
technique 29
technique, 2
received 3
technologies. 1
rechecking, 2
technology. 1
reclaiming 1
recommended 1
tends 5
record 6
tens 2
redirected 2
reduced-instruction 1
terminating 5
termination 4
shows 94
reduces 9
terminology) 1
shrink) 1
test-and-set! 1
shutdown 1
test-and-set.s 2
sibling 1
testing 2
side). 2
thank 2
thankfully, 1
signal. 3
signal?? 1
signaling 17
signals; 1
reference 57
silently, 2
reference, 2
similarly-named 2
referenced 6
referenced, 1
simple. 10
referred 27
refers 9
regained 2
region). 1
region; 1
simple: 39
regions 11
regions, 2
simpler 6
register. 4
simpler, 2
registers; 4
simplicity), 1
regs(A) 3
relatively-slow 1
relaxation 1
simulate 3
relaxed: 1
them 99
simulated 1
released. 6
relevant. 2
reload 1
simulations 4
relocate 5
relocated 6
relocation.py 1
relocation; 1
remain? 1
remainder 1
them, 20
then; 1
remains 11
simulator 16
then? 2
remains, 1
simulator, 1
remedied 2
there. 6
single-queue 4
therein; 2
single-threaded 4
there’s 1
remember 20
sit 6
remembering. 2
remind 1
situation 9
removing 8
renders 1
six 3
sixteen 1
repair 3
size) 5
sizeof(int)); 2
sizes. 3
repeatedly 15
skills. 2
repeatedly, 3
repeating 1
sleep; 4
replace? 3
replacement; 1
sleeps 4
replacements 2
replaces 7
report? 4
reports 2
representation 1
slice 36
represents 4
slice, 7
slides 1
request. 7
requesting 1
requests; 1
requests? 2
slightly 19
require. 1
slip 1
slow; 2
slow? 1
required. 5
slower 6
requirement: 2
slower, 1
research. 1
slowly. 2
small). 3
small/random; 2
researchers 8
reset 3
smaller 14
smaller, 1
reside). 1
they 149
snapshot 1
snuck 1
resides 9
so. 15
resides, 1
software) 2
resizing, 2
software), 1
resort 1
softwaremanaged 1
solely 1
resource; 1
solution). 1
solution; 1
resources 6
solutions 11
resources, 4
solutions, 3
solve? 1
respectively, 1
thing 38
respond 1
responsabilit 1
solves 7
thing, 6
response 31
response-time 1
restores 4
restricted. 1
think 66
restricts 1
think, 2
thinking: 2
thinks), 1
this. 4
result 30
this: 49
those; 1
result, 12
ret 1
though; 4
retain 1
thoughtful 1
thoughtful, 1
retrospective 3
thoughts 5
return-oriented 1
thousand, 1
return-to-libc 1
thr 7
thr_join() 3
return; 10
thread!) 2
return? 2
returned. 2
returning) 2
thread. 20
threads). 2
threads; 2
threads? 4
thread’s 14
three-queue 1
three: 1
threshold) 2
throughput?) 1
thrown 1
thumb. 1
thus: 1
ticket. 2
tickets; 1
tight. 1
time). 3
returns 61
time; 16
returns, 7
returnsfrom-trap, 1
time? 9
reveal 1
reverts 1
revisited 1
revolutionized 1
rid 1
right) 1
right.” 1
rightly 2
rip 1
rise 2
times 40
roam 1
times, 10
timespec 2
robust 9
tmp->next; 2
room: 1
tn 2
root). 1
to; 1
to? 2
round-robin 11
together 12
together, 3
routed 3
tolerate. 1
routine), 4
routine1 1
routine1, 1
routines. 1
rules 6
rules, 1
run. 22
run: 3
runaway 1
too 85
too, 2
too4 1
of 3668
off. 1
offers 1
tool 15
offset. 6
running. 23
tool, 6
offset: 1
toolbars, 1
running: 1
omit 2
runs...) 1
topics 5
omniscient, 1
runs; 3
topmost 7
runs? 2
trace; 1
trace? 2
rv; 2
traces 3
rvals->x 2
tracked 2
tract 1
rvals->x, 2
trade-off. 1
rvals; 2
trade-off: 1
transac-tions 1
rvalue); 2
rw59 1
transaction 4
rwrw- 1
transaction, 2
transcript 1
rw— 2
transfers. 1
transforming 3
transistors. 1
safe 6
sampling 2
sane 2
satisfies 1
translate 19
satisfy 9
translated 3
translated, 1
translation; 1
save 27
translations 22
translations, 6
saved 11
transparency 1
savings 9
transparent 4
trap; 2
trapframe 1
saw 12
say. 2
traps 5
saying 4
saying, 1
treating 2
sbrk() 1
sbrk) 1
scalability. 1
tree. 5
trees; 1
tremendous 1
scalable 15
trends. 1
tricks: 1
scales 6
scaling. 1
scenarios 2
scenarios, 2
sched 7
tricky 10
schedule: 2
true. 3
trust 14
scheduled. 2
tuned. 2
turn) 2
turnaround 30
turned 2
scheduler 110
scheduler); 2
scheduler, 20
schedulers) 1
some 505
school; 1
some, 2
scream, 2
scripting 1
something. 2
searched 1
second-chance 1
second; 1
soon-to-be-executing 4
soon-to-be-exec’d 1
seconds 9
seconds!). 2
seconds, 2
secretly 3
sophisticated 13
sort 6
section. 34
sounds 6
sections; 4
soup.” 1
secure 3
security; 2
see. 4
sources 6
see: 2
seed. 1
seeds; 1
seeing 1
seemed 1
two 241
two, 3
two-fold. 1
seen 31
segfault 1
segment 56
segment, 14
segmentation.” 1
type 73
segregated 3
type, 4
typeset 2
semantics 8
semantics, 5
semaphores 1
sentence. 2
sentence: 1
separa-tion 1
sequence. 2
typical 26
sequence: 1
ubiquitous 2
ultimately 1
sequential 8
unanswered: 1
series 9
seriously, 3
under 18
underneath 2
server 11
understand2 1
server, 1
understand: 1
server-based 2
service. 3
serviced. 2
setaffinity() 1
setassociativity; 1
understanding 19
undo 4
undoes 1
unexpectedly 1
unfairness 4
uniform. 1
sets 27
unimaginatively 1
set” 2
shape. 1
units; 4
unless 1
unlock. 4
unmapped 1
unmasks 2
unpack 2
unpark() 2
unrealistic; 1
unrealistic? 1
share 36
unsafe 4
unsurprisingly, 1
unused. 2
upcoming 1
update(counter_t 2
update; 1
updates 33
space 278
shared 67
shells, 1
she’ll 2
shooting 1
short). 1
shorter 6
upon 40
upon, 1
upside 1
on 719
us. 4
space, 50
usability 1
spaces) 1
on, 11
usable. 2
sparc/ 2
special; 1
on-disk 5
species, 1
specific. 1
use) 10
use_ptr 2
specifically 6
used) 1
useful. 10
specifically, 13
useful2 1
user; 3
specified 8
specified, 1
speed-of-light 1
speeds 4
speedup. 1
once 60
spell 1
once); 1
spending 3
spin-lock 2
once, 9
users 27
one). 1
users, 1
one-to-one 1
one? 1
spin-wait 10
uses. 3
spin-waiting. 2
ones 8
ones!). 1
spin. 4
ones, 2
spinning. 2
one” 1
ongoing 1
split 9
online 6
splitting: 1
online, 2
sponse 1
oops 2
src); 3
oops, 1
stack-allocated 2
open("/tmp/file", 1
opens 4
stack. 17
stack: 3
stage 3
standpoint 1
standpoint, 1
staring 1
start. 1
starting 14
starve). 1
starve; 1
state; 2
stateful 2
stateless 1
statements 1
states 15
states, 1
static 21
status 5
stays 4
stdlib.h 1
operating 151
stems 1
step 2
step, 5
operation 20
operation, 9
opportunities 1
opportunity 1
opposite. 1
opposite: 1
optimal; 2
optimization. 1
optimize 4
option 1
option, 2
still 59
stopping 4
store-conditional. 3
using 140
should 274
stored? 1
usual 2
usual, 3
showing 8
stores 16
utilization. 1
strange 8
strategy), 2
utilize 5
strcpy(dst, 4
strdup("wc"); 2
utilized 4
v 2
stream 7
stream, 2
v); 2
stride) 1
string) 2
val; 2
strings. 1
valgrind? 1
stronger 2
stronghold 1
valid. 2
stronglytyped, 1
shown 35
valid: 1
structure; 2
shown, 2
shudder 1
shuts 1
signal() 4
value) 13
signaled 1
value), 3
significant 4
values. 1
similar. 2
vantage 1
similarity 1
simple) 1
structures 59
simplest: 2
structures, 13
simplicity 7
stuff 8
stuff, 1
sub-sequent 1
subject 4
subsequently 4
subsequently, 1
simplicity, 16
substitute 3
substituted 1
subsystems. 1
simplifying 3
subtleties 2
simulation. 1
subtract 1
single-CPU 2
subverted 1
succeed 2
single-processor 5
success; 1
singlequeue 1
site: 2
successful 5
sits 3
suddenly 2
variable 75
sufficient 2
situations 3
sufficient, 1
summarizes 1
variable, 8
support; 4
variable-sized 7
variables) 1
variables), 1
support? 4
variants: 1
varies 5
supports 5
varies, 2
variety: 1
surrounding 2
survive 2
vary 4
survive, 1
survived 1
vast 2
swapoff. 1
vectors 1
swapon 2
vectors, 1
swapped 12
switch. 4
switches. 1
version 31
switching 17
switching); 1
switching, 2
swoop 1
symbol. 1
synchronize 2
size 124
synchronized 10
size); 2
system). 4
size, 12
system; 8
sizeof(PDE)) 1
system? 4
sizeof(PTE)) 7
sizeof(int); 1
sketch/review 1
sketched 1
skill 2
very 60
victim. 1
view). 1
skip 5
virtualized; 1
or 469
virtualizes 3
or, 5
sleep. 8
order! 1
visible 2
order), 1
visualization 1
sleeping 5
vmalloc, 1
ordered 4
ordering; 1
sleeping, 3
orderings 2
sleeping/waking 2
orderly 1
slice). 1
organization 2
slicek 1
organization, 1
slices 10
slices, 2
original 19
original, 1
slight 2
orphaned 1
slightly; 1
other? 1
sloppy 4
slow. 3
slower? 1
others 14
slowly) 1
others, 4
small. 1
otherwise). 1
otool 2
small: 3
our-selves 1
smaller? 1
out! 1
out-of-bounds; 1
out.” 1
systems 185
smart 13
sneaky 2
snippet 9
so), 1
output 36
output, 2
outside 4
systems, 49
system” 1
sz; 1
overall 9
overall, 1
software 17
t 10
overcoming 2
t, 2
software, 4
software-based 1
software4 1
solidify 1
overheads 14
overlap 6
solution. 8
overlap, 1
solution: 1
overlays 1
overlays, 1
solve. 1
solve: 1
overly 3
solved. 1
overly-large 1
some_function(char 1
overstate 1
oversubscribed; 1
sometime 1
overwhelm 1
sometimes) 2
owns. 1
void 153
somewhere 4
somewhere, 1
p1 8
vruntime 10
p1, 5
vruntime, 1
p2; 5
vulnerabilities 2
p3.c), 1
w/ 2
p4.c 2
p4.output. 1
p5 5
packing 2
soon 25
soon, 1
sorry 1
sorry, 1
wait() 26
sorts 9
source. 1
table 175
wait(), 6
space). 3
waited 1
walks 1
walling 1
space; 11
table, 26
tables! 1
tables) 2
space? 6
tables), 1
tackle 4
tackled 2
tail. 2
take? 2
spaces 20
spaces, 5
spaceshared 1
space” 1
sparsely 1
spawning 1
want 50
spear-headed 1
takes 50
warm-start 1
takes, 1
was; 1
specifies 5
talk 10
targeted 1
tasked 1
waste. 7
tasks. 1
tech 1
specify 10
wasted. 3
technique. 1
spectreattack.com 1
techniques? 1
watermark 2
spectrum, 1
way! 1
speculation 2
way) 1
technology 7
speculation, 2
way), 1
tell? 2
speeding 2
speeds; 1
tells 11
spinning), 2
splintering 1
ways. 11
temporal 7
splits 1
ways: 2
sploitfun.wordpress.com/ 1
temporarily 5
sprawling 1
tempting 4
tension 3
wc 11
spread 9
spring 1
wc, 3
term 15
sptr. 1
terminal 4
spuriously 2
terminal, 1
terminates 1
terms) 1
web 10
terrific 4
stack) 7
websites 1
terrific, 1
stack), 2
weightB 1
stages 1
weird; 1
test 7
test-and-set.s. 2
testand-set 1
well-known 4
tests), 1
text). 2
textbook 1
started 11
textbook, 1
started, 1
starvation 3
that? 7
starvation, 1
starve: 1
stash 1
stashes 1
well. 30
state. 10
went 3
state: 2
we’re 3
statement. 2
statistics 4
stealing 1
step). 1
step? 1
steps 3
we’ve 21
stipulated 1
stitch 1
their 91
stopped 2
stopped, 1
stops. 1
storage. 1
whatever 15
them. 16
store-conditional) 1
what’s 2
storeconditional. 1
themselves 4
stored. 1
themselves, 1
theoretical 1
straightforward 9
straightforward, 2
strange; 1
strangest 1
strategies 8
strategy 6
strategy, 2
strdup("p4.c"); 1
strdup() 1
streams 2
streams, 1
stretching 1
stride 17
stride, 1
string 12
string, 2
struction 1
structure. 16
structure: 2
structures; 2
structures? 1
strung 1
student 3
student, 3
studies. 1
study. 2
there 250
there, 2
therefore 2
therein), 2
thesis 1
studying 9
thing. 2
thing... 1
stuff? 1
style. 1
thing: 4
subdirectory 2
things; 3
subproblem 1
think. 2
thinking 23
thinking, 2
thirty 1
subsequent 24
subsystem 4
page 635
subtle 1
page(s) 1
succeeded. 1
succeeds 3
succeeds, 2
success. 3
success: 2
page, 28
page-frame 1
page-not-present 1
page-sized 4
pageable 1
paged 1
pagereplacement 1
pages) 3
pages), 1
pagetable 4
paging). 1
painful. 1
pairs. 1
pal, 2
panacea, 1
papers. 4
paradigm 1
parallel 6
parallel, 2
parameter 6
parameter, 4
parameterize 1
parent; 1
parent? 1
park(). 2
part. 1
part: 4
passing 12
passion 1
path 8
path, 2
patience 2
patience, 1
patterns 4
pauses 1
pays 1
peach 4
peach, 3
peaches 2
peaches, 1
peanut 1
peek 1
penalty 2
pending 1
people 28
people, 1
percent 6
perfect 7
performance; 5
performance? 3
performance” 1
performance”, 1
performing 14
periodically 9
permissible. 1
permission 1
permit 1
persistence 1
persistence, 1
persistent 4
persistently; 1
persists, 1
personally 2
perspectives 1
peterson.s, 2
phase 3
phase, 4
phones 3
photos 1
phrase... 1
such 274
when 480
sudden 1
when, 3
which). 1
while) 1
suffer 8
suggested 8
super 2
super-linear 1
superpages, 1
support. 9
supporting 1
suppose, 2
supposed 4
who 41
whose 8
why. 2
widely 9
willing 3
win 1
winner). 1
winning 7
within; 2
woke 1
physical 236
woken. 2
physical, 1
physics. 1
wonder? 1
sure 56
surface. 1
picking 6
surprise. 1
surprise: 1
wonderful 11
surprised. 2
pieces 19
work; 6
surprisingly 7
pieces, 5
piece” 1
surprisingly, 6
piena 1
work? 7
pigs. 1
worked. 1
susceptible 3
suspect 1
pioneers 4
pipe; 1
suspicion. 2
worker 6
pipes 4
worker, 2
pipes, 2
workgroup. 1
working-set 1
workloads 14
workloads, 1
swap 34
swath 1
switch() 3
switched 2
place 46
switching; 1
swtch: 1
symbiotic 1
place, 9
syscall 3
placed 24
placed, 1
placement 1
placement, 1
platform, 1
player 1
player, 1
works 54
plays 2
ple 1
pleasure 1
plural) 2
works, 15
world. 3
system. 57
worse. 6
system: 6
worse: 2
systems). 1
wrap 2
wreak 1
wreak, 1
systems; 9
pointer 55
systems? 2
system’s 3
t(B) 1
pointer, 10
t). 2
t; 2
writes 21
table). 3
points 15
writes, 4
policy) 1
written), 1
pool? 1
table; 5
wrote) 1
poorly 3
table? 3
www.ajwm.net/amayer/papers/B5000.html. 2
poorly, 1
poorly-programmed) 1
www.gnu.org/gnu/manifesto.html. 1
popular. 1
x-axis 1
popularity 1
x-axis, 2
positively) 3
possibilities. 1
x. 2
possible 31
x86 23
x86); 2
tables 49
x86)” 2
possible, 14
possibly 1
tables, 8
tailor 1
x86, 8
potentially 7
x86-64) 1
potentially-starving) 1
xchg 2
xv6. 1
power 8
y-axis? 1
powerhouse 1
taken 16
precautions 2
years. 4
predate 1
taken, 5
yes! 1
preempt 2
takes; 1
preemptive 2
talents, 1
preemptive, 1
talks 1
premature 2
premise 1
target 6
presence 11
yet 20
this 1109
task 16
yet, 10
task, 5
tcsh), 1
yields 5
teaching 1
young 3
team 2
present 36
yourself! 3
this, 32
technical 3
present, 2
telling 1
thorough 2
preserving 1
thr_exit() 3
zero. 11
ten 7
thrashing 2
pressure 5
zeroing 4
zeroing, 1
pressure, 2
tend 7
zombie 2
pretends 1
terminate. 3
× 1
terminated. 1
prevented 5
terms 10
terms, 3
test-and-set. 4
previous 19
test? 2
previously; 2
tests 5
primarily 3
text. 1
primitive 9
primitive, 2
principles 5
print 25
printf("%s\n", 3
printf("child\n"); 3
printf("hello 3
printf("hello, 6
— 131
’05. 1
’07, 2
printf("parent: 6
’83, 1
printf("this 1
’94. 1
priori 3
’Precise’), 2
’d’ 1
priorities; 1
’his/their 1
priority). 1
“01” 1
priority; 1
“100x” 1
than 149
priorityadjustment 1
“ARC: 1
thanked 1
“Alto 1
probabilistically 2
“Analysis 1
probability 2
that. 9
that: 3
“A” 8
“A”, 2
“CPU 1
that’s 8
“CPU-bound” 1
the?? 1
“Control-c” 1
them) 1
“Evaluating 1
them), 2
“Evaluation 1
“Experience 1
theme 6
“Exterminator: 1
themselves). 1
“E”, 2
themselves; 2
“Get 1
“Hmm... 1
“Hoard: 1
“Ils 1
“Informed 1
“Inside 3
“Intel 4
“Is 1
“Man-Computer 1
“Nonblocking 2
“Policy/mechanism 1
“Program 1
“Pthread 1
“Relocating 1
“Reminiscences 1
“Segmented 1
“TENEX, 2
“THE” 2
“Test 1
“There 1
“Time-Sharing 1
“Towards 1
“Volume 4
“Wait-free 2
“What 5
“Why 2
“With 1
“as 2
“brain 2
“core” 1
“first 1
“fun” 1
problem 121
“have 1
“havoc” 1
“hello 1
“hello, 1
“high 1
“lock” 2
“loop.s”. 2
“looping 1
“modern” 1
“out 1
problem, 24
“owned” 1
proc-struct(B) 1
“parent: 1
“ready” 2
“real-world” 2
“reserved 2
“running” 2
procedure 12
“starts” 2
“steal” 1
proceeds 4
“test 2
“tried 1
“turn” 2
“what 1
then 227
→ 17
then, 16
theory 4
theory, 1
there). 1
there; 5
there? 4
thereby 1
therein 1
therein, 2
thermodynamics 1
things. 7
think) 1
thinking? 1
thread 449
process. 69
process: 2
third 18
third, 2
this? 5
processes. 22
processes: 4
thread, 48
processing 4
thread-local 2
thread-safe, 2
processing, 3
threads) 1
threat 1
processors. 3
process’s 18
those 84
those, 1
produces 7
product 1
professional 1
professor. 2
program) 1
programmer), 1
though 29
programmers. 2
three 69
though, 8
three, 3
three-quarters 1
programming. 5
programming: 2
threshold; 4
thought 17
throw 6
thr_exit(); 1
thread; 7
thread? 2
threadID. 2
programs. 25
progress 8
progress, 1
proliferation; 1
promotes 2
pronounced 1
proofs 1
properly 15
properly, 1
properties 8
property 10
property, 2
proportional 3
proportional-share 6
proportional-share, 1
prot 8
protect 11
protection. 3
protective 1
threads 197
protocols 2
threads); 2
threads, 38
thread” 1
threats, 1
three-instruction 3
threshold. 2
tick 1
tick-by-tick 1
ticket.s. 2
ticket; 2
provide 65
tickets 30
tickets, 4
tidbits 2
provided 20
provided, 2
ps. 1
pthread_attr_t 2
pthread_cond_wait(pthread_cond_t 3
pthread_create(&p, 2
pthread_create(..., 4
pthread_mutex_init(&c->glock, 2
pthread_mutex_init(&q->head_lock, 2
pthread_mutex_init(&q->tail_lock, 2
pthread_mutex_lock(&lock); 2
pthread_mutex_lock(mutex); 2
pthread_mutex_t 22
pthread_mutex_unlock(&c->glock); 4
pthread_mutex_unlock(&q->head_lock); 4
pthread_mutex_unlock(&q->tail_lock); 2
thus 486
ptr; 2
publishing 2
pull 2
purely 1
purposes 2
thus, 54
ticket 27
ticket, 2
put 41
tickets), 1
time! 2
q->head; 2
time) 4
quantify 3
time), 4
question! 1
questions. 3
time-sharing 7
time-slice 5
time-space 2
timedlock 4
timely 3
timer; 1
timer? 3
timers, 2
times. 7
timing 5
timing, 3
time 306
queue 55
tiny 21
tips 2
tired 1
tirelessly 2
tmp; 7
queue, 17
to! 1
to) 1
queue_init(m->q); 2
to), 1
queued 1
queuingbased 1
together. 5
tolerate 1
tomes 1
quick 4
tons 2
quick, 1
quickly; 3
too. 6
qu’une 1
too: 2
tool. 1
top) 1
race. 4
top), 1
rage. 1
top-level 2
raising 3
time, 75
time-share 1
time-shared 2
time-slicing. 1
total 26
ran 15
timeline 3
towards 3
timeline, 1
ran, 1
traces. 2
timeout 4
timer-interrupt 1
tracing 6
timer. 1
tracing, 1
times) 1
track; 1
times), 1
timing? 1
tip: 1
tlb.c, 1
tracks 8
tmp->next 4
trade-off 4
traditionally 1
tragically 2
transferred 4
random 37
transfers 7
transfers, 1
random, 1
transform 4
randomized 2
transistors 2
translation) 1
translation), 2
range 7
rapidly 1
translations. 6
rarely-used 1
translations: 2
rarely. 2
transparency2 1
trap), 1
rate) 2
trapped 2
ravages 1
traversal 3
traverse 1
tread 1
treasure-trove 1
treat 4
treatment, 2
rc 13
rc, 3
rc_wait 3
tree 15
rc_wait, 2
tree, 4
trees), 1
trend? 1
re-acquires 4
tricks 2
tricky: 1
re-checks 4
tried 4
re-energized 1
tried, 1
re-place 1
trigger 2
re-use 1
reaching 1
reaction 2
true 14
read() 1
true, 3
read(), 1
read), 1
reader: 2
truly 9
trylock 4
tune 1
turn; 4
turnaround. 1
ready 33
ready, 3
turns 37
real-world 2
tweak 1
realizing 1
twice 5
twice, 5
two-phase 6
two. 3
two: 1
type. 1
type: 1
typesetting 2
uber-engineer 1
uint 1
unallocated 2
unbounded 1
uncommon 2
undefined. 1
underpowered 1
really 52
really, 4
rears 1
reasons. 10
reboot. 1
receive. 1
recency 1
recent 16
recent, 1
reclaim 3
recognizes 1
recommended. 1
understand 112
recursion). 2
recursively 1
understand, 3
understandable 2
red-black 4
understandable, 1
understanding. 1
redirects 1
understanding: 2
undertaken; 1
reducing 6
unfortunately 4
reduction 2
reduction, 1
refer- 1
unfortunately, 14
unified, 1
uniform, 1
unimaginably 1
uniprocessor, 2
reference. 8
refine 3
unit 7
unknown 1
refined 5
reflect 4
unlock 13
refuses 1
unlock(&m) 1
regains 3
unlock(lock_t 10
regard, 2
unlock, 2
region) 1
unlucky) 1
unmodified, 1
unnecessary 1
unpacking 2
unsurprisingly: 1
unsuspecting 1
until 52
unused 14
unused, 1
up; 2
up? 3
update) 1
updated) 1
register 75
updating 13
upon. 1
upper 1
register, 6
upper-half 1
upwards. 1
registers) 2
urging 1
registers), 2
regs 3
reject 4
relate 1
related 18
relatively 16
relaxed 2
us 84
us, 2
usable 2
usage; 1
use; 4
used; 2
used? 1
release 23
released 10
relegated 2
relevant 13
remainder. 1
remains. 1
remains: 2
useful 69
remember: 1
removes 1
rent 1
repeat 1
useful, 11
repeat, 1
useful2. 1
useless 2
repeatedly. 2
user-facing 1
repeating. 1
replacement) 1
user-level 6
user/supervisor 1
usermode 1
replacing 3
users. 1
replete 1
users: 1
represented 3
reproduce 1
reproduce, 1
reproduced 1
request 35
uses 70
request, 10
use”, 1
requester), 1
using. 2
usual. 2
utilities 1
require 10
utility 3
utilization 5
utilization, 1
required 15
utilized. 1
utopian 1
required, 3
research 18
research, 4
research.microsoft.com/ 2
reset. 2
reside) 1
resides. 3
residing 2
resistance 1
valid 51
resize; 2
resource) 2
resources. 5
valid, 14
respectively. 2
valuable 3
restart 5
restoring 5
restricted 7
restrictions 1
value; 22
value? 2
result. 11
result: 2
resulting 24
results? 2
resume 8
resumed, 1
retaining 3
rethink 1
return-from-trap 17
return-to-libc. 1
values 75
returned 15
returned, 2
values, 12
returning; 1
variable-sized. 1
returns. 3
reusing 1
revolutionary. 1
variable. 8
rewrites 1
variable: 2
richer 1
variable’s 1
right). 2
right; 1
variants 4
variety 3
right? 8
right”, 1
vary. 2
risen 2
varying 2
road” 1
vengeance’.” 1
versus 5
room 17
rosy 1
rotational 1
rough 3
via 53
routines 41
viewed 4
virtualization). 1
routines, 5
virtualization; 1
ruins 2
virtualization? 1
virtualizing 14
virtually 9
visible. 2
vision 1
visionary 1
visited, 1
visualization. 1
visualize 1
void. 1
volatile 5
vruntime. 1
vruntime: 1
vulnerabilities. 1
vulnerable 2
wait(). 3
wait(NULL); 3
waiter 2
waits 36
wake 33
wakeups 2
wall 1
want. 1
warmed 1
warmup 1
wasn’t 2
waste 23
wasted 4
way). 1
way? 1
ways 19
ways, 1
run 374
run, 24
run-and-yield 2
run-time 7
running 227
running, 30
runtimei 1
rw 6
rwx 4
sad! 1
safe. 2
safer 2
said 43
said, 10
satisfying 2
say 29
say, 5
scalability 2
scalable. 5
scales. 1
scaling 2
scaling, 1
scan 5
scanning 3
scenarios. 1
scenes, 2
schedule 14
schedule(curr); 1
scheduled 11
scheduler. 10
scheduler’s 1
scheduling; 4
scheduling? 1
scheme 6
scheme, 1
scientific 1
scientists 4
scoff 1
scratched 2
scream. 1
script 2
second-level 3
seconds. 3
secretary; 1
section 55
section, 24
see 272
see, 15
seemingly 12
seems 12
segment. 8
we 992
segment: 10
web. 1
segmentation). 2
weight 1
weight, 1
weight0 1
segmentation.py 5
weirdly 1
segmentation; 2
segmentation? 1
segmentation” 1
segmenting 1
segments; 1
segment’s 1
self; 2
semantics. 2
seminal 1
sends 3
sense; 5
sense? 1
senses 1
sensible 4
sentence 1
separate 17
sequence 24
well 88
sequence, 8
serve 2
serve, 1
well, 15
served 3
well-defined 1
well-meaning 1
weren’t 1
service 11
serviced 4
serviced, 1
setpark(). 2
sets. 2
sets: 2
settle 1
setup, 2
shade 1
shaded 1
shared. 1
shmget() 1
short) 5
short-lived 2
short-lived, 1
shortly 1
should. 1
show 24
show, 1
side 4
sign 3
signal(). 1
signals 13
signals, 2
similar 45
similarly; 2
simplest 13
simplicity. 3
simplified; 1
simplify 1
simulating 1
simulation 7
simultaneous 1
single-entry 2
sinister 1
site 1
sitting; 1
situations. 1
six-level 1
size. 7
size: 16
size=100); 1
what 280
sizeof() 7
when. 2
sizeof(), 1
sizeof(PDE)). 1
whenever 3
sizeof(node_t); 1
wherever 2
sizeof(x)); 2
whet 1
sizes; 2
while? 1
slabs 1
whims 2
sleep 30
sleep, 13
sleeping. 4
slice), 2
why 58
sloth” 1
why, 1
widespread 1
wild 1
slots 7
slots, 3
slow 15
slow, 8
slowdown 2
slowly; 1
small 61
small, 7
small-sized 1
smallest 5
snatch 1
sneaks 2
snippet. 1
snippet: 3
snooping 1
snooping, 1
so). 1
so; 2
so? 5
software-managed 5
software. 2
solid-state 1
solution 44
solution, 10
solve 20
solved 2
someday). 1
somewhere. 3
somewhere... 1
soon-to-be-faulted-in 1
soon-to-be-run 1
soon-to-be-running 1
soon. 1
sorry. 1
sorted 1
sound 5
sounds! 1
source 23
source, 1
space! 2
space) 4
space), 4
space1 1
spaces. 7
spans 1
sparsely-used 2
special 22
specialize 1
specialized 4
specification 1
specifics 1
specifying, 1
speculative 1
speed 12
spends 1
spins 11
spins, 2
splay 1
splits. 1
sptr 2
src) 1
stack). 4
stack-smashing 1
stack; 3
stacks 4
stacks, 3
stale 1
standard 22
standards/SPARCV9.pdf. 1
stands 1
starting) 1
starts 25
starts, 3
starvation. 7
starvation: 1
starve 2
starved 1
will 580
will, 2
window 3
window, 3
winner) 2
wise 1
wished 2
state 73
state, 13
stated 2
stated, 2
statement 3
statement, 1
statically-initialized 1
stay 3
steal 3
step-by-step 2
stolen 1
stood 1
storage 12
storage, 2
store 24
store, 2
store-conditional; 2
storeconditional 1
stored 15
str); 1
straightforward. 2
straightforward: 6
strategies. 1
strategy. 1
streams. 1
strength: 1
strict 1
stride. 1
stringing 1
strings? 1
strive 5
strlen(), 1
strong 2
strong, 1
struct 49
structure 73
structure, 24
stuck; 3
studies 4
study 52
study, 3
studying. 1
style, 1
sub-jobs, 1
sub-microsecond 1
submitted, 1
substrate 1
subsystem: 1
subtle: 2
succeeded 4
succeeded, 2
success 9
success, 5
successfully 5
successfully, 1
such. 1
suffering 2
suffering, 1
suffice 3
suggested. 1
suggests 2
suit 1
suitable 2
sum 3
sum, 1
summarize 5
summarize, 1
sun.com/solaris/articles/atomic 2
supply 1
to 4068
to, 13
with 638
today. 6
today’s 2
together! 1
support 110
told 2
too! 2
support, 16
sure. 2
surely) 1
surface 3
surprise 2
top 32
surprised 2
surprising? 2
surprisingly!) 1
without 70
topic 18
swapping 12
swapping, 1
topic, 4
total). 1
switch? 2
totals 2
woken 13
switches; 1
totaltickets); 1
switches? 1
woken, 2
switching) 1
touch 4
won 3
switching), 1
touches 2
wondered 1
swtch 1
tough 2
wonders. 1
synchronizations 1
toughest 1
word 14
word, 1
work! 3
trace 24
trace, 3
worked 6
tracking 2
worked, 2
workflows. 1
trade-offs 5
workings, 2
tradeoff 1
workloads. 3
traditional 11
transfer. 1
transformation 2
transforms 4
works. 22
transition 6
translated), 2
world 26
world!”, 1
world, 6
world\n", 1
translation 46
worried 1
worry! 2
translation, 15
worse 9
translation-lookaside 1
translations! 1
transparently 3
worse, 8
worst-case 5
worth 20
wouldn’t 5
wrapper; 2
wrappers 2
wrappers, 2
trap 52
wrapping 2
trap, 3
wreakers 1
traversals 2
treasure 1
treats 1
write() 5
tree? 1
write(), 1
writes: 1
trees 4
trees, 4
trials 2
trials, 1
trickier. 1
writing 21
written). 1
written; 1
written? 2
x 12
x, 2
x86. 1
x[10]; 1
tries 41
triggers, 1
trivial 2
xv6 6
xv6, 1
trouble. 3
y; 2
yeah! 1
years 19
years, 9
yelling 1
yet. 4
yet: 2
try 64
yield() 2
yield.s 2
turning 9
yield.s, 2
tweaks 2
you). 1
twenty 1
you; 1
twice). 1
two-CPU 1
you? 9
two-level 7
yours. 2
type) 1
yours: 1
typically 1
yourself2! 1
yourself; 3
typing 9
typing, 1
unasked 1
you’d 9
unblocked 2
uncaught, 1
under- 1
system 363
undergraduate 4
underlies 2
underly 1
undertake 1
undesirable) 2
undoubtedly 2
unexpected. 2
unfortunate 5
you’ll 37
unique 7
units 1
units, 2
zero 10
unit”, 2
unlock): 2
zero, 3
unlock? 2
zeroes 2
unmask 1
zeroing. 2
unpark(threadID) 2
system, 65
unqualified 1
systems) 4
unrealistic 2
| 8
systems), 1
|| 2
table! 1
unrealistic, 3
table) 2
unreasonably 1
table), 1
}; 8
untimely 6
ˆC 2
tables. 6
’03. 1
tail_lock; 2
’09, 1
up. 7
’10, 4
’14 1
’18, 2
’63 3
’81, 5
’85, 1
’89, 1
’92. 1
’94, 2
’98, 1
’Approximate’, 2
’b’ 1
’b’, 2
’flag’ 2
’new’ 2
’peek 1
’self’ 2
update 54
“...with 1
update, 1
“010101”, 1
“21” 2
“80-20” 1
updated 8
“Advanced 4
updated, 2
“Ah! 1
take 97
uplifting! 1
“Aleph 1
upward 1
take, 3
“Algorithms 2
taken. 1
“Animal 1
taken: 2
usage. 4
“Change 1
“Dahm 2
tandem 5
“Extending 1
tapes 1
“Fact 1
target. 1
“Guide 2
target’s 2
“Hints 3
use. 16
“Hoare” 1
task. 7
“Information 1
task: 1
“Introduction 3
taste 2
“Just 2
taught?! 2
“My 1
tcsh). 1
“One 1
teach 1
“Our 1
used. 15
“Performance 1
useful? 1
“Principled 1
“Priority 1
“Profiling 1
“RTFM.” 1
“Reese’s 1
“SDS 1
techniques 24
“Shared-access 1
“She’s 1
“Someone 2
techniques, 7
“Survey 1
technology-driven 1
“They 2
“Think 1
“Transaction 2
“Understanding 5
“Using 2
“baby 1
“bad” 3
tell 28
“big 1
tennis 1
“bounds” 1
“catch” 1
“crux 1
terminate 6
“demon”, 1
terminated 2
“ease 1
“easy 1
terrible 3
“familial” 1
terribly 1
“goodbye”. 1
“got 1
“hello”; 1
“hot” 2
“jemalloc” 1
test-and-set 15
test-and-set.s? 2
“just 3
test-and-test-and-set.s. 2
“other 1
testand-set! 1
“perfect”. 1
tested 1
“privileged” 1
“right 1
“second-system 1
text 9
“smart” 1
“ticket-assignment 1
text, 2
“too 3
thanks 4
“walk” 1
thanks, 1
“yes.” 1
user 117
user, 3
user-defined 2
usually 52
usually, 2
utility? 2
• 69
utilizing 4
← 2
v9 1
val 2
− 7
valgrind 15
valid). 1
valid; 1
valid? 3
value. 12
values). 2
values? 3
vanishes. 1
variable) 1
variables. 13
varied 2
vastly 1
vector 1
vector, 1
versa. 1
vi, 1
vice 1
vice-versa. 1
view 14
view, 1
violations). 1
virtual 253
virtual, 1
virtualization. 4
virtualize 13
virtualized 6
virtualized, 1
virtue 2
vmstat 2
vmstat, 1
voo-doo 2
vruntimei 2
vs. 8
wait()) 1
wait(address, 2
wait-for-me.s. 2
wait. 2
waiters 4
waiting 94
waiting, 5
waitpid() 2
waitpid()); 1
wake(address) 2
wake? 1
wakes 15
wakeup/waiting 2
walk 1
wanted 3
warm 3
warnings. 2
wary 7
was 188
wastes 10
watch 5
watches 2
water 1
way. 6
way: 5
wc), 1
weaknesses. 1
website 2
weightk 1
weights 2
weird 3
well-regarded 2
well-suited 2
well; 1
were 76
we’d 9
that 1398
that, 11
we’ll 112
whatever) 1
when! 2
where 166
whereas 14
whether 59
which 501
which, 4
while. 2
while2 1
whole 5
whom 2
why? 2
widely), 1
wikipedia 1
windows, 1
wine, 1
winner 5
winter. 1
wired 2
wisdom 1
wish 26
wishes 16
with? 1
within 89
within, 1
wonder 3
wondering: 4
won’t 21
won’t, 1
words 2
words, 5
work 150
work, 23
work-stealing 2
worker(), 1
workload 14
workload, 11
world; 1
world? 1
world” 1
worry 21
worst 7
worst-fit 2
worst-fit, 2
worstcase 1
worthwhile. 3
would 200
wreak1 1
write 63
write, 3
wrong. 3
wrote: 1
www.takeourword.com/TOW146 1
x86) 1
x; 4
x? 1
y-axis 2
years; 2
yell) 1
yes. 3
yes: 3
yet! 1
yet), 1
yield 21
yield(); 2
yield, 2
yield-based 2
you. 8
you: 1
your 201
yourself. 1
yourself2 1
you’re 18
you’ve 6
zero). 1
zplot. 1
{ 281
© 21
’ 11
’04, 2
’13, 5
’75, 1
’95. 1
’a’ 4
’a’, 1
’threshold’, 2
“1984” 1
“2Q: 1
“A 15
“Ad 2
“Atomic 2
“A”), 1
“B” 8
“Cold-start 1
“Dynamic 3
“Earliest 1
“Efficient 2
“Electrochemically 1
“Everything 2
“He 1
“History” 2
“I 1
“It 2
“Jack 1
“Javascript: 2
“KASLR 1
“MIPS 3
“Mac 1
“Machine 1
“Membrane: 1
“Memory 1
“Mesa” 1
“Microreboot 1
“Monitors: 1
“Myths 2
“OSSpinLock 2
“OS” 1
“OS”, 1
“On 2
“Operating 2
“Parallel 1
“Premature 2
“Purify: 1
“RISC-I: 1
“Run-Time 1
“Solaris 3
“Solution 2
“Structure 1
“Symmetric 1
“System 1
“Take 1
“The 40
“Tolerating 1
“U 1
“Valgrind: 1
“You 2
“a 1
“all 4
“at 1
“atomic 2
“batch” 1
“being 1
“best” 2
“cold” 2
“commoncase 1
“correct” 4
“emulation” 1
“fault.” 1
“free” 1
“glibc 2
“implements” 2
“interactive” 1
“it 1
“lost” 1
“older” 1
“on 1
“operating 1
“out-of-bounds” 1
“page 1
“reliability”, 1
“response”; 1
“right” 1
“same” 1
“setting” 2
“the 1
“uninitialized 1
“works” 1
“wreaked”? 1
” 4
the 8323
them). 2
them; 2
them? 3
then. 1
theory-types 2
there! 1
therein. 5
therein: 2
these 222
these, 4
they? 2
thing; 1
things 46
things); 1
things, 6
thing” 1
think-ing 1
think? 1
thinking! 1
thinks 7
this! 2
thousands 10
thousands, 1
thr_join(); 1
thread), 2
thread.c 1
threadID 2
threadID, 2
threaded 2
threads. 19
three) 1
three-level 1
threshold 11
threshold, 2
through 56
through, 1
throughout 13
tickets. 5
tickets: 1
tightly 1
time-efficient 1
time-slicing 1
time-tested 1
time. 66
time: 2
timeline. 2
timer 36
timer, 4
times). 2
times; 3
times? 2
timings. 1
tip 2
tip, 4
tive) 1
tmp 8
tmp); 5
tmp->value 2
to. 4
today 7
today, 4
too). 2
too; 1
took 16
took, 1
tool? 1
tools 16
tools, 3
too” 1
top-to-bottom 1
topic. 1
total) 2
touching 1
trace: 1
track 27
track, 1
trading 1
traffic. 1
trans- 1
transactions 1
transfer 10
transformed 2
transitioning 4
translates 5
translation. 10
translations). 1
translations; 1
transparency; 1
transparent” 1
trap. 1
trapping 3
traversing 2
treated 6
trials. 1
trick 3
trouble 9
trouble, 2
true! 1
trusts 4
truth. 1
truth: 2
try. 1
trying 15
tuning 1
turn 32
twins!” 1
two-thirds 1
type). 1
typedef 33
types 33
u 2
ubriaca. 1
ugly 3
unaffected 1
uncommon), 1
underlying 9
understand! 2
unfair 2
unfair, 1
uniformly, 1
unifying 1
uninitialized 1
uninteresting: 1
unit) 1
units. 3
universal 1
unlikely 3
unlock(&mutex); 2
unlock() 14
unlock(), 2
unlocked 2
unpacks 1
unpark 2
unpark(queue_remove(m->q)); 2
unpleasant. 1
unrealistic. 1
unrealistically 2
unsatisfying) 1
unsigned 2
unusable. 1
unused) 1
unusual 3
up 156
up, 12
update. 1
update: 2
updating) 1
upper-case 1
upper-level 2
upsides 1
urgent, 1
usage 16
usage, 2
use 317
use, 15
use?) 1
used 175
used, 8
user-managed 1
user-mode 3
user. 7
user’s 4
uses), 1
using). 2
using; 2
using? 2
utilized? 1
utilizes 1
v; 2
valgrind. 1
valid), 1
value 233
value); 2
value, 17
variable). 1
variable-length 2
variable; 2
variables 33
variables, 5
variablesized, 1
variable” 1
variant 3
variants) 1
various 27
vary). 1
vector-like 1
vector. 1
vengeance’. 1
version? 2
versions 8
viewing 2
viewpoint 1
violation 2
violation, 2
virtual-memory 1
virtual-to-physical 6
virtualization 20
virtualization, 7
virtualized. 1
virtuallyindexed 1
visually 1
void; 2
voluminous 2
wait 53
wait(); 1
wait, 4
wait-for-me.s 4
waitFirst 2
wakeup, 1
waking 5
waking, 1
want; 1
wants 16
wary: 1
was. 1
waste! 1
wasteful. 2
watch. 1
watching 1
way 97
way, 20
weakness 1
weaknesses 1
weightA 1
weighted 1
weighti 2
welcome! 1
well) 1
well), 2
were. 1
which... 1
whichever 4
while 170
while, 8
wide 1
wily 2
winner. 2
winner: 2
wishing 3
with) 2
within. 1
wondering 2
work. 24
work: 1
workers 1
workers, 2
working 28
workload. 6
workload: 1
works3 1
works; 1
works? 3
workshop, 1
worlds. 2
worlds: 1
world”. 1
worry. 3
worry: 1
worse! 1
worthwhile 2
wrangling 1
wrapper 3
wreaked?” 1
write(fd, 1
write. 2
write: 1
written 18
written, 1
wrong 15
wrong, 4
wrote 10
www.cs.tau.ac.il/˜shanir/concurrent-data-structures.pdf. 2
www.nds.rub.de/lehre/seminar/SS06/Werthmann 1
www.sparc.org/ 1
www.stanford.edu/˜ouster/. 1
x) 1
x86). 2
x86-version 2
x86.py, 4
x86” 2
yes, 6
yielding 5
you 995
you, 11
younger 1
yourself 7
yourself, 2
yuck! 1
zero), 1
zero.” 1
zeroed 1
zombies 1
zombies, 1
zsh 2
} 271
· 4
˜mark/syscall.html. 1
– 19
’02, 2
’11, 2
’15, 1
’19, 1
’68 1
’93. 1
’95, 2
’Classic 1
’current’ 1
’c’ 3
’c’, 1
’e’. 1
’mutex’ 2
’pedantry’ 1
’wreak 2
’w’ 1
“An 9
“Aspects 1
“Before 1
“Bell 1
“But 1
“B”. 2
“Cloud 3
“Computer 6
“Concurrent 2
“Converting 1
“Cooperating 7
“H-Pucks”) 1
“H”, 2
“Idleness 1
“If 2
“Improving 1
“It’s 2
“John 1
“Load-Link, 2
“Lottery 2
“Mach: 1
“Making 2
“Multics: 1
“Multilevel 1
“Observations 2
“One-Level 2
“One-level 2
“OpenSolaris 2
“PThreads 2
“Perfection 1
“Practical, 1
“Programming 7
“TLB”. 1
“Time 1
“T”, 2
“Virtual 8
“bad 1
“buddy” 1
“child”, 1
“condition 1
“cooperating 2
“daemon”, 1
“direct 1
“discovered” 1
“double 1
“drum” 1
“fault” 2
“first-in” 2
“foo” 1
“interrupts” 1
“limited” 1
“lmbench: 1
“longword” 1
“main: 14
“pinning 1
“private 1
“process 1
“prove” 2
“real” 3
“reasonable” 1
“ten-items-or-less” 1
“test” 2
“the”). 2
“yeah, 1
