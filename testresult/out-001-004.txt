3 1
12 19
16 9
C 16
S 28
"common.h" 7
"hello"; 3
# 16
#2: 2
#include 62
$0x0,(%edi,%eax,4) 1
$0x03, 1
$0x03e8,%eax 1
%bx 2
%dx. 2
2 25
20 1
6 22
B 13
F 8
%eax 24
PAGING 21
!= 7
!StoreConditional(&lock->flag, 2
"B"); 4
"hello 1
"wc" 1
#1: 2
#define 2
%ax 4
%d)\n", 4
%eax). 1
%edx 1
%edx, 1
%esi 1
%esi, 1
10 21
14 14
18 4
I 26
& 29
&oops; 2
&rvals); 2
&x); 1
((flag[1-self] 2
(-M 1
(-P) 1
(-m 2
M 20
! 2
!zero, 2
"A" 1
"A"); 4
 32628
 26
22 1
4 23
(./x86.py 4
(01) 1
(0x1) 2
8 22
"common_threads.h" 4
"usage: 2
$0x0) 1
$0x1 2
$0x1, 6
(1) 13
(100) 1
(1024). 1
(104) 1
(14th) 1
(15th, 1
% 8
%d 5
%d\n", 9
(1e7) 2
(200 1
(256) 1
(28 1
(64 1
(9.2) 1
%dx 6
%eax,8049a1c 4
%ecx 1
%ecx, 1
%esp 1
%esp, 1
%lld\n", 2
%p\n", 4
&; 1
(A) 2
L 17
T 10
&mutex); 8
&rvalue); 2
(-L 2
(-c) 1
(-l 4
(-p 2
(-s) 3
(-w) 1
(1 1
(10 1
"fork 4
"wc"... 1
#3: 1
$0x1,%eax 4
%eax), 1
%eax,0x0(%ebx) 1
%ebp 1
%ebp, 1
%ebx 1
%ebx, 1
&& 2
&stack); 1
( 6
(*start_routine)(void 2
(-1KB) 1
(-T). 1
(-p). 1
(-s 2
(/tmp/file) 1
(APIs) 2
(ASID) 1
(100 4
(1000 1
(117 1
(212 1
(0, 3
(010101), 1
(1110) 1
(117). 1
(20%), 1
(2012-01-30-1-g1c41342) 1
(21) 1
(22.1) 1
(224 1
(24114) 5
(256 1
(32 2
(32-bit 1
(34KB), 1
(4KB 1
(5 1
(9.1) 1
(@PFN:101) 1
(24113) 5
(26 1
(B 3
(A 14
(A, 5
(AS) 1
(ASLR). 1
(Again) 1
(28KB) 1
(BFS)2 1
(CTSS), 1
(CanAccess(TlbEntry.ProtectBits) 4
(Editors 2
%eax, 8
(Another 1
(3) 2
(3764 1
(4 3
(4088 1
(4096), 1
(512 2
(7.2) 1
(8 1
(@PFN:100) 1
(AMAT) 1
(As 1
(BKL). 2
(BSD). 1
(B’s 2
(C) 1
(CPU 2
(Figure 45
(I/O). 1
(LDE) 1
(Code) 8
(D); 1
(G) 2
(G), 1
(Gulps) 1
(KASLR). 1
(KNUTH’S 1
(L 2
(LFU) 1
(MIPS), 2
%edi 3
(August, 1
(LRU) 1
(OS 1
(OS)3 1
(P1) 3
(P1), 1
(P=0), 1
(PA) 3
(Left) 3
%edi, 1
(Bounded 1
(PA), 1
(Line 5
&args); 4
&lock); 2
(PCB), 2
(Linux, 1
(CFS) 2
(CFS), 1
(PDE) 2
(PID), 1
&m); 3
(-a) 2
(LoadLinked(&lock->flag) 4
(PTE) 9
(Q0), 1
(Q2). 1
(R 1
(R, 1
(-i) 4
(Logical) 1
(MMU) 1
(RDLK) 2
(ROP) 1
(SN) 1
(MMU), 1
(P 1
(P); 1
(SSDs) 1
(-n 1
(-q) 1
(0x200000), 1
(0xC0000000 1
(COW 1
(P0 1
(Simulation) 16
(101) 2
(11) 1
(120−0)+(20−10)+(30−10) 1
(T1) 4
(CompareAndSwap(&lock->flag, 2
(PC) 4
(16 3
(THE), 2
(C’s 1
(PCB). 1
(2) 4
(TLB 16
(Dynamic 2
(FCFS). 1
(20-ms 1
(TLBs) 1
(PD 2
(FIFO) 2
(2134) 6
(232 1
(PDE). 1
(PDIndex 3
(Tc2) 1
(32768) 1
(34K) 1
(PFN 2
(Thousands) 2
(Good 1
(400)2 1
(PID). 1
(TlbEntry.PFN 4
(Linux) 2
(M 1
(PSJF) 1
(VP 3
(VPN=1, 1
(MFU) 1
(PTE): 1
(4200) 1
(a) 5
(a[0]) 2
(PTE.Present 2
(7.1) 1
(7030) 1
(above), 1
(PTIndex 3
(Pmiss 1
(ARM). 2
(address 2
(MLFQ) 1
(Proc 2
(Advanced) 1
(after 4
(NOT 1
(S) 3
(S), 1
(always) 1
(Niceness) 1
(Alpha), 2
(SJF) 1
(among 3
(assume 2
(bash?) 1
(SJF), 1
(No 1
(And 1
(broken) 1
(Software) 1
(OS). 1
(P0) 1
(bugs) 1
(Spring), 3
(A’s 2
(PCB); 2
(bytesLeft 1
(TD 1
(B) 1
(PFN) 6
(c1–c3). 1
(Tc1 2
(Bad 1
(PFN), 2
(c2), 3
(TestAndSet(&m->guard, 4
(Blocks) 4
(PM 2
(c4). 1
(This 1
(C 1
(PTEs) 1
(causing 2
(Thread 2
(U/S) 1
(Page 1
(char 8
(C, 1
(VA) 2
(PowerPC), 2
(conservatively); 1
(cpu.c) 1
(VM) 1
(R/W) 1
(CanAccess(PTE.ProtectBits) 4
(depending 2
(VPN 14
(RR) 2
(Ready, 1
(done 4
(VPN=06), 1
(VPN=08). 1
(Virtual) 1
(due 6
(Chapter 2
(Run 1
(Volume 1
(effectively 1
(DEC). 1
(SQMS) 1
(With 1
(Without 1
(a2), 1
(STCF) 2
(StoreConditional(&lock->flag, 2
(DMA) 1
(a[3] 1
(a[7] 1
(Success 4
(EEVDF) 1
(HW 1
(again 3
(Success, 4
(T1 2
(Hardware) 1
(again, 3
(alas). 2
(TCBs) 2
(TM 1
(Tarrival 1
(arbitrarily; 1
(Hardware-based) 1
(K 1
(Tc1) 2
(array-based) 2
(even 3
(LAUER’S 1
(Tc1), 1
(as 49
(assert(hptr->magic 1
(LW 1
(Tc2 1
(Timer 1
(atomic_add_zero 2
(Lines 6
(eventually) 2
(Tp) 1
(because 8
(London), 1
(flag 4
(VAX/VMS) 1
(c) 3
(MLFQ). 2
(forever), 1
(VPN) 2
(VPN), 2
(MMU); 1
(free 1
(c1, 1
(c2). 2
(c4), 1
(hardware 1
(VPN=07), 1
(MQMS) 1
(clearly 1
(https://github.com/remzi-arpacidusseau/ostep-projects) 1
(VirtualAddress 9
(MRU). 1
(counter 17
(a 21
(a[4] 1
(i.e., 96
(created 1
(Measurement) 3
(a[8] 1
(imagine 2
(curr->key 4
(NULL 1
(all 6
(incredulous) 1
(current) 1
(O 1
(allocated 3
(almost) 1
(another 1
(Offset 1
(interrupt) 1
(dare 1
(argc 2
(P). 1
(into 4
(assumes 2
(P2) 1
(e.g., 108
(io.c) 1
(at 12
(P2), 1
(easily) 2
(just 5
(atomic_bit_test_set 4
(P=1), 1
(erroneously) 1
(kernel) 1
(available 1
(PDE.PFN 2
(fill_ptr 1
(lazily) 1
(average: 1
(PDE.Valid 1
(finally) 1
(ldstub); 2
(bigger) 1
(PFN). 1
(first-in, 1
(left). 1
(binary 1
(PTE.PFN 2
(formerly 1
(lots 1
(both 2
(PTE.Valid 4
(four 1
(m->flag 2
(c->local[cpu] 2
(PWT, 1
(freeing 1
(main) 4
(c1), 1
(Process 1
(from 16
(managing 2
(c3). 3
(R) 1
(full) 1
(max 2
(c5), 1
(RSS). 1
(gasp) 2
(milliseconds); 1
(called 9
(Right) 3
(generally) 1
(modified), 1
(cleared), 1
(SJF, 1
(get 1
(my 1
(continue 1
(STDOUT 1
(header_t 1
(myturn). 2
(count 8
(September 1
(highest 1
(namely, 1
(curr) 4
(T2) 2
(hopefully 2
(new 7
(described 5
(dramatic 1
(horribly) 1
(non-paged) 1
(T2), 2
(during 1
(include 2
(non-restricted) 1
(TestAndSet(&flag, 2
(each 2
(instead 1
(normally 1
(TestAndSet(&lock->flag, 2
(either 3
(int) 10
(notably) 1
(Third 2
(emacs 1
(its 2
(note 4
(Tp). 1
(fun!). 1
(large) 2
(note, 1
(VPN). 1
(given 1
(limit) 1
(ns) 1
(VPN=06, 1
(global 3
(line 3
(older 1
(VPNs 1
(he 1
(load 1
(one 6
(Virtual 1
(hex 2
(lock-holding) 2
(only 5
(a.k.a. 6
(highly 1
(log2 1
(other 1
(a.k.a., 2
(hint: 6
(long 2
(our 4
(a3). 1
(holding 1
(maliciousness) 1
(p1), 1
(about 1
(hopefully) 3
(marked 1
(p1– 1
(also 7
(i 19
(minus 1
(p2); 1
(an 2
(i); 1
(modulo 1
(p4.c) 1
(ignoring 1
(mutex->flag 2
(p6, 1
(and 111
(implicitly) 2
(myarg 2
(pause 3
(approximate) 2
(implying 2
(note: 2
(physical) 1
(assuming 5
(including 10
(now 6
(pid:29146) 4
(atomically); 1
(indeed, 4
(often 2
(pid:29267) 1
(b) 5
(insert 1
(onto 2
(pid:29384) 1
(but 14
(it 12
(out 3
(potentially) 1
(but, 2
(kernel 6
(p2.c) 1
(potentially), 2
(by 13
(known 1
(p2.c), 1
(queue_empty(m->q)) 2
(rather, 1
(labeled 6
(p5). 1
(bytes 2
(rc_wait:29267) 1
(latter) 2
(particularly 7
(c3) 1
(rc_wait:29384) 1
(ld.so) 1
(privileged) 1
(c3), 1
(realistically, 2
(like 5
(probabilistic) 1
(code, 7
(releasing 1
(lock->turn 2
(probably) 1
(continuing) 1
(repeat) 8
(locked). 2
(probably), 1
(discussed 1
(requiring 1
(long) 1
(pthread_create) 2
(do 5
(results 1
(many 4
(pthread_join) 2
(done) 2
(returning 2
(mem.c) 1
(read 1
(double 1
(roughly 2
(minimally) 1
(reduced 1
(especially 2
(simple 2
(modern 1
(regardless 2
(evicts) 1
(slow) 1
(no 4
(sadly). 1
(flag) 2
(something 2
(nods) 1
(seconds) 6
(for 24
(sometimes 10
(non-contiguous) 1
(si 1
(free) 21
(sometimes, 1
(non-toy) 2
(some 1
(gadgets, 1
(source) 1
(not 20
(starting 3
(generated 1
(spinning 2
(of 10
(still 1
(hence 1
(start 2
(on 11
(swapd) 1
(hence, 2
(stop 1
(once 4
(switching 1
(if 13
(stride=100) 1
(target) 1
(or 83
(stuck 2
(in 45
(there 3
(or, 5
(studied 1
(initial) 1
(this 4
(original 2
(t0.c) 2
(taking 2
(thread 6
(p.81).” 1
(p2). 1
(thank 1
(thus 9
(int 6
(p3.c) 1
(they 3
(too!) 2
(ironically) 1
(think 5
(page 49
(usually) 2
(job 2
(too 1
(physical 1
(v1) 3
(left 1
(trustingly) 1
(pid:%d)\n", 9
(via 6
(let’s 4
(turned 1
(pid:29266) 2
(virtual) 3
(likely) 1
(upon 1
(pid:29383) 2
(we 2
(literally) 2
(use_ptr 1
(pointers) 1
(what 4
(lowest), 1
(using 9
(quite) 1
(with 21
(making 1
(v 2
(rc 8
(without 1
(mentioned 2
(version 1
(rc_wait:%d) 2
(word 3
(middle 2
(void 12
(ready 4
(worst-case 1
(more 3
(way) 1
(real) 1
(write) 1
(most 2
(web 2
(reduction 1
(you’ll 1
(mutex 2
(when 3
(remember: 2
(“0101”th) 1
(mutex); 6
(who 2
(required 1
); 1
(mutex, 8
* 17
(result: 1
*(*start_routine)(int), 2
(myarg_t 4
**value_ptr); 2
(resulting 1
*arg); 4
(myturn 2
*H, 4
(running 1
*child(void 3
(n) 1
*L, 8
(running, 2
*consumer(void 5
(nearly 2
*abs_timeout); 2
(runtimei 1
*dst; 1
(new) 1
*c) 18
(said 2
*head 1
(new_head 2
*cond); 2
(say 17
*hptr 1
(next 1
*lock) 20
(say, 11
*cond, 2
(nice 1
*m) 6
(see 12
*curr 4
(p1.c) 1
*malloc(size_t 1
(shaded 1
*d 1
(p2), 1
*mem; 1
(similar 3
(size: 1
(p4). 1
*mutex; 2
*kstack; 1
(somewhat) 1
(part 2
*new 4
*mutex) 12
(store 1
(perhaps 7
*new); 1
*mythread(void 12
(stride=40) 1
(pid:29147) 2
*next; 6
*old_ptr 2
(thanks 1
(pointed 1
*producer(void 5
*old_ptr, 2
(that 5
(preempting 2
*ptr 9
*p 6
(that, 2
(pretend) 1
*ptr, 5
*p); 1
(probably 1
(the 61
*q) 2
*q; 2
(quantum 1
(threads.c) 1
*value) 2
*rvals 2
(quickly) 1
(through 1
+1 1
*src 3
(recall 1
(tiny) 2
+= 9
*thread, 2
, 15
(tmp 1
(remember, 1
*worker(void 1
--b0 1
(total) 1
(right) 2
*x 3
--leak-check=yes 2
(turn 2
(roughly) 2
*x); 1
-C 6
(unrealistically 1
(sched 1
--l0 1
-O 1
(unused) 6
(scheduling) 1
--tool=helgrind 2
(use 1
-S 24
(shown 5
--tool=lackey 1
(v2) 1
-S, 1
(simplified) 1
-1); 1
(va.c) 1
(size 1
-c 22
-1, 1
(value 2
(size=200) 1
-g 3
-10 1
-5 1
(sorry!). 2
-i. 2
(vruntime). 1
-= 1
(specifically). 1
-k 2
(wait 1
-A 6
(stop) 1
-o 9
(wc). 1
-I 6
(stride=200) 1
-pthread; 2
(xchg). 2
-M 15
(such 25
-s 21
(yes, 4
-X) 1
(t1.c) 2
-t). 1
(you 5
(that’s 3
.... 1
-a 41
(“Buzz 2
(though 6
................ 1
-c. 1
(to 10
./array 1
) 46
-i 18
(too) 1
./main-two-cvs-while 2
*(*start_routine)(void*), 2
-is-unsafe. 2
(turning 2
./mem 5
**) 4
-m 3
-m, 1
./p3 1
*/ 16
(untimely?) 2
-nw 1
.EXE 1
(user 3
*arg) 26
-p) 1
//acquire 4
(usually 7
*attr, 2
-u 6
/bin/ls. 1
(usually, 1
*c); 1
/proc/meminfo; 1
(v9 1
. 53
*c, 5
(virtual 1
*current 1
(waiting 2
*dst 2
(we’ll 2
*malloc(size 1
... 84
(where 12
*mutex); 8
..., 2
(whether 2
*mutex, 2
./fork.py 4
*new_head 2
(which 39
./main 6
*ofile[NOFILE]; 1
(which, 2
./p1 2
*old_ptr; 2
(yet) 3
0 384
./random 3
*ptr) 7
). 3
0(%eax) 2
*) 23
*rvals; 2
./x86.py 14
0); 8
*), 2
+19 1
.globl 1
0+5+10 1
**old, 1
- 25
*H) 2
--b1 1
*L) 4
-1; 8
0, 55
*args 4
-1KB. 1
0,0,0,0,0,0,1? 1
-5; 1
*argv[]) 23
0.001), 1
*chan; 1
0.2 1
// 294
*cwd; 1
0.6 1
0+ebx 1
*head; 4
-D 154
00 4
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 1
*input) 1
-H 1
00, 1
0. 11
0000 14
-L 18
*m); 1
0.0 2
0000000000400000 1
-P 19
*myargs[3]; 2
0.1). 1
00007f4e7cf06000 1
-Wall 7
*parent; 1
0.10). 1
00007f4e7d731000 1
-d 2
*ptr; 6
0.4 1
010000; 1
-l 19
*q, 4
0.8 1
04 2
-l, 1
*str 1
00007f4e7d508000 1
08 2
*tail; 2
-p 44
0011 1
0th 2
*tf; 1
-pthread 5
0101 1
-t 20
*tmp 7
*value 2
0110 2
...; 1
0x0(%ebx),%eax 1
02 1
./cpu 5
+ 45
0x000, 1
06 1
./main). 1
--l1 1
0x00000000 1
0: 4
./p4 1
--trace-mem=yes 1
-1) 1
0x00000FFF, 1
./process-run.py 2
0x00000000, 1
-15 1
0x068, 1
./thread 3
0x03e8, 1
-20 2
0x200, 1
0x1095afe50 1
/* 16
-5), 1
0x200000 4
0x200000. 1
/dev/zero 1
-> 10
0x600, 1
0x400, 1
/proc/meminfo 1
-B 4
0x7fff691aea64 1
0x7ffe45522e94 1
0% 5
-F 3
0x80000000)) 2
0x800, 1
-R 13
0x8049a1c 6
0) 40
0x80000000 2
-b 3
0x8049a1c, 8
0), 1
0x8049a1c. 2
-f 1
1% 1
0+1+2 1
0xBFFFFFFF 1
-l. 1
0-byte 1
0xFFF. 1
1) 52
-n 19
0.03 2
1). 6
1), 5
-r 5
0.5. 1
1.0001 1
1-byte 1
-v 17
0.9. 1
1.00] 5
1-second 1
./multi.py 4
0001 1
10). 3
1.0; 1
./p2 1
0010 1
10+20+120 1
1.3.37 1
/ 1
01 2
10+20+30 1
10% 5
/proc 1
01, 2
10-entry 1
10) 2
0). 2
0100 1
10.1 2
10), 1
0,0,0,0,0,0,1:0,0,0,0,0,0,1:0,0,0,0,0,0,1 1
05 1
10.2? 1
10-byte 1
0,0,0,1,0,0,0:0,0,0,1,0,0,0:0,0,0,1,0,0,0 1
09 1
10.3. 1
10-ms 4
0-9), 1
0KB 13
10.3: 1
10.1: 1
0.1 2
0] 4
10.5 1
10.3 1
00000000019d5000 1
0th) 1
100%. 1
10.7 1
00007f4e7d2d0000 1
0x0(%ebx) 1
100). 2
100% 5
00007f4e7d932000 1
0x0(%ebx), 2
100+(110−10)+(120−10) 1
100%, 1
0111 1
0x0DC0. 1
100+110+120 1
100) 3
03 1
0x100, 1
1000). 1
100), 1
07 1
0x3C00). 1
1000; 1
100ns 2
0x3F80, 1
1000s 1
101 4
0x500, 1
0; 116
100? 1
1032 1
0x7ffd3e55d2b4 1
0? 3
100K 1
1036 1
0x8049a1c). 2
0x03, 1
100s 1
105 6
0xC0000FFF 1
0x1024 1
101. 2
109 1
0xFFFFFFFF) 1
0x1096008c0 1
103.33 1
0x30 1
1030 1
0x300, 1
105-117, 1
11 110
0x3000, 1
107 1
110 2
0x37) 1
1074 2
110, 1
0x700, 1
108). 1
1100 3
0x7ffe1033b8f4 1
10; 2
111). 1
0x900. 1
11. 3
11916, 1
0xC0000000 2
1111 7
12). 1
0xC0000000, 1
112 2
1234567)) 1
1)) 2
1124 2
128; 1
1-GB 1
115–116, 2
13. 2
12) 1
1. 43
13.2: 1
1234567 7
1.0 1
13.4 1
128) 1
1.0, 1
132 2
1 461
10. 7
128-Byte 1
137298 1
1); 4
10.2: 1
128-byte 2
13: 2
10.4 1
128KB 1
13:4, 2
100%), 1
12:7, 1
14.3 1
100. 6
14.7 1
1, 80
1000. 2
14:7 1
1024 10
14KB 2
1024, 1
13 93
1028 1
13); 2
104. 1
13, 2
15 96
10:1,10:100). 1
13.1), 1
15, 7
110000) 1
13.2 2
15.2 3
1101 2
13.2, 1
15.4: 1
1110 2
132: 1
1.01] 203
15.6 2
11–12), 1
13:2, 1
1.2.1) 1
150 10
14). 2
16.1 2
14.1 1
12 89
16.1, 2
14.5 1
12(%eax) 1
16.3: 1
148K 1
12(%eax), 1
16.5 1
15. 1
12(3), 2
10 165
15.2. 1
16384 1
12, 2
10); 1
15.2: 1
16384, 1
12-bit 2
15.4 1
10, 14
16492 1
120 9
15.6: 1
10,000 8
16708 2
12000 1
1586, 1
10,000,000 2
16K 1
128 13
16), 3
10.1), 1
16KB)1 1
128, 1
16-byte 4
10.2 1
16k 5
12:6, 1
16.1. 1
10.6 1
17.1). 1
13.1 2
16.1: 1
17.2. 1
13.2; 1
16.3 2
17.2: 1
13.3: 1
100 87
16.5. 1
17.4 1
13.5 1
100); 2
16.5: 1
17.6: 1
135: 1
100, 6
16.7 1
17.8, 1
137, 1
100,000 1
16500 1
170. 1
14. 4
100,000, 1
16KB 24
14.4 1
172, 1
100-bytes 2
16KB, 1
1000 10
1792K 1
143012 1
1000, 5
17: 1
14949, 1
100000 2
17:4, 1
15) 4
100:100,100:100), 1
18.1: 1
17 66
15), 1
100byte 1
18.3 1
17, 1
15.1. 1
1024. 3
18.5: 1
17.2 1
15.1: 1
104 1
18.7 1
17.4. 1
15.3 1
108 11
17.4: 1
15.3, 1
10ms, 1
10th 3
17.7). 1
15.5: 1
19 58
11). 1
17.8: 1
152K 1
19.1), 2
110). 1
170 3
15:3, 2
19.2 2
1110101 1
1793, 1
15KB 7
19.4. 1
11168, 1
18). 1
15KB, 1
19.4: 1
113 4
18.1 2
19.6 1
117, 1
18.3: 1
1957 1
1174 1
18.5 2
16 92
1959. 1
11:1, 1
18.7: 1
16(%eax) 1
1960. 1
11:5, 2
1800s, 1
16(%eax), 1
1960’s 5
11–19 1
19.1). 1
16.2 2
1960’s, 2
12. 2
19.2: 1
16.4: 2
1962 2
120. 1
19.3), 1
16.6 3
1964. 2
1224 1
19.4 1
160 2
1966 1
1277, 1
1968. 11
16KB; 1
19.8 1
128: 2
1973. 2
17.1 1
1928 1
13.1: 1
1982. 7
17.3. 1
19345221) 2
13.3 2
1986. 1
17.3: 1
1957. 1
135 2
1990). 1
17.5 1
1959 1
13–14). 1
1990s, 1
17.6). 1
1960’s. 1
1991. 9
17.7: 1
1962. 7
14 71
1995. 6
1780K 1
1963.” 1
14, 2
1999. 1
179–180, 1
1964 1
14-bit 4
1:0,4:100 2
17:10, 1
1966. 3
14.2 1
1Each 1
18.2: 1
1968 2
14.6 1
18.4 2
1KB 13
1970; 1
140 2
18.6: 1
1KB, 1
1970s 1
143,012. 1
184–199. 1
1] 4
1971. 1
14KB; 1
19.1: 1
1m 6
1975. 2
15). 1
19.3 1
1979. 2
15.1 2
19.3, 1
1980. 1
15.3: 1
19.5: 1
1980’s, 2
15.5 2
19.7 1
1988. 2
15:5, 2
1956. 1
1991, 1
16.1). 1
1961. 1
1993. 6
16.2: 1
1963, 1
1997. 5
16.4 1
1965. 6
1:0,4:100. 1
16.6: 1
1969. 3
1:1, 3
16KB] 5
1970. 4
2 257
17.1: 1
1970’s 2
1; 42
17.3 1
1974. 3
2, 38
1? 1
17.5. 1
1978. 5
2-MB 1
1K 1
17.5: 1
1980’s; 1
2-bit 1
1KB. 1
1983. 4
2.2 2
1MB 1
18 54
1987. 1
2.4: 1
1e7; 2
18, 2
1992. 4
2.6 3
1k 9
18-bit 1
1996. 4
1” 1
18.2 1
1998 2
20 95
18.2, 3
1: 7
2. 29
20(%eax) 1
18.3). 1
1KB) 1
2.2: 1
20(%eax), 1
18.4: 1
1Note 2
2.3) 1
20); 1
18.6 2
2) 7
2.4 1
20, 3
18705, 1
2), 3
2.5). 1
20-bit 3
18–21); 1
2- 1
2.6: 1
20.2 1
19). 2
19.1 2
20,000,000. 2
20.4: 1
2.1: 1
19.3: 1
20. 1
20.6 1
2.3 1
19.5 2
20.2. 1
2.4). 1
200 24
19221041) 2
20.2: 1
2.5: 1
200, 3
192KB 1
20.4 2
2.7 3
200,000, 1
20% 7
20.5). 1
19384 1
200-MHz 1
20), 1
20.6: 1
1945. 1
20.1: 1
2000 15
200. 3
1949. 1
20.3 2
2000, 1
2000. 9
1950’s 1
20.5: 1
2002. 1
2004. 7
1954. 1
2000) 2
2006. 6
2008–18, 5
1963. 2
20000000) 2
2011. 7
2013. 4
1965, 1
2003. 4
2013, 1
2015, 1
1970 1
2007. 3
2015. 1
2017. 2
1970’s. 1
201 4
2015/02/10/understanding-glibc-malloc/. 1
2018), 1
1972. 5
2010, 2
204 3
202 1
1980s 1
2014 1
20th 1
21.1: 1
1981. 7
2015). 1
21.1 1
21.3 3
1985. 2
2016. 1
21.3: 1
21.3, 1
1989. 5
2018, 1
21.5 1
21.7 1
1990. 2
20KB 2
21:1, 5
215, 1
1992.. 1
21:10, 1
1994. 1
22.2: 1
21 45
1996 3
21, 4
22.4 2
22 38
1998. 2
21-bit 1
22.6: 1
22, 1
1We 1
21.1), 1
22.8 2
22.11 1
1ms, 1
21.2 2
23.1. 1
22.2 1
2). 7
21.2, 1
23.1: 1
22.2, 1
2.1 2
21.6 1
23.3 1
22.3). 1
2.3: 1
214 1
22.4: 1
2.5 1
24 37
218 1
22.6 2
2.9 2
24(%eax) 1
22.1 2
22.8: 1
20-29): 1
24(%eax), 1
22.10 1
220 1
20.1 1
24-bit 1
22.3: 1
23.1 1
20.1); 1
24:2, 1
22.5 2
23254, 1
20.3: 1
25%. 1
22.7: 1
24. 1
20.5 3
256-byte 1
22.9 1
24114 1
20.6). 1
256KB 1
2212 1
25% 1
2000; 2
256m 1
22–23), 1
2501, 1
2001. 1
26.2: 2
23.2: 1
255 2
2003, 2
26.4 4
24113 1
2005. 9
26.6: 2
24KB 3
2007, 2
26 32
27.1. 2
2008). 1
26, 1
25 33
27.1: 2
26.2 4
250 5
27.3 4
26.4: 2
250, 1
26.6 4
254 3
27.1 2
26.1 2
28 33
27.3: 2
26.1, 4
28(%eax) 1
27.5 2
26.3: 2
28(%eax), 1
27KB. 2
26.5 4
2008–19, 138
28.1), 2
28.13 2
26.7: 2
28.11 2
28.17 2
27.2. 2
28.15 2
28.2: 2
27.2: 2
2008–20, 49
28.2 2
28.4 2
27.4 4
2009. 5
28.4. 2
28.6. 2
272, 1
2010. 7
28.4: 2
28.6: 2
28.10: 2
2016 1
28.6 2
28.8 4
28.12 2
2016.. 1
28.8: 2
28KB1 1
28.16 2
203 1
29.1 2
29.1. 2
28.1: 2
21.2: 1
29.3: 2
29.10: 2
28.3 2
21.4 1
29.5 6
29.1: 2
28.5. 2
21: 1
29.7: 2
29.3 2
28.5: 2
22.12 1
29.9 2
29.5: 2
28.7 4
22.1: 1
29267 1
29.7 2
28.9: 2
22.3 1
29384 1
29.9: 2
28KB 2
22.5: 1
2KB). 1
2: 3
28KB, 1
22.7 2
2This 1
2KB), 1
22.9. 1
29 25
2github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
2N 2
22.9: 1
29, 3
3). 5
2’s 1
29.10) 2
3): 2
3) 2
29.11 2
3.33). 1
23 37
3), 3
29.2 4
30.1 1
23, 2
30-byte 1
29.3). 2
30.12: 1
23-bit 1
30.1. 1
29.4: 2
30.3: 1
23.2 2
30.10: 1
29.6 2
30.4) 1
23:2, 1
30.12 1
29.8: 2
30.7: 1
25. 1
30.13). 1
29147 2
30.8), 1
254: 1
30.14: 1
2:70, 1
30.9 1
256 6
30.1: 1
2Fortunately 1
3000; 1
26.1: 2
30.3 1
2KB 8
320KB 2
26.3 2
30.5: 1
2Q 3
32KB 5
26.3, 2
30.7 1
2] 2
32KB, 1
26.5: 2
30.9: 1
2m 1
33 12
26.7 4
300), 1
2”. 2
34K 3
26KB, 1
31 21
37 8
32-bits 1
3906, 1
32K 3
27 32
3:50,3:50. 1
32k 6
27.2 2
3; 3
34920. 1
27.2, 2
3A: 2
34KB 1
27.4: 2
3K 3
3 231
35 12
27.6 2
3KB. 2
3); 1
36.4% 1
28.1 2
3KB: 1
36K 1
3, 25
28.10 4
3” 1
3764 4
28.14 2
30 31
4(%esp), 2
384KB 1
28.2; 2
30, 3
4-GB 1
39 11
28.3. 2
30-bit 1
4-KB 3
3980 3
28.3: 2
30.11 1
3:50,3:50 2
28.5 2
30.13: 1
4. 27
3A 1
28.7: 2
30.15 1
4.1). 1
3KB 3
28.9 4
30.2 1
4.2. 1
3Like 1
28.9, 2
30.4: 1
4.2: 1
3] 1
28K 3
30.5) 1
4.3) 1
3a); 1
29.11: 2
30.6 1
4.3BSD 1
29.2: 2
30.8: 1
4.4 2
29.4 4
300 4
4.8 1
29.6: 2
300, 2
40%) 2
29.8 2
3000 4
40. 2
29146; 1
3000, 1
4 164
4088. 1
29154, 1
3121, 2
4(%eax) 1
42 7
2; 5
32896; 1
4(%eax), 1
4200 4
335, 1
2K 6
4, 5
4200, 1
34 12
2k 1
4-bit 3
44:1/2. 1
3412382, 1
3-GHz 1
4.2 1
46273, 1
372K 1
4.3). 1
4: 2
38 8
4.4: 1
3. 32
4b 4
39016, 1
4.6 1
30. 2
4b, 1
3B: 3
40 28
4). 7
30.10): 1
5% 3
40, 2
4.1 1
30.11: 1
5(2): 1
400 1
4.3: 1
30.14). 1
5) 3
4000 3
4.5 2
30.15: 1
5), 5
4000, 1
400MB 1
30.2. 1
5.1: 1
40000 2
4096 3
30.2: 1
5.3 1
4088 1
4096, 2
30.3) 1
5.7 1
4096-byte 1
4146 1
30.4 1
50) 1
4196 1
43 8
44 6
50), 1
30.6: 1
47 2
4400 1
50-ms 2
30.8 1
49).” 1
44000 1
300. 3
4:1, 1
51 18
48 9
31) 4
4:10, 1
51, 3
4:100,1:0. 1
4MB 2
55 1
4K) 2
32 33
4a: 1
56483, 1
4KB). 2
32, 1
4k 1
5:100,5:100. 1
4MB) 1
5KB 1
32-bit 16
4MB), 1
5. 27
5–7), 1
324 1
4b: 1
5.1; 1
32868. 2
5). 6
5.2: 1
36 11
5.1 1
5.4 2
36, 1
5.3: 1
50. 1
36291, 1
5.5 1
5121024 1
3752 1
50? 1
54.5%. 1
6 116
3764-byte 3
51. 4
56, 1
512 9
3: 3
6+5 1
5: 2
549–557, 1
3:0,5:100,5:100,5:100 1
6.2 1
5→0 2
55. 1
3One 1
6.4: 1
6) 5
56KB 2
4) 2
6.1: 1
60 13
57.1% 1
4), 2
6.2) 1
6000, 1
4-byte 3
4.1: 1
6. 20
6.3 1
64 17
4.3 1
6.2: 1
60% 4
64, 1
4.5: 1
6.4 2
6100, 1
40% 5
64-bit 10
62 2
64-Byte 1
40-ms 1
68 1
655, 1
64-bit) 1
40050 1
7). 2
7) 3
64-byte 7
40100 1
7.1 1
7), 3
64GB 1
4088), 1
7.1, 1
7.1: 1
64KB 9
40KB 2
7.10 1
7.3 2
6= 2
41 10
7.3: 1
7.5: 1
6KB 1
423, 1
7.5 2
7.7 1
448KB 1
7.6). 1
7.8). 1
45 6
7.7: 1
7.9: 1
45, 1
7.9 1
7094 1
48KB 4
70%. 1
7355 1
49 1
7232 1
75 3
7 127
49, 2
73-96, 1
76–86, 1
7); 2
4904, 1
7353 1
7KB 3
7, 2
4:3, 1
78-101, 1
7.2 1
4GB 1
8-page 1
7.2, 1
7.4. 1
8. 12
4KB 16
7.4: 1
8.1). 1
4KB, 3
7.6 1
8.2: 1
4a 4
7.7). 1
8 109
8.4 2
4m 1
7.8: 1
8(%eax) 1
8.6: 1
4page 1
70 2
8(%eax), 1
820, 1
8(9):569, 2
70, 1
846 1
8, 1
7282 1
86 2
8-bit 3
7332 1
88761, 1
8.2 2
7354 1
8KB) 1
8.4: 1
74 1
9) 1
8.6 2
7620, 1
5 169
9), 1
8.1 1
80 18
5, 6
9.1: 1
8.3: 1
9). 1
5.2 2
9.3 2
8.5 2
9.1 1
5.3). 1
9.5. 1
8.7: 1
9.3: 1
5.4: 1
9.5: 1
80-20 4
9.5 1
5.6 1
9.7 1
82% 1
93 1
90% 1
83 1
9” 4
90%, 1
50 46
85.7% 1
;add 1
9548, 1
50, 5
87, 1
;store 1
50,000 2
99 7
8:10, 1
500 4
99, 1
< 24
8k 1
5000, 1
99.9% 1
<< 9
50th 1
9. 9
<pthread.h> 8
512-byte 1
9.1). 1
>> 11
512KB 2
9.2: 1
@ 8
512m 7
9.4 2
A1’s 1
52. 2
9.8 1
A; 2
526, 1
96 2
AIN 1
59–73, 1
99% 2
ALLS 2
5th 1
991 1
ANAGE 3
6). 1
6.1 2
ANAGEMENT 17
6.3. 1
; 25
ANDLE 1
6.3: 1
;load 1
ANDOMNESS 1
6.5 1
<fcntl.h> 2
ANY 1
63 3
API. 5
64). 1
<stdio.h> 15
ARM 2
64-bits); 1
<string.h> 2
: 289
64bit 1
AS 10
<sys/types.h> 1
<assert.h> 4
64k 1
ASIDE: 4
<sys/wait.h> 3
<stdlib.h> 9
ASIDs, 1
7. 16
<unistd.h> 6
ASPLOS-IX, 1
7.2: 1
<value>\n"); 1
ATC 2
7.4 1
<virtual 2
ATTACK 1
7.6: 1
>= 5
== 91
7.8 1
AW 5
> 5
? 9
7.9). 1
AZY 1
A) 2
70–76, 1
Abstraction: 3
A), 2
71755, 1
AccessMemory(PDEAddr) 1
A. 29
A1 3
7356 1
AccessMemory(PTEAddr) 4
A2 1
ABCABCABCABCABC 1
75% 1
Accessing 2
A2, 1
ACHING 1
76 1
Accurate 1
A: 13
8) 3
Addison-Wesley, 11
ABOUT 1
ACKGROUND 1
8), 1
AddressOfPTE 1
ACM. 2
AIX 1
8-byte 1
Again 2
ADDRSORT, 1
ALGORITHMS 1
AFIPS 4
Again, 3
AMAT 4
AM 2
8.1: 1
Alan 3
AMAT, 1
AMD 1
8.3 2
Allocation: 2
AME 1
AMPSON 1
8.5: 1
Allocators 1
AN 18
8.7 1
Allocator” 2
AND 6
80% 7
Almost 1
ANGRY. 1
API 62
801, 1
APIs. 1
Although 16
API, 1
8049a1c,%eax 4
APPING 1
Alto 2
ARC 1
85 1
ARGE 1
Amazing! 1
ARC, 1
8KB 6
Amazingly 1
ARDWARE 2
ARPACI-DUSSEAU 38
Amazingly, 4
ASLR 1
AVOID 7
Amazon’s 1
ASPLOS, 1
About 5
Analysis 5
ATA 21
Abstract” 1
And...? 1
AUSE 1
AccessMemory(PhysAddr) 6
Anderson. 1
Abdel-Wahab. 1
Accounting 1
Answer 1
Ability 2
9 119
Actually 4
Any 3
Abstraction 2
Actually, 1
9, 6
Apparently 1
Adam 1
Access 9
9-bit 2
Apparently, 2
Adding 7
Accesses 2
9.2 2
Apple’s 1
Address-space 1
Account.html. 2
9.4: 1
Approach: 5
Afraid 2
Achieving 2
9.6 1
Aha! 1
April 10
Act. 1
90 1
Ahead 2
April, 3
940 1
Algorithm 5
Address 25
Are 6
9:2, 1
Allocator: 1
Advanced 1
ArpaciDusseau. 1
<string>\n"); 1
Affinity 1
Also 10
Arrivals 1
<sys/time.h> 1
Also, 1
After 21
Artificial 1
Aleksey 3
Algorithms 4
Algorithm” 1
An 65
Allocated] 2
Allocating 1
Allocation 3
Allows 1
Alpha, 2
Alternatives 1
Amazon, 1
Analysis: 1
And 108
Anderson, 2
And, 2
Andreas 2
Andrea 7
Android), 1
Annual 1
Animal 1
Anomaly. 1
Antoine 1
Anticipatory 2
Anyhow, 1
Applications 4
Anything 1
Approximating 1
Appavoo, 1
As 158
Approximation 2
Apple 3
Atlas” 1
Architecture 9
Apple, 2
Atlas”, 1
Argument 2
Applications” 1
Austin 3
Arpaci-Dusseau 3
Approach 1
Austin, 1
Arpaci-Dusseau, 10
Approaches 1
Authors: 1
Array 4
Approximate 10
B+96, 2
Art 3
Aq 1
B-Trees: 1
Architectures 4
Assuming 10
Architecture” 3
Atlas. 2
Aside 1
B. 18
Atlas: 3
Ask” 2
Atlas”; 1
B: 12
= 415
Atomically, 2
BAD! 2
Assume 33
Atomicity 2
BF 2
Assume, 3
Attacks 1
BUCKETS; 2
Assumptions 3
Attempt 3
BUILD 1
A’s). 1
Baby: 2
Bach. 1
Available: 29
Base[SN] 1
Average 1
Basically, 5
Avere 1
Battle 1
Award 2
A’s 7
A’s, 1
B) 3
B-tree 2
Because 50
B-tree, 2
Benchmarking” 1
B1 1
B 157
Bertinoro, 1
B5000 4
Beyond” 1
B, 22
Bigger 1
B-trees); 2
BASED 17
Blasgen, 1
B-tree” 2
BE 1
Blocked 4
B97, 2
BFS 1
Boot 1
BEST 1
BFS, 2
Borg. 1
BETTER 1
BIQUITY 1
Bovet 2
BOUT 1
BSD. 1
Bovet, 1
BSD) 1
Bad 3
Bradford 2
BUCKETS], 4
Base 3
Brian 2
Baby 2
Base-and-bounds 2
Brooks 1
Background: 1
Basu, 1
Bryant 4
Balakrishnan 1
Be 5
Buddy 1
Baron, 1
BufferOverflow.pdf. 1
Before 21
Build 4
Barton 3
Before, 2
Burchfiel, 2
Base[Segment] 1
Beginning: 1
Burnett 1
Belady. 1
Basic 10
Buy 1
Belady’s 2
Batch 1
Bye 1
Bell 2
Baumann, 1
Berger 2
B’s 8
Behind 4
Berger, 2
C) 3
Best 2
Berkeley 7
C), 5
Better 4
Berkeley, 2
C-callable 2
Better, 1
Beth 1
A 728
C-language 1
Between 2
Bill 1
C.A.R. 1
Bhandarkar 1
A, 16
Bit 3
C9 1
Big 2
A2’s 1
Bit-precision” 1
C95]. 1
Birrell. 2
ACE 1
CA, 7
Bits 1
Björn 1
ACHE 1
CACM 1
Blocked: 1
Block 9
CACM, 5
ACM 11
Blumofe, 1
Bobrow, 2
Bone: 2
Boles. 2
ACM, 19
Boneh. 1
Bonwick. 1
ADD 1
CFS 40
Brinch 7
Boost 2
AKE 1
CFS, 3
Brooks. 2
Bosch, 1
ALICIOUS 1
CHEDULER 1
Buddy-managed 1
Bounds[Segment]) 1
ALLOCATED 2
Buffer 9
Boyd-Wickizer, 3
CISC. 1
ALWAYS 1
Building 5
Broken: 1
CLOCK 2
AMAT: 1
COND 2
Buffer) 1
Bus 1
APIs 10
Butler 3
APIs, 4
Butter 2
ASID 9
Buttlar, 2
ASID, 1
B’s. 1
But 49
C; 2
But, 7
CHEDULE 2
CISC 7
CISC, 1
CONDITIONS 1
CPU-intensive 4
By 58
CPU-optimized, 1
B’s). 1
CPU. 31
ASY 154
CPU: 1
AT 1
CPUs). 4
AT&T/Bell 1
CPUs; 2
ATOMIC 2
CPUs? 3
AUER 1
CS 1
Above 3
Calculate 1
Abstractions 1
California. 3
Acta 1
Callers 2
Adaptation 1
Ah 1
C 212
Calling 8
Ah, 2
Cambridge, 2
C, 12
Ajay 2
Came 2
C.H. 1
Al 8
CFS” 1
Algorithms” 1
CHEDULERS 1
CPU 255
All 21
CPU(s) 1
Allocate 3
Can 40
Allocated 9
Canada. 2
Allocation” 3
CHEDULING 50
Carl 5
Allocator 1
CODE 2
Certain 1
CPU, 33
Along 2
COMPCON 1
Change 4
CPU-bound; 1
Alternately, 2
CONCURRENCY 3
Charles 1
CONCURRENT 15
CPUbound 1
Check 8
Always 4
CPUs) 1
Child: 2
CONDITION 19
Andrew 4
CPUs), 1
Christenson. 1
CONDITION, 1
Anita 1
CR3 1
Circuitry 1
CPU). 1
Annals 1
CREATE 1
Classic 1
Anomaly 2
CPU; 11
CRUX: 6
Clayton 1
Anoop 2
Close 2
CPU? 11
CVs 2
Coffman 1
Commu-nications 1
Compilers 1
Another 38
Compiling 2
Approach” 3
Cache 18
Completely 5
Architecture. 1
CPUs 37
Architecture: 4
Completion 4
Caching” 1
Aren’t 1
CPUs, 14
Computers 2
California, 6
Arpaci-Dusseau. 3
CRITICAL 1
Computers, 3
Assign 1
Call 8
Cache-Affinity 1
Canada, 4
Caches 3
Computer” 5
Assignment 1
Candea, 1
Cache” 1
Computing 4
Canyon 1
Calls 4
Computing, 3
At 31
Case 4
Candy 1
Concept: 1
Atlas 10
Case, 1
Certainly 1
Concurrency? 1
Atomic 2
Cassandra, 1
Certainly, 2
Conditions 1
Cesati. 3
Chapman 2
Attempt: 4
Consistency 1
Chapter 1
Characteristics 1
August 5
Contents 1
Chile. 1
Chemistry, 1
August, 1
Contrast 2
Chou, 1
Child 1
Automatically 1
Conversely, 3
Available 8
Chunks 2
Cilk 1
Convoy 1
Avoiding 1
Clark. 1
Clearly, 9
Corbato 4
Award. 1
Claypool 1
Corbato, 5
B). 2
Clear 1
Clock 2
Corporation. 1
B.W. 1
Clements, 3
Clustering 1
Correct 4
B1’s 1
Coalescing 2
Correspondingly, 1
Code 24
B5000: 2
Coarse-grained 1
Corwin, 1
Code00 2
B86], 1
Cobham. 1
Counters” 2
Coherence” 1
B; 1
Cobham’s 1
Cox, 1
Colorado, 1
B? 1
Coding 1
Create: 1
Com-puting, 1
BFS. 1
Coherence 1
Cups” 1
Comes 1
BSD 3
Come 3
Custer 1
Comment 2
Come, 1
BSTRACTION 20
Compacted 3
Compare-And-Swap 2
Custer, 1
BUCKETS 2
CompareAndSwap(int 2
Compare-and-swap 2
Babaoglu 1
Comparing 2
Compared 2
Babaoglu, 1
D. 33
Compatible 1
Bairavasundaram, 1
D.R. 1
Complex 1
Computer 20
Bart 2
Concurrency), 1
DATA 16
Computer, 6
Base/Bounds 1
Conditions: 1
DOO 1
Concepts 2
Base/bounds 2
Conference 1
DOS 1
Conceptually, 2
Conference, 7
Dahm 4
Bayer. 1
Concept” 1
Considered 2
Darago, 1
Became 1
Concurrency 1
Contents: 1
Begin 1
Data 13
Concurrent 25
Being 3
Corbato. 1
Deadline 2
Condition 6
Belady 3
Corbato’s 1
Death 1
Conference; 1
Belady, 1
Cores 1
Decepticons1 1
Consider 2
Below 2
Corporation 1
Decision 1
Control: 1
Berkeley. 1
Corporation, 1
Dekker, 2
Controlling 2
Bershad, 1
Correcting 1
Dennis) 1
Conway. 1
Costs 1
Beyond 14
Depending 2
Cores” 2
Binary 1
Counter 6
Descheduled 1
Corporation” 1
Bits” 1
Countermeasures” 2
Design 3
Could 1
Black 1
Cox. 1
Design, 1
Couleur 1
Boilen, 2
Craft 1
Despite 1
Create 3
Bonwick 3
Couleur, 2
Details 1
Critically, 1
Boston 1
Counters 8
Determining 1
Cup 1
Boston, 3
Counting 2
Dharmendra 1
Cybertron 1
Creation: 1
Both 7
Dialogue 3
Critical 2
Bottom 1
Digital 2
Crockford’s 2
Bouron 1
Dijkstra. 9
Culler, 2
Bouron, 1
Dijkstra’s 5
Currency 1
Broken 3
Discusses 2
Current 3
Brother” 1
Donald 1
Cutler, 1
Bruce 1
Done 1
D.B.G. 4
Buffer” 1
Druschel, 1
DBMS), 1
Burroughs 5
D 109
E) 1
DO 1
Burroughs, 1
D, 2
EAD 1
DVICE 1
Butenhof. 2
D.H.J. 1
EAKED 1
Daily 1
C++ 2
DD 1
EAL 1
Daley 1
DEC 3
EARN 1
C. 24
Davis 8
DEKKER’S 1
EASON 1
C.J. 1
DeWitt. 1
DRAM 1
C: 2
DRAM, 1
December 8
CCESSES 1
Deciding 1
Daggett, 1
EASY 38
CCS 3
Delete 1
Data: 2
EC2 1
Dave 3
Denning 1
CFS) 1
ECIDE 1
Dennis. 1
CMU 1
ECTION 1
Detail 1
David 19
EDUCE 1
Detection 1
CONCURRENCY: 15
David, 2
EE 1
Deterministic? 1
CONTROL 2
Dead: 1
EKKER 1
Deuterium” 1
COW 3
Dealing 1
CPU), 6
Development 2
ELOCATION 2
Debugging 2
CPU-bound 2
Development, 1
EMBRYO, 1
Decay-Usage 1
CPUintensive 1
Dick 2
EMORY-M 1
Dekker’s 6
CPUs. 7
Dickey. 2
Department, 1
CPUs: 1
Different 5
Destroy: 1
CV 2
EMORY: 26
Dijkstra; 1
Detailed 1
Caching 1
END? 1
Developer’s 4
Direct 8
Diego, 4
EPARATE 1
Caching, 1
Disk 5
Dijkstra 12
EPLACEMENT 2
Capel 2
Distributed 5
Dijkstra, 4
EPRESENT 1
Casting 1
Dilemma” 1
ERSISTENTLY 1
Do 18
Center, 1
Dirty 2
ESIGN 1
Chang, 1
DisableInterrupts(); 2
EXCLUSION 1
Cheap 1
DiskRead(PTE.DiskAddr, 1
Does 29
EY 4
Chevalley, 1
Distribution 1
Douglas 1
Easton, 1
Chunk 1
Distribution, 1
Easy, 2
Cilk-5 1
Doctoral 1
Edsger 8
Class? 2
E. 20
Doesn’t 1
Edwards, 4
Cocke 1
EALLY 1
Donkey. 1
Effectiveness 1
Cocke, 1
EC-11, 1
Elias 1
Don’t 17
Code: 2
EC-11:2, 1
Embedded 1
Download 4
Cohen, 1
Emery 1
ECHANISMS 11
Dr. 1
Commodity 1
EEDBACK 11
D′ 2
English 1
Common 3
E.W. 2
EGMENTATION 12
Enough 1
EALING 1
ELADY 1
Communications 20
Entry 3
ECESSARILY 1
END, 1
Compaction 2
EnvyFS” 1
ERFORM 1
Compile 1
Epema. 1
ECHANISM 30
ERMS 4
Complete 1
Epema’s 1
ECHNOLOGIES 1
ESS 1
Computations” 3
ECURE 2
ESTRICTED 1
Compute 4
EECS 1
Even 20
ETTING 1
Ever 2
EG 1
Computers” 1
EVELOP 1
Exactly 1
EGAIN 2
Computing; 1
Example: 6
Concurrency. 1
EYOND 27
Exclusion 4
Concurrency: 2
EMORY 36
Experimental 2
Ed2.pdf 1
Conditions? 2
END), 1
Edward 2
Considering 1
Electronics, 1
Context 3
Emacs. 1
F 36
Control 11
Embedding 1
F.H. 4
Control, 1
EnableInterrupts(); 2
Convention. 1
FAST 7
Engineering 1
Cool, 1
FIFO. 4
Envision 1
Cooperative 1
FIFO: 1
Evans. 1
Copper 1
FIFO’s 1
Every 1
Facebook, 1
Evict 4
Copy-on-write 1
Factors 1
Corbet. 2
Examine 9
Failing 3
Core 3
Examples 3
ERSION 166
Couleur. 1
Fair 6
Exception 1
ESX 2
Covering 2
Farm 1
ETERSON 1
Execute 7
Creating 2
Fast 4
ETTER 1
Extract 1
Creation 6
Fast, 2
FAULTS 2
EVEL 11
Culler. 1
Fekete. 2
FIFO; 2
Earl 3
Culler’s 1
Fetch 5
FIFO? 1
Earlier 2
C’s 1
FOR 2
Earth 2
C’s, 2
Facebook) 1
Edition)” 2
D) 3
Factor 2
Eindhoven 2
D.A. 1
Fagin. 1
Electroanalytical 1
Fairness 2
Electronic 2
Emacs7 1
Fall 5
DDRESS 25
Fill 1
Engineers 1
DID 1
Environment” 4
DMA). 1
Equipment 2
Era 2
DVANCED 13
Errors” 1
Daley. 1
Europe(!). 1
Daniel 3
Database 1
Evaluating 4
Days 1
Evaluation 2
Declaring 1
Evolution” 2
Default 1
Exactly. 2
Definitely 1
Definition 1
Denning. 2
Finally, 70
Denning’s 1
Finding 2
Example 18
Dennis 6
Finite 1
Examples”. 1
Dennis, 2
Finnish 1
Excellent 1
Design” 4
Firefox, 1
Detect 1
Execution 8
Fit 4
Devang 2
Extra 1
Directory 5
Flexible 3
Directory, 1
F. 8
Discovering 1
F.J. 1
Dissertation 1
FAULT 1
Dissertation, 1
FFICIENT 1
Doing 23
Dominion 1
Dynamic 7
FIFO 37
FIFO, 7
FILENO). 1
FIRST 1
FIRST)? 1
FLOW 1
FOOLISH 1
Facebook. 1
Figure 335
Failure 4
File-System 1
Final 4
False) 10
FindFreePhysicalPage() 1
Farrell, 2
Fault 4
E 195
First-in→ 11
EASUREMENT 1
First: 1
EBOOT 1
Flag 2
February 16
EFERENCE 1
February, 1
Flash-based 1
ENERALITY 1
Fellner, 1
ERFECT 1
Flesh 2
For 194
Fetch-And-Add 2
ERMINOLOGY 1
Forin, 1
Forget 1
FetchAndAdd(&lock->ticket); 2
ESOURCES 1
Framework 1
Fox. 1
ETH 1
File 3
Frans 4
Frame 1
Each 19
Earliest 1
Fredkin, 2
Free 8
Early 3
Free-Space 1
FreeBSD” 1
Ed2.pdf. 2
First 23
FreeBSD 3
Freedom 1
Efficiency 2
FreeBSD, 1
French 2
Efficient 2
Frigo, 1
Frequency 1
Either 4
Future, 1
Friedman, 1
Eligible 2
From: 1
Elliott 1
Fujiki, 1
Emacs 1
G 12
Full? 1
Errors 3
Function 2
G.L. 2
Evans 1
G62]. 1
First, 58
Gain 2
Fleischmann 1
GAINST 1
Everyone 1
Gaming 2
Fleischmann, 1
GB) 2
EvictPage() 1
Gandhi, 1
GNU 3
Evolution 1
Flow 6
Garner 1
Form 1
Examination 1
Fourth, 1
Generally 1
Francisco, 1
Experiment 1
Frankenstein 1
Generally, 1
Generalized 1
FASTER 17
Germond. 3
Generate 2
Freeing 2
FFICIENTLY 2
Getting 1
Gets 2
FILENO 1
Gibson, 1
Goodman. 1
Facebook). 1
Go 4
From 23
Goodman’s 1
Failed 2
Goals 2
Far 1
Gray 6
Further, 8
Goh, 1
Farm” 1
Gray, 1
Fusion 1
Goodness, 1
Faster 2
Great 5
Futex 2
Gorman. 1
Feedback 5
Graham. 2
G) 1
Greenfield. 1
G.A. 1
Grove, 3
GB). 1
Grows 2
GBs 1
Guerraoui, 2
Festschrift 1
Gupta. 2
GE, 1
Guide 3
FetchAndAdd(int 2
HAPTERS 1
Gates 1
H&P 2
Gecsei, 1
HARES 1
Figures 2
Geometry 2
Find 4
HEN 4
H. 20
Fine-grained 1
Get 5
HOLD 1
Ginting, 1
Follow-on 1
Glaser. 1
HREADS 1
HINK 1
Forgetting 3
HW 1
Glenn 4
Formalizations” 2
Going 1
Fortunately 2
Golding, 1
Handles 1
HOW 6
Fortunately, 9
Hansen. 5
Gollum, 1
Handbook 2
Fred 1
Hansen’s 2
Gruss, 1
Hank 2
Fun 3
Hard 1
Guide. 1
G. 9
Hash_Insert(hash_t 2
Hardware 18
GB 7
Harmful” 2
Heap01 2
GHz 2
Harper 1
Hence 2
GUIDELINES 1
Harry 2
Herlihy. 2
George 2
Hash_Init(hash_t 2
Hill. 1
Given 15
H 42
Hit/Miss? 4
Golub, 1
Heap 16
Hoare 4
Henry 1
Good 8
Hochshule 2
HARE 14
Here’s 4
HERE 1
Hong-Tai 1
HFE-1:1, 1
Hershey. 1
Good, 1
Humorously, 2
HICH 1
Hey, 1
Google 2
Hussein 1
HP, 1
Hierarchies” 1
Google, 2
Hydra” 1
Historical 4
Gouicem, 1
I. 1
History 4
HREAD 12
Gray. 2
Hoc 2
Gray’s 2
Group, 1
Growing 1
Guide” 1
HARING 2
HE 83
HINGS 1
HPUX 1
HY 5
I/O 86
I/O, 3
HYSICAL 27
IBM” 1
Hall, 5
ICKETS 1
Handbook” 1
IFIPS 1
Handled) 1
IGHER 1
Happened 2
II) 1
Hastings, 1
IME 2
Having 4
Hawkins, 1
IMMEDIATE 2
How 141
Hazelwood, 1
HREE 154
IO). 1
How, 1
He 3
HTTP 1
Hybrid 2
Header 2
Hall/CRC 2
IRECT 15
Hydra. 1
Heavyweight 1
I! 1
Handle 4
IRTUALIZATION 5
Hennessy 3
I/O). 3
Harcourt, 2
ISSES 1
Hill 1
I/O; 3
Hardware/Software 1
IZES 1
Hardware?” 1
I/O? 1
Hill, 3
I/Os 3
Has 1
Idea 2
Hint: 2
IALOGUE 4
History” 1
Hash 8
INITIALIZER. 2
Hash_Lookup(hash_t 2
Heap: 1
Hit 29
Hear 1
Hoare. 1
INTERLUDE: 11
Heart 2
Holding 1
Holt. 1
Heinrich. 3
Home 1
Helen 1
Horn. 3
HotOS 2
INTRODUCTION 15
How? 1
IP) 1
Huge 2
ISTORY 1
Human 1
IT! 1
Ideas 2
Here 30
Here, 13
Hershey 1
High 2
His 3
History: 1
Hits 2
Imagine 39
Hits+M 1
Imagine, 4
Hive/HDFS, 1
Hmm... 2
Implementation 6
Inc.. 1
I 171
Incorrectly 1
I, 1
Increase 1
If 167
I/O-intensive 2
Information 6
Homework 28
Initial 3
If, 9
I/O. 10
Hopefully 2
Initialize 3
Implement 4
I/O: 4
Hopefully, 4
Innocent 2
House, 1
ID 7
Innovator’s 1
Hovav 1
Instruction 4
Intel. 1
Interactive 1
Interlude: 4
Internals: 3
Interrupt) 1
Introduction 8
Intuitively, 1
Ion 2
Isolation 1
Israel. 1
Italian, 1
J 1
IECES 154
Jackson-Edwards. 1
IKE 1
IMER 1
INDETERMINATE, 1
INVERSION 1
January 14
January, 2
However, 120
Jiaqi 2
IP 41
Hugh 4
Job:A 1
Hydra 1
Jobs 2
I/O) 2
IRTUAL 19
Joe 3
I/O), 3
IRTUALIZE 5
I/Os. 1
Joy 2
ISN’T 1
Joy, 1
IA-32 4
IT 3
Jozef 2
ITH 4
Jr., 1
ITHOUT 2
IBM 9
Juan 1
Implementation” 1
IBM, 1
Julin, 1
Implementing 2
IDs 2
In-ternational, 1
Indeed 1
IEEE 7
June 13
IF) 1
June, 1
IGHT 1
Indeed, 20
Influenced 1
Just 15
IMITED 15
Informatica, 1
KB) 3
INITIALIZER, 2
Ingo 1
KB), 1
INUX 1
Karels, 1
Instructions 1
IO 7
Ken 2
Interestingly, 3
Knowlton. 1
IRE 5
Internet 1
IRIX 1
Introduced 3
Knuth 6
IS 1
Inverted 1
ISBEHAVIOR 1
Investigator. 1
ISCA 4
L. 10
Isn’t 2
In 387
IST 2
L1) 1
Isolation” 1
In, 2
ITS 1
L2 1
Issue 4
Includes 2
Idea1 1
L4. 1
Incorporating 1
Ideally, 2
L60, 1
Incrementalism, 1
Included 1
L78]. 1
Indeed. 1
LLUSION 1
Inputs 1
LOW 1
Instrumentation” 1
LRU? 2
Index 11
Intelligence 1
LaTeX, 1
Induced 1
Intel’s), 1
Labs 2
Inserts 2
Interludes 1
Lampson 6
Interposition 1
It 92
Lampson, 2
Introduction), 1
Italy. 1
Instead 20
Lanigan, 4
Invalid 2
Iyer, 1
Instead, 7
Lanyue 4
Issue: 3
Instinct, 1
It’s 4
Larry 1
I’m 5
Jacob, 1
Intel 10
Late 1
J.S. 1
Jason 1
Intel, 2
Law. 2
Jack 5
Jaswinder 1
Interaction 1
Learn 1
Jacqueline 2
Javascript 2
Interesting 1
Jeff 3
Jones. 2
Length 1
International 3
Jeffrey 1
Levin, 1
Jose, 7
International, 2
Levy. 2
Josep 1
Lighting 1
Job 11
Interrupts 2
Joseph 1
Job:B 1
Interscience, 1
Linux. 8
K. 1
Linux’s 2
KASLR, 1
John 14
Is 14
List: 2
Johnson, 1
List_Init(list_t 4
KB 18
Jonathan 3
Issues 6
Little 2
Journal 7
Its 4
KB); 1
Liu, 1
Journal, 2
It” 1
KB, 1
LoadLinked(int 2
K 6
I’d 1
KEY 1
Loads/Stores 2
KB-32 2
I’ll 3
KPTI) 1
Locks: 2
KB. 4
I” 1
Kanev 1
Long-Running 1
KB64 1
Kanev, 1
Long-running 1
Kathryn 1
KNOW 1
Lots 2
Kaashoek, 4
Kaufmann, 5
Low 2
Kawamoto, 1
J. 33
Keeping 2
Lucco, 1
Kay 1
Jain. 1
Kernighan, 1
Lynch, 2
Keep 4
Jain’s 1
Kilburn, 4
MA, 2
Keith 1
James 1
Know 2
MALICIOUS 1
Kenneth 2
Java. 1
L3 1
MANUAL, 1
Jim 8
LATER? 1
Kernel 14
MIT 5
Jing 1
LESS 1
Key 1
MIT, 1
Kleiman, 2
MLFQ. 2
Job:C 1
Knowing 3
MLFQ: 3
Joe’s, 1
Krieger, 1
LRU 33
MMU; 1
Johnstone, 2
MPLEMENT 1
L->head 8
LRU, 11
Joint 5
MQMS 2
L1 4
LW 1
Joy. 1
MQMS, 1
L4) 1
Languages 2
Joyce. 1
Mac! 1
July 4
Language” 2
LAW) 2
Large 2
K+96]. 2
Mac) 1
LDE 1
Lauder. 1
KASLR” 1
Lauer. 2
LEXIBLY 1
Macintosh 2
KB). 1
Lauer’s 2
LGORITHMS 1
KB-64 1
Make 5
Least-Frequently-Used 1
LL/SC 2
KB; 2
Man-Month” 1
Lectures 1
LOCK 2
KPTI 1
Manager” 1
Lepers, 1
KPTI, 1
Managing 1
LOCK-BASED 15
Letters 3
Keeps 2
Manchester 3
LRU-like 1
Letters, 2
Kernel” 1
Marco 2
LRU. 3
Kleinrock. 2
Massachusetts. 2
LRU’s 3
Knowlton 1
Matteo 1
Knuth. 1
Mattson, 1
Kuehner. 1
Maurice 2
LRU→ 11
Maurice, 1
LWN 2
Maybe 1
Labs” 1
McCall. 2
Lacking 1
McDougall. 3
Lamport’s 1
McKusick, 1
L 59
Let’s 90
Laszlo 1
L->head; 8
Levels 1
L4 3
Lauer 2
McVoy 1
Libraries: 1
LATER 1
Measure 5
Limits) 1
Lawall, 1
LATER, 1
Measurement 2
Lindberg, 1
Laziness 2
LDE). 1
Measurement, 1
Linear 2
Least-RecentlyUsed 1
LISP 1
Mellor-Crummey 4
Leave 1
Linked 8
LLOCATE 1
Meltdown 2
Led 1
Linus 1
Meltdown, 1
Leonard 2
LOCKS 23
Linux). 5
Mesa 4
LWAYS 1
Linux” 1
Lampson. 2
Let 18
Mesa, 1
Lipman. 4
Lampson’s 1
Libraries 1
Metric: 1
List_Insert(list_t 4
Las 1
Licklider. 3
Microprocessor 3
List_Pop() 1
Last 1
Like 6
Microsoft 4
Lists 5
Later 2
Like, 1
Microsoft, 1
LoadLinked 2
Later, 2
Linux) 2
Microsystems 1
Locking 2
Lavington. 3
Lipman 1
Microsystems, 1
Longer 1
Law, 2
Lipp, 1
Mike 2
Lottery 6
Leaks 1
Lisa 1
Minimize 2
Louisiana. 1
Learning 2
List_Lookup(&H->lists[key 2
Modadugu, 1
Low-level 1
Lee. 1
Modeling” 1
Lock 12
Lu. 2
Leffler, 1
MongoDB, 1
Lock-based 2
Leiserson, 1
Montreal, 1
Locks.” 2
Morgan-Kaufmann, 2
M. 35
Levy 1
Logistics 1
Moseley, 1
M.J. 6
Look 1
Levy, 5
Motivating 1
M83]. 1
Multiprocessing. 2
Library” 2
Loops 1
MAX) 1
Life 1
Multiprogramming 4
Lord 1
MB 1
Limited 6
Lower 1
MB, 1
Line 3
Lu, 4
MBALANCE 1
MIN). 1
MIT), 1
N 41
MLFQs 1
NCE 1
NCREMENTALISM 1
MMU 3
MMU, 1
ND 10
MORE 2
NECESSARILY 1
MS-DOS 1
NPUTS 1
MUTEX 2
NT 4
Mac. 1
NT, 1
Maintenance 1
NTERLUDES 1
Linux 107
NTERPOSITION 1
Making 3
Linux); 1
Manual”. 1
NULL; 22
Linux, 15
NUMCPUS; 4
Linux-based 3
NUMPAGES. 1
March 14
M 139
NX 1
March, 1
List 7
M62, 1
List_Init(&H->lists[i]); 2
Namely, 1
MAC 2
Mark 14
List_Insert(&H->lists[key 2
National 1
MAC, 1
Mars 5
Naval 1
List_Lookup(list_t 4
Martin 1
Nemacolin 2
Live 1
MALLER 15
Network 1
May 11
MAP_ANON|MAP_PRIVATE, 1
Load 4
Neumann 2
May, 1
MAX; 2
Load-Linked 2
McCarthy 2
New 9
MEMORY 1
Load-linked 2
McCarthy, 2
Nichols. 2
Loading: 2
McGee. 1
MIPS 14
Nickolai 4
McGraw-Hill, 2
MIPS, 2
No-eXecute), 1
Measuring 2
Locks 29
MM00]. 2
Nope, 1
Mechanism: 2
Locks, 1
MMU. 2
Melvin 1
Locks”) 2
MPORTANCE 1
Membrane 1
Long 1
MQMS). 1
Note 34
Memory: 3
Looping 1
MS-DOS. 1
Note, 2
Merritt, 2
Looping-Sequential 1
MULATING 1
Metha 2
November 10
M.I.T., 1
Metrics 1
Nuclear 1
Mac 12
M.K. 1
O(n) 1
Michael 10
Mac, 1
MASK 3
OFFS 1
Michael, 2
Mach 1
MAX_HEAP_SIZE; 1
OFFSET_MASK 7
Microsoft) 1
Mail. 1
MB) 1
OK 4
Miller. 2
Main 1
MIN 1
Milton 1
OK, 11
Malcolm 1
MIT. 1
Minneapolis, 1
OMPILED 1
Malloc(), 2
MIT’s 1
Miss? 1
Malloc(sizeof(myret_t)); 2
Mitoma, 1
OMPLETE 19
Mixed 1
Management 11
Models” 1
Management, 2
Modha. 1
Manchester; 1
ONCURRENCY: 15
Manifesto” 1
Moir 6
MLFQ 32
ONSTANTS 1
Manuals 1
Monitors 1
MORTIZATION 1
ONTEXT 2
Manual” 3
MRU 2
ONTROL 8
MUTUAL 1
More 24
OO 1
Ma. 2
OOT 1
Machine” 1
Many 21
Most 9
Mao, 3
Man 3
OPT? 1
Mountain, 1
Mars?” 2
Management” 2
ORE 2
Multics. 1
Marvin 1
Mangard. 1
Multiprocessor 4
McCarthy. 2
Mythical 1
Manual: 3
McCarthy’s 2
NDERSTAND 1
Mechanism 1
Manuals” 3
NE 1
Meehean. 1
Markowitz, 1
NGINEERS 1
Meehean’s 1
Markstein. 1
Megiddo 1
Massachusetts, 1
Mauro 2
Maxwell’s 2
Mayer. 2
McKinley, 1
Mechanisms 3
Media, 3
NIX 55
Memory” 1
NIX, 2
Methods 1
Memory 58
Microsoft’s 1
NIX-based 6
Memory, 1
Microsystems. 1
Memory-mapped 1
Minimally, 3
Menace 1
Miscellaneous 1
MenuMeters 1
NTERLUDE 35
Mesa” 1
Microprocessors 1
Mistakes 1
NULL 20
Modern 3
Molnar 1
Miss 29
Mr. 1
Mitchell. 1
Mogul, 1
Much 9
NULL); 35
Morgan 6
Muller, 1
Multi-Queue 1
Morris, 4
NULL, 20
Multi-Threaded 2
Morse. 1
NUTH 1
Multi-threaded 1
Most-Recently-Used 1
NY, 1
MostFrequently-Used 1
NeXTStep 1
Multics 14
Moving 1
Negative-Growth 1
Multics, 6
Mozilla 1
Neither 1
Multiprocessors” 5
Mudge. 1
Nelson 1
Multiprogrammed 5
Nelson, 1
Multi-Level 4
Murphy, 2
Nethercote. 1
Must 2
Nevada, 1
NABLES 1
Multi-level 7
Newell, 1
NBA 1
Multics” 1
Next 2
Multiple 1
NIX. 2
Next, 9
Multiprocessors. 2
NIX/C 1
No-Locality 2
NIX: 1
Multithreaded 3
No. 6
NOT 1
Nobel-prize 1
Mutual 4
NOWLEDGE 1
Mysterious 1
Non-Coalesced 1
NSA? 1
Nothing 4
N. 7
Now? 2
NDETERMINATE 1
Nucleus 2
NIX! 1
Numbering 1
NOMALY 1
NOW 1
NTERRUPT 1
OS 504
NULL) 6
NUMPAGES 2
NVERSION 1
NTRODUCTION 59
Neat 1
NT” 2
Need 2
OS, 31
NULL2 1
NetBSD, 1
OS-ignorant) 1
Nancy 2
Netzer 2
Narrow 1
OSes 2
Navarro, 1
Node_t; 1
OSes, 1
Needed 1
Non-compacted 1
OUBT, 1
Neely, 2
OUR 2
Nethercote, 1
Ngram 1
Nice. 1
Nimrod 1
Nir 2
No 10
OW 34
No, 2
Node_t 1
Non-Cooperative 1
October 17
Not 23
Now 79
Notes 4
O 247
Novark 1
OES 1
Novark, 1
OFFSET 1
Nucleus. 1
OK! 2
OMEWORKS 2
Now, 26
Number 8
OMPLEXITY 1
OAD 1
O(1) 4
ONTENTS 1
OBS 1
OPT 4
O(log 1
OPTIMIZATION 1
O. 1
ORRECT 2
OCALITY 1
OS) 2
OS), 2
OCKS 23
OCK 16
ODE 2
One 135
OSDI 10
ODING 1
OFTWARE 1
Obtaining 1
Only 10
OESN 1
OK. 2
Oops! 2
Offset 15
OK: 1
OF 9
Open 2
Oh 5
OINTER 1
Optimal 3
Oh, 1
OK; 1
OLICIES 16
Oracle 3
Old 2
OK? 2
OLICY 4
Orran 1
One”. 1
OLUTIONS 1
ONCURRENCY 3
OpenSolaris 1
OMPARING 1
Other 15
Orr, 1
ONCURRENT 16
Otherwise, 1
ON 12
Orwell. 2
ONDITION 1
OOK 1
Orwell’s 1
ONG 1
Our 25
OOLS 1
Overflows 1
ONSIDER 1
Ousterhout 3
Overview 3
OOPERATION 1
Ousterhout, 2
O’Hallaron 2
OPERATIONS 1
Overhead 3
O’Reilly 3
OPERATING 42
O’Reilly, 2
OPT. 1
P. 12
P1’s 1
OS). 2
P1) 1
P3 1
OS; 8
P2 3
OS? 4
P6 1
OSSIBLE 2
OSSpinLock 2
PC 16
PAGING 22
PCs, 2
PC, 7
PEED 1
PCD 1
PCD, 1
PDE. 1
PFN=55 1
PID. 1
PINNING 2
POSIX 20
POSIX, 2
OSTEP. 166
PPLICATION 1
OSTS 1
PPN) 1
OS” 1
PROT_READ|PROT_WRITE, 1
Object-Caching 1
ORG 166
PTE. 3
ORK 1
PTE.PFN 1
PERATING 184
OR’d 1
PTE.PFN, 3
PETERSON’S 1
PTE.ProtectBits) 3
PF 3
PTE: 1
PFN_SHIFT) 1
Of 70
PTEs). 1
PID) 1
PTIMAL 1
OS. 26
PPROPRIATE 1
On 21
PWT 1
OS: 1
PRIORITY 1
Pacific 3
OSTEP! 2
PT: 2
PageDirBase 1
OSes. 1
PTEs. 1
Paranoia 1
Once 41
OS’s 4
Padegs. 1
Part 6
OU 1
Page-Fault 2
Pass(C) 1
OWERFUL 1
PageTable[1] 1
Pathfinder. 2
Operating 38
O_CREAT|O_WRONLY|O_TRUNC, 1
Paging 6
Per 5
Operation 1
O_WRONLY|O_CREAT|O_TRUNC, 1
Paging, 1
Perfection, 1
Obviously 1
Or 9
Occur 1
Parent 6
Or, 7
Oddly 1
Perhaps 15
Park, 2
Organization 1
Often 1
Perl, 2
Pass(B) 1
Ott. 1
Operations 3
Pfaff, 1
Patel 1
Overall, 3
Oregon. 1
Phoebe 1
Patterson. 2
Overlap 2
Organick. 1
PhysAddr 8
Paul 3
O’Hallaron. 2
Organization” 1
Pick 3
O’Reilly. 2
Performance 11
Orleans, 1
Pioneered 1
P.M. 1
Pesterev, 3
Ousterhout. 3
Plot 1
P0), 1
Peterson. 2
Ousterhout’s 2
Pn−1 1
P1 6
Out 2
P1, 2
Peterson’s 6
Pointed 2
P=0 1
Over 6
Phenomenon” 1
Overflow 1
Positive 1
Physical) 1
Precise 2
Placing 1
Preemption-safe 2
Play 1
PACE 21
Prefetching 1
Point 1
Pren-tice 1
PAGE 6
Policy: 2
Primer 1
PAT 1
Pollack, 1
Priority] 2
PAT, 1
Pons. 1
Privileged 3
PDE 8
Positive? 2
PDE, 1
PDP-10” 2
Prentice 4
Probably 11
PD_SHIFT 1
Presented 1
PERATIONS 2
Problem: 6
Previously, 1
Problems” 1
PFN) 2
PHit 1
Proceedings 2
Priority 4
PID 5
Priority, 1
Problems: 1
Processes” 2
Processor-Memory 1
PIECES 38
Professor? 1
PLDI 3
Programmer’s 2
PM 4
Protected 1
Process 35
PREMATURE 1
Protection” 1
Protocol 3
PTE 17
Process0 12
PTE, 6
Pthread_cond_signal(&cond); 6
PTHREAD_COND_INITIALIZER; 3
Processes 8
PT_SHIFT 1
Processes, 1
Pthread_create(&p1, 5
Processing: 2
Pthread_mutex_init(&c->lock, 2
Processor” 1
Page 39
Producer/Consumer 5
Pthread_mutex_unlock(&c->lock); 6
Page, 1
Producers 1
Page-Reference 1
PageTableBaseRegister 1
Professor 5
Pthread_mutex_unlock(&mutex); 8
Professor, 1
PageTable[39] 1
Python, 2
Paged 2
Programmers 4
Pal 1
Parallel 3
Pass(A) 1
Passing 2
Q1 15
Programming 15
Pathfinder/Authoritative 2
Q5 1
Patt 1
Programs 4
Project 3
Patt, 1
Peanut 2
Quanta 1
Protection 7
Performance” 1
Quarterman. 1
Persistence 1
Pthread_create(&p2, 5
P 280
Queue_Dequeue(queue_t 2
Pthread_join(p, 4
Perspective” 5
P0 4
Queues: 2
Pthread_mutex_lock(&c->lock); 6
P4 1
Quote 1
P4, 1
Physical 13
Pthread_mutex_lock(&mutex); 8
Pieces 2
PACES 8
Pthread_mutex_lock(pthread_mutex_t 2
Pillay. 1
R 21
PAGES 2
Purify 1
Pioneers, 1
R+89, 1
PAGESIZE 1
Putting 1
Portable 1
R.H. 1
PD 2
Q2 9
Power 1
R.P. 1
PDBR 2
Q6 1
Prediction 1
R10k 1
PDEAddr 2
Quantitative 2
Preemptive 1
PDIndex 1
R4000 5
Present 1
PDP 1
RAM. 1
PDPTA’97, 1
Questions 26
Press, 7
RACE 1
PD_MASK) 1
Price. 1
RAIDs, 1
RANSLATIONS 15
Priority(B), 4
Problem 3
Process: 2
RANSLATION 15
Processes: 1
RE 1
Processing 5
RISC-like 3
README 20
Processing, 1
README, 1
Producer/Consumer: 3
PFN 43
RINCIPLE 2
PFN, 1
Prof. 1
RIORITY 1
PID). 1
ROCESS 30
ROM 2
PROGRAMMER 1
ROCESSES 1
ROPORTIONALLY 1
PT 2
ROGRAMS 1
ROTECTED 1
ROP. 1
PTBR 5
RR. 2
PTE.present 1
Professor: 37
Raiders, 2
Programming: 3
PTEAddr 6
RaiseException(PROTECTION_FAULT) 9
Proportional 2
Randal 1
PTEs 3
Randell 1
Proportional-Share 3
Random) 1
Proportional-share 1
PTHREAD 4
Randomization” 1
Pthread_cond_signal(&c); 4
Rather 1
PTHREAD_MUTEX_INITIALIZER; 7
Pthread_cond_signal(&empty); 2
PTIMIZATION 1
Rather, 4
Pthread_cond_signal(&fill); 2
PTIndex 1
Reboots 1
PT_MASK) 1
Pthread_cond_wait(&cond, 6
Recognized 1
Pages 5
Pthread_create(&p, 5
RPACI 154
Recollections 1
Page” 2
RR? 1
Pthread_join(p2, 5
Recovery” 1
RUNNABLE, 1
Paging: 4
Redell. 1
Pthread_mutex_lock(&lock); 6
Palo 1
Redell’s 1
Paperbacks, 1
Reese’s 1
Pthread_mutex_lock(&m); 6
Particularly 1
RUX 33
Publishers, 1
RY 1
Parts”.) 2
Race 2
Put 4
References 28
Patel. 1
Rachid 2
Reliability 1
Patent 1
Q 12
Relocation: 2
Rafael 1
Patterson 2
Remove 2
Rago. 4
Patterson, 1
Results 1
Q0 13
Ranganathan, 1
Pennsylvania, 2
Return-into-libc 2
Q4 1
Review, 3
Q8 1
Rashid, 1
Perry. 1
Ritchie. 1
Quarterly, 1
Ready: 1
Robert 9
Personal 2
Robin 3
Recall 9
Queue 8
S). 2
Quicksort, 1
Peter 5
Recall, 1
S+03] 1
Peterson 2
SDS 2
Recommended 1
RAND 5
SER 1
Ph.D. 3
Record 1
RANSFER 1
Phipps 1
Refers 1
SHIFT 8
RDLK 2
Physics), 1
Regions 1
SHIFT, 1
REATE 2
Relational 1
SIGINT 2
Pilot 5
REEMPTIVE 1
Relocated 2
SIGMETRICS 2
Plenty 1
REMATURE 1
Relocation” 1
SIGTSTP 1
Plus 1
Remember 5
SIZESORT+, 1
Policies 3
Remzi 6
SJF/STCF 1
RISC 14
Repair 1
SN_SHIFT 1
Policy 6
Repeatedly 1
RISC, 2
SOMETHING 1
Pons 1
Replacements 1
SPINNING 1
ROBLEM 4
Poor 1
Replacement” 1
SSD, 1
ROCEDURE 1
Portland, 1
ROP 3
SSDs) 1
Resort, 2
PowerPC 1
Resources 2
ROPORTIONAL 13
STCF. 1
PowerPC, 3
ROVIDE 1
Response 3
SWITCH 6
Responsibility” 1
RR) 1
Prentice-Hall 1
SYNCHRONIZATION 1
Revolution 1
RTFM 2
Saint-Exupery 1
Right! 1
Prentice-Hall, 7
RUN 5
Same 2
Rings, 1
Presumably 1
RUNNING, 1
River” 1
San 12
Round-Robin 1
Rago 1
Sanjay 1
Pretty 8
Raiders” 2
Santiago, 1
Rules 5
Principles” 2
Schedulability 1
RaiseException(SEGMENTATION_FAULT) 5
Run: 2
Prints 1
Running: 1
RaiseException(TLB_MISS) 1
Schedulers 1
Priority(A) 4
Runs? 1
Scheduler” 2
Probability” 1
Problems 1
Scheduling 12
Random 21
Problem” 3
Schwarz, 1
Random, 5
Science, 1
Ratios” 1
Search 2
Readings 1
Proc 14
Segmentation 3
Segments 2
Process1 9
Separating 1
Server” 1
Seward, 1
Program 20
Ready 58
Shan 2
Protection) 1
Really 3
Shasha. 1
Recent 1
Provides 1
She’s 1
Recheck 1
Reclaim 1
Red-Black 2
Similarly, 6
Pthread 11
Reducing 1
Pthread_cond_wait(&c); 1
Register 8
Pthread_cond_wait(&c, 3
Relationships, 1
Pthread_cond_wait(&empty, 2
Relocation) 2
Reprinted 1
Pthread_cond_wait(&fill, 2
Simple 29
Required 1
Pthread_create(&c, 2
Simple, 1
Research 3
Pthread_join(p1, 5
Simply 3
Research, 2
Pthread_mutex_unlock(&lock); 6
Restartable 1
Restoring 1
Pthread_mutex_unlock(&m); 6
Single 7
Restricted 1
Published 1
Sizes 1
Resulting 4
Python. 1
Slab 1
Q1. 1
RetryInstruction() 4
Slutz, 1
Q3 1
Reuter. 2
Q7 1
Smaalders. 2
Review” 2
Queue_Enqueue(queue_t 2
Smotherman 1
Riak. 1
Queue_Init(queue_t 2
Queues 4
Richard 9
Queues, 2
Ritchie) 1
Roscoe. 1
Routines 3
So 30
R. 33
So, 1
R/W 1
RADE 1
RAID 1
Sometimes 9
RAM 5
RAM, 1
REASON 1
Sometimes, 9
REAT 3
Sorry3 1
S 379
Run 68
Speaking 1
S, 6
Specific 1
REE 19
Spectre 3
S.Sahni). 2
RITICAL 1
Spend 3
S09]. 2
Spider-Man: 2
SCHEDULER 1
RR 14
Running 24
RR, 1
Running, 1
Spin 7
SEFUL 2
RSS, 2
Russ 1
Spin-based 1
SEG 2
Raging 1
Spin-waiting 2
SEG_MASK) 2
RaiseException(PAGE_FAULT) 1
Spinning 4
Rajimwale, 1
SHIFT) 8
Splitting 1
S. 22
Randall. 1
S.J. 1
Sploitfun. 1
SJCC, 1
Spurious 1
SECTION, 1
Randell. 1
Sriram 2
SGI. 1
Rate 4
SJF 21
Stack 14
SJF, 4
Staelin. 1
SIDE 40
SJF/STCF) 1
Stallman. 2
SIZESORT-) 1
SLEEPING, 1
Read 38
Stan 1
SJF. 2
SPARCv9). 1
Read-Execute 1
Start 5
SN 3
STDOUT 1
Read-Write 2
Status: 1
SOLATION 1
Real 3
Stick 1
Saavedra-Barrera 1
SOSP 9
Save 2
Store-Conditional 2
Redell 2
Saying 1
SPARC 9
Store-conditional 2
Redirection 1
Structures: 1
SPARC, 3
Reduce 1
STCF) 2
Structuring 1
Scalable 10
Reduced 2
SUPPORT 1
Success! 1
Scan-resistant 1
Sullivan, 1
S_IRWXU); 2
Reese 1
Scheduler 5
Reese, 1
Saavedra-Barrera. 1
Scott. 4
Sadly, 2
Reeves. 2
Summary 30
Referring 1
Said 1
Secure 1
Sun 5
Region 1
Saltzer 1
Seg 1
Sun, 2
Registers 1
Sanzi, 1
Sun.. 2
Segment 10
Relocation 1
Say 2
Superpages” 1
Segregated 1
Scalability 3
Support) 1
Replacement 6
Semantics 3
Scaling 6
Survey 3
Report 2
Scheduled 1
Susan 1
Report, 2
Scheduling” 1
Sweden, 2
September 13
Represent 1
Schroeder. 1
Switch 3
Sequential 2
Science). 1
Requirements 3
Switches 1
Sequin. 1
Scientific 1
Resource 4
Scientists 1
Shacham. 2
Synchronization 8
Responsibilities 1
Synthesis 1
Share 4
Rewritten 2
Scott 10
Ritchie, 1
Shared 2
Systems. 1
Secker 2
River, 1
Sharing” 1
Section 1
Systems: 6
Ronald 1
Shedler 1
Round 3
T. 14
Rudolf 1
Should 4
Showing 1
Rule 14
Runtime 1
Size 10
T2 38
See 43
Sleeping 3
SE 11
Seems 1
T2, 4
Software 7
THINK 1
Segmentation” 1
SEG_SHIFT 1
Software-based 1
Served 1
SET 2
Solution: 1
Server. 1
SIGNALING 1
Soon 2
Servers” 1
SPINNING: 1
Sorin, 1
Setup 1
Sorry, 1
SQMS 7
Shacham, 1
South 1
SS+10]) 1
Shared-Memory 4
Spaces 3
SSD. 1
Shared-memory 1
Spectrum 1
STACK: 2
Shavit. 2
STCF 8
Shavit’s 4
Spin(), 1
STCF, 1
Shedler. 1
Spin(1); 2
Shortly, 1
Stalin 2
Silicon 1
Star.” 1
State: 2
Similar 3
STRUCTURES 16
Steinberg 1
Simulation, 1
Stephen 4
Singh, 1
Steve 4
Sitaram 1
Stoica 1
Stoica, 1
Strategies 2
Streams 1
Stride 4
Structures” 2
Student, 1
SYSTEMS 42
Subsequent 1
Saving 1
Schedulers: 1
Sleep 40
TLB 173
Such 16
Slow 1
Scheduling: 6
Small 2
Support: 1
Scotland, 2
Supporting 1
Surprisingly, 1
TLB, 21
TLBP, 1
Swaminathan 2
Solaris 18
TLBWI, 1
Swap 4
TLB_Insert(VPN, 3
Swap-Based 1
TLBs) 1
Solaris, 7
Swift. 2
Second, 31
TORAGE 1
Solomon. 2
Switzerland 1
Security 2
TORE 1
System: 1
Solution 5
Segmentation: 1
TR 1
Sood, 2
Systems” 7
TR-95-22, 1
Self-Tuning, 1
Sound 2
TRUCTURE 3
T2), 2
Soyeon 2
Set 6
TV 1
Special 1
Seward. 1
T3 8
Tb 2
Specification, 1
Shah, 2
Tb, 1
T3, 4
Stack? 1
Sharedmemory 1
Tc2) 2
Standard 2
Tcompletion 2
Stanford 1
Technique 1
Sharing 12
TABLES 15
Stanford, 1
Technische 2
Short 1
Starts 1
TCB. 2
TestAndSet(int 2
Short, 2
TECHNICAL 1
Tf 1
TERMS 1
State 12
Shortest 6
Statement 1
They 5
Signaling 2
THER 1
Steinberg. 1
Signals; 1
THREADS 1
Steven 1
Silas 3
Think 12
TILIZATION 1
Simpler 2
Thompson. 1
Storage 10
Single-Queue 1
Store-Conditional” 2
Thread2 6
Strachey. 1
Single-Threaded 2
TIP: 9
Threading 2
Strachey’s 1
Sleeping) 1
TLB) 3
Threads? 2
Stretch 1
Smaller 1
TLB-miss 1
Structure 3
Threads” 6
Smotherman. 1
Tickets? 1
TLBWR, 1
Smotherman’s 1
Tim 2
Solaris” 1
Time-to-Completion 2
Times 1
Time” 1
Timothy 1
Tix:250 1
To? 1
TO 26
Student: 36
Together 1
TOPLAS, 2
Tony 1
TPDS 1
Some 25
Study 8
Sopena. 1
TS 1
Too 3
Subramanian, 3
Sorry! 1
Table? 1
Traffic” 1
Suli 1
Sounds 6
Trans. 2
Summer 1
Tables 9
Transformers 1
Sun). 1
Tamil, 1
Transforming 1
Tc, 1
Transitions 1
Sundararaman, 4
Tc1). 1
Space 20
Translations 2
Supervisor” 1
Space-time 1
Technical 4
Transparent 2
Trevor 1
Texas. 2
Support 9
Tricky 2
Than 1
Surveys, 1
Tturnaround 3
Thanks. 1
Tucker, 1
Swapping 1
Tudor 2
That’s 6
Swapping, 1
Two 11
Swift 2
Typical 1
Swift, 1
U.S.S.R; 1
Symbiosis” 1
Then 17
UCB/CSD-92-684, 1
Specifically, 52
UIDELINES 1
Synchronization” 2
Spectre. 1
UILD 3
Spending 1
ULE 2
Then, 19
Spinning: 2
There? 1
Springer-Verlag, 1
Therein, 1
ULTI 11
Stack11 2
Things. 1
Staelin, 1
Third 1
Stallman 1
System 37
Stan. 1
ULTIPROCESSOR 12
Stanley 1
System, 2
Third, 5
UPPORT 2
States 1
System/370” 1
Those 2
Systems.’ 1
Stevens 6
Though 5
Stevens, 2
Threads 5
Still 5
Tickets 1
Stockholm, 2
Stodolsky, 1
T1 30
Storage” 1
StoreConditional(int 2
Stored? 1
T1, 12
Time 29
TAKE 1
Structures 6
Time-Shared 1
Structure” 1
TimeSharing 1
THE 9
Summary: 2
TLB; 1
Sumner. 4
Sun. 2
TLBs 10
SunOS 1
Sun’s 1
TLBs, 6
Support” 1
TM 2
Sure! 1
TOCS, 3
Switching 4
TOOLS 1
USSEAU 154
Undefined 1
Understanding 2
Unfairness 1
University 6
Systems 18
University, 2
TRUCTURES 17
Systems, 3
Upon 3
Ta 3
Users 2
Take 2
Tarrival 3
Using 19
System” 22
Tc2 7
TeX 1
TeX, 2
V 31
Techniques 2
VAX-11 4
Tell 1
VAX/VMS. 1
Terminology 1
VAXen 1
VERLAP 1
To 152
Test-And-Set 2
VERY 1
Today’s 1
VICT 1
Torvalds 1
Test-and-set 4
VLSI 1
Tp). 1
Test-and-set, 2
VMS 16
TestAndSet(flag, 4
Trace 9
VMS, 1
Texas, 1
VMware 1
Tracking 1
VPN. 1
VPN: 1
Thanks 5
Traditional 2
VPNs; 1
Va3 2
Translation 5
Variable 2
Vegas, 1
Trap 2
That 14
Version 4
Trees 1
Very 2
Tresponse 1
Virtual” 1
Trials 1
Visualization 1
Tron 1
W.C. 1
WAPPING 1
Waldspurger. 2
Waldspurger’s 1
Try 11
Wanjohi. 1
Turning 2
Wanjohi: 1
Typically, 2
Warburg 1
U/S 1
Warburg, 1
ULTIPLE 2
Warm-start 1
UMMARY 3
Weaver 1
UNSW-CSE-TR-0321, 1
Weaver, 2
UPERUSER 1
Weighting 1
URSE 1
Weiwei 2
USA. 1
We’re 1
USTERHOUT 1
We’ve 2
UTUAL 1
What’s 4
Undoubtedly 1
User 14
Usually, 3
V.A. 1
VA 1
VAX 5
VAX-11/750. 1
VM 18
VM, 3
VMMs 1
VMS), 1
VPN; 2
VPNs 5
When 122
Va0 3
When, 1
Va4 2
Valgrind 2
Who 4
Valley. 1
Wiggins. 1
Vasileios 2
Wiggins’s 1
Wikipedia? 2
Virtual 12
Wiley, 1
Wilson. 1
Vol. 5
Wilson’s 1
Von 2
Win, 2
Vyssotsky, 1
Windows; 1
Wisconsin—Madison, 1
Woke 1
Worse: 2
W 17
Wow! 1
WAITING 1
X. 1
WARY 4
X/macOS 1
WITCH 1
X11 1
WITCHES 1
Xerox 2
WORST 1
YSTEM 2
WORST)? 1
Yet 2
Yuanyuan 2
ZOMBIE 1
Zeldovich. 2
Zhou, 2
Zwaenepoel, 1
[2] 2
[A79]) 1
[A90] 1
[AC97]. 1
[AD03]. 1
[B+10] 3
T 378
[B+18] 1
[B+18], 1
T1). 4
[B+72] 2
[B66] 2
T2. 4
[B75] 1
[B89, 2
TABLE 2
[B94]; 1
[B97] 2
TD 2
[BC05] 3
TENEX 3
WWW. 166
[BC91]; 1
Waciuma 1
TEST 2
[BH00] 1
Wahbe, 1
[BNS69] 1
Wait: 1
[BOH10] 3
Waiting 8
[C+04] 1
THREAD 12
Wanted 2
[C+62] 2
Was 1
[C03] 1
[C63]. 1
Watch 4
[C69] 1
Weihl. 1
[C69], 1
Were 2
[CK68]. 1
We’d 1
[CM00]. 1
[CP78] 1
[CS97] 2
[D68] 7
THREE 37
[D82] 1
We’ll 38
[D91] 2
[D97]. 1
Where 7
[DD68] 1
TLB. 13
Whereas 3
[DV66] 3
TLB: 2
Whether 4
[DV66], 1
TLBR, 1
[E06]; 1
Which 12
[EF78] 1
TLB_Lookup(VPN) 4
[Free] 1
Why? 5
TLBs; 1
Wikipedia 3
[G+17] 1
TLB’s 1
William 3
[G+95]. 1
[G83] 1
Windows 10
[GR92]. 2
Wish 2
[H61, 1
Within 4
[H91] 2
Table 18
Wood. 1
[HP06] 2
Woodlands 1
Takes 2
Work 1
[I09] 4
[J91]. 1
[JM98]. 1
Workload 11
Tc1 9
[JS94] 1
Workstations” 1
Tc1, 2
[JS94], 1
Worst 2
Tc2). 1
[K+61,L78]. 1
Techni-cal 1
[K65] 1
Write 11
Technique: 1
[KE+62, 1
Techniques” 2
[L11] 1
XECUTION 15
[L60] 1
Tel-Aviv, 1
Y. 1
[LL82] 4
YNCHRONIZATION 1
[LL82], 1
YOUR 1
TestAndSet() 6
[LR80] 1
Yale 1
[LR80], 1
Yang, 1
[M07]. 1
Yes. 1
[M11]; 1
Yet) 1
[M28]? 1
Yield 2
[M65]. 2
Yield, 4
Your 1
[MM00] 2
You’re 2
Yupu 2
[MS04]. 8
Zero” 1
[MS91] 2
Zhiqiang 2
[NM92] 2
There 42
[O16] 1
Zorn. 1
Thesis, 1
[O49]. 1
[3] 1
[O90]. 1
[AC97]; 1
[PS81]. 1
[B+13]. 1
[QI15]. 1
[B+19] 1
[R+89] 1
[B72] 1
[R97] 2
[B89] 2
[S+04] 1
[B94] 1
[S04]; 1
[BC05,G04]. 1
[S07] 2
[BC91] 1
[S07], 1
[BJ81]. 1
[SHW11]. 1
[SN05] 1
[C06]. 2
[C69]) 1
[SR05] 6
[C93] 1
[SR05], 3
[C95]. 1
[SS+10] 1
[CG68, 1
[W+95]. 2
[CK+08]. 1
[W03] 1
[CP78]) 1
[W09]. 2
[CS94] 1
[WG00] 3
[CSG99] 1
[WG00], 1
[CSG99], 1
[WL+93] 1
[CV65,DD68]) 1
[Y+18]), 1
[D+13] 2
[virtual 5
[D65] 2
[D70] 1
__lock_t 8
[D70], 1
__queue_t 2
[D72]. 1
a1 1
[E06] 1
a:0,b:1,c:1 1
[E95] 1
a:30:200 1
[E95], 1
a[1] 1
[EF78]) 1
a[1], 1
[FLR98]. 1
a[5] 1
[FP89] 1
a[9] 1
[G04] 1
a[i] 1
[G62] 1
abbreviated) 1
[H61] 1
abilities 1
[H74] 1
abilities, 1
[H74], 1
[H87] 1
[HP06]), 1
ability 11
[High 1
about; 3
[I11] 2
[J09] 1
above) 6
[J09], 1
above), 3
[K64]. 1
[K68]. 1
[KE+62] 2
abstraction 15
[KL88] 1
abused. 2
[L+13] 2
[L+75] 1
The 821
This 201
[L+93] 2
Theodorus 2
This, 2
[L78] 3
Thomas 3
[L83] 2
Thompson 1
[L83], 1
Thrashing 1
[M+63]. 2
These 24
[M+70] 1
Through 1
[M06] 1
Timer 1
[M06], 1
[M11] 2
TlbEntry) 4
[M11], 1
Tolerance 1
[M15] 4
Tomlinson. 2
[M28] 1
Tools 1
[M82] 2
Trace: 4
[M82], 4
Transactions 3
[MB91]. 1
Trigonakis. 2
[MM03]. 1
[MS96] 2
[MS98]. 2
True) 9
[N+02] 1
Tuning 1
[N+02], 1
access 133
[N+07]; 1
Turing 5
[NM92]) 2
Turn 1
Thread 95
Types 1
[P81]. 2
access, 9
Three 4
[PP03] 2
accessed? 1
[R97]! 2
[RK68] 1
[RL81] 1
[S+04]), 1
[S+11]). 2
[S04] 1
[SA96] 1
[SS74]. 1
Thus 24
[TTG95]. 1
accesses 47
[V+65,BH70]. 1
accesses)? 1
accesses, 4
accesses?) 1
[VPN 11
accessible 3
[W02]. 1
accessible, 1
[W06]. 1
[W15]. 1
according 3
[W17] 2
[W95]. 1
achieving 7
[W95]: 1
[WW94] 1
[WW94], 1
[anon 1
__Node_t 2
U 89
ULL 1
__node_t 10
UNESCO, 1
a2 1
URL: 1
a:100:100,b:100:50, 1
USA 1
a:100:100,b:100:50,c:100:50). 1
USE 3
UT 1
acquire 57
a[2] 2
Uh 2
acquire/release 2
a[6] 1
Uman 3
Uncontrolled 2
acquired 15
a[9]) 2
Underlying 3
acquired, 2
Unsafe” 2
Up 2
action 15
active. 1
actively) 1
actual 15
Use 35
adapt 1
User’s 4
added 12
added, 1
additionally 1
addr:10 1
VARIABLES 18
VAX/VMS), 1
VAX’s 1
VM. 1
VMM-level 1
VPN=0 1
VPN=39 1
VPN=42. 1
VPN_SHIFT 1
VS 1
Va2 2
Value 1
Van 4
Vancouver, 5
Variables 3
Virtual-Storage 1
VirtualAddress 7
Virtualization 5
Visually, 1
Vyssotsky. 2
Thus, 206
Ticket 3
Time) 2
W. 18
WAIT 1
WHILE 2
Time-Sharing 8
WRONG 1
Wait 1
Times?” 2
Waiting: 2
Tiny 1
Wakeup 2
Tix:100 1
Wei, 1
Tix:50 1
Weihl 1
Tom 2
Weihl, 2
Torrellas, 1
Whichever 1
Tp 3
Tp, 1
Tracing 8
While 31
Traiger. 1
While, 1
Wikipedia. 1
Transactions” 2
Wilkes. 1
Tree 1
Winter 1
Tricks 1
Wisconsin 1
True 1
Working 2
Turner, 1
Workshop 2
Turns 2
Wow, 2
Two-Phase 2
Wrapper 2
Two-phase 2
Write-back 1
U.C. 2
XCLUSION 1
Xiong, 2
Y 3
UEUE 11
YBRIDS 1
UK, 2
YNAMIC 1
ULLER 1
YOU 2
YPES 2
UNIX 7
UNIX-based 1
UNUSED, 1
US, 1
USENIX 8
UST 1
Unfortunately 1
about 294
about, 2
above. 20
Unfortunately, 37
absolute 6
Unix 1
acceptance 2
Unknown.. 1
Unlike 5
Unlock 2
Until 3
address 561
Unused 2
address); 1
Useful 1
V. 3
address, 7
address-based 1
VALID 3
address-translation 4
VAX-11/780 1
accessed 42
VAX/VMS 11
VAX/VMS, 2
accessed, 12
addresses 42
accesses), 1
VLDB 2
accident 1
addresses, 3
VMS. 2
accommodated. 1
adoption 1
VMWare’s 1
advance 1
accomplish 9
accomplishes 1
accordingly 1
account. 1
advanced 7
accounting 4
advanced, 2
accounting, 1
advantageous 1
accrued 1
accumulates 1
accuracy 1
advantages 5
YSTEMS 203
achieved. 3
advent 1
Yes 1
achieves; 1
advocates 1
affected 1
Yes, 9
acquiring 22
affinity 8
York, 6
VPN 69
affinity, 1
acquisition. 4
VPN, 2
VPN_MASK) 7
Va1 2
across 30
actions. 1
Va5 3
active; 2
actively-used 1
Values 2
activity. 2
Virtualizing 2
Virtually 5
after 54
again!) 1
actually 38
You 89
adding 35
Zel-dovich 1
Volume 35
additions 1
again. 24
Zonkey), 1
Voorhis. 1
addr 2
again: 2
WITH 1
[1] 2
addr:20 2
age), 2
[A79] 1
address! 1
aims 1
[A91]. 1
address) 2
algorithm). 1
[AD00] 1
algorithm; 2
address), 1
[B+00] 2
WWW.OSTEP.ORG 42
[B+10]; 2
Waiting-Line 1
address-space 5
[B+13] 1
Waldspurger 6
algorithms 26
addressed 2
[B+19]. 1
Wales 1
algorithms, 3
addressed, 1
[B+79] 1
adjust 1
alike, 1
Warehouse-scale 1
[B+79], 1
admission 1
all) 1
[B72]. 1
admit 1
all), 1
admit, 1
[B94]. 1
alloc()/free() 1
[BC05, 2
[BH70] 2
advantage 14
[BJ81] 1
adversely 1
[BOH10]). 1
advertise 1
[BS+09] 1
advisors, 1
allocating 19
[C06] 2
affecting 1
[C54,PV56] 1
affords. 1
[C93]. 1
again; 3
[C95] 1
again? 2
[CD85]), 1
[CK+08] 1
against 9
[CS94]. 1
agent 1
ago 1
allocation 24
[D+13]. 2
ago, 5
allocation, 2
agreed-upon 1
[D01] 1
allocators. 3
[D65,D68] 2
allowed. 1
ahead 8
[D68]; 1
ahead, 3
[D70]. 1
ain’t 2
[D72] 1
akin 2
[E95]. 1
[FLR98] 1
al. 5
[FP89]. 1
alas. 4
[G04]. 1
[G83]; 1
[H74]. 2
[H87]. 1
allows 37
[HJ92] 2
[HP06]). 1
[J16] 1
algorithm 34
[J16], 1
[K+61] 2
algorithm, 8
We 166
algorithmic 1
[K+96] 2
Well 1
[K64] 1
all!), 3
already 28
[K68] 1
altering 1
[KE+62]. 1
all. 9
[KL88]. 1
all... 1
alternatives 4
allegorical 1
[KR88] 2
alloc 1
Well, 27
allocate(100), 1
[L+75]. 1
Werthman. 1
allocate. 1
[L+93]. 2
am 16
amazingly!), 1
allocated. 5
[L09] 4
allocator. 2
[L78]. 2
allocators; 1
[L81] 4
[LL82]; 1
among 14
[LM+89] 1
allow 22
amount. 2
[LR80]; 1
alone 6
ancient 2
alright 1
[Low 1
and? 1
[M+63] 2
annotate 2
[M+70]. 1
answer: 2
[M04] 2
answering 1
[M62] 1
answers; 2
[MB91] 1
anticipate 1
[MM03] 1
[MS96]. 1
anyhow, 2
[MS98] 2
anymore? 1
[O11] 1
[O11], 1
anyone 3
[P+95] 1
[P10] 1
[P10]); 1
[P81] 2
[P90] 1
anything 17
[PV56] 1
[R69] 1
anything, 5
[RK68]. 1
appeared, 1
[RL81]. 2
[RT74] 1
application. 4
[S+03] 1
applications? 1
[S+68]), 1
applies 1
[S05]) 2
apply 1
[S15] 1
appreciate 1
[S15], 1
[S59] 2
[S68] 1
[SA96]. 1
[SN05]; 1
What 214
[SS74] 1
Whenever 2
[TTG95] 1
Whew! 1
Why 28
Why, 1
also 213
also, 1
alternates 1
Will 6
alternatives! 1
altogether, 1
Wilson 2
always. 1
am! 1
Wilson, 2
amazing 9
amazing, 2
amortize 2
amount; 3
amounts 7
amt) 2
approach 138
With 82
[V 166
approach, 25
Without 15
Wood-lands 1
Word 1
Worried 1
Worse, 3
Wouldn’t 1
approaches 31
Wulf. 1
approaches, 1
X 3
appropriately-named 1
[VERSION 42
X, 1
[W02] 2
X-windows 1
[W06] 1
XD 1
[W15] 1
XIST, 1
[W95] 1
approximate 20
XITS 1
[Y+18] 1
approximation? 1
XXX 2
[stack 1
approximations 2
Xerox. 1
arcane, 1
] 2
Yandong 3
architects 4
Years 4
architectures 2
Yes? 1
__counter_t 6
architectures, 1
You’ll 3
archive, 1
__hash_t 2
ZFS) 1
are. 4
__list_t 2
Zebra 1
are: 2
Zeedonk 1
Zeldovich 1
arg); 8
Zelenka. 1
arg, 2
Zhang, 4
args->b); 4
Zuckerberg 1
argument; 2
[4] 1
[AC97] 1
[AD00]; 1
[AD03] 1
[B+18]. 1
arguments 23
[B+96] 2
arguments, 5
[B,C 2
arise. 3
[B75]. 1
arise2 1
[B86] 1
arithmetic 2
[BB+72] 1
[BB+72], 1
arose 5
[BH00]. 2
arose, 1
[BH70, 1
array; 1
[BH73] 2
arrays 5
[BH73], 2
arrays, 2
[BNS69]. 1
arrive), 1
[BS+09, 1
arrive] 2
[C+04]. 1
arrives. 2
[C03]. 1
arriving 2
[C54] 1
[C63] 1
aside 4
[CD85] 1
aside, 2
[CG68] 1
ask? 2
[CK68] 1
asks 4
[CM00] 1
asks, 1
[CV65] 2
asleep 3
[CV65], 1
asleep, 1
[D01]; 1
assert 3
[D68]. 2
assert(p 1
[D70]), 1
[D82]. 1
[D91]. 2
[D97] 1
assigned 7
[DV66,V+65]. 1
assists 1
[G+17]. 1
[G+95] 1
[G85] 1
[G85], 1
[GR92] 2
[H91]. 2
[H93] 4
[H93], 3
[HP06]. 3
[I09]. 2
[J91] 1
[JM98] 1
[K+15] 1
[K+61,L78], 1
[K65]. 1
[L09, 2
[L11]. 1
[LL82]. 3
[LM+89, 1
[LM+89]; 1
[M07] 1
[M65] 1
[M83] 1
[M83], 1
[MS04] 2
[MS04], 2
[MS91]. 2
[N+07] 1
[NS07] 1
[O16]. 1
[O45] 1
[O45], 1
[O49] 1
assume 80
[O72] 1
[O72], 1
assume, 2
[O90] 1
[P+95]). 1
[PS81] 1
[Page 2
[QI15] 1
[R69]; 1
assumed 12
[S+11] 2
[S05] 2
[S07]. 1
[S09] 2
[S59, 1
[SB92] 1
assumptions 14
[SB92], 1
[SHW11] 1
[SN05]. 1
assumptions, 6
[V+65] 1
astute 2
[W+95] 4
atoi(argv[1]); 1
[W+95], 1
[W03]. 1
atomically; 2
[W09] 2
atomics. 2
[WL+93]. 1
attack: 1
[X+10] 2
attackers 2
[X+10], 2
attained 1
a3 1
attempts 4
a:30:200. 1
attempts, 3
a; 4
a[1]. 1
a[3] 1
attention 10
a[3], 1
attention, 3
a[6]) 2
an 545
a[7] 2
authors 8
analogy 1
authors.. 4
analysis” 1
auto-matically 1
automate. 1
average). 1
avoided. 2
avoids 5
award-winning 1
away 12
awesome! 1
baby 2
able 59
baby!” 2
about) 1
background. 2
about), 1
backwards 1
backwards, 1
above). 7
above; 7
balance 15
above? 3
abstraction. 1
balanced 6
abuse 1
base/bound 1
accept 2
base/bounds) 2
bases 2
bash, 1
access. 8
access: 1
accessed), 1
accesses. 5
accessibility 1
accessible. 2
basic 94
batch 7
batches 1
accessing 36
be? 9
accidental 1
beauty 2
accom-plish 1
becomes 18
accomplished 9
accumulate 1
accumulated 1
accuracy/performance 2
accurate 2
accurate); 2
accused 1
accustomed 1
achieves 7
act 3
action. 1
been 100
before? 2
active 13
begins. 1
active, 2
begins: 1
activity; 1
beguiling 1
actuality, 1
behalf 2
behave? 4
behaves 11
addition 13
behaves, 1
behavior. 4
addition, 4
behavior: 1
addr:21 1
behaviors; 1
behind 31
below) 3
beneficial 1
benefits. 1
address. 21
benefits: 1
address: 8
address> 1
address>, 1
best 31
addresses. 4
best-fit 7
adds 24
adios, 1
administer 1
administrators 2
advice 4
advice, 1
affairs 1
affected. 1
better 88
affects 2
affinity. 4
better, 14
aforementioned 2
between 79
beware 1
beyond), 1
bible 2
again 58
big 44
big!”, 1
big, 3
bit). 3
bit; 1
again, 31
age; 1
aggressive 3
alas). 1
algorithms. 5
alike. 1
all; 4
bits 70
bits, 7
black) 1
all? 8
blocked. 2
allocate(int 1
blocks 9
blocks, 1
bodies 2
allocates 11
body 2
book). 5
allocation. 7
book; 1
book? 1
allocators 9
allotment 2
books 21
allotment, 1
born! 1
both) 1
both), 1
botte 1
allowed 8
bounds). 1
bounds; 2
bounds? 1
bounds”); 1
branch 3
break), 1
almost 13
breed 1
alone! 1
bring 4
alter 2
broadcasts 1
browser. 1
brutal 1
alternate 5
brutal, 1
bucket 2
alternatives. 2
bucks. 1
although 15
amazed. 1
amazingly 3
buffer 43
amazingly, 1
buffer); 1
buffer, 11
buffer[fill_ptr] 1
bug 4
bug, 1
buggy 1
bugs) 1
build. 2
amount 37
amplifying 1
an- 1
an-THREE 1
analyses 1
building 41
building, 1
built. 1
analysis 5
bumping 1
burden. 1
analyze 3
bus 3
analyzed 2
bus, 1
another; 1
bus-based 1
butter 1
buying 2
bx 2
bx=2,bx=2 2
bx=3 2
bytes). 3
bytes; 2
bytes? 1
bytesLeft 3
c->global; 2
answer 29
c->local[i] 2
c->value; 4
answer, 8
anti-gaming 1
c3 10
c; 3
c;, 1
cache. 9
cache: 1
caches; 1
calamity. 1
calculate 5
calculated 1
call. 17
call: 2
caller; 2
calling 55
calls). 1
came 12
any 171
anyhow. 2
anything. 1
apologize. 1
apparently 1
appealing; 1
appears 1
append 2
appetite, 1
applicable; 1
application 29
approach. 8
approach: 5
approaches. 2
approaches: 1
approaching 1
appropriate) 1
appropriately 3
arbitrary 13
architectures. 1
architectures: 2
can 699
can, 4
cannot? 1
can’t) 1
capacity 2
capacity, 1
card 1
careful 16
careful, 3
carefully; 1
cares 2
case. 3
case: 4
cases). 1
cases? 2
cast; 1
casts 1
causing 3
cen-tral 1
certain 26
chains 1
challenges 2
challenges, 1
challenging. 1
chan 1
chance 4
chanced 1
change 55
changed 18
changed, 3
chaos 2
chapter). 3
chapter; 1
chapter? 9
chapters 14
chapters, 9
char 35
charge 7
check 46
child. 2
child: 1
children! 1
chip’s 1
chocolate 2
chooses. 2
choosing 2
chop 5
chose 1
chosen. 1
chunks. 3
circuitry 2
citations 1
clarity. 1
class 12
class, 3
classic 26
classic, 1
clean). 1
clean; 2
cleans 2
clear; 1
clears 5
cleverness, 1
close 11
close, 1
cluster 2
clustering. 1
co-advisors 1
coalesces 2
code; 3
code? 9
codes 2
codes, 2
coined 2
cold 3
collect 1
column 5
combat 2
combinations 3
combining 7
comfortably 3
commands 2
commands, 1
common) 1
commonly 13
commonplace 1
commonplace, 3
communicating 3
communication 2
company). 1
compare? 1
compares 1
competing 6
compiler; 2
compilers 1
compiling 1
complete) 1
completed), 2
completely 6
completes. 4
completing 1
completion 4
completion); 1
completion, 2
complex. 2
complexity 10
complexity, 1
components 1
comprise 3
comprised 3
compromised 1
computation; 2
computations 1
computers 7
computers, 1
computing 16
computing, 4
concatenating 1
concept: 2
conception 2
conceptual 4
conceptualized 1
concerns? 2
concert 2
concluding 1
concurrency). 1
concurrency; 2
concurrency? 1
concurrently-running 1
concurrently. 1
condition). 1
condition3 1
condition3, 1
condition? 1
conditions 9
conference. 1
confidence 2
configure 5
configured 1
confined 1
confirm 6
conflict 2
confuses 1
confusion. 1
congratulations! 1
consideration 2
consistency 3
consists 8
constant 1
constructed 4
constructed, 1
consume 5
consumed 2
consumer. 2
containing 4
contents 28
contents, 1
context-switching 2
continues. 6
continuing 4
contrast 7
contrast, 10
control-c) 1
controlled 8
controversy 1
convention; 1
conventions, 1
converted 1
convoy 2
cooking 1
cooperatively 1
copy-onwrite. 1
cores. 1
corn 1
corner-case 4
corre-sponding 1
correct 42
correct, 2
correctly; 1
correctly? 3
corruptions. 1
costly 7
costly, 6
are 870
costs. 1
couldn’t. 2
are, 4
count) 3
count++; 1
arg. 2
count--; 1
arg: 1
argc/argv 1
counter. 12
argue 1
counter: 1
argued, 1
counter_t; 6
counterbalance 1
arguments. 4
counter’s 2
counting; 2
arguments: 3
coupling) 2
course) 1
argv 3
argv[1]; 1
covers 4
crazy! 1
crazy) 1
created. 3
credentials, 1
critical; 2
arise 12
critique 2
cross 1
arise, 4
crux 3
arose: 1
curious 3
curious, 1
curr->pass 1
arrange 4
currency; 1
arranged 1
arrangement 1
currently-running 9
arrangement, 1
curse 3
customer 2
array) 3
cycle. 1
array), 1
cycles). 2
dandy. 1
array.c 2
dark 3
array[i] 1
darned 1
arrive; 1
arrives 4
article 3
data 252
data, 18
datacenters, 1
date 2
and 2770
date, 2
daunting 1
and, 5
day 5
anomalous 1
day, 2
deadlock). 2
another. 6
answer; 3
deal 16
deallocate 1
answer? 3
deallocated 4
answers 3
deallocations 2
answers, 2
anti-hero 1
anticipating 1
any? 1
anymore, 1
decide 23
anytime 1
decided 6
anywhere 6
ap-proaches 1
appearing 1
decision 15
application; 1
decision, 4
declaration 5
decreases? 1
decrement(counter_t 4
dedication. 1
deep 7
deep, 1
defaults. 2
applications 29
defend 2
defense 3
defense, 1
applications, 6
defer 2
deletes 1
applied 5
demand-zero 1
appreciation 1
demanded 2
approach) 1
demands. 1
approach), 2
demonstrate 5
approached 1
demonstrated 2
demoted 1
appropriate 3
approximate! 2
approximately 1
depending 12
approximating 1
depicted 2
approximation 1
depressing. 1
architectural 2
dequeue 5
dereference. 2
derivatives 1
descheduled, 1
describing 4
descriptor). 1
descriptor? 1
architecture 18
descriptors 5
descriptors, 2
architecture, 4
area. 1
arena 1
design 22
design, 1
designers. 2
desire. 1
desired. 9
argument 22
desk? 2
desktop 4
despairing 1
argument, 11
despite 6
arguments) 1
destination 2
a 3927
arise; 1
destroy 1
a+b,b+c,c+d,c+e,c-. 1
destructive 1
a1). 1
arise? 3
detail; 1
a4 1
a:100:100,b:100:100,c:100:100) 1
a:100:100,b:100:50,c:100:50) 1
a[0] 2
a[4] 1
a[8] 1
a[i]; 1
arises 21
about-to-be-run 4
arises, 4
details 46
about. 6
arising. 2
details); 2
about: 1
arranges 1
details, 4
detector 1
determining 4
deterministic. 2
developed. 1
developer 2
developer, 1
developments 1
device. 1
devices). 1
devices? 1
diagnose 1
did), 2
above 50
didn’t 11
die 1
array 46
die, 1
died 1
differences 2
array, 7
differentiate 2
array-based 2
differently. 3
array[1000]; 1
arrive: 1
difficult 10
arrives; 1
digest. 1
art 1
directed. 1
articles 2
directions. 3
above, 39
directives 1
directly. 3
abstractions 7
dirty-page 2
abundant, 1
disassembler 2
ask 12
abusing 1
ask, 1
access; 1
asking: 3
accessed. 4
accesses). 1
accesses; 1
aspects 10
assembly). 1
assembly? 2
accidentally 12
assert(count 2
accommodate 4
discuss 53
discuss, 1
assert(rc 5
discusses 1
accordingly. 3
discussion. 1
assert(tmp 2
discussion: 1
assigning 1
account 6
disk). 3
associative 1
disk-access 1
assume) 1
disk-drive 1
disk; 4
achieve 12
disk? 2
achieved 1
disks 4
achieved, 1
disks, 1
achievement 1
dismantling 1
display 2
distinct 2
acquires 8
diverse 1
assuming 25
acquisition 6
dividing 6
acquisition, 2
do; 2
assumption 10
assured 1
do? 9
atomic. 2
documentation 3
atomic_decrement 2
documents, 1
actions 18
does). 1
actions, 1
doing.” 1
activate 1
dominant 4
actively 4
atomically 16
activities 3
atomically, 2
activity 3
ad 3
atomicity 8
adapted. 1
attacker 4
attacker, 1
attacks 5
attacks, 3
attaining 1
attempt 14
attempt, 2
attr 2
attr, 4
attributes 4
done 72
author 2
automatic 2
done, 6
add 82
done\n", 2
add, 3
don’t. 1
available. 14
double-check 1
avalanche 1
double-click 1
additional 15
doubt 2
addl 2
down-wards 1
addr:0 4
downsides. 1
address(es). 1
average 16
address). 1
downward 1
address; 3
downward, 1
address? 1
draw 2
addresses). 1
dread: 1
addresses): 1
addresses; 4
drive 5
addresses? 1
drive, 2
administrator 2
adopted 1
advances 1
advantage. 1
affect 10
avoid 50
due 19
affinity; 1
avoided; 2
affordable; 1
duration 2
avoided? 1
afterwards. 1
d’un 1
awake. 1
again) 3
earlier. 2
age-old 1
award 4
ago: 1
away.” 1
ease 4
ahead. 1
axes. 2
ease-of-use 1
al-though 1
back-to-back 1
al.’s 2
back. 2
alas 1
background; 1
backing 1
alas, 3
backward 1
albeit 2
backward, 1
algorithm. 2
algorithm: 2
algorithms). 1
alive, 1
bad 31
easy 50
easy, 1
eat 6
as 1029
aside: 1
asked 2
asked, 1
asleep... 1
eax 20
eax, 3
aspect 15
eax=50. 2
eax=51), 2
ebp; 1
base 66
ebx; 1
base); 1
assembly 13
ecosphere 1
base, 1
assembly, 3
edit 2
base-and-bounds 4
assert(fd 1
edition. 1
assertion 2
editor? 1
assigned. 1
effective) 2
assistance. 1
based 17
bash), 1
effectively 5
basic) 1
effectively, 1
basics. 1
battles 2
associated 18
efficacy 2
assume: 1
efficient) 1
assumptions. 2
atop 1
attack 9
attains 1
efficiently 10
attempted 2
efficiently, 1
attempts: 2
attention. 1
attentive 1
effort 3
attribute 2
egomaniac. 1
authors. 1
available; 1
avenue 1
avoidance. 2
avoided 2
avoided, 1
element 14
aware 2
awful! 1
element, 2
elsewhere. 2
embarrassment. 1
background 15
all 247
emphasis 1
bad! 1
badly 1
badly, 1
employ 4
balance. 1
balanced: 1
all, 17
base-and-bound 3
all-too-trusting 1
basically 6
basics; 1
basing 1
batch-like 1
battle 1
enables 23
encounters 2
allocate 31
endless 4
allocate(10). 1
ends 4
end” 8
enforcement, 1
engineering; 1
allocated 46
because 93
allocated, 2
because, 1
allocation). 2
becoming 2
before), 2
allocations 8
begins 13
begin” 6
allocator 26
behalf. 1
allocator, 5
behaves. 5
allowed), 1
behaving 1
enough 32
enough, 5
allowing 22
behavior 35
along 10
also: 1
behavior, 3
altered 1
behaviors) 1
alternately 1
alternately, 2
believe 5
alternating 2
below). 3
below; 1
below? 1
benefits 5
ensure 34
better. 7
biased 2
always 53
big. 3
always!). 3
always, 5
amortization 1
amortized. 1
amt; 2
bigger 19
amt>0) 2
bigger, 2
analogous 1
billions 1
animals 1
bit! 1
anon) 1
bit) 1
anonymous 4
bit), 1
enter 32
bits. 2
bits: 1
enterprising 2
black). 1
blank 1
entirely. 4
entity), 1
blocked 16
blocked); 2
blocked, 3
blocks. 2
blocks: 1
bold). 1
bolts, 1
book! 1
book), 2
entries 22
books. 1
bookstore 1
entries); 1
boolean 2
another 105
boosted 3
entries, 5
another, 12
answer! 1
boot 11
answer) 1
borrowed 1
answered 1
answered, 1
both? 2
answers. 2
bother 1
anyhow). 1
anymore. 1
bottom). 2
anything? 3
bounce 1
appear 4
bound 4
applicable 2
bounded-buffer 1
bounds) 1
bowels 1
applications. 12
brag 4
approach). 4
approach? 3
break; 5
approaches? 1
breaks 2
approximates 1
breath. 1
arbitrarily 2
arbitrarily, 1
brief 4
architecture. 4
broad 4
architectures; 2
broadcast(), 1
are! 3
browser 1
browser, 1
entry 55
area 5
aren’t 5
buddy 11
entry, 8
arg; 7
equation 1
buffer. 6
argc 1
era. 1
buffering 1
buffers? 1
argc, 23
args 8
error 17
args->a, 4
argument. 2
error, 3
argument: 2
arguments; 1
arises. 2
etc. 5
arises: 1
etc.); 1
etc.)? 1
etc., 1
around 42
around, 4
array. 4
array.c) 1
array: 1
array’s 1
arrival 1
build 118
build, 2
arrive 21
be 785
be, 2
arrived 6
built 19
art. 1
built-in 1
asides 1
ask: 2
bunch 6
asking 4
become 32
aspiring 1
burst 3
assertion), 1
business 1
assign 3
assignment, 3
association 1
buy 6
associative. 1
bx=1 2
bx=1000,bx=1000 2
bye, 1
assumes 14
assumption. 2
assumption: 1
assumptions? 1
byte 15
byte(s) 1
bytes) 3
bytes), 3
c->local[cpu]; 2
c->threshold) 2
c->value++; 4
c->value--; 4
before 130
before!” 1
c1 10
before, 7
begin. 3
c5 5
begin... 1
c5, 1
beginning: 1
behave 12
behaved 1
behavior? 2
behaviors 2
even 148
event 3
below. 13
belt, 1
benchmark 3
benefit. 1
best-case 1
bet 2
better) 1
better.” 1
beyond. 1
cache 86
ever 19
bidding. 1
binary. 1
ever, 1
cache, 11
everywhere, 1
cached 3
caches) 1
evicted. 2
cake 4
evicts 3
bit 93
bit, 10
bits) 1
bits), 2
bits1 1
bits”. 1
bitwise 1
exactly 39
bizarre 3
exam? 1
examines 3
block 22
block, 2
bombs, 1
book 47
example. 31
example... 1
book, 18
boost 8
example: 8
boost, 1
call 230
boots 2
examples; 2
call); 1
boots, 1
exception; 2
born. 1
born: 1
exceptions 3
borrow 2
call, 19
excited 2
campaign 1
both. 4
can. 3
bottleneck 1
canonical 3
boundary; 1
capability. 1
care! 2
careful. 1
carefully! 2
exclusion 21
bounds 48
bounds, 5
exec() 13
brand 2
break. 1
break: 1
at 576
breaking 1
exec(), 6
breathe 2
case 62
execl(), 1
brilliant. 1
case); 2
brk 1
execlp(), 2
brk, 1
broadcast 1
atomic 25
broaden 2
atomic_increment 2
broader 1
atomically. 2
broadly. 1
atomically: 2
broken. 3
executable 13
attachment 1
brought 10
attacks. 3
executable, 3
brutally 1
attacks2 1
btrees. 1
buffer), 1
attain 3
buffer[MAX]; 1
attainable, 1
buffer[use_ptr]; 1
attempting 1
buggy! 2
attributes. 2
author. 1
bugs. 11
authors’ 1
case, 105
builder 1
auto-magically 1
cat 3
builds 1
executes 23
categories: 1
built; 2
automatically 6
executes, 3
automatically, 2
caught 8
executing. 1
auxw 1
causes 5
cell 1
centers 1
centers, 1
century. 1
cesses. 1
chagrin 1
available 31
execution. 17
challenging 6
execution: 1
challenging, 1
available, 11
execvp(). 1
chance. 2
average. 1
execvp(myargs[0], 2
avoid. 3
change. 6
changes; 3
exhaustive 3
changes? 2
existed 1
chapter! 1
chapter), 1
avoiding 16
exists. 4
awake 1
chapters. 6
away; 1
characteristics 2
awesome 2
characteristics, 1
cheaper, 1
awesome, 3
check. 4
awoken 3
exit 13
checking 6
ax 4
checking, 1
exiting. 1
ax=0,ax=1 2
ax=1,ax=0 2
expectations? 2
axis 4
b; 4
expected 7
expected, 4
experimentation. 1
expires. 1
explained 2
but 288
child 59
but, 1
bx=0,bx=1 2
bx=100). 2
child, 8
back 65
chip 1
back, 4
chip, 2
explicit 22
back-and-forth 1
choices. 1
exploited 2
bad. 7
chooses 3
exploits. 1
balances 1
chopping 1
express 1
bandwidth 3
barest 1
chosen 5
barons 1
extracts 3
chosen, 1
base. 1
chucking 2
extreme 4
base/bounds 5
chunk). 1
basi-cally 1
eyes 2
facets 2
basics 13
chunks 13
be. 11
be: 2
chunks, 4
circumvent 1
beautiful 9
clarify. 1
beautiful, 1
classically 1
fact 20
clean), 1
cleaned 1
became 21
bed. 2
before. 7
began 4
clearly 17
fact, 28
clock 11
close(fd); 1
fail. 2
begin 32
closer 2
failing 3
cloud), 1
begin\n"); 5
failure. 1
begin\n", 2
clustering 3
faint 1
clustering, 1
cmp 1
cmpl 1
beginning 15
co-authors). 1
beginning, 1
co-exist 1
begins! 2
co-workers 1
begs 2
begun, 1
behave. 2
coalescing 6
behavioral 1
fair 19
behaviors. 2
fair, 1
behind-thescenes 1
coalescing, 4
coarse-grained 2
coarse-grained, 1
fair-share 7
code) 3
families 1
code), 4
family 5
code.” 2
code/stack/heap? 1
far) 2
codes. 2
being 54
fashion. 3
coherence 3
coherence, 2
below 11
colleagues 3
below, 2
benefit 1
collection 3
best; 1
com- 1
bet. 2
combina-tion 1
better-than-expected 1
fast 19
combines 1
better? 1
fast, 6
come 9
beyond 20
come–great 1
big; 1
fault. 7
command-line 2
big? 1
commands: 1
faulting 2
biggest 4
big” 1
commercial 3
favor, 1
billions) 1
commonalities 1
fd 1
binaries, 1
commonly-used 2
communicates 1
compacted 1
binary 14
binary, 1
comparing 5
bind 1
complementary 1
bit. 5
complete). 1
bitmap 2
bits). 4
bits? 1
complete; 5
black 3
fetch 29
complete? 3
blame 3
completed; 1
fetch, 2
block. 3
completely: 1
blocking 2
completes 6
fetches 10
book. 23
fetches, 2
books). 1
completes, 9
bookshelves 2
boost. 1
completion. 2
boring 1
born 4
born, 1
complex 22
complex, 4
complexity. 2
components. 1
components: 3
comprehensive 2
compromised. 1
computers. 1
computing. 1
computing2 1
both 87
both, 1
bottleneck. 2
concept 9
bottom 10
concern 5
bottom, 2
bouncing 1
concern, 3
bounded 8
bounds. 5
concise 7
box, 1
concludes 1
boxes 2
conclusions 1
bragging 2
concurrency), 1
break 5
concurrent) 2
break, 1
briefly 7
few 102
brilliant!” 1
concurrently 9
brings 1
few, 2
concurrently, 1
broadly 1
fewer), 1
broken 1
broken, 2
fewest 2
buffer; 6
field. 1
buffers 6
field: 1
bug; 2
cond 17
condition) 1
bugs 6
conditional 1
bugs, 2
busy. 1
conditions. 5
byte) 2
bytes. 3
configuration 2
c->local[cpu] 4
confusing 2
confusing, 2
c2 10
c2, 1
connection 1
consider-ably 1
c6 6
figure 35
c6, 1
c:100:50 1
cabinets 1
cache) 1
considered 10
caches. 1
consisted 1
constant. 1
figure, 15
caching 9
constituent 1
calculates 1
figured 2
constraints 2
calculation: 1
file-system 1
constraints, 1
calculations? 2
constructed. 1
file. 2
call) 1
consult 2
by 705
call), 1
file.txt 2
byte). 1
call1 1
file: 1
files” 1
file’s 2
fill; 2
filled. 1
consumer 26
fills 3
consumer, 6
consumers), 1
bytes 41
contain 6
contention; 2
bytes, 10
contents. 2
context-switch 4
context-switches 1
context; 1
called 111
contexts 2
contexts, 1
called, 10
caller. 2
caller’s 1
calls. 5
final 51
contiguous 13
calls: 3
findings 2
camp, 1
continue; 2
candidate 3
fine 7
continues 7
fine, 1
continuing. 2
finish), 1
continuously, 1
control-z 1
can’t 30
control? 3
carts 1
carved 1
case) 1
controls 5
finished 14
cases. 3
control” 2
casting 1
convenience). 1
catastrophic, 1
converts 2
cooperative? 1
finished, 10
copy! 1
first-out) 1
copyon-write 1
cores 1
cause 24
caused 2
correct. 2
caused, 1
correct: 1
center 2
first. 10
correcting 1
fit; 1
central 7
correctly! 2
fit? 1
centralized 1
challenge. 4
cost; 4
challenge: 9
costly. 3
fits 9
chances 4
fits, 1
costs 8
c 177
costs, 1
changes 20
c->global 4
couldn’t 2
five 8
changes, 1
c->threshold 2
channel 1
c->value 4
c4 6
chapter. 25
c4, 1
chapters). 2
cache). 1
characterize 1
cheat 2
cache; 2
check; 1
cache? 2
checkbook 1
caches 16
checks 25
child/parent 1
children 1
caches, 5
children, 3
caching. 1
choice. 1
calculation 1
choice: 1
calculation, 1
choose 5
chops 1
call). 5
chores.” 1
call-ing 1
call3 1
call; 2
flag 73
flag)? 1
call? 4
called. 4
chunk 44
chunk, 3
circular 1
flag, 14
citation. 2
caller 14
cite 2
flag[0] 2
caller, 4
counter 116
cited 2
calloc() 1
flash-based 2
claims 2
counter); 6
flavor 2
class? 2
flight, 1
clean-page 2
cleaning 1
floor 1
clear. 2
clear: 6
counter, 15
flush 5
clearing 2
counts 4
focus. 1
clever 5
clever, 1
focusing 2
client. 1
client/server 1
foil 2
couple 10
client’s 2
close(STDOUT_FILENO); 1
course). 1
closes 3
follows 6
coverage 2
closest 1
clues) 1
for? 2
coverage, 2
co-authors 5
forces 2
covered 2
coalescing) 1
calls 88
forever! 2
coarse 1
forget-ting 1
cpu 4
calls, 3
cocoon, 1
forgets 1
can) 1
craft 2
canceled, 1
crazier 1
fork 7
candidates; 1
fork(); 4
form. 2
formally, 1
cannot 21
forms; 1
code. 44
formula 2
care 10
formula, 1
care, 2
forth). 1
careful), 1
code: 7
forth; 1
cold-start 2
forward! 1
collaboration 1
forwarded 1
carefully 17
columns 1
found. 2
carefully, 6
fourteen. 1
combine 7
case; 3
combined 1
create 49
fraction 5
create(); 1
case? 5
coming 7
fragmentation; 1
create, 2
command. 2
fragmentation? 1
commands; 1
fragmented) 1
frames 5
cases 29
framework 3
created 22
common 61
common, 1
created, 14
communicate 2
creation; 1
cases, 27
community 3
creativity 1
community, 1
cast 4
creator 1
compact. 1
catches 1
crime, 1
cause. 1
compaction 3
critically, 1
caused. 1
company’s 1
caution 1
comparison: 1
crux: 5
compete 1
curious. 1
compete, 1
competitive 1
curr 6
compile 11
curr); 1
compile-time 1
compiled 6
compiled, 1
currency) 6
certainly 32
current->next; 1
certainly, 1
current->tickets; 1
chain 2
complete 23
challenge 5
challenge, 1
complete, 7
change! 2
complete?) 2
changes. 1
completed 5
completed, 2
completes1 1
currently 27
changing 9
currently-pointed 1
completion; 5
complicate 1
cycle 4
cycles) 1
complicated 13
complicated, 1
complications 1
comprises 1
daemon 8
compulsory 5
compulsory, 1
dangerous 5
computation. 2
dangling 1
compute 12
chapter 37
computed 1
computer. 1
data. 9
con- 1
concatenate 2
databases 5
concerned 5
concerned, 2
datacenters. 2
chapter, 16
conclude 2
date. 1
chapters) 1
deadlock) 2
character. 1
concurrency. 7
cheapskate. 1
dealing 2
concurrency: 2
cheating 1
concurrently) 1
debugging 1
concurrently), 2
child? 2
debugging, 1
concurrentlyrunning 1
chips 3
decade. 2
condition. 8
condition: 1
decay-usage 2
conditionals. 2
decide: 1
conditions; 2
choice 8
free 187
configurable 1
decides). 1
choice, 2
configure; 1
free()? 1
confines 1
decimal), 1
chopped 5
confront 1
free(50). 1
decision. 2
chosen). 1
connects 2
free(rvals); 2
decisions? 1
cons. 1
chunk. 4
free(x); 1
consider. 2
chunks). 1
declare 4
chunks; 1
declared 1
free, 5
considering 6
citation 1
decrease 2
freed 3
constants 2
decreased, 1
constants, 1
freedom 1
class), 2
constitutes 1
deep... 1
classmates; 1
default? 1
construct 5
frequency 5
construction. 1
defaults 3
consulted 1
clean 9
consulted, 1
defaults, 2
frequent 4
consumers. 1
defeats 1
consumes 2
frequently; 1
definite 1
clear 12
degenerate 1
friend: 1
contending 14
clear, 5
degree 3
contention 4
from. 5
deletion, 1
contention, 2
client 5
full). 2
delivered 2
client, 2
full; 2
clock; 1
close(), 1
delve 5
closing 2
demand? 1
closing, 2
demands 2
cloud 2
demand” 1
cloud-based 1
clustered 1
depend 3
coalesce 2
depends.” 1
context 70
depicts 1
context, 2
deployed. 1
contiguously 2
depressing 1
depths, 1
continue 10
dereference 1
continue, 1
continued 1
descheduled. 1
function 41
function, 3
describes 6
future; 1
game 4
description 9
game, 1
description, 1
gcc) 1
descriptors. 1
gdb) 1
design. 2
design: 1
designate 1
control 79
designated 2
control, 4
control-c 1
convenience 2
convenience, 1
designers 9
convenient 1
designers, 1
converge 1
converse 2
designing 3
convince 1
convoys, 1
cooked 1
desire 7
desire, 1
general 41
cool 17
cool, 1
coolest 2
cooperative 5
copy-on-write 5
copy-on-write, 1
copy. 1
general, 18
copying 4
generalize 1
generalized 1
core 8
generalized, 1
core, 5
correct; 1
generates 10
correct? 3
correctly-working 1
get: 4
desired 52
getpid() 1
desired, 1
correctly. 8
desktop. 1
getpid()); 9
correctness. 3
destination. 1
getpid(), 2
correctness: 2
destination: 1
gettid() 2
destroy()) 2
gettid()); 4
destroying 1
gettimeofday()). 1
corresponding 10
gettimeofday(); 1
destruction 2
destruction, 1
detail10 1
detailed 8
getting 33
cost 49
cost, 5
gives 15
costly; 2
glance 1
globally 4
globally-shared 1
gnu 2
details. 34
count 25
detects 1
counter) 1
counter++; 1
counter1 1
counter1, 1
code 391
countermeasures 1
code); 2
determines 17
go 37
go, 2
course 20
deterministic 8
deterministic, 2
deterministically. 1
goals 15
goals, 1
code, 73
cofounded 1
cold- 1
colleagues’ 1
collected 1
collectively 2
goes 27
collector 2
going. 1
developed 23
color 1
good! 2
columns. 1
goodness); 1
developer. 2
columns: 2
good”. 1
developments. 1
goofs 1
combination 11
course, 73
court, 1
comes 14
covering 7
got 16
device 11
cpu.c 2
gracefully, 1
command 12
granting 1
device, 1
crash 2
command, 4
granularity, 2
deviously 1
crash, 1
commandline 1
diagram). 1
commentary 1
crashes 2
diagrams 1
commonlyused 1
graph 11
community. 1
crashes, 3
differ 2
compact 3
graph, 6
crazy 3
differ, 2
grasshopper, 1
companies 6
cream.” 1
differences. 2
companies, 1
greater 4
differently 1
company 1
greater-than 1
differently, 1
company, 2
create() 11
difficult. 3
compare 6
grep 7
create()); 2
digested; 1
compare-and-exchange 2
groups. 2
create(), 2
direction; 1
grow; 1
compare-and-swap 10
compare-and-swap, 2
creating 9
directly 8
compared 7
grows 16
comparison 7
grows, 4
directly, 5
comparison, 3
guarantee. 1
competitive. 1
directory; 1
creation 20
guard; 2
compiled(!) 1
guide 1
habits; 1
creation, 6
hacker 2
criteria. 2
halted, 1
dirty 11
cruces 1
hand-controlled 1
compiler 26
dirty, 2
handle. 1
compiler, 2
curr->next; 4
complain 2
curr->stride; 1
disable 3
complete. 6
currency. 2
disappear). 1
complete: 1
current: 1
completes? 1
disappears 2
handler 24
completion), 1
currently-executing 2
complex-instruction 1
disassemble 2
handler, 3
complicated. 4
cycles. 4
disassembler. 2
hands 4
complicated: 2
daemon1 1
discipline 1
hang 1
component 5
dairy 1
discipline, 1
happen. 2
computation 2
danger 2
disciplines) 1
happen: 1
computation, 2
darker 1
computational-overhead 1
happening 1
disconnection 1
darn 1
happens; 2
data). 1
happens? 2
discovered 4
data; 1
discredited 1
data? 1
happy 5
discretion 1
hard-and-fast 1
harddisk 1
discussing 4
database 13
harder 4
computer 59
datacenter. 1
computer, 3
days 4
computers) 2
computers), 2
days, 6
de 1
discussion 17
concepts 7
deal? 2
discussion, 1
concepts, 1
deallocates 1
conceptually 2
disk) 3
debate 2
concern; 1
debug. 1
disk), 2
concerns 3
disposal.” 1
concrete 1
debugger 6
distribution 1
concrete, 1
decides 11
dive 4
decimal. 1
decisions 7
divides 6
concurrency 36
decisions, 2
do) 1
declaring 1
do), 1
concurrency, 10
decreasing 1
documented 1
deeper 5
does), 1
deeply. 2
default 7
default, 2
defeat 1
defense; 1
defensive 1
defined. 1
definitely 4
definition 6
delaying 2
deletion) 1
delight 1
concurrent 80
doesn’t 51
delving 1
concurrent, 2
concurrently; 1
doesn’t, 3
concurrently? 2
doing; 1
cond; 2
doing? 2
demand 11
cond_t 5
demonstrates 3
deploy 1
deployable 1
done. 10
deployment, 1
depth 2
deschedules 3
hardware 263
describe 14
hardware, 15
hardware-based 5
harming 2
harsh, 2
has. 1
hash_t; 2
hate 1
haul, 1
have. 3
have: 2
condition 81
condition); 1
described 36
descrip-tion 1
condition, 7
design-ers, 1
confections 1
designer, 1
configurations, 1
designs 1
confining 1
don’t 81
designs, 1
confuse 1
design” 1
confused 1
don’t, 2
desirable. 1
head 39
confusing; 1
double) 1
desktops 1
head, 1
double-precision 1
dest_buffer[100]; 1
connected 4
head_lock, 2
doubt. 1
connections 1
detail. 12
details). 4
details; 3
consider 26
down 25
considerably 1
detect 5
down, 1
deter- 1
consist 2
download 2
conspired 1
downsides, 1
const 3
downward. 3
constantly 3
draw. 1
drawn 1
heap 76
constructing 3
heap); 1
dreams 1
drink 2
construction 7
drive. 2
consults 1
driven 1
consume! 1
determine 34
heap, 22
consumer; 1
driver 1
hearing 3
driver8 1
heart. 1
heavily 2
determined 9
dummy 4
heavy-handed, 1
consumers 9
developer; 2
held) 1
duty. 1
consumers, 2
dx 2
held), 7
consuming 3
help) 1
consumption 1
helped 2
dx=3,dx=3 4
developers 12
dynamics 1
here. 11
developing 7
device), 1
e.g., 8
here: 10
here’s 1
devices. 4
hexadecimal), 1
hey, 1
hide 1
hierarchy; 1
high. 3
contains 32
high: 1
diagram 10
earlier 18
contention. 2
higher-priority 2
diagram); 1
context. 2
highlyfragmented 1
earlier, 3
contiguous; 1
him 1
ease. 1
diagram, 6
hints 4
easy-to-use 2
dictates 1
continue. 7
continuous 1
easy. 3
contributed 1
easy: 2
contributions 1
historical 14
control. 1
eaters 2
control: 1
eating 1
conundrum 1
history 16
convention 2
eax. 5
history, 3
did 22
cope 1
hit! 1
eax=50 2
did, 1
edx; 1
hit), 4
die). 1
hits. 1
effectively. 3
hoc 2
dies, 2
copies 12
effects 1
hogging; 1
effect” 1
difference: 4
hold? 2
efficiency; 1
holder 2
different. 2
efficiently. 1
different: 2
elapsed. 1
copy 18
differentiates 1
electrical 1
copy, 1
difficulties. 1
element. 1
copying. 1
digging 1
elements; 1
core. 2
digit 1
else? 2
corollary 2
directing 1
holds 38
correct) 1
elsewhere 3
direction 1
holds, 2
correct-ness; 1
elsewhere, 1
honor 1
direction, 4
honor, 1
email 2
honorable 1
emailing. 1
hood 1
embracing 1
hope. 1
emptied 1
host 2
hour 1
empty), 1
correctly 19
directory 18
correctly, 3
directory, 8
enabling 15
correctness 9
dirty) 2
enacted 1
correctness, 4
enacted, 1
cost. 1
disabling 5
encountered 1
disappear 1
cost: 4
end), 1
costing 1
disaster. 1
costs? 1
discipline1 1
end”. 1
disciplines. 1
energy-efficiency 1
discrepancy 1
discussed. 1
engineers 2
disk-like 1
enjoys 1
enlisted 1
disk. 14
enough. 2
displays 1
dissertation 6
enqueue 4
ensued 1
divide 6
divided 8
diving 1
entering 9
entirely 4
do. 18
entirety 2
do: 2
entity; 1
does. 1
could 137
does: 2
could, 1
entries. 3
count. 2
entries: 1
counter; 2
counterpart 1
counters 14
entry. 10
envisager 1
counters, 6
counting 7
counting, 2
counting-based 1
doing 76
course. 4
equal 19
doing, 3
doivent 1
equal, 2
dollars 2
equivalent. 2
dominate 3
cover 11
done; 1
era 7
cover, 2
done? 1
era, 1
crash. 1
double. 1
errant 3
crazy. 2
doubts 1
errantly-freed 1
create()6 1
downfall. 2
errorprone. 1
downside, 1
errors? 2
downward). 1
esi; 1
downwards 1
dramatic 2
essential 3
dream 1
est 1
drives 2
estimate 2
creates 34
drives, 1
creation: 1
evicted 3
creators 1
drop 4
evicted, 1
creature 1
dump”, 2
evil 1
credit 3
exam- 1
criterion 2
examining 4
during 29
dustbin 2
dx) 4
dynamic 20
dynamically-allocated 1
dynamically-allocated, 1
e 1
example 131
critical 140
critical, 2
crucial 2
crude 2
ctxt 1
culprit 1
currency 4
how 441
how, 1
current 37
however: 1
customer! 1
hptr 1
customized 1
http://people.freebsd.org/˜jasone/jemalloc/bsdcan2006/jemalloc.pdf. 1
http://www-formal.stanford.edu/jmc/ 1
http://www.sparc.org/standards/SPARCV9.pdf. 2
cycles 11
http://www.unix.org/version3/. 1
cycles, 3
https://birrell.org/andrew/papers/035-Threads.pdf 2
cyclic 2
cyclic-sequential 1
hugely 3
data) 2
data), 1
data[100] 1
hundred 7
datacenter 1
datacenter, 1
day! 1
days. 1
hybrid 10
days... 1
hybrid, 1
days: 2
hypervisors, 1
de-queue 1
deadlock 5
deallocation, 1
each 340
debug 1
each, 1
debug, 2
eagerly, 1
decayed 1
earlier) 1
example, 262
deciding 5
i.e., 29
exceeding 1
decimal 2
earliest 13
i5 2
decisions. 2
i=0 1
declares 2
decodes 1
iMac 4
idea; 1
decreases 3
decrees 1
idea? 2
dedicate 1
ideal? 1
dedicated 2
deeper. 1
excellent 42
deeply 1
excellent, 4
deeply-nested 1
exceptional 5
excessively 1
define 9
exchange1 1
exciting! 1
defined 5
definitive 1
degenerates 2
early 68
exclusion. 6
eases 1
delay 2
exec(). 2
ideas 36
delete, 2
exec(): 1
deleted 1
ideas, 3
deleted); 1
executed), 2
identifiers, 1
deliver 8
idle 5
demand. 1
easier 19
idle, 1
demanding 3
easier, 1
ignored. 1
demise 1
easily. 3
dense, 1
easy; 1
dependence, 1
eater 2
dependent 1
executing 26
edi; 1
illegal 11
executing, 2
illegal, 1
depends 5
effect 4
illegally). 1
depiction 2
illusions 1
deployment. 2
illusions, 1
derive 1
descheduling 2
describe. 1
descriptor 1
descriptor, 2
effective 12
design) 1
effective, 2
efficiencies 1
imagine 41
efficiency 8
designed 9
efficiency, 3
imagine, 4
designs. 1
imbalance. 1
desired). 1
execution 48
immediately. 2
desires 1
immense 1
desk 1
efficient 19
impact 5
execution, 8
destroy() 2
efficient, 5
impact, 3
execv(), 2
destroyed 1
execvp() 1
efficiently; 1
execvp(), 2
implementation 7
implementation)” 2
exercise 4
efficiently? 5
implementation, 2
exert 2
efforts 2
exhibits 2
implements 6
eight 1
exist). 1
implications. 1
eip; 1
detail 26
exist; 2
existed. 2
importance 8
existence 3
importance, 1
detail, 6
exists 3
details! 1
exists, 3
details) 1
exit()) 1
details1 1
detecting 1
exit. 5
deterministically) 1
exiting 2
either 49
detour 1
exits; 2
exits? 2
elements 8
expand 1
expect; 1
develop 12
develop, 2
expected. 4
developed; 1
developers. 2
expected: 2
important 63
expects 3
development 13
important, 7
device; 1
experience 9
improve 17
experiments 3
else 45
devices 15
expert 3
devices, 2
improved 6
expert, 1
else, 7
did. 2
improvement 3
explains 2
else-where, 1
differ? 1
exploring 2
in-between 5
employs 3
exporting 1
in-terface 1
empty. 1
difference 18
expose 1
in/out 1
emptying 1
exposed 1
in; 2
difference, 4
emulate 2
extend 2
in? 2
emulator 1
inadvisable 1
extent 1
inc 1
en.wikipedia.org/wiki/LoadLink/Store-Conditional. 2
incl 1
enable. 2
inconclusive 1
enabled. 1
enacting 1
incorporate 7
encapsulated 2
extra 18
incorporated 4
encounter. 1
fact. 2
encountering 1
fact: 3
encourage 3
encouraged 1
increase 20
end-of-string 1
increased 3
end. 1
increased, 1
fail 13
ending 1
incremental 1
failed; 2
enemy? 2
incrementalism; 1
engineering. 1
incremented 4
incremented, 1
enjoy 3
indefinitely. 2
enormously 1
enough; 1
independent 4
index. 1
index: 1
failure 21
indexing 1
fair. 1
familiar; 1
indicating 8
ensures 14
indivisible 2
family. 1
industry 2
inefficiencies. 1
famously 3
fancy? 1
inefficient. 4
far; 1
inexpensive 1
fashion 4
infinite 6
fashion, 1
influential; 1
enters 21
info: 1
fast. 5
entities 5
faster; 1
entitled 2
fastpath) 2
entity, 3
entries). 2
entries; 2
fault 12
entry). 1
different 196
entry; 2
fault, 7
different-size 1
faulting. 1
entry? 1
different-sized 1
information 57
differentiation 1
enum 2
favorite 8
information, 6
differently; 1
informs 1
environment 4
feature 5
infrequently 1
environment, 2
differs 1
epic 1
inherently 2
equally 1
difficulties 2
inherits 1
equation; 1
feel 8
equivalent; 1
init: 2
difficulty 4
error-prone. 1
digest; 1
error; 1
initial 5
fetch-and-add 8
error? 2
initialization. 3
fetch. 2
direct 14
fetching 4
errors 9
direction. 3
initialize 15
few. 1
essay 1
directory. 6
fewest-possible 1
initialized 8
directory: 1
essentially 11
initiates 4
field 15
disabled; 3
injected 2
field, 2
et 7
disciplines 2
innocent 1
fight. 1
innovations. 1
etc.). 1
etc.? 2
inodes, 1
input: 1
events 5
ins 1
discussed 24
inseparably 1
discussed, 1
insert(queue, 1
discussion). 1
inserted 2
insight 1
eventually 15
inspired 1
eventually, 1
evermore 1
installation 1
everyone 1
installation, 1
installs 2
everything 12
evict. 3
evicting 1
instead. 4
eviction 3
evil.” 2
evolution 3
evolved 1
disk 54
disk); 1
exact 26
file 95
exactly? 2
file, 9
disk, 14
example) 10
file.txt|wc 1
disrupt 1
files) 1
distinguish 2
fill_ptr 2
example), 10
examples. 3
filled 6
distributed 7
finally), 1
dives 1
exceeds 8
finds 10
except 6
fine. 2
exception. 1
finegrained 1
exceptionally 2
finished. 2
exchange1) 1
excludes 2
exclusion? 2
excuse 1
exec 2
exec(); 1
execl, 1
executed. 1
executing) 1
execution), 3
exhibit 3
exist 11
exist, 1
existed; 2
exit). 2
exit; 1
exit? 1
exited2 1
exits 3
instruction 130
instruction(s) 2
exits, 2
instruction, 19
instructions) 2
expect 15
instructions), 1
intact; 1
expect, 2
expected; 3
expected? 2
expensive. 2
integer 17
integer, 4
experiment 5
integers), 1
experiment, 1
intend 2
explain 1
intense 2
intensively 1
explicitly. 2
exploit 1
intent 5
exploration 1
exports 1
interact 15
extended 5
extension 1
eyes...) 1
interactive 20
facility 3
interactive, 1
fact). 1
interest 3
fail! 2
interesting. 2
intergalactic 2
interposing 1
interrupt), 1
failed 8
failed, 1
interrupted 14
failed\n"); 4
interrupted, 3
failure), 1
intervals. 1
failures. 2
intervals: 4
fairness. 6
fairshare 1
falling 1
familiar 2
family? 2
fanatics, 2
fancifully 1
fancy 7
fantastic 1
fantastic, 1
first 278
far 21
first, 20
first-fit 3
do 328
first-fit, 1
far, 13
first-in 2
fares 1
farmer 1
do, 11
fast; 1
document 1
documents/R4400 1
fixed 13
faster 16
fixed-sized 11
faster, 6
fast” 1
flag. 13
fault) 1
faulting”, 1
flag[self] 4
faulty 1
flag’s 2
feasible. 1
flavor. 1
feature-filled 1
flexibility; 1
features. 2
floating 1
feedback 5
fellow 1
fetch-ing 1
flow 14
few). 1
flushing 1
fewer 13
fg 1
figures 4
focus 21
figures, 1
file), 1
focuses 3
files. 1
fill. 1
followed 5
filling 1
follows. 4
follows: 21
into 339
foo 4
into, 1
footnote: 1
intricacy 1
for) 1
introduces: 1
forays 1
forcing 1
introducing 5
foreground) 1
foreman 1
forever; 2
fork()/exec() 1
introduction 17
introduction, 1
intuition? 1
intuitively 1
invention 1
inventory 1
find 86
investigating. 2
fine). 1
invocation 1
does 256
invocation, 1
fine-grained 3
fine; 2
does, 6
is. 7
fingertips. 1
doesn’t). 2
doesn’t? 1
is: 9
doing. 3
isolating 1
doing: 1
isolation 3
domains 1
finish 13
form 46
isolation, 2
domains, 1
finish, 2
issuing 6
done! 3
form, 6
done) 1
finishes 6
formally: 1
finishes, 1
double 3
format; 2
fire). 1
double-ing! 1
forth), 1
fires 1
it! 14
doubt! 1
first) 1
forthcoming 3
draconian 1
it) 5
first-level 2
fortuitous 1
dramatically 2
it), 4
dream. 1
it.” 1
fitting 3
drivers 1
it?!) 1
fix. 1
driving 1
item; 1
drops? 1
flag). 2
dynamically 1
flag.s. 2
items 9
each. 4
iterations 4
earlier). 1
iterations, 1
flag; 6
earlier; 2
iterations/threads: 2
easier. 1
itself; 3
flag? 3
itself? 1
jacket, 1
job). 1
job? 1
flags 10
easily 17
flags, 1
easy-to-read 1
flaws 1
eaters; 1
flexibility 2
eax=51. 4
ebx, 1
focused 3
economist. 1
focused, 1
ecx; 1
editor 2
editor, 1
effect. 1
effective. 3
efficiency. 3
eight-page 1
either. 1
found 84
ele-ment 1
emails 1
found, 2
foundational 2
employed 4
employs. 1
jobs 102
jobs); 1
empty 14
jobs, 14
join. 2
empty, 3
jumping 2
following 55
en-us/um/people/mbj/Mars 2
for. 3
for: 1
forcefully. 1
forefront 2
enable 24
forever 6
enabled 4
four 52
forever, 6
enabled, 4
forewarned, 2
enact 1
fourth 4
forget: 1
ence 1
fragmented; 1
forgetting 2
free()) 1
forgot 2
free(10), 1
encounter 7
fork(). 2
fork()ing 1
free(void 4
fork.py, 1
free-page 1
fork; 1
formal 2
formal, 1
free. 13
formed 3
forms: 1
freed. 3
formulae. 1
freeing 6
end 46
friend 3
forth. 10
friend, 2
fortunately, 2
end, 5
forward 4
end\n"); 5
fought 1
endeavors 1
four-level 1
endlessly 2
endlessly, 2
engineering 2
fprintf(stderr, 6
enough! 1
enough), 2
fragmentation. 6
fragmentation2 1
fragmentation: 1
ensuring 14
fragmented 3
entered, 2
fragmented, 2
frames; 1
free(). 6
free(): 1
free(ptr), 1
free; 5
free? 4
freed; 1
entire 46
frees 6
entirely; 2
entirety? 1
frequencies; 2
entry) 1
frequency; 1
entry), 1
frequently-used 1
frequently. 1
environment. 4
equals 3
friendly 5
errors. 1
frightening 1
escalation 1
esp; 1
from) 2
especially 13
front 10
frustrating 1
establish 3
just 304
frustration 1
establishment 1
kernel) 2
fully-developed 1
estimator? 1
kernel), 1
etc.) 11
key) 16
evaluate 6
kick 8
kill. 1
evenly 3
killing 2
fun 20
func() 4
functionality 2
functionality, 2
functions 7
functions, 1
every 52
fundamen-tally 1
kind 54
funky 1
evict 9
kind, 1
eviction. 1
evidence 1
furthest 5
knows 18
knows, 1
future. 9
l/stl 2
gadget), 1
laid 4
examine 36
landmark 3
example). 3
gaining 5
language. 3
example? 2
larger), 1
garbage 2
larger-scale 1
garbage-collected 2
largest 2
last. 1
late 4
examples 21
latency. 1
gcc 10
examples, 3
gcc, 1
excellent; 2
later. 9
lations 1
layout 2
gdb 5
ld-2.23.so 1
exception 15
gdb, 2
exception, 3
excess 1
excessive 3
exchange 2
general-purpose 8
excluding 1
general? 1
execle(), 2
generalizes 1
generated. 1
generic 4
lead 50
leaked 2
execute 29
leap 3
execute, 2
get() 7
getrandom(0, 1
executed 17
executed, 5
execution” 1
execvpe(). 2
exercises 4
exhibit. 1
exist. 5
exist: 1
existing 14
exit() 6
exit(1); 6
exit), 1
exited 1
exiting? 1
exits. 4
expect. 2
from 443
expect: 4
learn 65
expectations 1
from, 3
learn, 1
fullness 1
expected) 4
learned? 1
expensive 3
fully 8
least) 1
given 80
expensive!). 1
fully-associative 1
least- 1
glibc 3
fully-associative, 1
expensive, 6
least-frequentlyused 1
experts 1
function. 2
explanation 1
least-recently-used 4
functions; 1
leaving 3
explicitly 12
fundamentally 3
left). 2
funny 1
explore 5
leftmost 1
explored 2
legends 2
exploring? 1
expressed 2
len:10 6
extents 2
len:9 1
global 56
globallyshared 1
external 10
goal: 1
goals? 2
extract 7
gods, 1
extremely 3
gone 5
length 16
face 4
further 31
length, 1
further, 2
lesson: 2
factor 8
fusion, 1
lest2 1
fail? 1
fails 5
level. 7
fails, 3
libc 2
libc, 1
failure; 2
libraries) 1
failures 1
futex 16
library) 5
futex_wait 2
lie 1
gained 1
life. 2
fairly 9
life: 1
gains. 1
lifted. 1
gates 1
like) 2
fairness 7
gates, 1
fairness, 2
general. 1
good 99
generality, 1
fall 5
good, 2
familiarity 2
government 3
generalization 5
generalpurpose 2
graduate 9
grande 1
generating 2
graphics 2
generation 1
famous 21
graphs 1
far-reaching 1
great. 1
far. 1
greater). 1
far: 2
green 1
grew, 1
likely 73
fascinating 9
fashion). 1
fashion; 1
limits 6
group 12
limits, 1
grow. 1
line. 1
faster. 6
line: 2
fault3 1
growing 5
lingo) 1
fault; 2
grows? 2
fault? 1
growth: 1
link 6
gruesome. 1
list-like 1
faults 3
guarantees. 2
gum 1
faults, 2
feasible 1
guy 3
hack. 1
hackers 1
hacking 1
list. 21
features 17
list: 3
features, 2
list_t; 2
feeble 2
listens 2
fell 2
listing 4
fellow. 1
list’s 1
literally 1
felt 3
fetch), 2
fetched 5
few) 1
few), 2
fewer. 1
fields 2
fields, 1
had 57
field” 1
figure), 1
halt 5
figuring 1
hand. 3
file; 1
handed-out 1
handler). 1
handlers 5
files 10
handlers, 3
files, 3
fill 11
handling 14
get 126
handling, 1
happened 5
get(); 5
happening? 1
little 103
ghastly 1
happens. 3
load. 2
github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
load/store: 1
happens: 5
hard-andfast 1
loading 6
hard-to-find 1
locally-allocated 2
finally 27
hard-working 1
located. 2
hard. 1
location.” 2
giving 15
hardware). 3
locations. 1
finally, 8
global; 2
hardware-interpreted 2
lock(&mutex); 2
find!) 1
hardware-specific 1
globally-allocated 2
find. 1
hardware; 2
goals. 2
hardware? 1
harmful. 1
hates 1
haven’t 4
finding 15
fine! 1
fine-tuned 1
lock() 38
finish. 2
finishes. 1
having 29
lock(), 8
first; 6
havoc 2
going 29
first” 1
good? 1
lock) 4
lock), 2
he 20
grab 11
lock->flag 6
head->value; 1
grabbing 2
head; 2
grand 1
graph. 1
locked 7
fit 27
gray) 3
header 15
fit, 2
greater. 1
locks. 6
five-level 1
header, 4
heap). 1
greatly 4
locks: 3
fix 3
heap; 2
greedy 3
heap? 3
flag) 5
groups 3
logic 7
flag), 2
grows. 1
heavy 5
logic, 1
flag.s 2
grows: 1
heavy, 2
flag=0 2
heavyweight 1
flag[1] 2
flag[2]; 2
flags. 2
long-running 15
held 25
guarantee 21
flags: 9
guaranteed 1
held, 6
looked 8
flaws. 3
guessed 1
looking? 1
flexibility: 2
guessed, 5
helgrind 16
guest 1
helgrind, 2
flexible 9
guide. 1
lookup 12
flexible, 1
guide: 1
flexibly 1
lookup, 2
habit 2
flushed 1
hacked 1
fly 1
folks 1
hair 4
follow 2
hallmark 1
follow, 1
hand-assembled 1
help 38
help, 1
here! 1
following: 8
hand-over-hand 8
here) 4
here), 2
handed 4
herein. 5
hex 4
loop 41
hides 1
hierarchy. 2
high-level 6
handle 17
highest-order 1
handle, 1
highlighted 1
loop, 10
handled 4
handled, 1
lost 4
highly 7
handler. 2
highly-networked 1
handlers; 1
lost, 3
history; 1
hands-on 1
lots 12
happen 15
lottery.py, 1
happen, 2
love 2
happened; 1
loved 1
happy. 4
harder. 1
hit 32
hardly 3
low 10
low, 3
hardware-managed 9
lower-case 3
lowered 1
lowered, 1
hardware. 10
hit, 28
hog; 1
hardware: 3
lowest 9
hogs, 1
hardware’s 1
lwarx/stwcx 2
harm 3
m->flag 6
holding 12
machine) 2
home 3
machinery. 3
homeworks. 1
honest 1
machines. 6
macro 1
hoping 6
madvise), 1
http://cag.csail.mit.edu/raw/ 1
magnitude 1
http://en.wikipedia.org/wiki/You 1
http://linux.die.net/man/3/pthread 1
http://stackoverflow.com/questions/2509679/ 1
http://www-formal.stanford.edu/jmc/history/timesharing/timesharing.html. 1
http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF. 1
main() 11
http://www.ostep.org/Citations/notes-solaris.pdf. 1
main(), 1
https://events.static.linuxfound.org/sites/events/files/slides/elc 1
main-deadlock-global.c. 2
main-deadlock.c 2
main-race) 2
main.c 6
huge 20
maintains. 1
human 4
humans) 1
humble 2
hundreds 5
hurting 2
hurts; 2
hybrids 1
hypervisors). 1
i 22
ice 1
icon, 1
idea: 1
ideas? 1
identical 6
identical, 1
idioms 1
illusion. 2
illusion: 2
illustrate 5
imaginary 1
imbalances. 1
impacts 1
implement!) 1
implement. 5
implementations 4
implementations, 1
implementing 8
implication 1
implying 1
important). 1
important; 4
important? 1
impressive. 1
improbable, 2
improves 4
in-depth 1
in-kernel 5
in-memory 2
in-use 1
in. 11
in: 1
inability 1
inaccessible 2
inaccessible, 3
incentive 1
has 348
has, 1
make 214
make, 2
hash 17
including 51
malicious 14
incorporates 2
malicious, 1
increase? 2
malloc(sizeof(node_t)); 8
increases 6
malloc. 1
increases, 2
managed), 1
incredibly 8
managing 9
mandated 1
manifesto 1
manifests 2
increment 14
incrementally. 1
incremented; 2
incur 1
incurring 1
manual 13
manual, 2
many! 1
map 7
mapping: 1
market... 1
indeed 26
marks 4
marvelous 1
masking 4
indeed, 11
masses: 1
indefinitely) 2
math 4
indeterminate 2
mathematical 1
indeterminate, 2
matters. 3
indexed 3
mature 1
max 1
maximum 8
maximum, 1
indicate 15
maybe 4
indicated 4
individual 3
me 6
inducing 1
ineffec1 1
meaningful 5
infinitum. 1
meanwhile, 1
influence 1
influenced 2
informally, 1
informing 1
infrastructure 1
inherent 5
measure 21
init() 6
measured 2
init(), 2
measurement 3
mem-access 1
initializes 5
mem? 1
inject 2
memory! 2
innovation 2
inputs. 1
memory) 5
inputs: 2
inquiry 2
memory), 5
memory-mapping 1
memoryintensive 1
memorymanagement 1
insert 12
mention 1
insparable 1
mentioning: 1
inspires 2
merely 1
installing 1
messages. 2
instance 3
met 1
instant 3
methods. 3
instant, 1
instead), 1
metric. 4
metric: 1
instruction; 3
microcode), 1
instruction? 3
microkernels 3
mid 1
mighty 4
migrating 2
migration 5
mild 1
milliseconds 6
milliseconds, 2
mind. 1
minicomputer. 1
minimize 11
minimum. 2
minute?), 1
mirrors 1
miss-handling 2
instructions 78
miss. 9
miss: 1
instructions, 10
instrument 1
insufficient. 2
misses. 7
integer). 2
missing 4
integers 4
mistake 3
integers, 2
mistakes) 1
intelligence. 1
mistakes), 1
intensive, 1
mix 1
interactions. 2
mmap(NULL, 1
mocked). 1
interactivity. 2
interconnected 1
have 487
interesting) 1
have, 1
havoc’ 1
mode) 9
head->next 1
mode), 1
head->size 1
headaches. 1
modes. 2
interface 16
header). 1
header_t 1
interleavings. 2
modification 2
headers 2
interludes. 1
headers, 1
modification, 2
heap-allocated 1
modified), 1
internal 12
modifying 2
heap. 10
internet 1
modularity, 1
heap: 2
interpose 1
module 1
hear 1
interposed 1
heard 1
moment. 1
interpret 1
heart 2
heavily-used 1
monitoring 3
held). 2
monolithic 1
held; 2
more). 1
helgrind? 2
more? 1
hello 5
most-recently 1
motivating 1
hello, 8
mouse), 1
helpful, 1
helps 5
here 46
interrupt 77
interrupt, 4
interrupt-based 2
mov 33
move). 1
here, 22
interval 8
herein), 1
movement). 1
interval, 1
heuristic 2
intervals) 2
heyday 1
intervening 3
hidden 4
intervention 1
intrinsically 1
moves 15
introduce 12
high 36
high, 4
high-end 4
higher-level 1
introduced 25
invalid. 2
highest 20
invalidate 1
movl 28
highlight 3
invented 5
himself, 1
invented, 1
ms. 5
inversely 1
hinted 3
multi.py 2
hire 1
inversion 6
multiple-queue 1
inversion, 4
multiplexing 2
inverted 4
multiprocessorbased 1
invisible 1
involved. 2
is! 2
multiprocessors 5
is), 1
multiprocessors, 2
his 37
history. 3
history... 2
multiprogramming 8
hit). 1
hit; 1
must-read 3
mutex; 6
hits 13
isn’t 26
hits, 2
for 1176
hole 1
isn’t, 2
mutex_t 5
for, 2
isolate 1
mutex_unlock 2
isolated 2
force 2
homework 9
forced 2
isolation; 3
my 6
forcefully 2
homework, 9
forest, 1
honor. 1
myarg_t; 4
forever. 1
honor: 1
forewarned: 1
hope 13
forget 8
forget, 1
mythread, 14
hopefully 6
issue 33
hopefully, 3
n 4
house 2
issue, 3
how: 1
however 1
namely 5
naming 1
issued 7
nanoseconds). 1
nary 1
fork() 25
fork(), 9
form). 1
near 13
formed. 1
nearest 1
nearly-endless 1
former 5
however, 49
nearly-infinite 1
http://books.google.com/ngrams). 1
neat. 1
http://cag.csail.mit.edu/raw/documents/R4400 2
forms 3
http://en.wikipedia.org/wiki/ 1
http://history-computer.com/Library/AltoUsersHandbook.pdf. 1
forth 3
http://ostep.org/Citations/inside-cfs.pdf. 1
necessarily 8
forth, 4
http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD123.PDF. 5
http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF 1
need. 2
forward-growing 1
http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1303.PDF. 1
needs; 1
http://www.ibm.com/developerworks/linux/library/l-solar/. 2
found? 1
negative). 1
http://www.intel.com/products/processor/manuals. 3
http://www.multicians.org/history.html. 1
negatives, 2
https://en.wikipedia.org/wiki/Buffer_overflow 1
https://github.com/mit-pdos/xv6-public. 1
network 2
https://quoteinvestigator.com/2015/07/23/great-power. 1
humans, 1
network-connected 1
hundreds). 1
fragmentation 13
hung. 2
networking. 2
hybrid. 1
fragmentation, 6
i++) 18
i; 16
idea! 1
ideally 1
idiom: 1
ignore 5
illegal. 2
imbalance 3
frame 40
imbalance, 1
frankly 3
immediately 23
free() 8
free(), 2
immediately, 4
free(16500) 1
free(tmp); 3
implementation. 4
free) 5
free), 2
free-list 1
implemented 10
implicitly 2
free-space 4
freed) 1
important. 5
freely 2
improve. 1
freely, 1
improvement. 1
frees. 1
in) 2
in- 1
frequently 7
in-between. 3
frequently, 3
incarnation. 1
friends 3
friends, 2
friend” 1
fringe 1
from). 2
include 18
from; 1
included 4
inclusion 1
incorrectly. 1
increased. 5
full 33
increasingly 6
full, 6
increment(counter_t 4
fully-operational 2
func(). 1
functional, 1
increments 7
new 140
indefinitely, 1
functionality. 3
independently! 1
functioned 1
new, 1
functions: 1
new->key 4
index 20
new_head->value; 2
fundamental 18
indexes 1
fundamentalist 1
new_head; 2
indicated). 1
futex_wake 2
newfile.txt. 1
indicates 3
newly-freed 1
indicative 1
indirection 3
next; 4
future 21
inefficiencies 1
nicely. 2
future, 5
inefficient 4
gadgets 1
nightmares 1
inefficient, 2
infinite. 1
nitty-gritty: 1
inflation 2
gain 16
inflation, 1
gaming 2
info 1
gaming, 1
gather 1
gave 3
information. 9
general) 1
node 12
generalizing 1
informative 3
node, 1
informed 3
nodes) 2
informed, 1
non-ASLR 1
inheritance. 2
non-executable 1
generally 28
init 4
nonconcurrent 1
init(); 2
nonetheless. 1
generally, 7
nonsolution: 1
init(lock_t 4
normally 2
initialization 8
initializer 2
not), 3
initiating 1
generate 28
inkernel 1
inner 1
innovations 2
innovations, 1
generated 12
innovator 1
generated, 1
generations 1
inode) 2
generator 2
gently 1
get(counter_t 6
get? 1
input 20
input); 1
input, 1
note 27
input/output 3
insert; 2
inserted. 1
note, 5
noted 3
gets 51
gettimeofday() 5
giant 1
gigabytes 1
inside 30
insisting 1
inspiration 1
installed 1
instances 2
give 30
glock; 2
notice 34
notice, 3
goal 19
noticeable 2
goal, 1
good. 6
noticeably 4
google’s 1
noticed 5
grabs 16
now-standard 1
grade, 1
grammar 1
gray 3
now. 7
now: 1
nptl 4
nuance 1
nuclear 1
number), 1
instead 95
numerous 12
great 79
nuts 1
instead, 5
great, 1
greater), 1
greatest 1
objects 5
grocery 2
obliged 1
grossly 1
ground 1
grouping 4
observe 6
instruction. 22
observed 1
instruction: 1
instructions). 1
observed, 1
grow 18
instructions; 2
obtained 1
grow, 1
instrumentation 1
occasion; 1
growth 1
int) 2
gruesome 1
occasions 1
int), 2
guarantees 6
interact. 1
occur. 3
interacting 1
occurs; 3
guard 14
ocean 1
ocean, 1
guess 8
odds 1
guess, 3
interaction 13
guesses 3
interchangeably 1
guesses, 1
of) 3
guts, 1
interest: 2
habits 1
off; 2
hack, 1
interested! 1
hackers. 1
old; 4
half 8
olden 1
hand 6
hand, 3
hand-coded 1
hand-over-hand). 2
handle; 1
older 13
handles 14
omitted, 1
handling. 1
on! 2
happen? 8
happen?4 1
on) 1
happening! 1
on-chip 4
interesting 46
on-going 4
interesting, 4
once), 3
interfaces 17
interfaces, 1
happens 78
interfere 2
happens, 4
interleaving 4
interleaving, 2
interlude, 2
interpretation 1
interrupt; 1
interrupted. 2
hard 51
hard-hitting 1
hardware) 3
hardware/OS 2
hardwaremanaged 1
hardwaremanaged, 1
harmful, 1
harmless, 1
has). 2
has? 2
have? 2
head), 1
head->next; 1
interrupts 33
headed 3
header. 1
header: 2
interrupts, 4
header_t; 1
headway 1
heap) 2
heap), 1
intervals 6
heavilyused 1
interval’ 1
intricacies. 2
intriguing 1
held. 16
held: 2
intro 3
helgrind. 2
help. 1
help: 1
helping 2
introduces 6
invent 3
inverse 1
invoked 2
hence 20
involving 1
hence, 3
here; 4
here? 3
herein 3
herein, 1
heuristics 1
hierarchies 2
hierarchies, 1
hierarchy 2
hierarchy, 1
high-performance 1
high-priority 2
higher 24
hint 4
historically 2
historically, 1
historically-based 1
hit. 5
hits). 1
hold 27
hold, 1
holes 1
homeworks 5
homeworks, 3
hopes 1
horrible 1
hostility: 1
hot 1
hours. 1
how-to-generate-a-random-number-from-within-a-range. 1
however; 2
http://ftp.gnu.org/gnu/glibc. 2
http://portal.acm.org/citation.cfm?id=540365. 2
https://gruss.cc/files/kaiser.pdf 1
https://lwn.net/Articles/170003. 2
huh?? 1
humorously 1
humorously, 1
hurt 3
hy-brid 1
idea 92
idea, 7
ideal 4
identifier 3
identifier, 2
idle! 1
it 1299
if 483
if, 4
illegally 3
one 500
illusion 20
illusion, 2
imag-ine 1
it, 68
imagining 1
imbalanced? 1
it?) 1
immediate 2
item. 1
iteration. 1
immediately; 7
immensely 1
iterations? 1
imperatives. 1
impetus 1
one, 26
one-third 1
onelevel 1
implement 30
itself. 19
implement, 1
implementations. 4
jne 3
implemented? 1
implicit 1
implies 7
job. 8
imply 2
important) 1
importantly 1
jobs? 3
job’s 2
importantly, 9
impossible 1
improving 4
join() 9
join()); 1
join(), 7
joke, 1
journaling 3
jump) 1
jumped 1
just-finished 1
k-stack(B) 2
keep 48
only 202
oops! 1
open 7
kernel 123
open("./p4.output", 1
open()? 1
open, 1
kernel, 7
operation), 2
operational 1
operations. 8
operator. 3
opinions; 1
key 28
opposed 3
key); 4
opposites 1
key, 2
keyboard 2
keyboard, 1
keystroke 1
kicks 2
kidding; 1
optimal 20
kill() 1
killed 2
optimal, 5
kinds 5
optimizations 1
kmalloc. 1
optimizations, 3
knew 5
optimizing 2
know. 3
optional 2
know: 2
options. 3
knowing 6
knowing, 1
ordering 9
ordering, 2
originally 2
known 90
known, 2
la 3
labeled 3
languages. 2
large-memory 1
large. 3
larger 23
larger, 2
laser-like 1
latency) 1
later), 1
latest 8
laugh 1
laughably 1
lay-out. 1
lays 1
lazily, 1
laziness 2
ldq 2
leads 13
leak 2
leak, 1
learn? 1
learns 1
least 35
least, 7
least-significant 1
leave 13
led 8
legal 6
legality. 1
legitimate 1
other 303
length). 2
other, 5
length? 1
others) 2
others), 3
lengths 5
lengths, 1
otherwise 14
let 36
levels: 1
libcrypt, 1
libraries 3
library 47
library, 10
libtinfo.so.5.9 1
lies 4
lifesaver 1
our 230
out"); 1
out-of-bounds 1
out. 11
outcome. 6
outcomes? 4
outputs. 2
over-written 1
over. 1
overcome. 2
overflow. 1
overhead 12
overhead, 1
overheads), 1
overload. 1
overseas. 1
oversubscribed, 1
overwrites 1
own. 2
p. 1
p2 7
p3). 1
p6 5
p: 18
page) 4
page), 2
page-fault 3
page-replacement 6
page-table 31
pagedirectory 1
pages. 28
pages: 2
paging 28
paging, 4
paging-policy.py, 1
paid 1
pain. 1
painful; 2
paper. 1
paper: 1
par-allel, 1
paragraph 1
parallel) 2
like 215
parameters. 2
parameters: 1
like, 3
liked 1
likely). 1
limitations 1
limiting 1
limits; 1
linear. 1
linker 1
links 3
parent 44
list) 5
parentheses 2
list), 1
listed 1
park 6
lists. 1
park(); 4
literature 1
park, 2
lively 1
participated 1
partition 1
lives. 1
partition, 1
ll/sc 2
lmbench 4
parts 19
paths. 2
patient! 1
pattern 5
patterns), 1
loaded 17
pause 2
pause, 1
loathe 1
local-to-global 2
local[NUMCPUS]; 2
pay 12
peep 1
percentage 5
percentage, 1
perfectly 2
perfectly, 1
perform? 1
locality 18
locality, 8
performance 91
location 39
location, 6
performance, 14
performs 21
period; 1
periods 4
perl). 1
permanent 1
perror("malloc"); 4
persistently 1
persistently, 1
person; 1
persons 1
perspective 8
perspective, 1
pessimal, 1
phone 1
phone, 1
physically 2
physics). 1
picks 5
piece 36
piece, 1
pioneer 2
pipe 8
pipe, 2
pipeline 1
pipeline, 2
place! 2
placing 7
plans 1
platforms. 1
play 4
pleasant. 1
please 3
plots 3
pmap 5
pmap, 1
point 39
point, 30
pointier, 1
policies. 7
policies: 2
policy. 4
politely 1
ponder: 1
pool 1
populated, 1
portions 7
possession 2
power-of-two-sized 1
power.” 1
powerful. 3
pre-configured 1
pre-initialized 1
precious 2
predictable; 1
preempted 4
preferred; 2
prerequisite 1
presented 8
preserved. 2
pressed 2
pretend 5
preventing 3
prevention 2
previously 3
previously, 1
primitive! 2
primitives. 8
principle 6
printed 6
printf("%d 4
printf("%d\n", 7
printf("%lld\n", 2
printf("%p\n", 1
printf("location 3
printf("returned 4
priorities 5
priority 61
priority, 7
priority-based 1
privacy 1
privileged; 2
pro-cessor) 1
problematic 2
problematic, 1
lock 370
lock(&m) 1
problems. 11
problems: 2
proceed 6
proceeding. 1
lock(lock_t 14
process). 2
process; 13
process? 4
processes; 7
processes? 3
processes’ 1
processes” 5
processes”, 2
processor. 9
produce 9
produced 2
produced, 1
producer. 2
professor? 1
professors 3
professors, 1
profilers 2
lock, 61
lock->turn 8
locked; 2
locking. 3
program. 46
locks) 3
program: 6
logical. 1
programmed 1
logs 1
long-list 1
programmer. 5
long-lived 3
programs; 3
longer-running 1
longrunning 1
program’s 9
progressed, 2
prohibitively 2
projects 3
projects, 1
promote 1
promoted 1
prompt 4
prone. 2
proportionally 1
protected 4
protection; 2
protections 4
protocol 3
protocol, 1
proverbial 1
providing 16
pthread.h 2
pthread_cond_signal(pthread_cond_t 3
pthread_cond_t 3
pthread_create(pthread_t 2
pthread_join(pthread_t 2
pthread_mutex_lock(&c->glock); 4
pthread_mutex_lock(&q->head_lock); 2
pthread_mutex_lock(&q->tail_lock); 2
pthread_mutex_timedlock(pthread_mutex_t 2
pthread_mutex_trylock(pthread_mutex_t 2
pthread_mutex_unlock(&c->llock[cpu]); 2
pthread_mutex_unlock(pthread_mutex_t 2
ptr 16
ptr, 3
pulled 1
purpose 9
purpose, 1
pushing 2
look 121
lookup? 1
put() 4
lookups 1
put(i); 5
loop; 2
puzzle 2
python 1
loop? 1
q->head 4
q->tail 4
query 1
quest 3
question. 7
loops 18
question: 7
questioning 1
loops, 4
queue) 1
queue), 1
loss 2
lottery. 1
queue_add(m->q, 4
low-priority 1
queues. 2
queues: 1
lower 13
quickly 21
lower-half 1
lowest-priority 1
quote 7
lowlevellock.h 2
race): 2
ls. 1
races 4
luck. 1
m 1
races, 4
raised. 1
m;) 1
in 2103
randomly 4
randomly-generated 3
in, 6
inaccessible. 1
randomness 6
ranging 1
inactive 4
rare 2
rate. 3
includes 13
incorrect. 1
machine 34
increases. 5
rather 29
machine, 8
increasing 10
machinery) 1
machines) 1
rather, 11
macros 1
ratios 1
re-acquire 1
made. 2
incrementing 12
incurred; 1
re-check 3
made: 3
re3 1
reacts 1
independently 8
magic 7
independently, 2
read. 6
magnificently; 2
indicated. 1
read/write 1
readability 1
inefficient? 2
readable. 1
readers 1
influential 4
readers, 1
readied, 1
inform 4
readily 5
init(counter_t 6
initializing 1
initially 3
initially, 2
reading 21
reading, 1
initiate 3
readonly 1
reads” 1
initiated 1
ready), 2
innocently 1
inode 3
reality 7
inopportune 2
reality, 1
realization 1
inputs 2
main 66
really) 2
insert. 2
main(); 1
insertion 2
reason. 3
main); 1
insidious 1
main-signal-cv.c. 2
reason: 3
insights. 2
main.c). 2
install 1
reasonable. 3
mainstream 1
installations. 1
reasonably. 1
instantaneously. 1
reasoning 1
maintain 4
reboots 1
maintain, 1
recall). 1
instruction) 9
receives 4
instructions. 5
recently 6
recently, 1
instructions: 2
reclaimed, 1
recognized 1
recollections 1
recommend 2
records 1
major 28
recourse: 2
recover 1
recursion 1
recycles 1
redirect 2
reduced. 2
referenced; 1
is 2736
references 28
references, 1
refers? 1
regain 1
is, 22
region. 1
issue; 1
register) 2
register), 1
register-level 1
registers. 3
regular 2
relatively-short 1
makes 57
relaxing 1
rele-vant 1
makes, 2
issues 26
it). 3
releasing 16
it3 1
reliability 2
relinquishing 2
relocated; 1
relocation. 2
it; 14
remaining 13
remaining, 1
it? 11
malloc() 32
remarkably 1
malloc()); 1
remedy 2
remembers 2
malloc(), 3
malloc(10 2
malloc(100e6)); 1
remove 10
remove_min(queue); 1
malloc(strlen(src) 1
malloc(strlen(src)); 1
removed 6
renewed 1
replacement. 4
replies: 1
reply: 1
reporting 2
representing 2
manage 19
requested 8
requested, 2
managed 6
managed, 2
requests. 6
requiring 11
researchers/engineers, 1
reside. 1
resident 2
resource. 2
resources; 2
resources? 1
respect 2
responds 2
management 29
management, 1
responsible 6
manager. 4
responsive 1
responsiveness; 1
int 260
manner 7
integer) 2
integrity 1
intellectually 1
rest 18
intelligence 1
rest, 1
manner, 11
restored. 1
intelligent 2
manuals 2
restricting 1
intensive. 1
interactions 4
interactivity 2
results 17
results, 4
resuming 1
retains 1
interested 11
retries 4
interesting; 2
retry 6
interface. 4
retry, 1
interface: 1
return-tolibc 1
return. 1
interleavings 4
returned) 2
intermediate 1
interposition 2
interrupt. 4
interrupt: 4
interrupted) 1
returning 27
interruption, 2
returning, 2
interval. 1
intervention. 1
review 2
intricate 3
rewrite 8
intuition 3
rewrite, 2
rich 2
invalid 8
invalid, 8
investigate 1
investigator 1
invited 1
right 42
right); 2
involved 9
right, 3
road, 1
robin, 2
involved, 6
rogue 1
involvement 1
irstrun 1
its 295
role 11
itself) 1
is; 3
rolls. 1
is? 2
itself), 3
it’d 1
isn’t. 3
it’ll 1
it” 1
jars 1
iss 6
isses 1
job) 3
roughly 24
issue. 3
roused 2
it!) 2
jobs. 7
it!), 1
jobs: 2
join 12
join, 2
jokes 1
journalism 1
judiciously 1
judiciousness 1
routine 60
routine, 10
rule: 2
jump 22
run), 2
jumps) 1
runnable; 2
k-stack(A) 1
running), 1
it. 68
runs. 11
it... 1
keeps 13
rvalue; 2
it1! 1
rw- 1
rw45 1
it: 4
many 252
rx 4
kept 12
mappings. 3
sad. 3
kernel; 2
item 9
safe? 2
kernel” 1
maps 7
key; 6
marking 2
kicking 1
marking, 1
kill 10
killed). 1
match 12
itself 32
killed; 1
matches 1
itself); 1
kind. 1
kind: 1
material. 3
know! 1
itself, 8
mathematician 2
knowledge 14
knowledge, 3
matter 13
known). 1
known; 1
matter, 3
laborious 1
matters! 1
it’s 33
maximizing 1
language 8
laptop 2
mean 6
large) 1
meant 1
large-file 1
large-scale 1
measure? 2
larger? 1
measurements 4
measurements, 1
measures 2
same 145
mechanism 18
same, 3
saved? 2
last 37
mechanism, 2
last); 1
meeting 1
last, 1
saves 9
last-in 1
megabytes 3
say), 2
mem. 1
saying; 1
says: 1
memcheck 1
sbrk 3
latency 9
scale. 1
memories 4
scale: 1
memories, 1
scales? 2
scare 1
scary 1
scenario. 4
scheduler.py, 1
scheduler; 2
scheduler? 5
later 36
schedulers 14
later); 1
schedulers, 1
later, 5
latter 5
latter, 2
job 144
law 2
layout. 1
lazy 5
ldl 2
ldrex/strex 2
job, 19
jobs) 1
join(). 2
judicious 1
leading 9
juggling 1
leaks 1
jump; 1
lean 1
learning 2
left) 1
jumps 7
left), 1
junctures 1
legal; 1
scheduling 102
len:30 1
keeping 14
scheduling, 15
lets 10
kernel-owned 1
school: 2
scientist 1
letter 3
scientist, 1
kernel. 6
scope 2
kernel?” 1
scorned 1
scorned, 1
kernel’s 4
screen. 3
kicked 2
scribble 2
kids, 1
se. 1
seamlessly 1
killall. 1
killer 1
level 23
kills 2
level, 3
kind) 1
levels), 1
kindly 1
libc-2.23.so 1
search 20
kinds: 1
library; 1
searches 3
library” 1
seasoned 1
lie. 1
second. 5
second: 1
secondchance 1
seconds). 1
secretary 2
section), 2
sections. 4
security. 1
life 22
security: 1
see! 2
life, 3
light 1
seem 7
lightweight 1
lightweight, 1
segment; 4
segment? 1
like; 2
likes 1
likes, 1
limit) 1
segmentation 26
limited 17
know 71
limits. 1
segmentation, 4
know, 5
knowing. 1
knowledge? 1
known. 1
line 14
known: 1
l/stq 2
line, 7
lack 4
linear) 1
segments 22
lags 2
linking 3
languages 4
segments, 5
languages, 2
selection 1
laptops, 1
semaphores” 1
semi-nal 1
send 13
list 103
sense 26
sense, 6
sense?) 1
sensed, 2
sensitive 1
list, 26
sent 3
separation 5
live 12
sequential” 1
lived 1
large 93
lives), 1
serious 10
large, 7
servers 1
larger. 1
servers, 2
laughing 2
services. 1
launch 2
servicing 5
load 35
launches 2
set. 2
load, 3
setpark(); 2
laws 2
lawyers 1
load-linked 14
lazy; 2
load-linked, 2
setting 15
leaking 3
load/store 3
setting, 1
locale 2
several 1
locate 3
severe 3
learned 13
share; 1
learned, 1
sharing. 3
located 13
sharing: 1
location; 2
shells). 1
shells; 1
shift 1
locations 11
shipping 2
left 21
locations, 1
short-circuiting 2
left, 6
short-running 4
lock). 10
left-shifted 2
length) 1
lock->ticket 2
short. 3
lengths: 1
shortcomings. 1
lock-free 3
shot 2
shouldn’t. 2
showed 4
shrink). 1
shrinks 1
lock; 24
sidebar 2
less 29
lock? 10
lessons 5
lock_init(lock_t 4
letting 6
lock_t 2
signal 28
signal, 1
signal/wakeup 1
signaling. 1
similar), 1
similarly 3
memory 568
similarly, 3
memory); 2
let’s 73
locks 79
levels 9
libcrypt-2.23.so 1
libraries. 2
library. 10
locks, 22
libtinfo, 1
life; 1
lifeless 1
logically 6
lifetime 1
logically-different 1
lifetime, 1
like. 6
like: 3
limit 6
linear 34
memory, 124
memory-mapped 3
long 68
memory-reference 1
lines 14
lines, 1
memory-user 4
link) 1
long, 5
mental 2
longlived 1
mentor, 2
mesh 1
mess! 1
linked 18
list). 2
list; 4
message 10
list? 1
message, 2
list_t 2
messy 2
metadata 1
lists 13
method 8
microkernel-like 1
lists, 7
microseconds 2
lists[BUCKETS]; 2
microseconds, 2
mid-instruction, 2
looks 39
lives 7
lives, 2
lookup. 3
llock[NUMCPUS]; 2
load; 1
loader 4
loop. 8
looping 1
loads 19
load” 1
looping-race-nolock.s 8
looping-race-nolock.s, 2
looping-sequential 3
simple 196
loops; 13
loops? 1
local 56
lost. 2
simple, 9
lot! 1
simpler. 1
locality. 4
low-cost 1
locality: 2
simplicity; 2
low. 1
locates 2
simplified 2
lower-priority 2
location. 3
lowers 1
lock()), 2
lowest. 4
luck! 1
lucky 3
lucky, 2
m; 1
machine; 2
machine? 2
machinery 10
might 218
machinery, 1
migrate 1
migration? 1
millisecond. 1
milliseconds). 1
milliseconds; 1
minicomputers. 1
lock. 64
minimal. 2
minimizes 2
miniscule 1
minutes 1
machines 21
lock_t; 8
misbehaved), 1
misbehaving 2
machines, 5
miss) 1
magic; 1
miss), 3
main(). 1
missed 2
misses! 1
misses), 1
simply 128
mistakes 3
simply, 4
mobility 1
simulator. 2
locking 34
main(int 23
locking, 2
simultaneously 11
main-deadlock.c. 2
simultaneously, 1
lock’s 2
main-race.c. 2
mode 23
logarithmic 3
main-signal-cv. 2
since 7
main-two-cvs-if.c. 1
main-two-cvs-while-extra-unlock.c. 1
main-two-cvs-while.c 1
sincerely 1
logical 15
mode, 13
mainframe 2
long-term. 1
long; 1
mainframe, 1
model 8
maintains 1
models), 2
majors 1
make. 1
malfeasance 1
longer 17
longer, 1
maliciously! 2
lookaside 4
maliciously) 1
looking 13
lookups. 1
malloc 8
loop) 2
malloc(20);. 1
malloc(3) 1
loop.s 6
loops. 1
malloc(sizeof(double)); 1
malloc(sizeof(int)); 2
malloc(strlen(s) 1
lot 35
man 21
modern 90
lottery 24
lovely 1
manages 9
manipulate 2
low-level 16
lowering 1
modified 15
manipulations 2
lowest-order 1
moglie 1
manner; 1
lowly 2
molecules 1
manner? 1
ls 1
monster! 1
ls, 1
manual. 4
manufacturers 1
luck 5
many” 2
lying 2
more. 14
m->guard 10
most. 1
mapping 13
macOS, 1
mother. 2
mapping, 1
motivate 1
moustache 1
machine. 9
ms), 4
machinery? 1
marked 11
machines). 1
marriage, 1
machines; 1
mask 1
massive 4
master 4
master, 1
materials. 1
made 23
math. 1
matter; 1
made, 5
matter? 3
magic. 1
matters, 2
maximize 2
magic: 7
mail 1
main-one-cv-while.c. 1
main-signal.c. 2
main: 12
maintaining 1
makes. 1
means 31
measurement. 1
single 203
measurements? 1
single, 1
sitting 4
situation. 2
size). 2
much 135
much, 1
size; 6
multi-queue 4
sizes 8
sizes, 2
sketch 3
skimmed 1
skip-ping 1
mechanisms 32
skips 1
megabytes). 1
slab 5
mem- 1
sleep) 1
mem.c 2
sleep-ing. 1
multi-threaded 44
sleeping). 1
making 63
memory). 6
slice. 1
multiplied 3
memory): 1
slices; 2
malloc(). 4
memory-access 1
multiprogrammed 3
malloc.py, 1
slogan. 1
multitude 1
malloc; 2
music 2
slot 7
malloc’d 3
memory-allocation 10
slowed 1
memory-bug 1
malloc” 1
slower. 3
memory-constrained 1
management. 3
memory-failing 2
manager 3
memory-user.c. 1
slowly 12
manager, 3
slowly, 4
manages; 1
slumber 2
manipulates 2
small! 1
small) 1
small-scale 1
smarter 1
manner. 7
memory; 19
manner: 1
manually 1
memory? 9
many. 5
memoryreference 1
memory” 1
men-tioned 1
merest 1
mapped 14
merge 2
mesmerizing. 1
mappings 8
mess 1
message; 1
mark 6
messages 1
marvel 1
meta-level 1
masks 2
meters 1
match. 1
matching 1
methods 4
methods, 1
material 8
matter. 2
metric 5
metric, 2
micro-instructions 1
microcosm, 1
microprocessor. 1
microsecond. 1
must 152
migration. 1
must, 1
mutex. 1
myargs[2] 2
myret 4
mystery 1
n). 1
n; 1
million 17
million); 1
min 3
name 22
name, 4
mind 5
named 8
mind, 4
nanoseconds. 3
mines 1
napping 1
mini-computer; 1
naturally-occurring 1
nearby 2
nearly-complete 1
minicomputer 5
nears 2
minimally 1
may 123
neatly 4
minimum 2
meaning 3
necessary 9
measuring 5
minus 5
necessitating 1
mechanisms; 1
meet 5
meltdownattack.com 1
mem 10
mem.pdf 1
memories. 1
memory-add 2
memory-intensive 1
memory-like 1
needed 44
memory-management 2
memory-related 1
so 197
needed, 7
negatively) 3
miss 32
networks, 1
miss); 1
new; 8
newer 2
newly-allocated 2
newlyfreed 1
miss, 10
news 2
next. 10
next: 9
misses 21
so, 37
sockets. 2
software; 1
misses, 8
memory. 103
software? 1
memory?”, 1
mentioned 7
mmap() 7
solutions. 4
message. 1
mobile 1
metal 1
mode). 1
solving 4
method. 3
mode; 2
models 2
somebody 5
metrics 7
modes 2
mid-execution 1
mode” 1
somehow 6
modification. 2
middle 11
somehow, 1
modified). 1
middle, 1
modifies 1
someone 3
millions 3
millisecond 1
modify 3
mind-blowing 1
minds 1
modulo 1
minimal 7
moment 5
minimizing 1
misbehaves 1
money 1
miss). 1
miss; 1
miss? 1
misses). 1
mitigates 1
monopolize 6
mjtsai.com/blog/2015/12/16/osspinlock 2
monopolized 1
mlfq.py, 1
mmap(); 1
month. 1
mocked 1
more! 1
no 140
mode. 4
no, 1
more) 1
modifications. 2
modified. 1
mostly 4
monitors 5
movie 1
node_t 24
non-blocking 2
non-computer-types 1
non-cooperative 2
moving 13
non-preemptive 2
non-stop; 1
none.” 2
normal 11
ms 14
ms, 5
much-improved 1
much; 1
muck 1
multi-CPU 3
multi-level 30
multi-processor 4
multicore 6
something 132
something, 2
multiple 95
sometimes 73
multiplex 1
sometimes, 2
multiply 2
somewhere). 1
multiprocessing 1
sooner 1
multiprocessors. 4
sorting 1
multiprogramming. 1
sounded 1
sounds. 1
mutex->flag 6
sources: 1
space-efficient, 1
space-management 1
space-usage 1
mutual 29
myarg 2
myargs[1] 2
myret_t 6
mythread. 2
myturn) 2
name). 1
name; 1
space. 45
names 1
nanoseconds), 1
space: 2
natively 1
spaces). 1
naturally 4
sparked 3
naturally, 1
sparse 7
neat 8
sparse, 1
necessarily!) 2
not 449
necessary; 1
necessity! 2
spatial 7
not, 14
spawn() 1
notably 5
species. 1
notes 5
notes); 1
more 470
notes, 3
nothing. 2
nothing”; 2
more, 6
notice? 1
moreover, 1
notices 2
now! 1
now), 1
nuances 3
null-pointer 2
specific 21
null. 2
speeds. 1
spend 10
spent 7
most 130
most-significant 1
mother 2
need 152
number 198
need, 1
number, 4
numbers) 1
needed). 2
obey. 1
needed; 1
spin 79
objdump 8
spin, 2
object. 1
needed? 6
objectives; 1
objectoriented 1
needlessly 3
spin-waiting 4
observes 2
move 31
neighboring 1
network. 2
moved 6
obtain 10
networking 3
obviates 1
ms). 3
networking, 1
obvious. 2
obvious: 2
much. 6
occasionally 3
much... 1
occurs)! 2
spinning 27
much: 1
occurs. 3
spinning, 2
much?). 1
occurs: 1
splitting 3
occurs?” 1
multilevel 2
spot 2
multiples 1
spurious 2
multipro-gramming 1
src.opensolaris.org/source/xref/ 2
never 38
multiprocessing). 2
new->next 4
new. 3
newfile.txt 2
newly-created 3
newlyrunning 1
next-to-last 1
multiprocessor 19
nice), 1
nicely 1
multiprocessor, 2
munication, 1
no? 8
noble 1
node. 1
node_t; 5
node’s 4
mutex 17
non-contiguous 2
non-performant. 1
mutex, 4
non-synchronized 2
mutex_lock 2
non-zero 3
stack 79
non-zero, 1
mutual-exclusion 2
nondeterminism 1
nondeterminism, 1
none 3
none, 1
myarg_t 8
norm, 2
not; 1
myargs); 2
stack, 18
not? 2
stack”! 1
myargs[0] 2
note: 4
stance 1
myret_t; 2
stand 1
nothing) 4
mythread() 2
notice. 1
noticeably. 2
mythread(), 2
noticed: 2
notion), 1
myturn 2
naive 3
name. 4
nanoseconds 1
nanoseconds, 2
nasty 1
natural 9
nature 8
nature, 2
near-term 1
start 58
starving 1
nearly 9
necessary. 1
state1 1
necessitates 1
states. 1
states: 1
statistics). 1
needed. 11
needless 2
needs 32
needs, 2
stop 21
stop, 1
negative 14
store), 3
negative, 3
new) 4
newly 3
newly-fetched 1
store-conditional 7
newly-opened 1
news: 2
store-conditional, 4
storeconditional) 1
stores. 1
storing 1
straightforward; 1
strcpy(dest_buffer, 1
strdup 1
strdup("p3.c"); 1
stream. 2
stream: 2
now 184
streaming 2
strengths 2
strictly 2
strike 1
now, 18
now-extinct 1
stringent 1
now-sleeping 2
next 101
strings 1
null.c 1
next, 1
num 1
strongly 5
numbers 12
structure) 1
object), 1
objects. 1
oblivious 1
nice 34
observation 5
nice, 3
obvious) 2
no?). 2
non-concurrent 1
non-practical 1
obviously 5
non-scalable 2
obviously, 1
none-too-subtle 1
nor 1
structures. 22
occur 9
structures: 2
not. 14
occur, 2
not: 3
strut 2
occurring 3
notes. 1
occurs), 1
stub 1
notes: 2
oddly 1
odds: 1
nothing 5
off), 2
noticing 1
offending 10
offset), 1
notion 12
offset=000000, 1
stuck 16
offset=04); 1
stuck, 1
now? 7
null 2
students 3
number. 2
numbering 1
numbers). 1
numer-ous 1
studied 5
o 2
obey 1
sub-job 3
subjunctive 1
subsections 1
object 10
obscure 1
observing 1
subset 3
obtaining 4
substantial, 2
often 69
subsystems 1
suc-cessfully 1
often, 7
oh! 1
obvious 12
succeed. 3
old_ptr 4
obvious, 2
on). 1
occur? 2
on; 1
success! 4
once). 1
occurred 3
successful. 1
once; 4
occurred, 4
successfully) 1
once? 2
occurrence. 1
once”, 1
suffers 5
occurs 19
suggest 3
one. 24
suite 1
one: 3
occurs, 14
summary 5
odd 6
onto 17
superuser 3
odd, 1
oops.y 2
odd-sized 1
supervisor 1
oops; 2
oddity: 2
open-source 2
supports. 1
of. 1
open. 2
sure; 1
of... 3
surfing 1
operations 26
surprising 7
operations, 3
surprising, 1
operator 3
surround 2
operator, 2
opinion 1
off 30
optimal. 1
off, 3
optimality 1
offender. 1
optimizations. 1
offered 1
optimizes 4
offerings 2
options 3
survey 16
suspend 2
swap? 1
swaps 3
offset 42
offset, 2
often? 1
oh 2
order 80
order, 5
ordering. 2
origin 2
original; 2
ory. 1
other. 8
others). 1
others; 1
otherwise: 2
old 60
other’s 1
old, 1
ourselves 3
oldest 1
on. 9
switch 62
once. 5
one! 1
one) 4
one-quarter 1
one-word 2
switch, 8
ones. 3
online: 1
onnv/onnv-gate/usr/src/lib/libc/port/threads/synch.c. 2
oops.x 2
open() 6
switches 14
open(), 1
opened 1
switches, 2
operate): 1
swpd 1
operates 4
swtch(struct 1
operating-system 3
symbol 3
operation. 5
synchroniza-tions 1
opinions 2
opposing 2
opposite 5
opposite, 1
opt 1
optimal) 1
optimization 6
optimization, 3
order; 1
orders 2
organization. 1
organize 1
synchronization 26
origins 1
ority 1
system! 2
other) 1
system) 1
ours: 1
out). 1
system), 3
out; 1
out? 1
system-call 5
outcome? 5
system.” 1
outcomes 1
system1 1
outdated) 1
outlines 6
output. 2
output: 4
outs 1
overall. 1
overcome? 1
overflows 4
overhead), 2
out 181
overheads. 4
overview 12
overwrite 4
overzealous 1
own; 3
own? 1
out, 27
out-of-memory 1
owner 4
ownership 1
outcome 4
ownership, 1
output; 1
owns 2
systems. 64
outrage! 1
p1.c) 1
p1.c), 1
p2.c 1
systems: 5
t(A) 1
p3 5
t. 2
p4.output 1
p; 7
packages, 1
table. 26
page-directory 5
table2 1
page-number 1
table: 3
tables; 1
tables? 1
tail 5
taken? 1
page. 21
page: 1
pages). 3
taking 11
pages; 9
paging-multilevel-translate.py; 1
talking 5
targets, 1
over 90
task). 2
painful 7
over, 1
pains 1
task; 3
over-designed 1
pairs, 1
tasks 2
overcome 3
tasks, 1
tcsh 2
papers 8
overflow 3
tcsh, 2
overhead. 1
papers, 6
overheads; 1
paradigm. 1
overheads? 1
parallelization, 1
overwriting 2
parameters). 1
parcel 1
parent) 1
technique 29
technique, 2
park() 4
technologies. 1
technology. 1
park(), 2
tends 5
tens 2
terminating 5
termination 4
terminology) 1
test-and-set! 1
test-and-set.s 2
testing 2
thank 2
part 52
thankfully, 1
part, 2
own 72
own, 3
p 1
p); 1
p1.c. 1
p1–p3). 1
p3) 1
p3.c 3
p3.c, 1
particular 60
p4 7
package 4
packaged 2
particular, 28
them 99
packed 4
packet 3
page). 1
them, 20
then; 1
page; 5
then? 2
page? 1
there. 6
therein; 2
there’s 1
pass 54
passes 5
passive 2
password 1
path. 3
patterns. 2
pause) 1
pausing 2
pdflush), 1
peach. 6
peaches. 1
peeking 1
penalties. 1
people. 1
people.cs.clemson.edu/ 1
per 57
per-process 12
they 149
perceived 3
percentages. 1
perfect. 2
perfect... 2
perfection 1
thing 38
thing, 6
perform 70
perform, 1
performance), 1
performant) 2
think 66
think, 2
thinking: 2
thinks), 1
this. 4
perhaps 39
perhaps, 1
pages 195
pages); 1
period 8
periodic 1
periodically. 1
persistence. 2
person 3
phenomenon 1
philosophical, 1
philosophy 1
phrase 2
this: 49
physical. 1
pages, 26
those; 1
physics 1
paging-linear-translate.py, 1
though; 4
thoughtful 1
paging. 4
thoughtful, 1
pain 1
pick 15
pieces. 1
thoughts 5
thousand, 1
pioneered 4
pipe() 2
thr 7
thr_join() 3
thread!) 2
place. 16
pair 21
placed. 1
pals 1
played 1
pleases: 1
pleasure: 1
ploticus 1
thread. 20
point1 1
threads). 2
threads; 2
threads? 4
pointed 15
pointer. 3
pointers? 2
points. 1
policies; 1
policies? 1
thread’s 14
poorly. 2
three-queue 1
pop 1
three: 1
popl 1
threshold) 2
throughput?) 1
thrown 1
popular 7
thumb. 1
popular, 1
thus: 1
popular-sized 1
ticket. 2
porting 2
tickets; 1
tight. 1
time). 3
portion 20
posed 5
time; 16
positive 4
possibility 5
time? 9
paper 85
paper, 3
parallelism. 2
possible. 14
paralleliza-tion, 1
possible: 1
pouvoir”, 1
parameter; 2
power. 1
practical 8
parameters 9
times 40
practice 4
practice, 1
parameters, 5
pragmatists 1
paranoid. 1
times, 10
precise 4
timespec 2
parent. 4
precisely? 1
tmp->next; 2
parent: 2
tn 2
to; 1
park. 2
to? 2
part) 1
partially-ordered 1
together 12
predict 16
together, 3
predictors 1
tolerate. 1
predictors, 2
preemption 2
preemption, 2
preferred 2
particularly 27
prefetching 2
partner 1
prepare 1
prepared 1
presenting 1
preserves 1
pressing 1
pressure. 2
passed 18
prevents 3
passed, 1
previously) 1
primer 1
past 6
past, 4
primitive. 6
too 85
primitives; 2
too, 2
patch 5
too4 1
primitives? 2
patches 2
patent 1
printf("%s: 4
printf("(%d) 2
paths 4
tool 15
printf("Final 1
pattern. 2
printf("Initial 1
tool, 6
toolbars, 1
paying 3
printing 3
peach? 1
prio_to_weight[40] 1
topics 5
peaches; 1
prior). 1
penalize 1
priority) 1
topmost 7
trace; 1
per-CPU 5
trace? 2
per-futex 2
traces 3
performance-minded 2
tracked 2
tract 1
trade-off. 1
trade-off: 1
private 18
transac-tions 1
transaction 4
private, 3
transaction, 2
transcript 1
transfers. 1
transforming 3
privilege 8
transistors. 1
performance. 35
performance2 1
performance: 4
translate 19
translated 3
translated, 1
privileged 24
translation; 1
pro2 1
performed 11
probabilistic 1
performed, 2
performs. 2
permanently-valid 1
translations 22
permissions 1
person! 1
translations, 6
personal 1
transparency 1
perspective. 2
transparent 4
pesky 1
trap; 2
phases 2
trapframe 1
physically-indexed 1
traps 5
probably 32
treating 2
picture 5
probes 1
tree. 5
picture, 5
trees; 1
pid; 1
tremendous 1
trends. 1
tricks: 1
piece. 3
tricky 10
pioneering 6
true. 3
place; 1
problem. 26
place? 1
trust 14
places 6
tuned. 2
plain 2
turn) 2
planet 1
platforms 2
players 1
plenty 3
problem: 25
procedure. 1
turnaround 30
proceed! 1
turned 2
plus 11
pmap. 1
point. 7
pointer). 2
pointer? 1
pointers 5
pointing 2
points; 1
policies 35
policies, 7
policy 50
policy, 12
pollutes 1
poor 10
poorly? 1
positivity 1
possess 1
possible; 2
two 241
possibly-failing 2
two, 3
posterity) 2
two-fold. 1
postulates 1
potential 12
powerful 21
powerful, 2
powers 1
prac-tice, 1
practice! 1
pragmatic 1
pre-WWII 1
type 73
pre-specified 2
type, 4
precisely 2
typeset 2
precisely, 1
precision 2
predates 1
preempts 1
prefer 2
preferably 2
preferring 1
prematurely-optimized 1
preparing 1
typical 26
ubiquitous 2
ultimately 1
unanswered: 1
presents 7
preserve 1
presumably 4
presumes 1
under 18
underneath 2
understand2 1
understand: 1
understanding 19
pretty 26
undo 4
undoes 1
unexpectedly 1
prevent 8
unfairness 4
previously. 2
uniform. 1
pri- 1
unimaginatively 1
units; 4
unless 1
primary 9
unlock. 4
unmapped 1
unmasks 2
unpack 2
unpark() 2
unrealistic; 1
primitives 15
unrealistic? 1
primitives, 3
unsafe 4
principle. 1
unsurprisingly, 1
unused. 2
upcoming 1
update(counter_t 2
printf("main: 8
update; 1
printf() 1
printf(), 1
updates 33
process 403
process); 1
prints 41
priorities. 1
prioritizes 1
upon 40
upon, 1
upside 1
priority. 8
us. 4
privileged) 2
usability 1
proactively. 1
usable. 2
problem; 2
problem? 2
problematic: 1
use) 10
use_ptr 2
used) 1
process, 51
useful. 10
useful2 1
user; 3
users 27
users, 1
uses. 3
problems 55
problems, 12
problem” 1
problem”, 1
proc 5
proc-struct(A) 1
proc_state 2
proceeding 1
process) 6
process), 3
process-run.py 1
process-run.py, 1
processed 2
processes) 1
processes 107
processing; 1
processor 28
processes, 31
using 140
processing. 1
usual 2
usual, 3
processor; 5
utilization. 1
processor, 13
produced. 1
utilize 5
utilized 4
v 2
v); 2
processors 16
val; 2
valgrind? 1
valid. 2
valid: 1
processors, 9
producer 26
producer, 2
value) 13
professionals 3
producer/consumer 9
value), 3
professor! 2
producer; 1
values. 1
profit 1
vantage 1
producers 3
producers, 1
producing 1
product. 1
production, 1
productive. 1
professor 2
professor, 1
program). 2
program; 3
program? 6
programmer; 4
programmers 13
variable 75
programming 7
programming, 2
variable, 8
variable-sized 7
variables) 1
variables), 1
variants: 1
varies 5
varies, 2
variety: 1
vary 4
vast 2
vectors 1
vectors, 1
version 31
programs 85
programs, 16
very 60
victim. 1
progress. 3
of 3668
view). 1
off. 1
prohibitive. 3
virtualized; 1
offers 1
virtualizes 3
project 4
visible 2
visualization 1
offset. 6
project, 2
vmalloc, 1
offset: 1
promise 1
omit 2
prone; 2
omniscient, 1
properly. 1
properties. 1
properties: 1
proportionality 1
proportions 1
proportions, 1
protection 22
protection, 2
provably 1
proves 1
provided. 2
ps 2
pseudocode 7
pthread_mutex_init(&L->lock, 4
pthread_mutex_init(&c->llock[i], 2
pthread_mutex_lock(&c->llock[cpu]); 2
pthread_mutex_lock(pthread_mutex_t 2
pthread_mutex_unlock(&L->lock); 12
void 153
program 321
vruntime 10
pthread_t 14
vruntime, 1
vulnerabilities 2
w/ 2
pthreads 8
purchase 1
purify 1
purify, 2
wait() 26
wait(), 6
waited 1
walks 1
putting 17
walling 1
quantum 5
question). 1
question; 1
program, 58
program-debug 1
program4 1
questions 13
questions, 3
programmer 12
programmer, 1
programs5 1
want 50
projects. 1
warm-start 1
was; 1
queue. 12
queue_t; 2
waste. 7
queues; 1
wasted. 3
quoting 1
watermark 2
way! 1
way) 1
r-x 5
way), 1
r-x-rw--r-x-r-x-r-x-r-x-rw--- 1
ways. 11
prompt> 37
ways: 2
proofing 1
proofs” 1
wc 11
wc, 3
proper 14
web 10
race 28
properties; 1
websites 1
proponents 1
weightB 1
rage 3
weird; 1
proportion 5
proportion, 1
pros 1
well-known 4
raises 8
protocol. 4
ran. 1
protocols; 1
random. 1
prove 5
randomization 3
randomization, 1
range. 1
rarely 1
well. 30
rarely-taken 2
went 3
rates 1
re-accessed 1
we’re 3
re-awaken 1
provides 30
re-enable 2
provides, 1
provisions 1
re-reads 1
pseudo-random. 1
re-referenced 2
re-referenced, 1
reac-quiring 1
we’ve 21
reach 2
reaches 2
react 1
whatever 15
react, 1
what’s 2
read-only 1
read-only, 2
read-write). 1
read? 2
pthread 57
reader 7
pthread_mutex_init(&lock, 2
reader, 1
pthread_mutex_lock(&L->lock); 8
pthread_mutex_unlock(&lock); 2
publicized) 1
reads 10
published 4
ready. 1
pure 2
realizes 3
purpose. 2
pursue 1
push 2
realloc() 4
pushl 1
really. 1
put(int 2
rearrange 2
rearrangement 1
puts 19
reasons 6
q->tail->next 2
quantum) 1
reasons, 6
reassurance; 1
reboot 6
reboot, 1
question 27
recall, 1
question, 1
queue). 5
queue; 5
queue? 1
receive 11
queue_t 2
received 3
queues 6
rechecking, 2
reclaiming 1
recommended 1
queues, 12
record 6
quickly. 5
redirected 2
reduced-instruction 1
reduces 9
quite 114
quote. 4
quote: 2
reference 57
rabbit 1
radical 2
reference, 2
raise 10
referenced 6
raised, 2
referenced, 1
ran; 1
random-access 1
random; 1
randomizes 1
randomly-accessed. 1
randomness. 1
range; 1
ranges 1
referred 27
rate 27
rate, 3
refers 9
rc; 4
regained 2
rdtsc 3
region). 1
re-create 1
region; 1
re-duces 1
re-initialized. 1
re-referencing 1
reached 1
regions 11
regions, 2
register. 4
registers; 4
regs(A) 3
on 719
relatively-slow 1
relaxation 1
relaxed: 1
when 480
on, 11
when, 3
released. 6
which). 1
on-disk 5
while) 1
relevant. 2
reload 1
relocate 5
read 91
read, 7
relocated 6
readable 1
relocation.py 1
relocation; 1
remain? 1
who 41
remainder 1
whose 8
why. 2
remains 11
remains, 1
widely 9
remedied 2
willing 3
win 1
winner). 1
real 53
once 60
real, 2
once); 1
winning 7
realistic 3
within; 2
woke 1
realize 5
once, 9
woken. 2
remember 20
one). 1
wonder? 1
remembering. 2
realized 8
one-to-one 1
remind 1
reap 1
one? 1
rearranging 1
wonderful 11
work; 6
removing 8
ones 8
renders 1
ones!). 1
ones, 2
repair 3
work? 7
one” 1
worked. 1
ongoing 1
worker 6
reason 32
online 6
worker, 2
workgroup. 1
online, 2
working-set 1
repeatedly 15
reason, 8
oops 2
oops, 1
repeatedly, 3
open("/tmp/file", 1
repeating 1
reasonable 9
workloads 14
opens 4
workloads, 1
replace? 3
reasonably 3
rebooted, 1
replacement; 1
recall1 1
recently. 2
replacements 2
rechecks 2
reclaims 1
recommending 2
replaces 7
recorded 3
recourse 1
recursive 1
report? 4
redirection 2
reports 2
redirection, 1
representation 1
redoing 2
represents 4
reduce 15
request. 7
requesting 1
reduced 5
requests; 1
works 54
requests? 2
require. 1
required. 5
works, 15
requirement: 2
world. 3
refer 27
research. 1
reference) 1
references. 2
worse. 6
references: 1
worse: 2
referencing 1
researchers 8
wrap 2
referring 2
wreak 1
reg/PC 1
wreak, 1
reset 3
regardless 2
reside). 1
regards 2
resides 9
writes 21
resides, 1
writes, 4
resizing, 2
written), 1
resort 1
wrote) 1
region 25
resource; 1
www.ajwm.net/amayer/papers/B5000.html. 2
www.gnu.org/gnu/manifesto.html. 1
region, 5
x-axis 1
regions) 1
register). 1
resources 6
x-axis, 2
operating 151
register; 2
resources, 4
x. 2
register? 2
respectively, 1
respond 1
responsabilit 1
operation 20
x86 23
x86); 2
x86)” 2
operation, 9
opportunities 1
x86, 8
opportunity 1
registers 48
x86-64) 1
opposite. 1
xchg 2
opposite: 1
xv6. 1
response 31
optimal; 2
y-axis? 1
response-time 1
optimization. 1
registers, 10
years. 4
regs(B) 3
restores 4
optimize 4
yes! 1
restricted. 1
option 1
relates 3
restricts 1
option, 2
relative 3
yet 20
relax 10
release? 2
yet, 10
yields 5
releases 14
young 3
result 30
reliability. 2
yourself! 3
reliable 6
reliably 3
relies 1
result, 12
zero. 11
ret 1
relinquish 5
zeroing 4
retain 1
relinquishes 1
zeroing, 1
relocating 1
zombie 2
retrospective 3
× 1
return-oriented 1
relocation 6
return-to-libc 1
relocation, 5
rely 5
return; 10
remain 8
return? 2
remote 1
repeats, 1
returned. 2
returning) 2
replace 9
replaced 2
replacement 30
replacement, 3
report 9
repository 1
represent 5
request; 1
request? 1
— 131
’05. 1
’07, 2
returns 61
’83, 1
requests 28
’94. 1
requests, 2
’Precise’), 2
require? 1
’d’ 1
required). 1
returns, 7
’his/their 1
returnsfrom-trap, 1
required? 2
“01” 1
reveal 1
requirements 1
“100x” 1
reverts 1
“ARC: 1
revisited 1
“Alto 1
revolutionized 1
“Analysis 1
rid 1
right) 1
right.” 1
requires 25
research; 1
“A” 8
rightly 2
researcher 2
rip 1
“A”, 2
reserve 4
rise 2
“CPU 1
roam 1
“CPU-bound” 1
reserved 6
“Control-c” 1
“Evaluating 1
robust 9
“Evaluation 1
reside 11
room: 1
reside, 1
“Experience 1
resided 1
root). 1
“Exterminator: 1
“E”, 2
“Get 1
resource 14
round-robin 11
“Hmm... 1
resource, 4
“Hoard: 1
routed 3
“Ils 1
responsibility 6
“Informed 1
routine), 4
responsibility!” 1
routine1 1
responsibility, 1
“Inside 3
routine1, 1
responsive. 1
routines. 1
rest. 2
“Intel 4
restarts 1
“Is 1
rules 6
“Man-Computer 1
rules, 1
“Nonblocking 2
“Policy/mechanism 1
“Program 1
“Pthread 1
restore 17
“Relocating 1
“Reminiscences 1
run. 22
restored 4
“Segmented 1
restored, 1
run: 3
restricted? 1
“TENEX, 2
runaway 1
result! 2
“THE” 2
resulted 2
“Test 1
“There 1
“Time-Sharing 1
results. 6
“Towards 1
resumes 5
running. 23
“Volume 4
running: 1
“Wait-free 2
runs...) 1
runs; 3
“What 5
runs? 2
“Why 2
rv; 2
“With 1
rvals->x 2
“as 2
rvals->x, 2
rvals; 2
“brain 2
rvalue); 2
“core” 1
rw59 1
“first 1
rwrw- 1
“fun” 1
rw— 2
“have 1
“havoc” 1
“hello 1
safe 6
“hello, 1
sampling 2
“high 1
sane 2
“lock” 2
satisfies 1
“loop.s”. 2
“looping 1
or 469
“modern” 1
satisfy 9
“out 1
or, 5
“owned” 1
order! 1
“parent: 1
order), 1
“ready” 2
ordered 4
“real-world” 2
ordering; 1
“reserved 2
orderings 2
orderly 1
“running” 2
organization 2
“starts” 2
organization, 1
save 27
“steal” 1
“test 2
“tried 1
“turn” 2
saved 11
original 19
“what 1
original, 1
orphaned 1
other? 1
savings 9
saw 12
say. 2
others 14
saying 4
→ 17
saying, 1
others, 4
sbrk() 1
otherwise). 1
sbrk) 1
otool 2
return 169
scalability. 1
our-selves 1
out! 1
return-fromtrap 3
out-of-bounds; 1
returning. 1
out.” 1
returns), 1
reuse 1
scalable 15
reused 1
reused, 1
scales 6
revenge 1
scaling. 1
revert 1
scenarios 2
ridiculously 1
scenarios, 2
output 36
right. 5
output, 2
rights). 1
sched 7
outside 4
schedule: 2
root 3
scheduled. 2
root, 1
overall 9
round 2
overall, 1
routine. 2
overcoming 2
routinecalling 1
rude 1
rudimentary 4
overheads 14
rule 4
run; 1
overlap 6
overlap, 1
overlays 1
overlays, 1
run? 8
runnable) 1
overly 3
running). 2
overly-large 1
running; 3
overstate 1
running? 4
oversubscribed; 1
overwhelm 1
owns. 1
p1 8
p1, 5
p2; 5
p3.c), 1
p4.c 2
p4.output. 1
scheduler 110
p5 5
scheduler); 2
packing 2
runs 83
scheduler, 20
schedulers) 1
school; 1
runs, 21
scream, 2
runtime 2
scripting 1
runtime, 2
searched 1
rv 4
second-chance 1
rvals->y 2
second; 1
rvals->y); 2
sad 4
safely 3
sage 1
seconds 9
seconds!). 2
sake 5
sanity 1
seconds, 2
sat 2
satisfaction, 1
secretly 3
satisfactory 1
satisfied 1
saves/restores 1
saving 6
say? 1
says 2
says, 1
sbrk. 1
scale 4
scale, 1
scaling; 2
scans 1
scenario 4
section. 34
scenario, 3
scenarios), 1
scheduled3 1
sections; 4
scheduled; 1
scheduler), 1
secure 3
schedulers. 5
security; 2
schedules 4
see. 4
see: 2
scheduling. 9
seed. 1
schemes 5
seeds; 1
school 2
seeing 1
school, 2
seemed 1
science. 2
scourge, 2
scratch 3
screen 1
screen, 1
se, 2
searching 4
seen 31
segfault 1
second 78
second, 6
seconds), 3
section; 2
section? 4
segment 56
sections 6
sections, 2
segment, 14
security 21
segmentation.” 1
security, 1
see). 1
segregated 3
see? 6
semantics 8
seeds 11
seeds, 2
semantics, 5
seek 2
semaphores 1
sees 4
sentence. 2
sentence: 1
segment), 3
separa-tion 1
segmentation. 3
sequence. 2
segmented 4
sequence: 1
segments. 3
segments: 1
select 4
sequential 8
self)) 2
semaphore 1
sending 1
series 9
sense. 11
seriously, 3
sense: 2
sequences 5
serves 6
server 11
services 1
services, 1
server, 1
page 635
server-based 2
page(s) 1
service. 3
serviced. 2
setaffinity() 1
setassociativity; 1
page, 28
page-frame 1
page-not-present 1
page-sized 4
pageable 1
paged 1
pagereplacement 1
pages) 3
pages), 1
pagetable 4
paging). 1
painful. 1
sets 27
pairs. 1
pal, 2
set” 2
panacea, 1
shape. 1
papers. 4
paradigm 1
parallel 6
parallel, 2
parameter 6
parameter, 4
parameterize 1
parent; 1
parent? 1
park(). 2
part. 1
part: 4
share 36
passing 12
passion 1
path 8
path, 2
patience 2
patience, 1
patterns 4
pauses 1
pays 1
set 146
peach 4
set, 3
peach, 3
set-it-to-1 2
peaches 2
set-top 1
peaches, 1
severe. 1
peanut 1
peek 1
penalty 2
pending 1
sharing 30
sharing, 3
people 28
people, 1
shared 67
shells, 1
percent 6
she’ll 2
shell 12
perfect 7
shooting 1
shell, 5
performance; 5
short). 1
shifting 1
performance? 3
ship 1
performance” 1
shoppers 1
performance”, 1
shorter 6
performing 14
periodically 9
permissible. 1
permission 1
short 29
permit 1
persistence 1
short, 3
persistence, 1
shorter! 2
persistent 4
shortest 2
persistently; 1
shortest, 1
persists, 1
personally 2
perspectives 1
shouldn’t 5
peterson.s, 2
shown), 1
phase 3
phase, 4
phones 3
photos 1
phrase... 1
shows 94
shrink) 1
shutdown 1
sibling 1
side). 2
signal. 3
signal?? 1
signaling 17
signals; 1
silently, 2
similarly-named 2
simple. 10
simple: 39
simpler 6
simpler, 2
simplicity), 1
simulate 3
physical 236
simulated 1
physical, 1
physics. 1
simulations 4
picking 6
simulator 16
simulator, 1
single-queue 4
pieces 19
single-threaded 4
pieces, 5
piece” 1
sit 6
piena 1
pigs. 1
pioneers 4
situation 9
pipe; 1
six 3
pipes 4
sixteen 1
pipes, 2
size) 5
sizeof(int)); 2
sizes. 3
skills. 2
sleep; 4
sleeps 4
place 46
place, 9
slice 36
placed 24
placed, 1
slice, 7
should 274
placement 1
slides 1
placement, 1
platform, 1
player 1
player, 1
plays 2
showing 8
ple 1
pleasure 1
slightly 19
plural) 2
slip 1
slow; 2
slow? 1
slower 6
slower, 1
slowly. 2
small). 3
shown 35
small/random; 2
shown, 2
shudder 1
shuts 1
signal() 4
smaller 14
signaled 1
pointer 55
smaller, 1
snapshot 1
significant 4
snuck 1
similar. 2
pointer, 10
similarity 1
simple) 1
simplest: 2
so. 15
simplicity 7
points 15
software) 2
policy) 1
software), 1
pool? 1
softwaremanaged 1
poorly 3
solely 1
poorly, 1
simplicity, 16
solution). 1
poorly-programmed) 1
solution; 1
simplifying 3
popular. 1
simulation. 1
popularity 1
single-CPU 2
positively) 3
possibilities. 1
single-processor 5
solutions 11
singlequeue 1
site: 2
solutions, 3
solve? 1
sits 3
situations 3
solves 7
possible 31
possible, 14
possibly 1
potentially 7
potentially-starving) 1
power 8
powerhouse 1
precautions 2
predate 1
preempt 2
preemptive 2
preemptive, 1
premature 2
premise 1
presence 11
size 124
size); 2
present 36
size, 12
present, 2
sizeof(PDE)) 1
preserving 1
pressure 5
sizeof(PTE)) 7
pressure, 2
sizeof(int); 1
pretends 1
sketch/review 1
sketched 1
prevented 5
skill 2
skip 5
previous 19
sleep. 8
previously; 2
primarily 3
sleeping 5
sleeping, 3
primitive 9
sleeping/waking 2
primitive, 2
slice). 1
slicek 1
principles 5
slices 10
slices, 2
slight 2
slightly; 1
print 25
sloppy 4
printf("%s\n", 3
slow. 3
printf("child\n"); 3
slower? 1
printf("hello 3
slowly) 1
small. 1
printf("hello, 6
small: 3
smaller? 1
printf("parent: 6
printf("this 1
priori 3
priorities; 1
smart 13
priority). 1
sneaky 2
priority; 1
priorityadjustment 1
probabilistically 2
snippet 9
probability 2
so), 1
software 17
software, 4
software-based 1
software4 1
solidify 1
solution. 8
solution: 1
solve. 1
solve: 1
solved. 1
some_function(char 1
sometime 1
sometimes) 2
somewhere 4
somewhere, 1
problem 121
soon 25
soon, 1
sorry 1
sorry, 1
sorts 9
problem, 24
source. 1
proc-struct(B) 1
space). 3
procedure 12
space; 11
proceeds 4
space? 6
spaces 20
spaces, 5
spaceshared 1
space” 1
sparsely 1
spawning 1
spear-headed 1
process. 69
specifies 5
process: 2
specify 10
spectreattack.com 1
spectrum, 1
speculation 2
speculation, 2
processes. 22
speeding 2
speeds; 1
processes: 4
spinning), 2
processing 4
splintering 1
splits 1
processing, 3
sploitfun.wordpress.com/ 1
sprawling 1
processors. 3
spread 9
spring 1
sptr. 1
process’s 18
spuriously 2
produces 7
product 1
stack) 7
professional 1
stack), 2
professor. 2
stages 1
program) 1
programmer), 1
programmers. 2
started 11
programming. 5
some 505
started, 1
programming: 2
some, 2
starvation 3
starvation, 1
something. 2
starve: 1
stash 1
soon-to-be-executing 4
stashes 1
soon-to-be-exec’d 1
programs. 25
state. 10
progress 8
progress, 1
state: 2
proliferation; 1
statement. 2
promotes 2
sophisticated 13
pronounced 1
statistics 4
proofs 1
stealing 1
step). 1
sort 6
step? 1
steps 3
sounds 6
properly 15
stipulated 1
soup.” 1
properly, 1
stitch 1
stopped 2
stopped, 1
sources 6
properties 8
stops. 1
storage. 1
store-conditional) 1
storeconditional. 1
property 10
stored. 1
property, 2
proportional 3
straightforward 9
proportional-share 6
straightforward, 2
proportional-share, 1
strange; 1
strangest 1
prot 8
strategies 8
strategy 6
protect 11
strategy, 2
strdup("p4.c"); 1
protection. 3
strdup() 1
protective 1
streams 2
protocols 2
streams, 1
stretching 1
stride 17
stride, 1
string 12
string, 2
struction 1
structure. 16
provide 65
structure: 2
structures; 2
structures? 1
strung 1
student 3
student, 3
provided 20
studies. 1
provided, 2
study. 2
ps. 1
pthread_attr_t 2
studying 9
pthread_cond_wait(pthread_cond_t 3
stuff? 1
pthread_create(&p, 2
style. 1
subdirectory 2
pthread_create(..., 4
subproblem 1
pthread_mutex_init(&c->glock, 2
pthread_mutex_init(&q->head_lock, 2
pthread_mutex_init(&q->tail_lock, 2
pthread_mutex_lock(&lock); 2
pthread_mutex_lock(mutex); 2
subsequent 24
subsystem 4
subtle 1
succeeded. 1
succeeds 3
pthread_mutex_t 22
succeeds, 2
pthread_mutex_unlock(&c->glock); 4
success. 3
pthread_mutex_unlock(&q->head_lock); 4
success: 2
pthread_mutex_unlock(&q->tail_lock); 2
ptr; 2
publishing 2
pull 2
purely 1
space 278
purposes 2
put 41
q->head; 2
quantify 3
space, 50
question! 1
spaces) 1
questions. 3
sparc/ 2
special; 1
species, 1
specific. 1
specifically 6
specifically, 13
specified 8
specified, 1
speed-of-light 1
queue 55
speeds 4
speedup. 1
spell 1
queue, 17
spending 3
queue_init(m->q); 2
spin-lock 2
queued 1
queuingbased 1
quick 4
spin-wait 10
quick, 1
spin-waiting. 2
quickly; 3
qu’une 1
spin. 4
spinning. 2
race. 4
rage. 1
raising 3
split 9
splitting: 1
sponse 1
src); 3
stack-allocated 2
ran 15
ran, 1
stack. 17
stack: 3
stage 3
standpoint 1
standpoint, 1
staring 1
start. 1
starting 14
starve). 1
starve; 1
state; 2
random 37
stateful 2
stateless 1
random, 1
statements 1
randomized 2
states 15
range 7
states, 1
rapidly 1
rarely-used 1
rarely. 2
rate) 2
static 21
ravages 1
status 5
stays 4
stdlib.h 1
stems 1
step 2
rc 13
step, 5
rc, 3
rc_wait 3
rc_wait, 2
such 274
sudden 1
re-acquires 4
suffer 8
re-checks 4
re-energized 1
re-place 1
suggested 8
re-use 1
super 2
reaching 1
super-linear 1
superpages, 1
reaction 2
still 59
read() 1
stopping 4
support. 9
read(), 1
supporting 1
store-conditional. 3
read), 1
stored? 1
suppose, 2
reader: 2
supposed 4
stores 16
strange 8
strategy), 2
strcpy(dst, 4
strdup("wc"); 2
stream 7
stream, 2
ready 33
stride) 1
string) 2
ready, 3
strings. 1
stronger 2
real-world 2
stronghold 1
sure 56
realizing 1
stronglytyped, 1
surface. 1
surprise. 1
structure; 2
surprise: 1
surprised. 2
surprisingly 7
surprisingly, 6
susceptible 3
suspect 1
suspicion. 2
structures 59
swap 34
structures, 13
swath 1
switch() 3
really 52
stuff 8
switched 2
stuff, 1
switching; 1
sub-sequent 1
swtch: 1
really, 4
symbiotic 1
subject 4
rears 1
syscall 3
subsequently 4
subsequently, 1
substitute 3
substituted 1
reasons. 10
subsystems. 1
reboot. 1
subtleties 2
receive. 1
subtract 1
subverted 1
recency 1
succeed 2
success; 1
successful 5
suddenly 2
sufficient 2
sufficient, 1
recent 16
summarizes 1
recent, 1
support; 4
reclaim 3
support? 4
recognizes 1
system. 57
recommended. 1
supports 5
surrounding 2
recursion). 2
system: 6
survive 2
recursively 1
systems). 1
survive, 1
survived 1
swapoff. 1
red-black 4
swapon 2
redirects 1
systems; 9
systems? 2
system’s 3
reducing 6
swapped 12
t(B) 1
t). 2
reduction 2
switch. 4
t; 2
switches. 1
reduction, 1
table). 3
refer- 1
table; 5
table? 3
switching 17
reference. 8
switching); 1
switching, 2
refine 3
swoop 1
symbol. 1
synchronize 2
refined 5
reflect 4
refuses 1
synchronized 10
system). 4
regains 3
tables 49
regard, 2
region) 1
tables, 8
system; 8
tailor 1
system? 4
taken 16
taken, 5
takes; 1
talents, 1
talks 1
target 6
task 16
task, 5
tcsh), 1
teaching 1
team 2
technical 3
telling 1
ten 7
register 75
tend 7
terminate. 3
register, 6
terminated. 1
registers) 2
registers), 2
regs 3
terms 10
reject 4
relate 1
terms, 3
test-and-set. 4
test? 2
related 18
tests 5
text. 1
relatively 16
relaxed 2
release 23
released 10
systems 185
relegated 2
relevant 13
remainder. 1
remains. 1
remains: 2
remember: 1
removes 1
rent 1
repeat 1
repeat, 1
repeatedly. 2
repeating. 1
replacement) 1
replacing 3
replete 1
systems, 49
system” 1
represented 3
sz; 1
reproduce 1
reproduce, 1
reproduced 1
t 10
than 149
t, 2
thanked 1
that. 9
that: 3
request 35
that’s 8
request, 10
the?? 1
requester), 1
them) 1
them), 2
require 10
theme 6
themselves). 1
themselves; 2
required 15
required, 3
research 18
research, 4
research.microsoft.com/ 2
reset. 2
reside) 1
resides. 3
residing 2
resistance 1
resize; 2
resource) 2
resources. 5
respectively. 2
restart 5
table 175
restoring 5
restricted 7
restrictions 1
table, 26
tables! 1
tables) 2
tables), 1
tackle 4
result. 11
tackled 2
result: 2
tail. 2
take? 2
resulting 24
results? 2
takes 50
takes, 1
resume 8
resumed, 1
talk 10
retaining 3
targeted 1
rethink 1
tasked 1
tasks. 1
tech 1
technique. 1
techniques? 1
technology 7
tell? 2
return-from-trap 17
return-to-libc. 1
tells 11
temporal 7
returned 15
temporarily 5
returned, 2
tempting 4
returning; 1
tension 3
returns. 3
then 227
reusing 1
revolutionary. 1
term 15
rewrites 1
terminal 4
richer 1
terminal, 1
terminates 1
right). 2
terms) 1
right; 1
then, 16
terrific 4
terrific, 1
theory 4
right? 8
test 7
theory, 1
right”, 1
test-and-set.s. 2
there). 1
risen 2
testand-set 1
tests), 1
road” 1
there; 5
text). 2
textbook 1
textbook, 1
there? 4
thereby 1
that? 7
therein 1
room 17
therein, 2
rosy 1
thermodynamics 1
rotational 1
rough 3
things. 7
think) 1
thinking? 1
third 18
third, 2
routines 41
this? 5
routines, 5
ruins 2
their 91
them. 16
themselves 4
themselves, 1
theoretical 1
those 84
those, 1
though 29
though, 8
thought 17
thr_exit(); 1
thread; 7
thread? 2
threadID. 2
there 250
there, 2
therefore 2
therein), 2
thesis 1
thing. 2
thing... 1
thing: 4
things; 3
think. 2
thinking 23
thinking, 2
thirty 1
threads 197
threads); 2
run 374
run, 24
threads, 38
thread” 1
run-and-yield 2
threats, 1
three-instruction 3
run-time 7
threshold. 2
tick 1
tick-by-tick 1
ticket.s. 2
ticket; 2
tickets 30
tickets, 4
tidbits 2
running 227
running, 30
runtimei 1
rw 6
rwx 4
sad! 1
safe. 2
safer 2
said 43
said, 10
satisfying 2
say 29
say, 5
scalability 2
scalable. 5
scales. 1
scaling 2
scaling, 1
scan 5
scanning 3
scenarios. 1
scenes, 2
schedule 14
schedule(curr); 1
scheduled 11
scheduler. 10
scheduler’s 1
scheduling; 4
scheduling? 1
scheme 6
scheme, 1
scientific 1
scientists 4
scoff 1
scratched 2
scream. 1
script 2
second-level 3
seconds. 3
secretary; 1
section 55
section, 24
time 306
see 272
time, 75
time-share 1
see, 15
time-shared 2
time-slicing. 1
seemingly 12
timeline 3
timeline, 1
seems 12
timeout 4
segment. 8
timer-interrupt 1
timer. 1
segment: 10
times) 1
segmentation). 2
times), 1
timing? 1
segmentation.py 5
tip: 1
segmentation; 2
segmentation? 1
tlb.c, 1
segmentation” 1
segmenting 1
segments; 1
tmp->next 4
segment’s 1
self; 2
semantics. 2
seminal 1
sends 3
sense; 5
sense? 1
senses 1
sensible 4
sentence 1
separate 17
sequence 24
sequence, 8
serve 2
serve, 1
served 3
service 11
serviced 4
serviced, 1
setpark(). 2
sets. 2
sets: 2
settle 1
setup, 2
shade 1
shaded 1
shared. 1
shmget() 1
short) 5
short-lived 2
short-lived, 1
shortly 1
should. 1
show 24
show, 1
side 4
sign 3
signal(). 1
signals 13
signals, 2
similar 45
similarly; 2
simplest 13
simplicity. 3
simplified; 1
simplify 1
simulating 1
simulation 7
simultaneous 1
single-entry 2
sinister 1
site 1
sitting; 1
situations. 1
six-level 1
size. 7
size: 16
size=100); 1
sizeof() 7
sizeof(), 1
sizeof(PDE)). 1
sizeof(node_t); 1
sizeof(x)); 2
sizes; 2
slabs 1
this 1109
sleep 30
sleep, 13
sleeping. 4
slice), 2
sloth” 1
slots 7
slots, 3
this, 32
thorough 2
thr_exit() 3
slow 15
thrashing 2
slow, 8
slowdown 2
slowly; 1
small 61
small, 7
small-sized 1
smallest 5
snatch 1
sneaks 2
snippet. 1
snippet: 3
snooping 1
snooping, 1
so). 1
so; 2
so? 5
software-managed 5
software. 2
solid-state 1
solution 44
solution, 10
solve 20
solved 2
someday). 1
somewhere. 3
somewhere... 1
soon-to-be-faulted-in 1
soon-to-be-run 1
soon-to-be-running 1
soon. 1
sorry. 1
sorted 1
sound 5
sounds! 1
source 23
source, 1
space! 2
space) 4
space), 4
space1 1
spaces. 7
spans 1
sparsely-used 2
special 22
specialize 1
specialized 4
specification 1
specifics 1
specifying, 1
speculative 1
speed 12
spends 1
spins 11
spins, 2
splay 1
splits. 1
sptr 2
src) 1
stack). 4
stack-smashing 1
stack; 3
stacks 4
stacks, 3
stale 1
standard 22
standards/SPARCV9.pdf. 1
stands 1
starting) 1
starts 25
starts, 3
starvation. 7
starvation: 1
starve 2
starved 1
state 73
state, 13
stated 2
stated, 2
statement 3
statement, 1
statically-initialized 1
stay 3
steal 3
step-by-step 2
stolen 1
stood 1
storage 12
storage, 2
store 24
store, 2
store-conditional; 2
storeconditional 1
stored 15
str); 1
straightforward. 2
straightforward: 6
strategies. 1
strategy. 1
streams. 1
strength: 1
strict 1
stride. 1
stringing 1
strings? 1
strive 5
strlen(), 1
thread 449
strong 2
strong, 1
struct 49
thread, 48
thread-local 2
thread-safe, 2
threads) 1
threat 1
structure 73
structure, 24
stuck; 3
studies 4
study 52
study, 3
studying. 1
style, 1
sub-jobs, 1
sub-microsecond 1
submitted, 1
substrate 1
subsystem: 1
subtle: 2
succeeded 4
succeeded, 2
three 69
three, 3
success 9
three-quarters 1
success, 5
threshold; 4
successfully 5
successfully, 1
such. 1
throw 6
suffering 2
suffering, 1
suffice 3
suggested. 1
suggests 2
suit 1
suitable 2
sum 3
sum, 1
summarize 5
summarize, 1
sun.com/solaris/articles/atomic 2
supply 1
support 110
support, 16
sure. 2
surely) 1
surface 3
surprise 2
surprised 2
surprising? 2
surprisingly!) 1
swapping 12
swapping, 1
switch? 2
switches; 1
switches? 1
switching) 1
switching), 1
swtch 1
synchronizations 1
system 363
system, 65
systems) 4
systems), 1
table! 1
table) 2
table), 1
tables. 6
tail_lock; 2
take 97
take, 3
taken. 1
taken: 2
tandem 5
tapes 1
target. 1
target’s 2
task. 7
task: 1
thus 486
taste 2
taught?! 2
tcsh). 1
teach 1
techniques 24
techniques, 7
technology-driven 1
tell 28
tennis 1
thus, 54
terminate 6
terminated 2
terrible 3
terribly 1
test-and-set 15
test-and-set.s? 2
test-and-test-and-set.s. 2
testand-set! 1
ticket 27
tested 1
ticket, 2
tickets), 1
time! 2
time) 4
text 9
time), 4
text, 2
time-sharing 7
thanks 4
time-slice 5
thanks, 1
time-space 2
timedlock 4
timely 3
timer; 1
timer? 3
timers, 2
times. 7
timing 5
timing, 3
tiny 21
tips 2
tired 1
tirelessly 2
tmp; 7
to! 1
to) 1
to), 1
together. 5
tolerate 1
tomes 1
tons 2
too. 6
too: 2
tool. 1
top) 1
top), 1
top-level 2
total 26
towards 3
traces. 2
tracing 6
tracing, 1
track; 1
tracks 8
trade-off 4
traditionally 1
tragically 2
transferred 4
transfers 7
transfers, 1
transform 4
transistors 2
translation) 1
translation), 2
translations. 6
translations: 2
transparency2 1
trap), 1
trapped 2
traversal 3
traverse 1
tread 1
treasure-trove 1
treat 4
treatment, 2
tree 15
tree, 4
trees), 1
trend? 1
tricks 2
tricky: 1
tried 4
tried, 1
trigger 2
true 14
true, 3
truly 9
trylock 4
tune 1
turn; 4
turnaround. 1
turns 37
tweak 1
twice 5
twice, 5
two-phase 6
two. 3
two: 1
type. 1
type: 1
typesetting 2
uber-engineer 1
uint 1
unallocated 2
unbounded 1
uncommon 2
undefined. 1
underpowered 1
understand 112
understand, 3
understandable 2
understandable, 1
understanding. 1
understanding: 2
undertaken; 1
unfortunately 4
unfortunately, 14
unified, 1
uniform, 1
unimaginably 1
uniprocessor, 2
unit 7
unknown 1
unlock 13
unlock(&m) 1
unlock(lock_t 10
unlock, 2
unlucky) 1
unmodified, 1
unnecessary 1
unpacking 2
unsurprisingly: 1
unsuspecting 1
until 52
unused 14
unused, 1
up; 2
up? 3
update) 1
updated) 1
updating 13
upon. 1
upper 1
upper-half 1
upwards. 1
urging 1
us 84
us, 2
usable 2
usage; 1
use; 4
used; 2
used? 1
useful 69
useful, 11
useful2. 1
useless 2
user-facing 1
user-level 6
user/supervisor 1
usermode 1
users. 1
users: 1
uses 70
use”, 1
using. 2
usual. 2
utilities 1
utility 3
utilization 5
utilization, 1
utilized. 1
utopian 1
valid 51
valid, 14
valuable 3
value; 22
value? 2
values 75
values, 12
variable-sized. 1
variable. 8
variable: 2
variable’s 1
variants 4
variety 3
vary. 2
varying 2
vengeance’.” 1
versus 5
via 53
viewed 4
virtualization). 1
virtualization; 1
virtualization? 1
virtualizing 14
virtually 9
visible. 2
vision 1
visionary 1
visited, 1
visualization. 1
visualize 1
void. 1
volatile 5
vruntime. 1
vruntime: 1
vulnerabilities. 1
vulnerable 2
wait(). 3
wait(NULL); 3
waiter 2
waits 36
wake 33
wakeups 2
wall 1
want. 1
warmed 1
warmup 1
wasn’t 2
waste 23
wasted 4
way). 1
way? 1
ways 19
ways, 1
that 1398
that, 11
we 992
web. 1
weight 1
weight, 1
weight0 1
weirdly 1
well 88
well, 15
well-defined 1
well-meaning 1
weren’t 1
to 4068
what 280
when. 2
to, 13
whenever 3
wherever 2
today. 6
whet 1
today’s 2
while? 1
together! 1
whims 2
told 2
too! 2
top 32
topic 18
why 58
topic, 4
why, 1
total). 1
widespread 1
totals 2
wild 1
totaltickets); 1
touch 4
touches 2
tough 2
toughest 1
trace 24
trace, 3
tracking 2
trade-offs 5
tradeoff 1
traditional 11
transfer. 1
transformation 2
transforms 4
transition 6
translated), 2
translation 46
translation, 15
translation-lookaside 1
translations! 1
transparently 3
trap 52
trap, 3
traversals 2
treasure 1
treats 1
tree? 1
trees 4
trees, 4
trials 2
trials, 1
trickier. 1
tries 41
triggers, 1
trivial 2
trouble. 3
try 64
turning 9
tweaks 2
twenty 1
twice). 1
two-CPU 1
two-level 7
type) 1
typically 1
typing 9
typing, 1
unasked 1
unblocked 2
uncaught, 1
under- 1
undergraduate 4
underlies 2
underly 1
undertake 1
undesirable) 2
undoubtedly 2
unexpected. 2
unfortunate 5
unique 7
units 1
units, 2
unit”, 2
unlock): 2
unlock? 2
unmask 1
unpark(threadID) 2
unqualified 1
unrealistic 2
unrealistic, 3
will 580
unreasonably 1
will, 2
untimely 6
window 3
window, 3
up. 7
winner) 2
wise 1
wished 2
update 54
update, 1
updated 8
updated, 2
uplifting! 1
upward 1
usage. 4
use. 16
used. 15
useful? 1
user 117
user, 3
user-defined 2
usually 52
usually, 2
utility? 2
utilizing 4
v9 1
val 2
valgrind 15
valid). 1
valid; 1
valid? 3
value. 12
values). 2
values? 3
vanishes. 1
variable) 1
variables. 13
varied 2
vastly 1
vector 1
vector, 1
versa. 1
vi, 1
vice 1
vice-versa. 1
view 14
view, 1
violations). 1
with 638
without 70
woken 13
woken, 2
won 3
wondered 1
wonders. 1
virtual 253
virtual, 1
word 14
word, 1
virtualization. 4
work! 3
worked 6
virtualize 13
worked, 2
workflows. 1
workings, 2
virtualized 6
virtualized, 1
workloads. 3
virtue 2
vmstat 2
vmstat, 1
voo-doo 2
vruntimei 2
works. 22
vs. 8
wait()) 1
wait(address, 2
wait-for-me.s. 2
wait. 2
waiters 4
world 26
world!”, 1
world, 6
world\n", 1
worried 1
worry! 2
worse 9
worse, 8
worst-case 5
worth 20
wouldn’t 5
wrapper; 2
wrappers 2
wrappers, 2
wrapping 2
wreakers 1
waiting 94
write() 5
write(), 1
writes: 1
waiting, 5
waitpid() 2
waitpid()); 1
wake(address) 2
wake? 1
writing 21
written). 1
written; 1
wakes 15
written? 2
wakeup/waiting 2
walk 1
wanted 3
x 12
warm 3
x, 2
warnings. 2
x86. 1
x[10]; 1
wary 7
xv6 6
xv6, 1
y; 2
yeah! 1
years 19
years, 9
yelling 1
yet. 4
yet: 2
yield() 2
yield.s 2
yield.s, 2
you). 1
you; 1
you? 9
yours. 2
yours: 1
yourself2! 1
yourself; 3
you’d 9
you’ll 37
zero 10
zero, 3
zeroes 2
zeroing. 2
| 8
|| 2
}; 8
ˆC 2
’03. 1
was 188
’09, 1
’10, 4
’14 1
’18, 2
wastes 10
’63 3
watch 5
’81, 5
watches 2
’85, 1
water 1
’89, 1
’92. 1
way. 6
’94, 2
’98, 1
way: 5
’Approximate’, 2
wc), 1
’b’ 1
weaknesses. 1
’b’, 2
website 2
’flag’ 2
weightk 1
’new’ 2
weights 2
’peek 1
’self’ 2
weird 3
“...with 1
well-regarded 2
“010101”, 1
well-suited 2
“21” 2
well; 1
“80-20” 1
“Advanced 4
“Ah! 1
“Aleph 1
“Algorithms 2
“Animal 1
“Change 1
“Dahm 2
“Extending 1
“Fact 1
“Guide 2
“Hints 3
“Hoare” 1
“Information 1
“Introduction 3
“Just 2
“My 1
“One 1
“Our 1
“Performance 1
“Principled 1
“Priority 1
“Profiling 1
“RTFM.” 1
were 76
“Reese’s 1
“SDS 1
“Shared-access 1
“She’s 1
we’d 9
“Someone 2
“Survey 1
“They 2
“Think 1
“Transaction 2
“Understanding 5
“Using 2
“baby 1
“bad” 3
“big 1
“bounds” 1
“catch” 1
“crux 1
“demon”, 1
“ease 1
“easy 1
“familial” 1
“goodbye”. 1
“got 1
“hello”; 1
“hot” 2
“jemalloc” 1
“just 3
“other 1
“perfect”. 1
“privileged” 1
“right 1
“second-system 1
“smart” 1
“ticket-assignment 1
“too 3
“walk” 1
“yes.” 1
we’ll 112
whatever) 1
when! 2
• 69
← 2
− 7
where 166
whereas 14
whether 59
which 501
which, 4
while. 2
while2 1
whole 5
whom 2
why? 2
widely), 1
wikipedia 1
windows, 1
wine, 1
winner 5
winter. 1
wired 2
wisdom 1
wish 26
wishes 16
with? 1
within 89
within, 1
wonder 3
wondering: 4
won’t 21
won’t, 1
words 2
words, 5
work 150
work, 23
work-stealing 2
worker(), 1
workload 14
workload, 11
world; 1
world? 1
world” 1
worry 21
worst 7
worst-fit 2
worst-fit, 2
worstcase 1
worthwhile. 3
would 200
wreak1 1
write 63
write, 3
wrong. 3
wrote: 1
www.takeourword.com/TOW146 1
x86) 1
x; 4
x? 1
y-axis 2
years; 2
yell) 1
yes. 3
yes: 3
yet! 1
yet), 1
yield 21
yield(); 2
yield, 2
yield-based 2
you. 8
you: 1
your 201
yourself. 1
yourself2 1
you’re 18
you’ve 6
zero). 1
zplot. 1
{ 281
© 21
’ 11
’04, 2
’13, 5
’75, 1
’95. 1
’a’ 4
’a’, 1
’threshold’, 2
“1984” 1
“2Q: 1
“A 15
“Ad 2
“Atomic 2
“A”), 1
“B” 8
“Cold-start 1
“Dynamic 3
“Earliest 1
“Efficient 2
“Electrochemically 1
“Everything 2
“He 1
“History” 2
“I 1
“It 2
“Jack 1
“Javascript: 2
“KASLR 1
“MIPS 3
“Mac 1
“Machine 1
“Membrane: 1
“Memory 1
“Mesa” 1
“Microreboot 1
“Monitors: 1
“Myths 2
“OSSpinLock 2
“OS” 1
“OS”, 1
“On 2
“Operating 2
“Parallel 1
“Premature 2
“Purify: 1
“RISC-I: 1
“Run-Time 1
“Solaris 3
“Solution 2
“Structure 1
“Symmetric 1
“System 1
“Take 1
“The 40
“Tolerating 1
“U 1
“Valgrind: 1
“You 2
“a 1
“all 4
“at 1
“atomic 2
“batch” 1
“being 1
“best” 2
“cold” 2
“commoncase 1
“correct” 4
“emulation” 1
“fault.” 1
“free” 1
“glibc 2
“implements” 2
“interactive” 1
“it 1
“lost” 1
“older” 1
“on 1
“operating 1
“out-of-bounds” 1
“page 1
“reliability”, 1
“response”; 1
“right” 1
“same” 1
“setting” 2
“the 1
“uninitialized 1
“works” 1
“wreaked”? 1
” 4
the 8323
them). 2
them; 2
them? 3
then. 1
theory-types 2
there! 1
therein. 5
therein: 2
these 222
these, 4
they? 2
thing; 1
things 46
things); 1
things, 6
thing” 1
think-ing 1
think? 1
thinking! 1
thinks 7
this! 2
thousands 10
thousands, 1
thr_join(); 1
thread), 2
thread.c 1
threadID 2
threadID, 2
threaded 2
threads. 19
three) 1
three-level 1
threshold 11
threshold, 2
through 56
through, 1
throughout 13
tickets. 5
tickets: 1
tightly 1
time-efficient 1
time-slicing 1
time-tested 1
time. 66
time: 2
timeline. 2
timer 36
timer, 4
times). 2
times; 3
times? 2
timings. 1
tip 2
tip, 4
tive) 1
tmp 8
tmp); 5
tmp->value 2
to. 4
today 7
today, 4
too). 2
too; 1
took 16
took, 1
tool? 1
tools 16
tools, 3
too” 1
top-to-bottom 1
topic. 1
total) 2
touching 1
trace: 1
track 27
track, 1
trading 1
traffic. 1
trans- 1
transactions 1
transfer 10
transformed 2
transitioning 4
translates 5
translation. 10
translations). 1
translations; 1
transparency; 1
transparent” 1
trap. 1
trapping 3
traversing 2
treated 6
trials. 1
trick 3
trouble 9
trouble, 2
true! 1
trusts 4
truth. 1
truth: 2
try. 1
trying 15
tuning 1
turn 32
twins!” 1
two-thirds 1
type). 1
typedef 33
types 33
u 2
ubriaca. 1
ugly 3
unaffected 1
uncommon), 1
underlying 9
understand! 2
unfair 2
unfair, 1
uniformly, 1
unifying 1
uninitialized 1
uninteresting: 1
unit) 1
units. 3
universal 1
unlikely 3
unlock(&mutex); 2
unlock() 14
unlock(), 2
unlocked 2
unpacks 1
unpark 2
unpark(queue_remove(m->q)); 2
unpleasant. 1
unrealistic. 1
unrealistically 2
unsatisfying) 1
unsigned 2
unusable. 1
unused) 1
unusual 3
up 156
up, 12
update. 1
update: 2
updating) 1
upper-case 1
upper-level 2
upsides 1
urgent, 1
usage 16
usage, 2
use 317
use, 15
use?) 1
used 175
used, 8
user-managed 1
user-mode 3
user. 7
user’s 4
uses), 1
using). 2
using; 2
using? 2
utilized? 1
utilizes 1
v; 2
valgrind. 1
valid), 1
value 233
value); 2
value, 17
variable). 1
variable-length 2
variable; 2
variables 33
variables, 5
variablesized, 1
variable” 1
variant 3
variants) 1
various 27
vary). 1
vector-like 1
vector. 1
vengeance’. 1
version? 2
versions 8
viewing 2
viewpoint 1
violation 2
violation, 2
virtual-memory 1
virtual-to-physical 6
virtualization 20
virtualization, 7
virtualized. 1
virtuallyindexed 1
visually 1
void; 2
voluminous 2
wait 53
wait(); 1
wait, 4
wait-for-me.s 4
waitFirst 2
wakeup, 1
waking 5
waking, 1
want; 1
wants 16
wary: 1
was. 1
waste! 1
wasteful. 2
watch. 1
watching 1
way 97
way, 20
weakness 1
weaknesses 1
weightA 1
weighted 1
weighti 2
welcome! 1
well) 1
well), 2
were. 1
which... 1
whichever 4
while 170
while, 8
wide 1
wily 2
winner. 2
winner: 2
wishing 3
with) 2
within. 1
wondering 2
work. 24
work: 1
workers 1
workers, 2
working 28
workload. 6
workload: 1
works3 1
works; 1
works? 3
workshop, 1
worlds. 2
worlds: 1
world”. 1
worry. 3
worry: 1
worse! 1
worthwhile 2
wrangling 1
wrapper 3
wreaked?” 1
write(fd, 1
write. 2
write: 1
written 18
written, 1
wrong 15
wrong, 4
wrote 10
www.cs.tau.ac.il/˜shanir/concurrent-data-structures.pdf. 2
www.nds.rub.de/lehre/seminar/SS06/Werthmann 1
www.sparc.org/ 1
www.stanford.edu/˜ouster/. 1
x) 1
x86). 2
x86-version 2
x86.py, 4
x86” 2
yes, 6
yielding 5
you 995
you, 11
younger 1
yourself 7
yourself, 2
yuck! 1
zero), 1
zero.” 1
zeroed 1
zombies 1
zombies, 1
zsh 2
} 271
· 4
˜mark/syscall.html. 1
– 19
’02, 2
’11, 2
’15, 1
’19, 1
’68 1
’93. 1
’95, 2
’Classic 1
’current’ 1
’c’ 3
’c’, 1
’e’. 1
’mutex’ 2
’pedantry’ 1
’wreak 2
’w’ 1
“An 9
“Aspects 1
“Before 1
“Bell 1
“But 1
“B”. 2
“Cloud 3
“Computer 6
“Concurrent 2
“Converting 1
“Cooperating 7
“H-Pucks”) 1
“H”, 2
“Idleness 1
“If 2
“Improving 1
“It’s 2
“John 1
“Load-Link, 2
“Lottery 2
“Mach: 1
“Making 2
“Multics: 1
“Multilevel 1
“Observations 2
“One-Level 2
“One-level 2
“OpenSolaris 2
“PThreads 2
“Perfection 1
“Practical, 1
“Programming 7
“TLB”. 1
“Time 1
“T”, 2
“Virtual 8
“bad 1
“buddy” 1
“child”, 1
“condition 1
“cooperating 2
“daemon”, 1
“direct 1
“discovered” 1
“double 1
“drum” 1
“fault” 2
“first-in” 2
“foo” 1
“interrupts” 1
“limited” 1
“lmbench: 1
“longword” 1
“main: 14
“pinning 1
“private 1
“process 1
“prove” 2
“real” 3
“reasonable” 1
“ten-items-or-less” 1
“test” 2
“the”). 2
“yeah, 1
