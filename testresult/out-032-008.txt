2 25
20 1
B 13
!= 7
"hello 1
"wc" 1
6 22
F 8
PAGING 21
!StoreConditional(&lock->flag, 2
"B"); 4
%d)\n", 4
%eax). 1
%edx, 1
%esi, 1
&oops; 2
&rvals); 2
&x); 1
((flag[1-self] 2
(-M 1
(-m 2
(./x86.py 4
(01) 1
(0x1) 2
12 19
C 16
S 28
#2: 2
#1: 2
3 1
16 9
"common.h" 7
"hello"; 3
# 16
$0x03, 1
$0x03e8,%eax 1
%eax 24
%edi, 1
&lock); 2
(-n 1
(0xC0000000 1
(101) 2
(11) 1
 26
8 22
"fork 4
$0x1,%eax 4
%eax,0x0(%ebx) 1
%ebp 1
%ebx 1
&& 2
(-1KB) 1
(-p). 1
(0, 3
(1110) 1
(20%), 1
(21) 1
(22.1) 1
(24113) 5
(3) 2
(3764 1
(4 3
(4088 1
(AMAT) 1
(As 1
(C) 1
(Code) 8
(G), 1
(Gulps) 1
(KASLR). 1
(L 2
(LRU) 1
(Left) 3
(Linux, 1
(LoadLinked(&lock->flag) 4
(Logical) 1
(MMU), 1
(P); 1
(PC) 4
(PCB). 1
(PD 2
(PDIndex 3
(PFN 2
(PID). 1
(PSJF) 1
(PTE): 1
(PTIndex 3
(Pmiss 1
#define 2
%ax 4
%edx 1
%esi 1
14 14
M 20
! 2
"A"); 4
"usage: 2
$0x1, 6
%d 5
%d\n", 9
%dx 6
%eax,8049a1c 4
%ecx, 1
%esp, 1
%lld\n", 2
&; 1
&rvalue); 2
(-L 2
(-c) 1
(Proc 2
(S) 3
(SJF) 1
(Software) 1
& 29
10 21
18 4
(-l 4
(-s) 3
(1 1
(10 1
(TestAndSet(&m->guard, 4
(VM) 1
#include 62
$0x0,(%edi,%eax,4) 1
%bx 2
%dx. 2
%eax, 8
%edi 3
&args); 4
&m); 3
(-a) 2
(-i) 4
(-q) 1
(0x200000), 1
(120−0)+(20−10)+(30−10) 1
(-P) 1
(1024). 1
(104) 1
(15th, 1
(1e7) 2
(256) 1
(APIs) 2
(BFS)2 1
(I/O). 1
(LDE) 1
(MIPS), 2
(OS)3 1
(P1), 1
(PA), 1
(Q0), 1
(R, 1
I 26
!zero, 2
"A" 1
"common_threads.h" 4
$0x0) 1
$0x1 2
% 8
%ecx 1
%esp 1
%p\n", 4
&mutex); 8
(100 4
(1000 1
(117 1
(32-bit 1
(34KB), 1
(4KB 1
(9.1) 1
(@PFN:101) 1
(16 3
(VPN 14
(RDLK) 2
(SSDs) 1
 32628
22 1
4 23
L 17
T 10
"wc"... 1
#3: 1
%eax), 1
%ebp, 1
%ebx, 1
&stack); 1
( 6
(*start_routine)(void 2
(-T). 1
(-s 2
(/tmp/file) 1
(010101), 1
(117). 1
(2012-01-30-1-g1c41342) 1
(224 1
(26 1
(28KB) 1
(4096), 1
(512 2
(7.2) 1
(8 1
(@PFN:100) 1
(BKL). 2
(BSD). 1
(B’s 2
(CPU 2
(D); 1
(G) 2
(KNUTH’S 1
(LFU) 1
(Simulation) 16
(T1) 4
(THE), 2
(TLBs) 1
(TlbEntry.PFN 4
(VP 3
(VPN=1, 1
(Line 5
(MMU) 1
(P 1
(P0 1
(PDE). 1
(PTE.Present 2
(S), 1
(address 2
(assume 2
(bash?) 1
(c1–c3). 1
(c4). 1
(VPN=06), 1
(1) 13
(SJF), 1
(2) 4
(2134) 6
(32768) 1
(34K) 1
(7030) 1
(Alpha), 2
(And 1
(B) 1
(C 1
(DEC). 1
(DMA) 1
(EEVDF) 1
(Hardware-based) 1
(K 1
(LW 1
(Lines 6
(MMU); 1
(MRU). 1
(NULL 1
(P2) 1
(P=1), 1
(PDE.PFN 2
(PFN). 1
(PTE.PFN 2
(R) 1
(STDOUT 1
(T2), 2
(TestAndSet(&flag, 2
(Third 2
(Tp). 1
(VPN). 1
(VPN=06, 1
(char 8
(depending 2
(100) 1
(Spring), 3
(TD 1
(Tc1 2
(This 1
(Thread 2
(U/S) 1
(done 4
(due 6
(effectively 1
(even 3
(forever), 1
(hardware 1
(With 1
(VA) 2
(VPN=08). 1
(Virtual) 1
(Volume 1
(a2), 1
(a[7] 1
(i.e., 96
(incredulous) 1
(interrupt) 1
(-p 2
(-w) 1
(212 1
(a.k.a., 2
(again 3
(alas). 2
(arbitrarily; 1
(just 5
(lazily) 1
(20-ms 1
(24114) 5
(256 1
(32 2
(5 1
(because 8
(A 14
(ASLR). 1
(Again) 1
(Another 1
(Bounded 1
(CFS), 1
(COW 1
(C’s 1
(FCFS). 1
(Good 1
(Linux) 2
(MFU) 1
(MLFQ) 1
(NOT 1
(Niceness) 1
(OS). 1
(P0) 1
(PCB); 2
(PFN), 2
(R/W) 1
(A, 5
(AS) 1
(August, 1
(232 1
(400)2 1
(4200) 1
(7.1) 1
(ARM). 2
(Advanced) 1
(A’s 2
(Bad 1
(a3). 1
(Without 1
(14th) 1
(200 1
(28 1
(64 1
(9.2) 1
(A) 2
(ASID) 1
(a[3] 1
(Ready, 1
(STCF) 2
(StoreConditional(&lock->flag, 2
(Success 4
(TM 1
(Tc1) 2
(Tc2 1
(Timer 1
(VPN), 2
(main) 4
(CFS) 2
(Blocks) 4
(C, 1
(CanAccess(PTE.ProtectBits) 4
(again, 3
(c1, 1
(a 21
(a[8] 1
(CompareAndSwap(&lock->flag, 2
(about 1
(B 3
(CTSS), 1
(array-based) 2
(counter 17
(max 2
(all 6
(allocated 3
(and 111
(approximate) 2
(atomically); 1
(as 49
(created 1
(modified), 1
(my 1
(myturn). 2
(Chapter 2
(HW 1
(Hardware) 1
(assert(hptr->magic 1
(curr->key 4
(Dynamic 2
(almost) 1
(normally 1
(CanAccess(TlbEntry.ProtectBits) 4
(b) 5
(LAUER’S 1
(London), 1
(easily) 2
(erroneously) 1
(finally) 1
(first-in, 1
(formerly 1
(but 14
(atomic_add_zero 2
(MLFQ). 2
(MQMS) 1
(another 1
(note 4
(older 1
(freeing 1
(get 1
(c) 3
(FIFO) 2
(Measurement) 3
(O 1
(Offset 1
(P). 1
(by 13
(hopefully 2
(instead 1
(its 2
(limit) 1
(Editors 2
(our 4
(P2), 1
(c3), 1
(c2). 2
(c4), 1
(clearly 1
(line 3
(load 1
(p1), 1
(PDE.Valid 1
(do 5
(double 1
(assumes 2
(current) 1
(Figure 45
(OS 1
(P1) 3
(P=0), 1
(PA) 3
(especially 2
(available 1
(bigger) 1
(c->local[cpu] 2
(p1– 1
(PTE.Valid 4
(PWT, 1
(Process 1
(flag) 2
(dare 1
(long 2
(c1), 1
(p2); 1
(p4.c) 1
(PCB), 2
(RSS). 1
(free) 21
(gadgets, 1
(hence 1
(count 8
(during 1
(pause 3
(physical) 1
(pid:29146) 4
(potentially) 1
(maliciousness) 1
(initial) 1
(int 6
(job 2
(PDE) 2
(PID), 1
(e.g., 108
(queue_empty(m->q)) 2
(rc_wait:29267) 1
(M 1
(each 2
(left 1
(Right) 3
(PTE) 9
(fill_ptr 1
(four 1
(rc_wait:29384) 1
(No 1
(either 3
(let’s 4
(SJF, 1
(Q2). 1
(R 1
(from 16
(realistically, 2
(PFN) 6
(PM 2
(PTEs) 1
(Page 1
(PowerPC), 2
(RR) 2
(Run 1
(SQMS) 1
(emacs 1
(likely) 1
(September 1
(T2) 2
(ROP) 1
(full) 1
(requiring 1
(Success, 4
(T1 2
(TCBs) 2
(modulo 1
(TestAndSet(&lock->flag, 2
(SN) 1
(gasp) 2
(returning 2
(fun!). 1
(given 1
(Tarrival 1
(mutex->flag 2
(VPNs 1
(TLB 16
(generally) 1
(slow) 1
(something 2
(global 3
(Tc1), 1
(myarg 2
(Virtual 1
(Tc2) 1
(header_t 1
(literally) 2
(sometimes 10
(hopefully) 3
(Tp) 1
(VAX/VMS) 1
(VPN) 2
(VPN=07), 1
(highest 1
(lowest), 1
(spinning 2
(i 19
(note: 2
(a.k.a. 6
(Thousands) 2
(VirtualAddress 9
(a[4] 1
(argc 2
(start 2
(stop 1
(onto 2
(also 7
(a) 5
(horribly) 1
(mentioned 2
(at 12
(atomic_bit_test_set 4
(average: 1
(out 3
(an 2
(a[0]) 2
(include 2
(more 3
(implicitly) 2
(t0.c) 2
(binary 1
(p2.c), 1
(probabilistic) 1
(probably), 1
(int) 10
(most 2
(implying 2
(kernel 6
(both 2
(c3). 3
(c5), 1
(pthread_join) 2
(large) 2
(mutex 2
(taking 2
(labeled 6
(ld.so) 1
(locked). 2
(long) 1
(seconds) 6
(lock-holding) 2
(myarg_t 4
(thank 1
(assuming 5
(but, 2
(bytes 2
(mem.c) 1
(still 1
(log2 1
(nearly 2
(think 5
(above), 1
(called 9
(c3) 1
(non-contiguous) 1
(swapd) 1
(marked 1
(new) 1
(trustingly) 1
(after 4
(cleared), 1
(continue 1
(not 20
(switching 1
(minus 1
(new_head 2
(using 9
(always) 1
(code, 7
(curr) 4
(target) 1
(or 83
(now 6
(p1.c) 1
(v 2
(among 3
(broken) 1
(bugs) 1
(there 3
(this 4
(often 2
(p4). 1
(version 1
(continuing) 1
(discussed 1
(bytesLeft 1
(p2). 1
(thread 6
(p2.c) 1
(perhaps 7
(web 2
(described 5
(done) 2
(c2), 3
(pid:%d)\n", 9
(usually) 2
(p5). 1
(pointed 1
(who 2
(dramatic 1
(evicts) 1
(causing 2
(conservatively); 1
(v1) 3
(particularly 7
(preempting 2
*H, 4
(he 1
(for 24
(pid:29266) 2
(cpu.c) 1
(via 6
(privileged) 1
(pretend) 1
*c) 18
(hex 2
(generated 1
(pid:29383) 2
(eventually) 2
(virtual) 3
(probably) 1
(probably 1
*curr 4
(highly 1
(hint: 6
(quite) 1
(flag 4
(worst-case 1
(pthread_create) 2
(quantum 1
*d 1
*kstack; 1
(holding 1
(remember: 2
(free 1
(https://github.com/remzi-arpacidusseau/ostep-projects) 1
(imagine 2
(quickly) 1
(hence, 2
*mutex) 12
(i); 1
(required 1
(result: 1
(running 1
(into 4
(io.c) 1
(if 13
*old_ptr 2
(ignoring 1
(you’ll 1
(read 1
(said 2
(recall 1
(kernel) 1
(in 45
*p); 1
(including 10
*(*start_routine)(int), 2
(reduced 1
(say, 11
(shaded 1
(ldstub); 2
(left). 1
(lots 1
*q; 2
(indeed, 4
(insert 1
(regardless 2
(remember, 1
(similar 3
(somewhat) 1
(m->flag 2
*thread, 2
*worker(void 1
(it 12
(sadly). 1
(roughly) 2
(ironically) 1
(thanks 1
(managing 2
(milliseconds); 1
(namely, 1
(known 1
(si 1
(size 1
(making 1
(that 5
*arg); 4
*x); 1
(new 7
(latter) 2
(some 1
(size=200) 1
(middle 2
(the 61
*child(void 3
--l0 1
(non-paged) 1
(like 5
(starting 3
(stride=200) 1
(mutex); 6
(through 1
(tmp 1
--tool=lackey 1
(non-restricted) 1
(lock->turn 2
(thus 9
(such 25
(mutex, 8
*consumer(void 5
(turn 2
-10 1
(notably) 1
(many 4
(minimally) 1
(to 10
(too) 1
(usually, 1
(v2) 1
-A 6
(note, 1
(too!) 2
(modern 1
(myturn 2
*dst; 1
(waiting 2
(va.c) 1
-I 6
(ns) 1
(we 2
(no 4
(nods) 1
(non-toy) 2
(where 12
(vruntime). 1
-X) 1
(one 6
(what 4
(n) 1
*hptr 1
(of 10
(which 39
(wc). 1
-a 41
(only 5
(with 21
(without 1
*m) 6
(on 11
(yet) 3
(xchg). 2
-c. 1
(other 1
(p6, 1
(word 3
*malloc(size_t 1
(once 4
*) 23
(“Buzz 2
-i 18
) 46
(pid:29267) 1
(write) 1
*mutex; 2
(or, 5
*H) 2
(next 1
-is-unsafe. 2
*(*start_routine)(void*), 2
(pid:29384) 1
(“0101”th) 1
*new); 1
(original 2
*argv[]) 23
*cwd; 1
-m, 1
*/ 16
(potentially), 2
); 1
*producer(void 5
(p.81).” 1
(nice 1
*input) 1
-p) 1
*attr, 2
. 53
*head 1
*ptr 9
(p3.c) 1
(p2), 1
(part 2
(pid:29147) 2
*c); 1
..., 2
*lock) 20
*value) 2
(page 49
*m); 1
*myargs[3]; 2
(right) 2
*c, 5
./fork.py 4
*mem; 1
+= 9
(physical 1
(rather, 1
*ptr; 6
(sched 1
*mutex); 8
./p1 2
*new 4
--leak-check=yes 2
(pointers) 1
(releasing 1
*str 1
(scheduling) 1
*mutex, 2
./random 3
*next; 6
-C 6
(rc 8
(repeat) 8
*tmp 7
(shown 5
*ofile[NOFILE]; 1
.globl 1
*ptr, 5
*q) 2
(rc_wait:%d) 2
(results 1
+ 45
(simplified) 1
*old_ptr; 2
-S 24
+1 1
(ready 4
(roughly 2
// 294
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 1
(sorry!). 2
*ptr) 7
-c 22
, 15
(real) 1
(simple 2
--trace-mem=yes 1
0. 11
(specifically). 1
-1; 8
-k 2
--b0 1
(reduction 1
(resulting 1
-15 1
0.0 2
(stop) 1
-1KB. 1
-pthread; 2
-O 1
(sometimes, 1
(running, 2
-> 10
0.1). 1
(t1.c) 2
-s 21
-S, 1
-D 154
(source) 1
(runtimei 1
-F 3
0.10). 1
(that’s 3
-t). 1
-g 3
-L 18
(stride=100) 1
(say 17
-f 1
0.8 1
(though 6
.... 1
................ 1
./main-two-cvs-while 2
./p3 1
(see 12
-n 19
00007f4e7d508000 1
(turning 2
-i. 2
-d 2
(stuck 2
.EXE 1
(size: 1
-v 17
06 1
(untimely?) 2
-o 9
-l 19
(studied 1
//acquire 4
(store 1
/proc 1
0x00000FFF, 1
(user 3
./array 1
-t 20
./main). 1
/proc/meminfo; 1
(stride=40) 1
0-9), 1
0x200, 1
(usually 7
./mem 5
/bin/ls. 1
./p4 1
(that, 2
00000000019d5000 1
0x8049a1c, 8
(v9 1
(they 3
0(%eax) 2
/* 16
0 384
(threads.c) 1
0111 1
1% 1
(virtual 1
(too 1
0); 8
0) 40
0,0,0,0,0,0,1? 1
(tiny) 2
03 1
1), 5
(we’ll 2
0; 116
0+5+10 1
0+1+2 1
0, 55
0.001), 1
10% 5
(turned 1
(whether 2
0x1096008c0 1
0.2 1
0-byte 1
(total) 1
0.6 1
00, 1
(upon 1
(which, 2
0x30 1
00 4
0.03 2
(unrealistically 1
10), 1
0000000000400000 1
(use_ptr 1
). 3
*), 2
0000 14
0.5. 1
(unused) 6
10-ms 4
00007f4e7cf06000 1
(void 12
0x37) 1
**old, 1
08 2
0001 1
(use 1
10.7 1
00007f4e7d731000 1
(way) 1
0x700, 1
*L) 4
0x00000000 1
0010 1
(value 2
100% 5
010000; 1
(when 3
0x7ffe1033b8f4 1
*args 4
0x1095afe50 1
01 2
(wait 1
100), 1
04 2
* 17
**value_ptr); 2
*chan; 1
0x200000. 1
0100 1
(yes, 4
1032 1
0th 2
0xC0000000 2
*L, 8
*head; 4
0x400, 1
09 1
(you 5
105 6
0x0(%ebx),%eax 1
1)) 2
*abs_timeout); 2
*parent; 1
0x80000000 2
0x0(%ebx), 2
**) 4
110, 1
*arg) 26
1.0, 1
*cond); 2
*cond, 2
0x8049a1c. 2
0x500, 1
0x000, 1
11916, 1
*current 1
10.2: 1
*q, 4
*mythread(void 12
0xFFF. 1
0x8049a1c). 2
0x00000000, 1
1234567)) 1
*dst 2
10.4 1
*tail; 2
*old_ptr, 2
1). 6
0xFFFFFFFF) 1
0x03e8, 1
128; 1
*malloc(size 1
100%), 1
1024, 1
1028 1
1.0001 1
0x7ffe45522e94 1
13.2: 1
*new_head 2
*tf; 1
*p 6
104. 1
10). 3
0x800, 1
13.4 1
1 461
*rvals; 2
*value 2
*rvals 2
10:1,10:100). 1
10-entry 1
0xBFFFFFFF 1
132 2
1.2.1) 1
+19 1
--l1 1
*src 3
110000) 1
10.1 2
1.00] 5
137298 1
- 25
-1) 1
*x 3
10 165
1101 2
10.2? 1
10+20+120 1
13: 2
--b1 1
-20 2
--tool=helgrind 2
10,000,000 2
1110 2
10.3. 1
10+20+30 1
13:4, 2
-5; 1
-5), 1
-1); 1
10.2 1
100). 2
12 89
10.3: 1
14.3 1
-H 1
-B 4
-1, 1
100+(110−10)+(120−10) 1
100 87
12(%eax), 1
10.5 1
14:7 1
-P 19
-R 13
-5 1
1000). 1
100,000, 1
12(3), 2
100%. 1
-Wall 7
-b 3
15 96
-= 1
100? 1
1000 10
120 9
100+110+120 1
-l, 1
-l. 1
15.2 3
-M 15
101. 2
100000 2
12000 1
1000; 1
-r 5
-p 44
150 10
-m 3
103.33 1
100:100,100:100), 1
128 13
1000s 1
./multi.py 4
-pthread 5
16.1 2
-nw 1
105-117, 1
108 11
13.1 2
100K 1
./p2 1
...; 1
16384 1
-u 6
107 1
11). 1
135: 1
100s 1
/ 1
./cpu 5
16492 1
108). 1
... 84
110). 1
11:1, 1
1030 1
0). 2
0,0,0,0,0,0,1:0,0,0,0,0,0,1:0,0,0,0,0,0,1 1
16708 2
11. 3
./main 6
14. 4
11–19 1
1074 2
./process-run.py 2
0,0,0,1,0,0,0:0,0,0,1,0,0,0:0,0,0,1,0,0,0 1
16KB)1 1
1124 2
./x86.py 14
143012 1
12. 2
10; 2
./thread 3
0.1 2
17.1). 1
115–116, 2
0+ebx 1
15), 1
15.1. 1
15.3, 1
/dev/zero 1
00007f4e7d2d0000 1
17.2. 1
128KB 1
0.4 1
120. 1
1111 7
15.5: 1
/proc/meminfo 1
00007f4e7d932000 1
17.6: 1
12:7, 1
0011 1
1224 1
112 2
152K 1
0% 5
07 1
170. 1
13); 2
0101 1
135 2
12) 1
15KB 7
0), 1
0? 3
172, 1
13, 2
0110 2
14, 2
1234567 7
16(%eax) 1
0.9. 1
0x03, 1
1792K 1
13.1), 1
02 1
14-bit 4
128) 1
16.4: 2
01, 2
0x1024 1
18.5: 1
13.2, 1
0: 4
14.6 1
128-Byte 1
16.6 3
05 1
0x300, 1
18.7 1
132: 1
0x068, 1
15.3: 1
128-byte 2
17.3: 1
0KB 13
0x3000, 1
19.1), 2
14.5 1
0x200000 4
15.5 2
17.5 1
0] 4
13 93
0x900. 1
19.4: 1
148K 1
0x600, 1
15:5, 2
17.6). 1
0th) 1
13.2 2
0xC0000000, 1
19.6 1
15.2: 1
0x7fff691aea64 1
16.2: 1
1780K 1
0x0(%ebx) 1
13:2, 1
1-GB 1
1957 1
15.4 1
0x80000000)) 2
16.4 1
179–180, 1
18.2: 1
18.4 2
1. 43
1959. 1
1586, 1
0x8049a1c 6
16KB] 5
0x0DC0. 1
14). 2
184–199. 1
1.0 1
1960. 1
16-byte 4
17.1: 1
1) 52
0x100, 1
14.1 1
19.1: 1
10. 7
1960’s 5
16.1: 1
17.3 1
1-byte 1
0x3C00). 1
15. 1
19.3 1
100. 6
1966 1
16.3 2
17.5. 1
1-second 1
0x3F80, 1
15.2. 1
1956. 1
1000. 2
1968. 11
16.5. 1
1.0; 1
0x7ffd3e55d2b4 1
18 54
15.6: 1
1965. 6
1974. 3
1986. 1
16KB, 1
1.3.37 1
10) 2
0xC0000FFF 1
18.2 1
16), 3
1024 10
1980’s; 1
1995. 6
10-byte 1
17 66
1); 4
18.3). 1
16.1. 1
11–12), 1
1983. 4
1:0,4:100 2
10.1: 1
17.2 1
18705, 1
16.5: 1
1, 80
12(%eax) 1
1992. 4
1KB 13
10.3 1
17.4. 1
19). 2
16.7 1
12, 2
1998 2
1] 4
100%, 1
17.8: 1
1.01] 203
19.1 2
16500 1
12-bit 2
1: 7
1m 6
100) 3
170 3
10); 1
192KB 1
16KB 24
128, 1
2) 7
100ns 2
2, 38
1793, 1
10, 14
19384 1
17, 1
12:6, 1
2.1: 1
2.3 1
2-MB 1
18). 1
10,000 8
1945. 1
17.4: 1
13.2; 1
101 4
2.4). 1
2-bit 1
18.1 2
10.1), 1
1954. 1
17.7). 1
13.3: 1
1036 1
20.1: 1
2.4: 1
18.7: 1
10.6 1
1963. 2
18.3: 1
13.5 1
109 1
20.3 2
2.6 3
1800s, 1
11 110
1965, 1
18.5 2
137, 1
2000) 2
20(%eax) 1
100); 2
19.1). 1
110 2
1970 1
19.2: 1
14.4 1
20000000) 2
20); 1
100, 6
100,000 1
100-bytes 2
1972. 5
19.4 1
14949, 1
2003. 4
20, 3
19.3), 1
1100 3
1000, 5
1981. 7
1928 1
15) 4
201 4
20-bit 3
19.8 1
111). 1
100byte 1
1989. 5
19345221) 2
15.1: 1
20.4: 1
21 45
1959 1
12). 1
1024. 3
1990. 2
1957. 1
15.3 1
20.6 1
21.2 2
1962. 7
13. 2
104 1
1992.. 1
1960’s. 1
15:3, 2
200, 3
218 1
1963.” 1
14.7 1
10ms, 1
1996 3
1964 1
15KB, 1
200-MHz 1
22.1 2
1968 2
14KB 2
10th 3
1998. 2
1966. 3
2000, 1
22.10 1
1971. 1
1979. 2
1980. 1
1110101 1
2). 7
1970; 1
2006. 6
22.7: 1
16 92
15, 7
1988. 2
11168, 1
2.1 2
1970s 1
2015. 1
22.9 1
16(%eax), 1
15.4: 1
1991, 1
113 4
2.9 2
1975. 2
2015/02/10/understanding-glibc-malloc/. 1
22–23), 1
16.2 2
15.6 2
1997. 5
117, 1
20.1 1
1980’s, 2
204 3
24113 1
160 2
16.1, 2
1:1, 3
1174 1
2001. 1
1993. 6
20th 1
24KB 3
16KB; 1
16.3: 1
1? 1
11:5, 2
2003, 2
1:0,4:100. 1
21.3: 1
250, 1
17.1 1
16.5 1
1MB 1
1277, 1
128: 2
1; 42
21.5 1
254 3
17.3. 1
16384, 1
16K 1
2008). 1
13.1: 1
1K 1
22.2: 1
26.1, 4
17.7: 1
1e7; 2
16k 5
2009. 5
13.3 2
1KB. 1
22.4 2
26.3: 2
17:10, 1
1” 1
17.2: 1
2010. 7
13–14). 1
1k 9
23.1: 1
26.5 4
18.6: 1
2. 29
17.4 1
2016 1
2.2: 1
23.3 1
14 71
27.2: 2
19.3, 1
2.6: 1
17.8, 1
22.5: 1
2.3) 1
14.2 1
24 37
24(%eax), 1
19.5: 1
20,000,000. 2
17: 1
22.7 2
2.4 1
140 2
27.4 4
24:2, 1
19.7 1
20. 1
17:4, 1
22.9. 1
2.5). 1
143,012. 1
28.10: 2
256-byte 1
1961. 1
20.2. 1
18.1: 1
23, 2
20.2: 1
14KB; 1
28.12 2
26.6: 2
1963, 1
20.6: 1
18.3 1
23-bit 1
20.4 2
15). 1
28.1: 2
27.1. 2
1969. 3
200. 3
26.1: 2
20.5). 1
19 58
15.1 2
28.3 2
28(%eax) 1
1970. 4
2000. 9
26.3 2
2004. 7
19.2 2
16.1). 1
28.5. 2
28.1), 2
1970’s 2
2017. 2
26KB, 1
2008–18, 5
19.4. 1
16.6: 1
28.9: 2
28.15 2
1978. 5
2018), 1
2013. 4
27 32
1960’s, 2
17.5: 1
28KB, 1
28.4: 2
1987. 1
21.3, 1
2015, 1
27.2 2
1962 2
18, 2
28.6 2
29 25
1996. 4
21.7 1
202 1
28.1 2
1964. 2
18-bit 1
29.3: 2
29.10) 2
29.11 2
22, 1
21.1: 1
28.10 4
1973. 2
18.2, 3
29.5 6
1KB) 1
29.2 4
22.2, 1
21.3 3
28.3. 2
1982. 7
18.4: 1
2KB). 1
1Note 2
29.3). 2
22.4: 1
215, 1
28.7: 2
1990). 1
18.6 2
2github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
2), 3
29.8: 2
22.6 2
28.9 4
22 38
1990s, 1
18–21); 1
3): 2
2- 1
2Q 3
29.6: 2
26 32
22.11 1
1991. 9
19.3: 1
3.33). 1
2.5: 1
29.8 2
26.2 4
22.2 1
1999. 1
19.5 2
30.12: 1
2.7 3
29146; 1
3 231
27.1 2
22.3). 1
1Each 1
19221041) 2
30.3: 1
20% 7
29154, 1
30 31
28.17 2
22.8: 1
1KB, 1
1949. 1
30.4) 1
20), 1
20.5: 1
30.11 1
28.6: 2
220 1
1950’s 1
30.8), 1
3-GHz 1
2007. 3
30.2 1
28.8 4
23.1 1
2 257
3000; 1
2010, 2
3. 32
30.8: 1
28KB1 1
1970’s. 1
23254, 1
2.2 2
32KB, 1
2014 1
30. 2
300 4
29.1. 2
1980s 1
24. 1
33 12
2015). 1
30.15: 1
3000 4
29.5: 2
20 95
1985. 2
24114 1
3906, 1
2016. 1
30.2. 1
3121, 2
29.7 2
20(%eax), 1
1994. 1
25% 1
3:50,3:50. 1
2018, 1
30.6: 1
3412382, 1
2N 2
20.2 1
1We 1
2501, 1
3; 3
20KB 2
30.8 1
38 8
2’s 1
1ms, 1
200 24
255 2
3A: 2
21, 4
300. 3
4). 7
3), 3
2.3: 1
200,000, 1
26, 1
2000 15
21-bit 1
32, 1
4.1 1
30.1. 1
2.5 1
3K 3
26.4: 2
2002. 1
21.1), 1
32-bit 16
400MB 1
30.14: 1
20-29): 1
3KB. 2
26.6 4
2011. 7
21.2, 1
324 1
4096 3
30.5: 1
20.1); 1
4(%esp), 2
27.3: 2
2013, 1
21.6 1
32868. 2
47 2
30.7 1
20.3: 1
4-KB 3
27.5 2
21.1 1
214 1
36 11
49).” 1
300), 1
20.5 3
4.2: 1
27KB. 2
21:1, 5
22.3: 1
36291, 1
4:1, 1
32K 3
20.6). 1
4.3) 1
28.13 2
21:10, 1
22.5 2
3752 1
4:10, 1
32k 6
34920. 1
4.3BSD 1
28.2: 2
22.6: 1
2212 1
3:0,5:100,5:100,5:100 1
4MB 2
2000; 2
35 12
4.4 2
28.4 2
22.8 2
23.2: 1
4), 2
2005. 9
5. 27
36.4% 1
42 7
28.6. 2
23.1. 1
4.5: 1
25 33
2007, 2
50. 1
3:50,3:50 2
4200 4
29.10: 2
24(%eax) 1
40% 5
250 5
60% 4
3KB 3
4: 2
29.1: 2
24-bit 1
2008–19, 138
40-ms 1
40050 1
4088), 1
3Like 1
4b 4
29.3 2
25%. 1
26.1 2
2008–20, 49
6100, 1
40KB 2
3] 1
5) 3
29.9: 2
256KB 1
26.7: 2
2016.. 1
64-Byte 1
45 6
3a); 1
5.1: 1
2: 3
256m 1
27.2. 2
203 1
64-byte 7
48KB 4
4(%eax) 1
5.3 1
2KB), 1
26.2: 2
272, 1
21.2: 1
64GB 1
49, 2
4, 5
50) 1
3) 2
26.4 4
28.16 2
21.4 1
6= 2
4KB 16
4-bit 3
30-byte 1
51 18
27.1: 2
28.5: 2
21: 1
6KB 1
4m 1
4.4: 1
30.10: 1
56483, 1
27.3 4
28.7 4
22.12 1
7); 2
4page 1
4.6 1
30.12 1
5–7), 1
28KB 2
28 33
22.1: 1
7, 2
5, 6
40, 2
30.13). 1
29, 3
28(%eax), 1
22.3 1
7.2, 1
5.4: 1
4000, 1
30.1: 1
29.4: 2
6 116
28.11 2
22.9: 1
7.4: 1
23 37
44 6
30.3 1
29.6 2
6+5 1
28.2 2
5.6 1
7.6 1
23.2 2
4400 1
30.9: 1
29147 2
6.2 1
28.4. 2
50, 5
7.7). 1
23:2, 1
44000 1
31 21
2:70, 1
60 13
28.8: 2
50,000 2
70, 1
25. 1
4K) 2
32-bits 1
2Fortunately 1
64, 1
29.1 2
64-bit 10
7282 1
254: 1
4KB). 2
34KB 1
2KB 8
5000, 1
29.7: 2
68 1
7354 1
256 6
4MB), 1
36K 1
2] 2
50th 1
29.9 2
7). 2
74 1
26.3, 2
4b: 1
3764 4
2m 1
512-byte 1
29267 1
7.1 1
7620, 1
26.5: 2
5.3: 1
384KB 1
2”. 2
526, 1
29384 1
7.10 1
8.3: 1
26.7 4
5.5 1
39 11
3); 1
59–73, 1
2This 1
7.7: 1
7.9 1
27.2, 2
512 9
55. 1
3, 25
5th 1
3). 5
8.5 2
7232 1
27.4: 2
3980 3
56KB 2
30, 3
6.3: 1
30.1 1
83 1
8. 12
27.6 2
3A 1
57.1% 1
30-bit 1
6.5 1
30.7: 1
87, 1
8.1). 1
4 164
6.2: 1
30.13: 1
63 3
30.9 1
8k 1
28.14 2
8.6: 1
4(%eax), 1
6.4 2
30.15 1
64). 1
320KB 2
9.2: 1
28.2; 2
820, 1
4.2 1
62 2
30.4: 1
64bit 1
32KB 5
9.4 2
28.3: 2
86 2
4.3). 1
7) 3
30.5) 1
7.2: 1
34K 3
991 1
28.5 2
8KB) 1
7.1: 1
40 28
30.6 1
7.4 1
37 8
; 25
28.9, 2
9), 1
7.3 2
400 1
300, 2
75% 1
3KB: 1
;load 1
28K 3
9.5: 1
7.9: 1
4000 3
3000, 1
8) 3
3” 1
<stdio.h> 15
29.11: 2
9.7 1
40000 2
32896; 1
8-byte 1
4-GB 1
8 109
<sys/types.h> 1
29.2: 2
90% 1
4088 1
335, 1
8.1: 1
4. 27
8(%eax), 1
<sys/wait.h> 3
29.4 4
9548, 1
4096-byte 1
34 12
8.3 2
4.1). 1
8.2 2
<virtual 2
2; 5
99, 1
4196 1
372K 1
8049a1c,%eax 4
4.2. 1
80 18
>= 5
2K 6
99.9% 1
48 9
39016, 1
4.8 1
9). 1
A2 1
2k 1
9 119
> 5
4:100,1:0. 1
3B: 3
40%) 2
9.1 1
A: 13
30.10): 1
9.2 2
A), 2
4MB) 1
4.3: 1
40. 2
9” 4
ABOUT 1
30.11: 1
30.14). 1
ABCABCABCABCABC 1
5). 6
4.5 2
4088. 1
4200, 1
44:1/2. 1
90 1
30.2: 1
ACKGROUND 1
5.1 1
4096, 2
;store 1
AFIPS 4
46273, 1
9:2, 1
30.3) 1
AM 2
50? 1
4146 1
<< 9
AMAT 4
4b, 1
<string>\n"); 1
30.4 1
AMPSON 1
51. 4
549–557, 1
<pthread.h> 8
AME 1
5% 3
31) 4
API, 1
43 8
6. 20
@ 8
AND 6
5(2): 1
32 33
ARC 1
4a: 1
655, 1
A1’s 1
APIs. 1
5), 5
36, 1
ARDWARE 2
4k 1
7), 3
AIN 1
AVOID 7
About 5
3764-byte 3
ASPLOS, 1
5.1; 1
7.5: 1
ANAGEMENT 17
A 728
5.7 1
Abstract” 1
3: 3
ATA 21
5.2: 1
7.7 1
ANDOMNESS 1
A2’s 1
50), 1
AccessMemory(PhysAddr) 6
3One 1
AUSE 1
5.4 2
7.8). 1
ANY 1
ACE 1
50-ms 2
Accounting 1
4) 2
Abdel-Wahab. 1
5121024 1
7094 1
API. 5
ACHE 1
51, 3
Actually, 1
4-byte 3
Ability 2
54.5%. 1
7355 1
ARM 2
ACM 11
55 1
Adam 1
4.1: 1
Account.html. 2
56, 1
75 3
ASIDE: 4
ADD 1
5:100,5:100. 1
Aha! 1
4.3 1
Achieving 2
5: 2
5→0 2
ASIDs, 1
AKE 1
5KB 1
Ahead 2
40100 1
Act. 1
76–86, 1
6) 5
ATC 2
ALICIOUS 1
6.4: 1
Allocator: 1
41 10
Address 25
7KB 3
6.1: 1
ATTACK 1
ALLOCATED 2
6000, 1
Also, 1
423, 1
Advanced 1
8(%eax) 1
6.2) 1
AW 5
ALWAYS 1
64 17
448KB 1
Aleksey 3
8(9):569, 2
6.3 1
And 108
AccessMemory(PDEAddr) 1
APIs, 4
7.1, 1
45, 1
Algorithm” 1
8, 1
64-bit) 1
Andrea 7
AccessMemory(PTEAddr) 4
ASID 9
7.3: 1
49 1
Allocated] 2
8-bit 3
64KB 9
Approximating 1
Accessing 2
Acta 1
7.5 2
7 127
Allocating 1
8.4: 1
Approximation 2
Accurate 1
Ah 1
4904, 1
7.6). 1
7.2 1
Allocation 3
8.6 2
Architecture 9
Again 2
Algorithms” 1
4:3, 1
70%. 1
7.4. 1
Analysis: 1
9.3: 1
Argument 2
Allocation: 2
All 21
4GB 1
73-96, 1
7.8: 1
Anderson, 2
9.5 1
Arpaci-Dusseau, 10
Allocator” 2
Allocated 9
4KB, 3
7353 1
70 2
Andreas 2
93 1
Atlas. 2
Almost 1
Allocator 1
4a 4
78-101, 1
7332 1
Android), 1
;add 1
Atomically, 2
Alto 2
Along 2
8-page 1
8.1 1
Antoine 1
Atomicity 2
< 24
Amazing! 1
Alternately, 2
5 169
8.2: 1
8.7: 1
Apple, 2
Attacks 1
>> 11
Amazingly, 4
Always 4
5.2 2
8.4 2
80-20 4
Applications” 1
A; 2
Available: 29
Anderson. 1
Andrew 4
5.3). 1
846 1
82% 1
Approach 1
ALLS 2
Average 1
Answer 1
Anomaly 2
88761, 1
50 46
85.7% 1
Approaches 1
ANAGE 3
Avere 1
Any 3
9) 1
Another 38
500 4
8:10, 1
Architectures 4
ANDLE 1
A’s, 1
Apparently 1
9.1: 1
Architecture. 1
512KB 2
9. 9
Aside 1
AS 10
B) 3
Apple’s 1
9.3 2
Assignment 1
512m 7
9.1). 1
Ask” 2
ASPLOS-IX, 1
B-tree, 2
Approach: 5
9.5. 1
Attempt: 4
52. 2
9.8 1
AZY 1
Assume 33
B1 1
April 10
90%, 1
August 5
6). 1
96 2
Abstraction: 3
Assumptions 3
BFS 1
Are 6
99 7
Automatically 1
6.1 2
99% 2
Addison-Wesley, 11
A’s). 1
Base 3
B, 22
Available 8
6.3. 1
<fcntl.h> 2
AddressOfPTE 1
ArpaciDusseau. 1
Base-and-bounds 2
B-trees); 2
Avoiding 1
64-bits); 1
<string.h> 2
Again, 3
: 289
Artificial 1
Before 21
B-tree” 2
B). 2
64k 1
<unistd.h> 6
Alan 3
<assert.h> 4
Atlas”, 1
Beginning: 1
B97, 2
B1’s 1
7. 16
<value>\n"); 1
Allocators 1
<stdlib.h> 9
Although 16
Berger, 2
BEST 1
B5000: 2
7.6: 1
? 9
Austin, 1
Amazingly 1
Berkeley 7
BETTER 1
== 91
B86], 1
7.8 1
A. 29
Authors: 1
Amazon’s 1
Beth 1
Baby 2
A) 2
B? 1
7.9). 1
A2, 1
B+96, 2
Analysis 5
Bill 1
Balakrishnan 1
A1 3
BFS. 1
70–76, 1
ACM. 2
B. 18
And...? 1
Block 9
Baron, 1
ACHING 1
BSD 3
71755, 1
ADDRSORT, 1
BAD! 2
Apparently, 2
Boles. 2
Barton 3
AIX 1
BSTRACTION 20
7356 1
AMAT, 1
BF 2
April, 3
Bonwick. 1
Base[Segment] 1
ALGORITHMS 1
BUCKETS 2
76 1
AN 18
BUILD 1
Arrivals 1
Bosch, 1
Baumann, 1
AMD 1
Babaoglu, 1
8), 1
API 62
Baby: 2
Broken: 1
Best 2
Bart 2
ANGRY. 1
8.5: 1
ARC, 1
As 158
Basically, 5
Buffer) 1
Better 4
Bayer. 1
APPING 1
8.7 1
ASLR 1
80% 7
Bhandarkar 1
Because 50
But 49
Belady 3
ARGE 1
Atlas” 1
Abstraction 2
ARPACI-DUSSEAU 38
Blocked: 1
Benchmarking” 1
Below 2
By 58
Austin 3
801, 1
Access 9
Actually 4
Blumofe, 1
Bertinoro, 1
Berkeley. 1
B-Trees: 1
85 1
Accesses 2
Adding 7
Bone: 2
Beyond” 1
Beyond 14
B: 12
8KB 6
Affinity 1
Address-space 1
Brinch 7
Bigger 1
C 212
Bits” 1
BUCKETS; 2
9, 6
Afraid 2
After 21
Brooks. 2
Blasgen, 1
CFS” 1
Boston, 3
Bach. 1
9-bit 2
Algorithm 5
Algorithms 4
Building 5
Borg. 1
Bouron, 1
Base[SN] 1
CHEDULING 50
9.4: 1
Also 10
Allows 1
Butler 3
Bovet 2
An 65
Battle 1
CODE 2
9.6 1
Alpha, 2
Butter 2
Broken 3
Brooks 1
And, 2
Blocked 4
CONCURRENCY 3
940 1
Alternatives 1
B’s. 1
Bruce 1
Bryant 4
Annual 1
Boot 1
CONCURRENT 15
<sys/time.h> 1
Amazon, 1
C; 2
Buffer” 1
Buddy 1
Anomaly. 1
Bovet, 1
CONDITION, 1
Animal 1
CISC, 1
Burroughs 5
Build 4
Anticipatory 2
Bradford 2
CPU; 11
Anyhow, 1
Anything 1
Butenhof. 2
Burchfiel, 2
Applications 4
Brian 2
CPU-optimized, 1
Appavoo, 1
CPUs 37
C++ 2
Buy 1
Arpaci-Dusseau 3
BufferOverflow.pdf. 1
CPU. 31
Apple 3
= 415
CRITICAL 1
Bye 1
C. 24
Array 4
Burnett 1
CPUs; 2
Approximate 10
Cache-Affinity 1
A, 16
B’s 8
C.J. 1
Art 3
C) 3
CS 1
Aq 1
Cache” 1
ACM, 19
C), 5
CCESSES 1
Assuming 10
C-language 1
Calculate 1
Architecture” 3
Certainly 1
AMAT: 1
C-callable 2
CCS 3
Atlas: 3
C9 1
California. 3
Assume, 3
Chile. 1
APIs 10
C.A.R. 1
CONTROL 2
Atlas”; 1
C95]. 1
Callers 2
Chou, 1
ASID, 1
CA, 7
COW 3
Attempt 3
CACM 1
Came 2
Cilk 1
CACM, 5
CPUs. 7
Award 2
B 157
Canada. 2
Clark. 1
CFS, 3
CFS 40
CV 2
A’s 7
ASY 154
BOUT 1
Certain 1
Claypool 1
CISC. 1
CHEDULER 1
Caching, 1
B-tree 2
AT 1
BSD) 1
Change 4
Code 24
CLOCK 2
Casting 1
B5000 4
AT&T/Bell 1
BASED 17
Check 8
Code00 2
COND 2
Cheap 1
ATOMIC 2
BUCKETS], 4
BE 1
Child: 2
Coherence” 1
CPU(s) 1
CPU 255
Chevalley, 1
CPU, 33
Background: 1
BFS, 2
Christenson. 1
Comment 2
CPU-bound; 1
AUER 1
Chunk 1
CPUs) 1
Basic 10
BIQUITY 1
Circuitry 1
Compared 2
CPUbound 1
Above 3
Cocke, 1
CREATE 1
Batch 1
BSD. 1
Close 2
Computer, 6
CPUs), 1
Abstractions 1
Cohen, 1
CRUX: 6
Behind 4
Bad 3
Commu-nications 1
Concept” 1
CR3 1
Adaptation 1
Common 3
CVs 2
Better, 1
Basu, 1
Compilers 1
Concurrency 1
Candea, 1
Ah, 2
Between 2
Cache 18
Communications 20
Be 5
Completely 5
Canyon 1
Concurrent 25
Ajay 2
Big 2
Caching” 1
Compile 1
Before, 2
Computers, 3
Case, 1
Conference; 1
Al 8
Birrell. 2
California, 6
Complete 1
Belady. 1
Computer” 5
Chapman 2
Control: 1
Allocate 3
Bits 1
Call 8
Computers” 1
Belady’s 2
Computing 4
Clearly, 9
Controlling 2
Allocation” 3
Boneh. 1
Canada, 4
Computing; 1
Bell 2
Concept: 1
Clustering 1
Cores” 2
Anita 1
Buddy-managed 1
Case 4
Concurrency. 1
Berger 2
Contents 1
Coalescing 2
Couleur, 2
Annals 1
Counters 8
Cassandra, 1
Conditions? 2
Berkeley, 2
Contrast 2
Cobham. 1
Buffer 9
Anoop 2
Critical 2
Characteristics 1
Control 11
Bit 3
Conversely, 3
Cobham’s 1
Bus 1
Approach” 3
Crockford’s 2
Chemistry, 1
Convention. 1
Bit-precision” 1
Convoy 1
Come, 1
Buttlar, 2
Architecture: 4
Culler, 2
Child 1
Cool, 1
Björn 1
Corbato, 5
Compacted 3
CHEDULE 2
Aren’t 1
Currency 1
Chunks 2
Cooperative 1
Bobrow, 2
Corporation. 1
CompareAndSwap(int 2
CISC 7
Arpaci-Dusseau. 3
Current 3
Clock 2
Copper 1
Boost 2
Correspondingly, 1
Comparing 2
CONDITIONS 1
Assign 1
Cutler, 1
Coarse-grained 1
Core 3
Bounds[Segment]) 1
Corwin, 1
Compatible 1
CPU-intensive 4
DBMS), 1
At 31
Coding 1
C’s 1
Boyd-Wickizer, 3
Cox, 1
Complex 1
CPU: 1
DO 1
Atlas 10
Coherence 1
D.A. 1
But, 7
Create: 1
Concurrency), 1
CPUs). 4
DVICE 1
Atomic 2
Come 3
DID 1
B’s). 1
Custer 1
Conference 1
CPUs? 3
Daily 1
August, 1
Conditions: 1
DMA). 1
C, 12
DOS 1
Considered 2
Calling 8
Delete 1
Award. 1
Conference, 7
Days 1
C.H. 1
Deadline 2
Contents: 1
Cambridge, 2
Denning 1
B.W. 1
Cores 1
Declaring 1
CHEDULERS 1
Death 1
Corbato. 1
Detail 1
Can 40
B; 1
Corporation, 1
Definition 1
COMPCON 1
Decision 1
CONDITION 19
Deterministic? 1
Carl 5
Babaoglu 1
Costs 1
Denning. 2
Corbato’s 1
Depending 2
CPU). 1
Deuterium” 1
Charles 1
Bairavasundaram, 1
Countermeasures” 2
Denning’s 1
Corporation 1
Design, 1
CPU? 11
Development 2
Classic 1
Base/Bounds 1
Create 3
Dennis 6
Correcting 1
Despite 1
CPUs, 14
Dick 2
Clayton 1
Base/bounds 2
Critically, 1
Design” 4
Counter 6
Details 1
Determining 1
Direct 8
Coffman 1
Became 1
Detect 1
Cox. 1
Caches 3
Dharmendra 1
Disk 5
D 109
Compiling 2
Begin 1
Directory, 1
Craft 1
Calls 4
Digital 2
Distributed 5
DEC 3
Completion 4
Being 3
Dissertation 1
Cup 1
Candy 1
Discusses 2
DEKKER’S 1
Do 18
Computers 2
Belady, 1
Cybertron 1
Doing 23
Certainly, 2
Done 1
DRAM 1
Computing, 3
Bershad, 1
Does 29
D, 2
EASUREMENT 1
Cesati. 3
Druschel, 1
Daggett, 1
Concurrency? 1
Binary 1
D.H.J. 1
E. 20
EBOOT 1
Chapter 1
E) 1
Data: 2
Conditions 1
Black 1
DD 1
EC-11, 1
ERFECT 1
Clear 1
EARN 1
David, 2
Consistency 1
Boilen, 2
DRAM, 1
ECHANISMS 11
ESOURCES 1
Clements, 3
EASON 1
Dealing 1
Corbato 4
Bonwick 3
Dave 3
EGMENTATION 12
ETH 1
Colorado, 1
EDUCE 1
Debugging 2
Correct 4
Boston 1
END, 1
David 19
Com-puting, 1
Each 19
ELOCATION 2
Dekker’s 6
Counters” 2
Both 7
ERFORM 1
Dead: 1
Comes 1
Earliest 1
EMORY-M 1
Destroy: 1
Cups” 1
Bottom 1
ESS 1
Decay-Usage 1
Compare-And-Swap 2
Ed2.pdf. 2
Detailed 1
EMORY: 26
Custer, 1
Bouron 1
ETTING 1
Department, 1
Compare-and-swap 2
Either 4
Developer’s 4
END? 1
Brother” 1
D. 33
EVELOP 1
Dijkstra, 4
Computer 20
Emacs 1
Diego, 4
EPLACEMENT 2
Burroughs, 1
D.R. 1
Ed2.pdf 1
DATA 16
Concepts 2
EvictPage() 1
Dijkstra 12
EPRESENT 1
C: 2
Dilemma” 1
EnableInterrupts(); 2
DOO 1
Conceptually, 2
Experiment 1
Dirty 2
ERSISTENTLY 1
CFS) 1
DisableInterrupts(); 2
Engineering 1
Dahm 4
Condition 6
Facebook). 1
Distribution, 1
ESIGN 1
CMU 1
DiskRead(PTE.DiskAddr, 1
Envision 1
Darago, 1
Consider 2
Far 1
Dr. 1
EY 4
CONCURRENCY: 15
Distribution 1
Evans. 1
Data 13
Conway. 1
FetchAndAdd(int 2
ECESSARILY 1
Easton, 1
CPU), 6
Doctoral 1
Every 1
Decepticons1 1
Corporation” 1
Find 4
ECURE 2
Easy, 2
CPU-bound 2
Doesn’t 1
Evict 4
Dekker, 2
Could 1
Fine-grained 1
EG 1
Edwards, 4
CPUintensive 1
Donkey. 1
Execute 7
Don’t 17
Couleur 1
Forgetting 3
EGAIN 2
Elias 1
CPUs: 1
EMORY 36
Extract 1
Download 4
Counting 2
Formalizations” 2
Enough 1
Dennis) 1
Caching 1
END), 1
FIFO? 1
D′ 2
Creation: 1
Fortunately, 9
Epema. 1
Descheduled 1
Capel 2
ETTER 1
Facebook) 1
E.W. 2
D.B.G. 4
Fred 1
Epema’s 1
Design 3
Center, 1
EVEL 11
Fagin. 1
EALING 1
Daley 1
Fun 3
Dialogue 3
Even 20
Chang, 1
Earl 3
Fairness 2
Davis 8
ECHANISM 30
GB 7
Dijkstra. 9
Example: 6
Cilk-5 1
Earlier 2
DeWitt. 1
ECHNOLOGIES 1
GHz 2
Dijkstra’s 5
Finally, 70
Experimental 2
Class? 2
Earth 2
December 8
EECS 1
GUIDELINES 1
Donald 1
Fit 4
Cocke 1
Edition)” 2
F 36
Deciding 1
George 2
EAD 1
Flexible 3
Code: 2
Environment” 4
FAST 7
Dennis. 1
Given 15
ERSION 166
EAKED 1
Fox. 1
Commodity 1
Errors” 1
FIFO: 1
Detection 1
Good 8
ESX 2
EAL 1
Frame 1
Compaction 2
Evolution” 2
Facebook, 1
Development, 1
Google, 2
ETERSON 1
Free-Space 1
EASY 38
Computations” 3
Example 18
Farm 1
Dickey. 2
Gray. 2
Eindhoven 2
FreeBSD 3
EC2 1
Compute 4
Examples”. 1
Fast 4
Different 5
Gray’s 2
Electroanalytical 1
Frigo, 1
ECIDE 1
Concurrency: 2
Excellent 1
FindFreePhysicalPage() 1
Dijkstra; 1
Group, 1
Electronic 2
Gaming 2
ECTION 1
Considering 1
Execution 8
First-in→ 11
Douglas 1
HARING 2
Emacs7 1
Generally 1
EE 1
Context 3
Extra 1
Framework 1
EALLY 1
HINGS 1
Engineers 1
Generate 2
EKKER 1
Control, 1
F. 8
French 2
EC-11:2, 1
HY 5
Equipment 2
Gets 2
EMBRYO, 1
Copy-on-write 1
F.J. 1
From: 1
EEDBACK 11
Handled) 1
Era 2
Goodman. 1
EPARATE 1
Corbet. 2
FAULT 1
Fujiki, 1
ELADY 1
Hawkins, 1
Europe(!). 1
Goodman’s 1
EXCLUSION 1
Couleur. 1
Function 2
ERMS 4
FIFO 37
Hazelwood, 1
Evaluating 4
Gray 6
Edsger 8
Covering 2
GAINST 1
ESTRICTED 1
FILENO). 1
Header 2
Evaluation 2
Great 5
Effectiveness 1
Creating 2
Gibson, 1
FOOLISH 1
EYOND 27
Hill 1
Exactly. 2
Greenfield. 1
Embedded 1
Creation 6
Go 4
False) 10
Edward 2
History” 1
FFICIENT 1
HARES 1
Emery 1
Culler. 1
Goals 2
Farrell, 2
Electronics, 1
Home 1
FIFO, 7
HEN 4
English 1
Culler’s 1
Goodness, 1
Fault 4
Emacs. 1
Huge 2
FIRST 1
Hansen. 5
Entry 3
C’s, 2
Graham. 2
February, 1
Embedding 1
Human 1
FIRST)? 1
Hansen’s 2
EnvyFS” 1
D) 3
Guide 3
Fellner, 1
Examine 9
FLOW 1
Hence 2
Ever 2
DDRESS 25
H&P 2
Examples 3
Facebook. 1
First, 58
Herlihy. 2
Exactly 1
I 171
DVANCED 13
Exception 1
H. 20
Failure 4
Fleischmann, 1
Hochshule 2
Exclusion 4
I/O-intensive 2
Daley. 1
FAULTS 2
HOW 6
February 16
Form 1
Humorously, 2
F.H. 4
I/O: 4
Daniel 3
FIFO; 2
Handbook 2
Fetch-And-Add 2
Fourth, 1
I/O, 3
FIFO. 4
Database 1
FOR 2
FetchAndAdd(&lock->ticket); 2
Francisco, 1
Hardware 18
ICKETS 1
FIFO’s 1
Default 1
Factor 2
File 3
From 23
Harmful” 2
IFIPS 1
IECES 154
Factors 1
Definitely 1
Fall 5
First 23
Further, 8
Harry 2
II) 1
IKE 1
Failing 3
Dennis, 2
Fill 1
Fleischmann 1
Fusion 1
Hash_Init(hash_t 2
IME 2
Fair 6
IP 41
Devang 2
Finding 2
Flow 6
Futex 2
Heap 16
IZES 1
Fast, 2
IRTUAL 19
Directory 5
Finite 1
Frankenstein 1
G.A. 1
Henry 1
Idea 2
Fekete. 2
IRTUALIZE 5
Discovering 1
Finnish 1
Freeing 2
GBs 1
Hershey. 1
If, 9
Fetch 5
ISN’T 1
Dissertation, 1
Firefox, 1
G) 1
Gates 1
Hierarchies” 1
Implement 4
Implementing 2
Dominion 1
GB). 1
Gecsei, 1
In, 2
Inputs 1
Dynamic 7
GE, 1
Geometry 2
In-ternational, 1
Instrumentation” 1
For 194
How 141
Get 5
Figure 335
Indeed 1
Intelligence 1
Forget 1
Hydra. 1
Golding, 1
Ginting, 1
File-System 1
Informatica, 1
Issue: 3
Fredkin, 2
I/O). 3
Gruss, 1
Glaser. 1
Final 4
Glenn 4
E 195
It’s 4
FreeBSD, 1
I/O? 1
Internet 1
First: 1
Going 1
EFERENCE 1
H 42
Jacob, 1
Future, 1
IALOGUE 4
Introduced 3
Flag 2
Gollum, 1
ENERALITY 1
Jason 1
HARE 14
G 12
INTERLUDE: 11
Inverted 1
Flash-based 1
Guide. 1
ERMINOLOGY 1
Jeff 3
HFE-1:1, 1
G.L. 2
IT! 1
Isn’t 2
Flesh 2
HERE 1
Early 3
Jeffrey 1
HTTP 1
Gain 2
Ideas 2
Isolation” 1
Forin, 1
HICH 1
Efficiency 2
Job 11
Hall/CRC 2
Gandhi, 1
Imagine, 4
Issue 4
Frans 4
HP, 1
Efficient 2
Johnson, 1
Hardware/Software 1
Garner 1
Implementation 6
Italy. 1
Free 8
HREAD 12
Eligible 2
Jonathan 3
Heap: 1
Generally, 1
Inc.. 1
I’m 5
FreeBSD” 1
Elliott 1
Journal 7
Hear 1
Gray, 1
Incorrectly 1
J.S. 1
Freedom 1
Errors 3
K 6
HREE 154
Heinrich. 3
Grove, 3
Information 6
Jack 5
Frequency 1
Evans 1
KB. 4
Handle 4
Here, 13
Guerraoui, 2
Innocent 2
Jacqueline 2
Friedman, 1
Everyone 1
Kaashoek, 4
Harcourt, 2
Hershey 1
Gupta. 2
Innovator’s 1
Josep 1
Full? 1
Evolution 1
Keeping 2
Hardware?” 1
High 2
HAPTERS 1
Interactive 1
Joseph 1
G62]. 1
Examination 1
Kernighan, 1
Has 1
Kilburn, 4
HOLD 1
Interlude: 4
K. 1
GB) 2
Hits 2
FASTER 17
Hash 8
HREADS 1
Interrupt) 1
LRU 33
KASLR, 1
GNU 3
Hits+M 1
FFICIENTLY 2
Hash_Lookup(hash_t 2
HW 1
Handles 1
LW 1
KB); 1
Generalized 1
Hopefully 2
FILENO 1
Heart 2
Ion 2
Hard 1
Language” 2
KB, 1
Germond. 3
House, 1
Failed 2
Helen 1
Israel. 1
Hash_Insert(hash_t 2
Large 2
Here 30
Getting 1
Hydra 1
Farm” 1
Italian, 1
Heap01 2
KEY 1
Lauder. 1
His 3
Goh, 1
I/O) 2
Faster 2
Jackson-Edwards. 1
Hill. 1
KPTI) 1
Least-Frequently-Used 1
History: 1
Gorman. 1
I/Os. 1
Feedback 5
January, 2
Hit/Miss? 4
Kanev, 1
Letters 3
Hive/HDFS, 1
Grows 2
IBM 9
Festschrift 1
Jiaqi 2
Hoare 4
Kathryn 1
Hmm... 2
HINK 1
IDs 2
Let’s 90
Job:A 1
Hong-Tai 1
Kernel 14
Hank 2
Figures 2
Homework 28
IEEE 7
Levels 1
Jobs 2
Hussein 1
Key 1
Harper 1
Follow-on 1
Hopefully, 4
IF) 1
Limits) 1
Joe 3
Hydra” 1
L->head 8
Here’s 4
Fortunately 2
Hovav 1
INITIALIZER, 2
Lindberg, 1
Joy, 1
I. 1
L4) 1
Hey, 1
G. 9
IO 7
Linear 2
Jozef 2
LEXIBLY 1
Historical 4
Golub, 1
IRE 5
Linus 1
Jr., 1
LGORITHMS 1
However, 120
History 4
Good, 1
I/O 86
ISCA 4
List_Pop() 1
Juan 1
LOCK 2
Hugh 4
Hoc 2
Google 2
IBM” 1
IST 2
Lottery 6
Julin, 1
LRU. 3
I/O), 3
How, 1
Gouicem, 1
IGHER 1
ITS 1
Louisiana. 1
June, 1
LRU’s 3
IA-32 4
Hybrid 2
Growing 1
IMMEDIATE 2
Ideally, 2
LWN 2
Just 15
IBM, 1
I! 1
Guide” 1
M. 35
IO). 1
M.J. 6
Labs” 1
KB) 3
IGHT 1
I/O; 3
Included 1
IRECT 15
HE 83
Lacking 1
Karels, 1
I/Os 3
IMITED 15
M83]. 1
Index 11
IRTUALIZATION 5
HPUX 1
Lauer 2
Ken 2
INITIALIZER. 2
INUX 1
MB, 1
Inserts 2
ISSES 1
Lawall, 1
Laziness 2
HYSICAL 27
INTRODUCTION 15
IP) 1
MBALANCE 1
Instead 20
L1) 1
Licklider. 3
Hall, 5
IRIX 1
ISTORY 1
MIN). 1
Instinct, 1
L2 1
Like, 1
Handbook” 1
IS 1
If 167
MLFQs 1
Intel, 2
Imagine 39
L4. 1
Linux) 2
Happened 2
ISBEHAVIOR 1
MMU, 1
Interaction 1
Increase 1
L60, 1
Lipman 1
Hastings, 1
Idea1 1
MORE 2
International 3
Initial 3
L78]. 1
Lipp, 1
Having 4
Induced 1
MS-DOS 1
Interrupts 2
Initialize 3
LLUSION 1
Lisa 1
He 3
Instead, 7
MUTEX 2
Interscience, 1
Instruction 4
Lampson, 2
List_Lookup(&H->lists[key 2
Heavyweight 1
Intel 10
Maintenance 1
Its 4
Intel. 1
Lanigan, 4
Lock 12
Hennessy 3
Interesting 1
Manual”. 1
I’d 1
Internals: 3
Lanyue 4
Locks.” 2
In 387
Hill, 3
International, 2
I” 1
March 14
Introduction 8
Late 1
Logistics 1
Includes 2
Hint: 2
Is 14
Intuitively, 1
Mark 14
J. 33
Levy. 2
Lord 1
Incorporating 1
Issues 6
Isolation 1
Hit 29
Mars 5
Jain. 1
Lighting 1
Lower 1
Incrementalism, 1
It” 1
J 1
Hoare. 1
Martin 1
Jain’s 1
M62, 1
Linux. 8
Indeed. 1
I’ll 3
Holding 1
January 14
May, 1
James 1
MAC 2
Linux’s 2
Intel’s), 1
Johnstone, 2
Holt. 1
Joy 2
McCarthy 2
Java. 1
MAP_ANON|MAP_PRIVATE, 1
Jim 8
Interludes 1
Joint 5
Horn. 3
June 13
McGraw-Hill, 2
List: 2
MAX; 2
Jing 1
Interposition 1
July 4
HotOS 2
KB), 1
Measuring 2
List_Init(list_t 4
MEMORY 1
Job:C 1
Introduction), 1
KASLR” 1
How? 1
Knowlton. 1
Melvin 1
Little 2
Joe’s, 1
MIPS 14
Invalid 2
KB). 1
I, 1
Knuth 6
I/O. 10
Liu, 1
Joy. 1
MPORTANCE 1
Jaswinder 1
KB-64 1
Memory: 3
ID 7
L. 10
Locks: 2
Joyce. 1
MS-DOS. 1
Javascript 2
KPTI, 1
Merritt, 2
IMER 1
LOW 1
Long-Running 1
K+96]. 2
MULATING 1
Job:B 1
Knowlton 1
INDETERMINATE, 1
Michael 10
LRU? 2
Long-running 1
KB; 2
Mac 12
INVERSION 1
John 14
Miller. 2
LaTeX, 1
MALICIOUS 1
KPTI 1
L 59
Mach 1
IT 3
Journal, 2
Milton 1
Labs 2
MIT, 1
Keeps 2
L->head; 8
Mail. 1
ITH 4
KB-32 2
Minneapolis, 1
Lampson 6
MLFQ. 2
Kernel” 1
LATER, 1
Malloc(sizeof(myret_t)); 2
ITHOUT 2
KB64 1
Miss? 1
Larry 1
MQMS 2
Kleinrock. 2
LDE). 1
Management, 2
Implementation” 1
KNOW 1
Mitoma, 1
Indeed, 20
Macintosh 2
Knuth. 1
LLOCATE 1
Manuals 1
Kawamoto, 1
Law. 2
Models” 1
Influenced 1
Make 5
Kuehner. 1
Mao, 3
LOCKS 23
Know 2
Learn 1
Monitors 1
Ingo 1
Man-Month” 1
L4 3
Mars?” 2
Last 1
L3 1
Length 1
Instructions 1
Massachusetts. 2
LATER 1
More 24
McCarthy. 2
Most 9
LATER? 1
Levin, 1
Interestingly, 3
Maurice 2
LISP 1
Later, 2
McCarthy’s 2
Multiprocessor 4
LESS 1
LoadLinked(int 2
Investigator. 1
Maybe 1
LWAYS 1
Lee. 1
Meehean. 1
Mythical 1
LRU, 11
Loads/Stores 2
McDougall. 3
Lampson. 2
Leffler, 1
Meehean’s 1
NDERSTAND 1
Languages 2
Lots 2
McKusick, 1
Lampson’s 1
It 92
Levy, 5
Megiddo 1
NE 1
Lauer. 2
Low 2
McVoy 1
Las 1
Memory 58
Library” 2
NGINEERS 1
Lauer’s 2
Lucco, 1
Measurement 2
Iyer, 1
Later 2
Menace 1
Linux); 1
NIX, 2
Lectures 1
Lynch, 2
Meltdown, 1
Jones. 2
Lavington. 3
Mistakes 1
NIX-based 6
Linux, 15
Lepers, 1
MA, 2
Mesa 4
Jose, 7
Law, 2
Molnar 1
Linux-based 3
Letters, 2
List 7
MANUAL, 1
Metric: 1
Leaks 1
KB 18
Multi-Threaded 2
NTERLUDE 35
Libraries: 1
List_Init(&H->lists[i]); 2
MIT 5
Microsoft 4
Learning 2
Kanev 1
Multi-threaded 1
NULL 20
Linked 8
List_Insert(&H->lists[key 2
MLFQ: 3
Microsystems, 1
Leiserson, 1
Kaufmann, 5
NY, 1
Multics 14
Linux). 5
List_Lookup(list_t 4
MMU; 1
Mike 2
Levy 1
Kay 1
NeXTStep 1
Multiprogrammed 5
Linux” 1
Load-Linked 2
MPLEMENT 1
Modeling” 1
Life 1
Keep 4
Negative-Growth 1
Murphy, 2
Lipman. 4
Load-linked 2
MQMS, 1
Mac! 1
Limited 6
Keith 1
Nelson, 1
Must 2
List_Insert(list_t 4
Montreal, 1
Locks 29
Mac) 1
Line 3
Kenneth 2
Nevada, 1
NBA 1
Lists 5
Morgan-Kaufmann, 2
Locks”) 2
Manager” 1
Kleiman, 2
Linux 107
NIX/C 1
LoadLinked 2
Multiprocessing. 2
M.K. 1
Managing 1
Newell, 1
Knowing 3
Live 1
NIX: 1
Locking 2
Multiprogramming 4
MASK 3
Manchester 3
Krieger, 1
Next, 9
Load 4
NOT 1
Longer 1
MIN 1
Marco 2
L1 4
N 41
No-Locality 2
Loading: 2
NSA? 1
Low-level 1
MRU 2
Matteo 1
LAW) 2
NCE 1
Locks, 1
No. 6
Lu. 2
Ma. 2
Mattson, 1
LDE 1
NTRODUCTION 59
NT, 1
Long 1
Non-Coalesced 1
MAX) 1
Machine” 1
Maurice, 1
LL/SC 2
NT” 2
NTERLUDES 1
Looping 1
Now? 2
MB 1
Man 3
McCall. 2
LOCK-BASED 15
Nancy 2
NTERPOSITION 1
Looping-Sequential 1
OK! 2
MIT), 1
Management” 2
Measure 5
LRU-like 1
Narrow 1
M.I.T., 1
NULL; 22
OMPLEXITY 1
MMU 3
Markowitz, 1
Measurement, 1
LRU→ 11
Neely, 2
MAX_HEAP_SIZE; 1
NUMCPUS; 4
ONTENTS 1
Mac. 1
Markstein. 1
Mellor-Crummey 4
Lamport’s 1
Nimrod 1
MB) 1
NUMPAGES. 1
OPT 4
Making 3
Massachusetts, 1
Meltdown 2
Laszlo 1
Nir 2
MIT. 1
NX 1
OS) 2
March, 1
Mauro 2
May 11
Least-RecentlyUsed 1
No, 2
MIT’s 1
National 1
Obtaining 1
Mesa, 1
Mayer. 2
McCarthy, 2
Leave 1
Node_t 1
Nemacolin 2
Oh, 1
MLFQ 32
Microprocessor 3
Media, 3
McGee. 1
Led 1
Non-Cooperative 1
Nichols. 2
Orwell. 2
MORTIZATION 1
Microsoft, 1
Methods 1
Mechanism: 2
Leonard 2
Nope, 1
Not 23
Orwell’s 1
MUTUAL 1
Microsystems 1
Microsoft’s 1
Membrane 1
Let 18
Notes 4
O’Hallaron 2
Mangard. 1
Note 34
Minimize 2
Miscellaneous 1
Metha 2
Libraries 1
Novark 1
O’Reilly 3
Manual: 3
November 10
Modadugu, 1
Metrics 1
Miss 29
Like 6
Number 8
P3 1
Manuals” 3
O(n) 1
MongoDB, 1
Michael, 2
Morgan 6
Lock-based 2
O(1) 4
Maxwell’s 2
PC 16
OFFS 1
Moseley, 1
Microsoft) 1
Morse. 1
Look 1
O(log 1
McKinley, 1
PCD, 1
OK, 11
Motivating 1
Mixed 1
Most-Recently-Used 1
Loops 1
ODING 1
Mechanisms 3
PFN=55 1
NCREMENTALISM 1
OMPLETE 19
Modha. 1
Multiple 1
Lu, 4
OINTER 1
Memory” 1
PID. 1
ND 10
ONTROL 8
Moir 6
Multiprocessors. 2
OK? 2
Microsystems. 1
PINNING 2
NECESSARILY 1
OO 1
Mountain, 1
Multithreaded 3
OOK 1
Minimally, 3
M 139
NPUTS 1
POSIX 20
ORE 2
Multics. 1
Mysterious 1
Mitchell. 1
MAC, 1
NT 4
OPERATING 42
MALLER 15
Mogul, 1
N. 7
OS, 31
Namely, 1
NIX 55
PPLICATION 1
OPT. 1
MIPS, 2
Morris, 4
NOW 1
OSes, 1
Naval 1
PTE.PFN 1
OS). 2
NULL); 35
MM00]. 2
MostFrequently-Used 1
NTERRUPT 1
OUBT, 1
Network 1
PTE.ProtectBits) 3
OS? 4
MMU. 2
NULL, 20
Moving 1
NULL) 6
OUR 2
Neumann 2
PTE: 1
OSSIBLE 2
MQMS). 1
NUTH 1
Mozilla 1
NVERSION 1
New 9
PTEs). 1
OW 34
Mac, 1
Neither 1
Mudge. 1
Need 2
Nickolai 4
PWT 1
Main 1
October 17
Nelson 1
Multi-Level 4
NetBSD, 1
No-eXecute), 1
Paranoia 1
Malcolm 1
Optimal 3
Nethercote. 1
Node_t; 1
OSTEP. 166
Multi-level 7
Note, 2
Pass(C) 1
Malloc(), 2
Oracle 3
Next 2
Management 11
Multics” 1
Nuclear 1
Pathfinder. 2
Otherwise, 1
OSTS 1
Nobel-prize 1
Manchester; 1
Now 79
Mutual 4
OFFSET_MASK 7
Perfection, 1
OS” 1
Nothing 4
Our 25
Manifesto” 1
OAD 1
NDETERMINATE 1
OK 4
Object-Caching 1
Perhaps 15
Nucleus 2
Ousterhout, 2
Manual” 3
OBS 1
NIX! 1
OMPILED 1
Phoebe 1
Numbering 1
Overhead 3
Operating 38
OK: 1
NOMALY 1
Many 21
Pioneered 1
ONCURRENCY: 15
Operation 1
P. 12
Or 9
NUMPAGES 2
Marvin 1
Pn−1 1
ONSTANTS 1
P6 1
ONDITION 1
Overall, 3
Neat 1
Mechanism 1
Pointed 2
ONTEXT 2
ONG 1
Overlap 2
PAGING 22
Netzer 2
Memory, 1
Positive 1
O 247
OOT 1
ONSIDER 1
O’Hallaron. 2
PEED 1
Non-compacted 1
Memory-mapped 1
Precise 2
OES 1
OPT? 1
OPERATIONS 1
O’Reilly. 2
PETERSON’S 1
MenuMeters 1
Privileged 3
Now, 26
OFFSET 1
ORK 1
P.M. 1
PF 3
Mesa” 1
Probably 11
OMEWORKS 2
OCKS 23
OS: 1
P1 6
PID) 1
Microprocessors 1
Problem: 6
OPTIMIZATION 1
ODE 2
OSTEP! 2
PPROPRIATE 1
PACE 21
Modern 3
Problems” 1
ORRECT 2
OFTWARE 1
OU 1
PT: 2
PAT, 1
Mr. 1
Proceedings 2
OS), 2
OK. 2
OWERFUL 1
Page-Fault 2
PDE 8
Processes, 1
Much 9
OSDI 10
O_CREAT|O_WRONLY|O_TRUNC, 1
OLICIES 16
PageTable[1] 1
PDP-10” 2
Professor 5
Muller, 1
Offset 15
O_WRONLY|O_CREAT|O_TRUNC, 1
OLICY 4
Paging 6
PD_SHIFT 1
Programming 15
Multi-Queue 1
Oh 5
Obviously 1
ONCURRENCY 3
Patel 1
Programs 4
Patterson. 2
OS 504
Old 2
PIECES 38
Occur 1
Multics, 6
Pthread_join(p, 4
ONCURRENT 16
Peterson. 2
OS-ignorant) 1
One”. 1
PLDI 3
Oddly 1
Multiprocessors” 5
Pthread_mutex_lock(&c->lock); 6
OOPERATION 1
Peterson’s 6
OSes 2
OpenSolaris 1
Orr, 1
PTE 17
NABLES 1
Putting 1
Phenomenon” 1
Often 1
Overflows 1
PTHREAD_COND_INITIALIZER; 3
NIX. 2
Q2 9
Physical) 1
Operations 3
Overview 3
PT_SHIFT 1
NOWLEDGE 1
Placing 1
Questions 26
Organick. 1
ORG 166
O’Reilly, 2
Page, 1
NULL2 1
Play 1
One 135
RACE 1
Organization” 1
OR’d 1
P1’s 1
Page-Reference 1
PC, 7
Pons. 1
Only 10
RANSLATION 15
Over 6
Navarro, 1
PageTable[39] 1
OS. 26
PCD 1
Previously, 1
Oops! 2
RISC-like 3
Overflow 1
Needed 1
Paged 2
OSes. 1
PDE. 1
Priority, 1
Open 2
ROGRAMS 1
P4 1
Nethercote, 1
Pass(A) 1
OS’s 4
POSIX, 2
Problems: 1
Orran 1
RR? 1
PACES 8
Ngram 1
Patt 1
Oregon. 1
PPN) 1
Processes” 2
RUNNABLE, 1
Other 15
PD 2
Nice. 1
Performance” 1
Orleans, 1
PROT_READ|PROT_WRITE, 1
Processor-Memory 1
RY 1
Ousterhout 3
PDEAddr 2
Perspective” 5
No 10
Ousterhout. 3
PTE. 3
Protection” 1
Race 2
P1) 1
PDIndex 1
Pieces 2
Novark, 1
Ousterhout’s 2
PTE.PFN, 3
Pthread_cond_signal(&cond); 6
Rachid 2
P2 3
PDP 1
Pillay. 1
Nucleus. 1
Out 2
PTIMAL 1
Pthread_create(&p1, 5
PFN 43
PCs, 2
Pioneers, 1
O. 1
Pacific 3
Pthread_mutex_init(&c->lock, 2
Rafael 1
Pthread_mutex_unlock(&c->lock); 6
Portable 1
OCALITY 1
PageDirBase 1
PID). 1
Recall 9
Python, 2
Prediction 1
Part 6
PROGRAMMER 1
OCK 16
Recommended 1
Q5 1
Preemptive 1
Per 5
PT 2
OESN 1
Relational 1
Quarterman. 1
PERATING 184
Perl, 2
PTEAddr 6
Relocated 2
OF 9
Present 1
Quote 1
PFN_SHIFT) 1
P 280
Pfaff, 1
PTEs 3
Repair 1
OK; 1
Press, 7
R.H. 1
PRIORITY 1
P0 4
PhysAddr 8
PTIndex 1
Replacements 1
OLUTIONS 1
Price. 1
R.P. 1
Priority(B), 4
P4, 1
Pick 3
Page” 2
Resort, 2
OMPARING 1
PTEs. 1
R10k 1
Problem 3
PAGES 2
Plot 1
Palo 1
Resources 2
Padegs. 1
ON 12
R4000 5
Process: 2
PAGESIZE 1
Preemption-safe 2
Particularly 1
Rules 5
Paging, 1
OOLS 1
RAM. 1
Processes: 1
PDBR 2
Prefetching 1
Patel. 1
Running: 1
Parent 6
OS; 8
Processing, 1
RANSLATIONS 15
PDPTA’97, 1
Pren-tice 1
Patent 1
Park, 2
OSSpinLock 2
Producer/Consumer: 3
PD_MASK) 1
README 20
Primer 1
Patterson, 1
Pass(B) 1
Proportional 2
PFN, 1
RINCIPLE 2
Priority] 2
Pennsylvania, 2
Paul 3
Proportional-Share 3
PTBR 5
ROM 2
Of 70
Personal 2
Process 35
Proportional-share 1
Performance 11
PTE.present 1
ROPORTIONALLY 1
Phipps 1
Process0 12
On 21
Pthread_cond_signal(&empty); 2
Pesterev, 3
PTHREAD 4
Raiders, 2
Plenty 1
RaiseException(PROTECTION_FAULT) 9
Pthread_cond_signal(&fill); 2
Point 1
PTHREAD_MUTEX_INITIALIZER; 7
Processes 8
Once 41
Plus 1
S 379
Pthread_mutex_lock(&m); 6
Policy: 2
PTIMIZATION 1
Processing: 2
Randomization” 1
PowerPC, 3
Or, 7
Prentice-Hall, 7
Put 4
Pollack, 1
PT_MASK) 1
Processor” 1
Rather 1
S.Sahni). 2
Organization 1
Presumably 1
Q 12
Positive? 2
Pages 5
Producer/Consumer 5
Reboots 1
SEG_MASK) 2
Ott. 1
Priority(A) 4
Q0 13
Prentice 4
Paging: 4
Producers 1
Recollections 1
P0), 1
SJF 21
Problems 1
Q8 1
Presented 1
Paperbacks, 1
Professor, 1
Recovery” 1
Programmers 4
SJF/STCF) 1
Quicksort, 1
Proc 14
Priority 4
Parts”.) 2
P1, 2
Redell. 1
Project 3
SLEEPING, 1
RANSFER 1
Provides 1
Professor? 1
Patterson 2
P=0 1
Redell’s 1
STDOUT 1
Protection 7
REATE 2
Pthread_create(&p2, 5
Programmer’s 2
Perry. 1
Remove 2
PAGE 6
Saavedra-Barrera 1
Pthread_cond_wait(&c); 1
REEMPTIVE 1
Protected 1
Pthread_mutex_lock(&mutex); 8
RISC 14
Return-into-libc 2
PAT 1
Saying 1
Pthread_cond_wait(&c, 3
Protocol 3
Peter 5
Pthread_mutex_lock(pthread_mutex_t 2
ROBLEM 4
Review, 3
PDE, 1
Scott. 4
Pthread_join(p1, 5
Pthread_mutex_unlock(&mutex); 8
Peterson 2
Purify 1
ROCEDURE 1
Ritchie. 1
PERATIONS 2
Robert 9
Pthread_mutex_unlock(&m); 6
Ph.D. 3
Q1 15
Q6 1
ROP 3
Segment 10
PFN) 2
S+03] 1
Q3 1
Physics), 1
Quanta 1
Quantitative 2
ROPORTIONAL 13
Segregated 1
PHit 1
SHIFT 8
Queue_Enqueue(queue_t 2
Pilot 5
Queue_Dequeue(queue_t 2
RAIDs, 1
ROVIDE 1
Sequential 2
PID 5
SIGINT 2
Queues, 2
Policies 3
Queues: 2
RE 1
RTFM 2
Sequin. 1
PM 4
SIGTSTP 1
RADE 1
Policy 6
Rago 1
R 21
Shacham. 2
PREMATURE 1
SN_SHIFT 1
ROCESS 30
RAM, 1
Pons 1
Raiders” 2
R+89, 1
Share 4
PTE, 6
SOMETHING 1
ROCESSES 1
REAT 3
Poor 1
RaiseException(TLB_MISS) 1
README, 1
Sharing” 1
SPINNING 1
ROP. 1
Page 39
Size 10
REE 19
RIORITY 1
SSD, 1
Portland, 1
Random 21
PageTableBaseRegister 1
Software 7
ROTECTED 1
RR 14
SSDs) 1
PowerPC 1
Ratios” 1
Pal 1
Sorry, 1
RR. 2
RSS, 2
STCF. 1
Prentice-Hall 1
Really 3
Parallel 3
South 1
Randal 1
RaiseException(PAGE_FAULT) 1
Saint-Exupery 1
Pretty 8
Recent 1
Passing 2
Spectrum 1
Randell 1
Randall. 1
Same 2
RPACI 154
Principles” 2
Reducing 1
Pathfinder/Authoritative 2
Stalin 2
Random) 1
Rate 4
RUX 33
Prints 1
Relationships, 1
Patt, 1
State: 2
Rather, 4
Sanjay 1
Rago. 4
Probability” 1
Relocation) 2
Read 38
Peanut 2
Steinberg 1
Recognized 1
Schedulability 1
Ranganathan, 1
Problem” 3
Required 1
Read-Execute 1
Persistence 1
Stoica 1
Reese’s 1
Scheduler” 2
Rashid, 1
Process1 9
Research, 2
Read-Write 2
Physical 13
Strategies 2
Ready: 1
References 28
Scheduling 12
Restartable 1
Real 3
Program 20
Power 1
Stride 4
Processing 5
Reliability 1
Schwarz, 1
Restricted 1
Reduced 2
Protection) 1
Recall, 1
Pthread 11
Prof. 1
Relocation: 2
Science, 1
RetryInstruction() 4
Reese 1
Structures” 2
Record 1
Pthread_cond_wait(&empty, 2
Results 1
Search 2
Review” 2
Referring 1
Student, 1
Professor: 37
Refers 1
Pthread_cond_wait(&fill, 2
Robin 3
Segmentation 3
Ritchie) 1
Region 1
Such 16
Programming: 3
Regions 1
Pthread_create(&c, 2
S). 2
Segments 2
Roscoe. 1
Report 2
Supporting 1
Pthread_cond_signal(&c); 4
Relocation” 1
Pthread_cond_wait(&cond, 6
SDS 2
Separating 1
Routines 3
Requirements 3
Swaminathan 2
Rewritten 2
Pthread_create(&p, 5
Remember 5
Pthread_join(p2, 5
Server” 1
Pthread_mutex_unlock(&lock); 6
Swap 4
Ritchie, 1
Running 24
SER 1
Remzi 6
S. 22
Shasha. 1
Published 1
Swift. 2
River, 1
SHIFT, 1
Pthread_mutex_lock(&lock); 6
Repeatedly 1
S.J. 1
She’s 1
Python. 1
T2), 2
Rudolf 1
SIGMETRICS 2
Publishers, 1
Replacement” 1
SECTION, 1
Response 3
Q1. 1
T3, 4
Runtime 1
SIZESORT+, 1
Q4 1
Simple, 1
SGI. 1
Simply 3
Q7 1
SEG_SHIFT 1
TABLES 15
SJF/STCF 1
Quarterly, 1
Responsibility” 1
SIZESORT-) 1
Sizes 1
Queue_Init(queue_t 2
SET 2
TECHNICAL 1
SWITCH 6
Queue 8
Revolution 1
SJF. 2
Slutz, 1
Queues 4
SIGNALING 1
TERMS 1
SYNCHRONIZATION 1
RAND 5
Right! 1
SN 3
Smotherman 1
SQMS 7
THER 1
R. 33
RDLK 2
San 12
Rings, 1
SOLATION 1
So, 1
STCF, 1
THREADS 1
R/W 1
REMATURE 1
Santiago, 1
River” 1
SPARC 9
Sometimes 9
TLB) 3
RAID 1
STRUCTURES 16
RISC, 2
Schedulers 1
Round-Robin 1
STCF) 2
Specific 1
TLB-miss 1
RAM 5
Schedulers: 1
RR) 1
Seward, 1
Run: 2
Saavedra-Barrera. 1
Spectre 3
REASON 1
Scotland, 2
TO 26
Set 6
Shan 2
Runs? 1
Sadly, 2
Spin-based 1
RITICAL 1
RUN 5
RUNNING, 1
Seward. 1
Similarly, 6
Said 1
S, 6
Spinning 4
RR, 1
TPDS 1
RaiseException(SEGMENTATION_FAULT) 5
Sharing 12
Sanzi, 1
S09]. 2
Simple 29
Splitting 1
Raging 1
Tables 9
Random, 5
Short, 2
Scalability 3
SCHEDULER 1
Single 7
Sriram 2
Rajimwale, 1
Tamil, 1
Readings 1
Shortest 6
Scaling 6
SEFUL 2
Slab 1
Randell. 1
Smaalders. 2
Stack 14
Signaling 2
Scheduled 1
SEG 2
Tc, 1
Redell 2
SHIFT) 8
Staelin. 1
Signals; 1
So 30
Science). 1
Technical 4
Ready 58
Redirection 1
SJCC, 1
Stan 1
Silas 3
Start 5
Scientific 1
Texas. 2
Recheck 1
Reduce 1
SJF, 4
Sometimes, 9
Simpler 2
Status: 1
Scientists 1
Than 1
Reclaim 1
Reese, 1
SPARCv9). 1
Sorry3 1
Single-Queue 1
Stick 1
Served 1
Red-Black 2
Reeves. 2
Save 2
Then, 19
Speaking 1
Scalable 10
Store-Conditional 2
Servers” 1
Registers 1
Register 8
Therein, 1
Smotherman. 1
Spend 3
Scan-resistant 1
Store-conditional 2
Setup 1
Relocation 1
Reprinted 1
Things. 1
Smotherman’s 1
Spider-Man: 2
Structures: 1
Scheduler 5
Shacham, 1
Replacement 6
Research 3
Third 1
Solaris” 1
Spin 7
Secure 1
Shortly, 1
Report, 2
Summary 30
Restoring 1
Those 2
Spin-waiting 2
Seg 1
Some 25
Silicon 1
Represent 1
Sun 5
Resulting 4
Threads 5
Sploitfun. 1
Semantics 3
Sopena. 1
Similar 3
Resource 4
Superpages” 1
Reuter. 2
Time-Shared 1
Spurious 1
September 13
Sounds 6
Simulation, 1
Responsibilities 1
Support) 1
Riak. 1
TimeSharing 1
Stallman. 2
Shared 2
Sitaram 1
Ronald 1
Space 20
Survey 3
Richard 9
Structuring 1
Shedler 1
Round 3
Rule 14
Sleep 40
Specifically, 52
Should 4
Systems. 1
Success! 1
Small 2
To 152
Spectre. 1
T2 38
Showing 1
Sullivan, 1
SE 11
Solaris, 7
Tp). 1
Run 68
Springer-Verlag, 1
THINK 1
Sleeping 3
Sun, 2
SPINNING: 1
Sood, 2
Tracking 1
Running, 1
Staelin, 1
Software-based 1
Sun.. 2
TLB, 21
SS+10]) 1
Sound 2
Traditional 2
Russ 1
Stallman 1
Solution: 1
Susan 1
TLBP, 1
SSD. 1
Special 1
Trees 1
Stan. 1
Soon 2
Sweden, 2
SIDE 40
TLBWI, 1
STACK: 2
Standard 2
Tresponse 1
States 1
Sorin, 1
Switch 3
SOSP 9
TLB_Insert(VPN, 3
STCF 8
Stanford 1
Tron 1
Stevens, 2
Spaces 3
Switches 1
SPARC, 3
TLBs) 1
Starts 1
UMMARY 3
Storage” 1
SYSTEMS 42
Spin(), 1
Synchronization 8
SUPPORT 1
TR 1
UPERUSER 1
State 12
StoreConditional(int 2
Saving 1
Spin(1); 2
Synthesis 1
S_IRWXU); 2
TR-95-22, 1
USTERHOUT 1
Steinberg. 1
Structures 6
Scheduling: 6
Star.” 1
Systems: 6
Saltzer 1
TRUCTURE 3
UTUAL 1
Strachey. 1
Sun. 2
Stephen 4
Second, 31
T. 14
Say 2
Tb 2
Usually, 3
Strachey’s 1
Sun’s 1
Steve 4
Security 2
T2, 4
Scheduling” 1
Tcompletion 2
V.A. 1
Structure 3
Support” 1
VM 18
Segmentation: 1
Schroeder. 1
Technique 1
Stoica, 1
Systems, 3
VMMs 1
Self-Tuning, 1
Scott 10
Technische 2
Streams 1
Student: 36
VMS), 1
Shah, 2
System” 22
Secker 2
Subsequent 1
Think 12
Va4 2
Sharedmemory 1
Study 8
Section 1
TLB 173
Support: 1
Thompson. 1
Valley. 1
Short 1
Summer 1
TORAGE 1
Sundararaman, 4
Threading 2
Von 2
Single-Threaded 2
Surprisingly, 1
TORE 1
Supervisor” 1
See 43
Tickets? 1
Vyssotsky, 1
Sleeping) 1
Swap-Based 1
TV 1
Swapping 1
Seems 1
Time-to-Completion 2
WAITING 1
Smaller 1
Switzerland 1
Tb, 1
Swift, 1
Segmentation” 1
Time” 1
WARY 4
Sorry! 1
System: 1
Tc2) 2
Symbiosis” 1
Server. 1
Timothy 1
Tix:250 1
TestAndSet(int 2
Systems” 7
Synchronization” 2
T3 8
Space-time 1
T 378
Traffic” 1
Tf 1
Shared-Memory 4
System, 2
TCB. 2
Spending 1
T1). 4
Trans. 2
They 5
Shared-memory 1
Systems.’ 1
WWW. 166
TILIZATION 1
Spinning: 2
T2. 4
Transformers 1
Thread2 6
Shavit. 2
T1, 12
Wahbe, 1
TIP: 9
Stack11 2
TENEX 3
Transitions 1
Threads? 2
Shavit’s 4
THE 9
Waiting 8
TLBWR, 1
Stanley 1
TLB: 2
Tricky 2
Threads” 6
Shedler. 1
TLBs, 6
Wanted 2
TOPLAS, 2
Stevens 6
Tc1, 2
Tturnaround 3
Tim 2
Singh, 1
TM 2
Was 1
TS 1
Still 5
Tel-Aviv, 1
Tudor 2
Times 1
Slow 1
TOOLS 1
Were 2
Table? 1
Stockholm, 2
Thesis, 1
Typical 1
To? 1
Solaris 18
We’d 1
TRUCTURES 17
Tc1). 1
Stodolsky, 1
This, 2
UCB/CSD-92-684, 1
Together 1
Solomon. 2
Where 7
Tc2 7
Thanks. 1
Stored? 1
Thomas 3
UILD 3
Tony 1
Solution 5
TeX 1
Which 12
That’s 6
Structure” 1
ULE 2
Thus 24
Too 3
Ticket 3
Techniques 2
Windows 10
Summary: 2
Then 17
Soyeon 2
ULTI 11
Transforming 1
Tiny 1
Tell 1
Wish 2
Sumner. 4
There? 1
Specification, 1
Translations 2
ULTIPROCESSOR 12
Tix:50 1
Terminology 1
Within 4
SunOS 1
Third, 5
Stack? 1
Transparent 2
Torrellas, 1
Test-And-Set 2
Woodlands 1
Sure! 1
Though 5
Stanford, 1
Trevor 1
Tp 3
Test-and-set 4
Work 1
Switching 4
Tickets 1
Statement 1
Tucker, 1
Traiger. 1
USSEAU 154
Time 29
Workload 11
Systems 18
Steven 1
Two 11
Turner, 1
Texas, 1
Understanding 2
Today’s 1
TABLE 2
Write 11
U.S.S.R; 1
Storage 10
Turns 2
Thanks 5
Unfairness 1
Torvalds 1
TD 2
Yale 1
UIDELINES 1
Store-Conditional” 2
U.C. 2
University, 2
That 14
TEST 2
Trace 9
Yang, 1
Translation 5
Stretch 1
UEUE 11
Using 19
UPPORT 2
Yet) 1
THREAD 12
Trap 2
Subramanian, 3
UK, 2
Undefined 1
Yield, 4
V 31
Trials 1
Suli 1
ULLER 1
THREE 37
Yupu 2
VAX-11 4
Sun). 1
Try 11
University 6
UNIX 7
Zhiqiang 2
VERY 1
TLB. 13
Support 9
Turning 2
Upon 3
US, 1
[3] 1
USENIX 8
TLBR, 1
Surveys, 1
Typically, 2
Users 2
VICT 1
[B72] 1
UST 1
TLB_Lookup(VPN) 4
Swapping, 1
U/S 1
VAX/VMS. 1
VLSI 1
[B89] 2
TLBs; 1
Swift 2
ULTIPLE 2
VAXen 1
Unfortunately, 37
[BJ81]. 1
TLB’s 1
VMS 16
UNSW-CSE-TR-0321, 1
VERLAP 1
Unix 1
System 37
[C69]) 1
VPN: 1
URSE 1
VMS, 1
Table 18
Unknown.. 1
System/370” 1
[CP78]) 1
Variable 2
USA. 1
VMware 1
Takes 2
Unlock 2
[CS94] 1
T1 30
Undoubtedly 1
Version 4
VPN. 1
Until 3
Tc1 9
[CSG99], 1
TAKE 1
User 14
Very 2
VPNs; 1
Unused 2
Tc2). 1
[D+13] 2
TLB; 1
VA 1
Virtual” 1
Va3 2
Useful 1
Techni-cal 1
[D70] 1
TLBs 10
VAX 5
W.C. 1
Vegas, 1
V. 3
Technique: 1
[D72]. 1
TOCS, 3
VAX-11/750. 1
WAPPING 1
Visualization 1
VAX-11/780 1
Techniques” 2
[E06] 1
Ta 3
VM, 3
Waldspurger. 2
Wanjohi: 1
VAX/VMS 11
TestAndSet() 6
[E95] 1
Take 2
VPN; 2
Waldspurger’s 1
Warburg 1
VMS. 2
[EF78]) 1
The 821
Tarrival 3
VPNs 5
Wanjohi. 1
Warm-start 1
There 42
[FLR98]. 1
TeX, 2
Va0 3
Test-and-set, 2
Valgrind 2
Weaver 1
Vasileios 2
VPN 69
Warburg, 1
These 24
TestAndSet(flag, 4
[G04] 1
Weiwei 2
Va5 3
Weaver, 2
Virtual 12
Through 1
Theodorus 2
[H74] 1
We’ve 2
Virtually 5
Weighting 1
Vol. 5
Timer 1
[HP06]), 1
TlbEntry) 4
What’s 4
WITH 1
This 201
Thompson 1
Thrashing 1
WWW.OSTEP.ORG 42
Wales 1
Tomlinson. 2
[High 1
Tolerance 1
W 17
Thread 95
Tools 1
[I11] 2
Tuning 1
WITCH 1
Three 4
Trace: 4
[J09] 1
We’re 1
WITCHES 1
Transactions 3
When 122
Types 1
[K64]. 1
When, 1
WORST 1
Trigonakis. 2
Wilson. 1
[KE+62] 2
Who 4
WORST)? 1
True) 9
Wilson’s 1
Turing 5
Wiggins. 1
Waciuma 1
We 166
[L+13] 2
Win, 2
Turn 1
Wiggins’s 1
Wait: 1
Well 1
[L+75] 1
Wisconsin—Madison, 1
UNESCO, 1
Wikipedia? 2
Watch 4
Werthman. 1
[L+93] 2
Worse: 2
USA 1
Wiley, 1
Weihl. 1
Thus, 206
U 89
[L78] 3
X/macOS 1
UT 1
Windows; 1
Time) 2
ULL 1
Time-Sharing 8
We’ll 38
X11 1
Uman 3
Woke 1
[L83], 1
URL: 1
Times?” 2
Whereas 3
YSTEM 2
Uncontrolled 2
Wow! 1
[M06] 1
USE 3
Tix:100 1
What 214
Whether 4
Yet 2
Underlying 3
X. 1
[M11], 1
Uh 2
Tom 2
Whenever 2
Why? 5
Yuanyuan 2
Unsafe” 2
Xerox 2
[M15] 4
VARIABLES 18
Tp, 1
Whew! 1
Wikipedia 3
Zhou, 2
ZOMBIE 1
Up 2
[M82], 4
VAX/VMS), 1
Tracing 8
Why, 1
William 3
[2] 2
Zeldovich. 2
[MM03]. 1
VM. 1
Transactions” 2
Wilson 2
Use 35
Wood. 1
[A79]) 1
Zwaenepoel, 1
[N+02] 1
VPN=0 1
Tree 1
User’s 4
Workstations” 1
[A90] 1
[AD03]. 1
[N+07]; 1
VPN_SHIFT 1
Tricks 1
VAX’s 1
With 82
Worst 2
[AC97]. 1
[B+10] 3
[PP03] 2
VS 1
True 1
VMM-level 1
[B+18], 1
XECUTION 15
Without 15
[B+18] 1
[R97]! 2
Va2 2
Two-Phase 2
VPN=39 1
[B89, 2
Y. 1
Word 1
[B+72] 2
[RK68] 1
Variables 3
Two-phase 2
VPN=42. 1
[B94]; 1
YNCHRONIZATION 1
Worried 1
[B66] 2
[SA96] 1
Virtual-Storage 1
UNIX-based 1
Value 1
[B97] 2
YOUR 1
Worse, 3
[B75] 1
[TTG95]. 1
WHILE 2
UNUSED, 1
Van 4
[BC05] 3
Yes. 1
Wulf. 1
[C+62] 2
[W06]. 1
Wei, 1
Unfortunately 1
Vancouver, 5
[BC91]; 1
Yield 2
X, 1
[C03] 1
[W15]. 1
Weihl 1
Unlike 5
[BH00] 1
VirtualAddress 7
Your 1
XD 1
[C69], 1
[W95]. 1
VALID 3
[BNS69] 1
While 31
Virtualization 5
You’re 2
XIST, 1
[CM00]. 1
[WW94] 1
VAX/VMS, 2
[BOH10] 3
Winter 1
Visually, 1
Zero” 1
Xerox. 1
[CS97] 2
a2 1
VLDB 2
[C+04] 1
Working 2
Vyssotsky. 2
Zorn. 1
Years 4
[D82] 1
a:100:100,b:100:50, 1
VMWare’s 1
[C63]. 1
Wow, 2
[AC97]; 1
W. 18
ZFS) 1
[D91] 2
a[2] 2
VPN, 2
[C69] 1
Wrapper 2
[B+13]. 1
WAIT 1
Zebra 1
[DD68] 1
a[9]) 2
VPN_MASK) 7
[CK68]. 1
Write-back 1
[B+19] 1
WRONG 1
Zhang, 4
[DV66] 3
Va1 2
[CP78] 1
Xiong, 2
[B94] 1
Wait 1
Zuckerberg 1
[E06]; 1
Values 2
[D68] 7
Y 3
[BC05,G04]. 1
Waiting: 2
[4] 1
[G+95]. 1
Virtualizing 2
[D97]. 1
YNAMIC 1
[BC91] 1
Wakeup 2
[AC97] 1
[H61, 1
[DV66], 1
YPES 2
[C06]. 2
Volume 35
Weihl, 2
[B+18]. 1
[HP06] 2
[EF78] 1
Yes 1
[C93] 1
York, 6
Voorhis. 1
Whichever 1
[B+96] 2
[JM98]. 1
[Free] 1
about 294
[C95]. 1
[1] 2
Waiting-Line 1
above. 20
[B,C 2
[JS94], 1
[G+17] 1
[CG68, 1
[A79] 1
While, 1
Waldspurger 6
[B75]. 1
[K65] 1
[G83] 1
accessed 42
[CK+08]. 1
[A91]. 1
Wikipedia. 1
Warehouse-scale 1
[BB+72], 1
[L11] 1
[GR92]. 2
accident 1
[CSG99] 1
[B+10]; 2
Wilkes. 1
[BH73] 2
[LL82], 1
Well, 27
[H91] 2
accomplish 9
[CV65,DD68]) 1
[B+13] 1
Wisconsin 1
[C03]. 1
[LR80] 1
[I09] 4
accomplishes 1
Why 28
[D65] 2
[B+79], 1
Workshop 2
[C54] 1
[M28]? 1
[J91]. 1
account. 1
Will 6
[D70], 1
[B72]. 1
XCLUSION 1
[C63] 1
[M65]. 2
[JS94] 1
accounting 4
Wilson, 2
[E95], 1
[BC05, 2
YBRIDS 1
[CD85] 1
[NM92] 2
[K+61,L78]. 1
accuracy 1
Wood-lands 1
[FP89] 1
[BH70] 2
YOU 2
[CK68] 1
[O16] 1
[KE+62, 1
achieves; 1
Wouldn’t 1
[G62] 1
[BOH10]). 1
[CV65] 2
[O90]. 1
[L60] 1
X 3
[H61] 1
acquiring 22
[BS+09] 1
[D82]. 1
[QI15]. 1
across 30
X-windows 1
[H74], 1
[C06] 2
[D91]. 2
[LL82] 4
[R+89] 1
activity. 2
XITS 1
[H87] 1
[C54,PV56] 1
[D97] 1
[LR80], 1
[S07], 1
addr 2
XXX 2
YSTEMS 203
[J09], 1
[C95] 1
[DV66,V+65]. 1
[M07]. 1
[SN05] 1
address), 1
[SR05], 3
[K68]. 1
Yes, 9
[CD85]), 1
[G85] 1
[M11]; 1
Yandong 3
addressed, 1
[W+95]. 2
[KL88] 1
[CK+08] 1
[GR92] 2
[MM00] 2
Yes? 1
adjust 1
[MS04]. 8
[L83] 2
[CS94]. 1
[H93] 4
You’ll 3
[W09]. 2
admit, 1
[WG00] 3
[M+63]. 2
[D+13]. 2
[HP06]. 3
Zeedonk 1
You 89
[MS91] 2
__queue_t 2
[M+70] 1
advantage 14
[D70]. 1
[J91] 1
Zeldovich 1
Zel-dovich 1
[O49]. 1
a:0,b:1,c:1 1
[M06], 1
affords. 1
[E95]. 1
[K+15] 1
Zelenka. 1
Zonkey), 1
[PS81]. 1
a[1], 1
[R97] 2
again; 3
[G04]. 1
[K65]. 1
[H74]. 2
[AD00] 1
[M11] 2
a[5] 1
[S+04] 1
ago, 5
[AD00]; 1
[L09, 2
[J16] 1
[B+00] 2
[M28] 1
abilities 1
[S04]; 1
[AD03] 1
ahead 8
[L11]. 1
[K68] 1
[B+19]. 1
[M82] 2
ability 11
[S07] 2
[B86] 1
akin 2
[LM+89, 1
al. 5
[B+79] 1
[MB91]. 1
about; 3
[SHW11]. 1
[BB+72] 1
[KE+62]. 1
[M07] 1
[B94]. 1
algorithm, 8
[MS96] 2
above) 6
[BH00]. 2
[SR05] 6
access, 9
[M83], 1
accesses, 4
algorithmic 1
[MS98]. 2
[BH70, 1
[L+75]. 1
[SS+10] 1
[BJ81] 1
[MS04] 2
accessible 3
all... 1
[N+02], 1
[BH73], 2
[L+93]. 2
[W03] 1
[C93]. 1
[O16]. 1
achieving 7
alloc 1
[NM92]) 2
[BNS69]. 1
[L78]. 2
[WG00], 1
[D01] 1
[O45], 1
allocate(100), 1
[P81]. 2
acquired 15
[BS+09, 1
[LR80]; 1
[WL+93] 1
[D65,D68] 2
[O49] 1
allocate. 1
[RL81] 1
[C+04]. 1
[M+63] 2
[Y+18]), 1
[D68]; 1
action 15
[O72], 1
alright 1
[S+04]), 1
[CG68] 1
[M04] 2
[virtual 5
[D72] 1
added, 1
[PS81] 1
also, 1
[S+11]). 2
[CM00] 1
[MB91] 1
__lock_t 8
[FLR98] 1
additionally 1
[R69]; 1
addr:10 1
[S04] 1
[CV65], 1
[MS98] 2
a1 1
[FP89]. 1
alternates 1
[S09] 2
[SS74]. 1
[D01]; 1
[O11] 1
a:30:200 1
[G83]; 1
alternatives! 1
[SB92], 1
[V+65,BH70]. 1
[D68]. 2
[P+95] 1
[VPN 11
[H87]. 1
altogether, 1
[SHW11] 1
[D70]), 1
a[1] 1
[P10] 1
[W02]. 1
[HJ92] 2
amazing, 2
[SN05]. 1
[G+17]. 1
a[9] 1
[P81] 2
[W17] 2
[HP06]). 1
amortize 2
[V+65] 1
[G+95] 1
a[i] 1
[P90] 1
[W95]: 1
[J16], 1
amt) 2
[W+95], 1
[G85], 1
abbreviated) 1
[PV56] 1
[WW94], 1
[K+61] 2
analogy 1
[X+10] 2
[H91]. 2
abilities, 1
[R69] 1
[anon 1
[K+96] 2
analysis” 1
a3 1
[H93], 3
above), 3
[RK68]. 1
__Node_t 2
abstraction 15
a; 4
[I09]. 2
[RT74] 1
[K64] 1
__node_t 10
abused. 2
a[3] 1
[JM98] 1
[S+03] 1
[KL88]. 1
a:100:100,b:100:50,c:100:50). 1
[K+61,L78], 1
[S+68]), 1
[S05]) 2
a[6] 1
[LL82]. 3
[KR88] 2
[LM+89]; 1
about, 2
[M65] 1
absolute 6
able 59
acceptance 2
[S15] 1
[L09] 4
[M83] 1
about) 1
[S59] 2
[L81] 4
accessed, 12
[MS04], 2
access 133
above). 7
[S68] 1
[LL82]; 1
accesses), 1
[MS91]. 2
accommodated. 1
above? 3
[SA96]. 1
[LM+89] 1
accessed? 1
[N+07] 1
accordingly 1
access: 1
[SN05]; 1
[Low 1
[NS07] 1
accounting, 1
accessible. 2
[SS74] 1
[M+70]. 1
[O45] 1
[O72] 1
accrued 1
accomplished 9
[M62] 1
[MM03] 1
[O90] 1
accumulates 1
accumulate 1
accesses 47
accuracy/performance 2
[P+95]). 1
achieved. 3
[MS96]. 1
accesses)? 1
accurate); 2
[Page 2
address 561
[O11], 1
acquisition. 4
accesses?) 1
action. 1
actions. 1
[P10]); 1
[V 166
accessible, 1
[QI15] 1
active; 2
active 13
[RL81]. 2
according 3
addresses 42
[S+11] 2
actively-used 1
actuality, 1
[S15], 1
[VERSION 42
adoption 1
[S05] 2
[TTG95] 1
addition 13
[W02] 2
advanced 7
[S07]. 1
[W06] 1
advantages 5
acquire 57
[S59, 1
[W15] 1
[stack 1
address. 21
actually 38
affinity, 1
acquire/release 2
[SB92] 1
[W95] 1
[W+95] 4
__counter_t 6
acquired, 2
again. 24
[Y+18] 1
address> 1
] 2
active. 1
algorithm). 1
[W03]. 1
adding 35
__hash_t 2
addresses. 4
__list_t 2
algorithms, 3
[W09] 2
additions 1
actively) 1
addr:20 2
address! 1
actual 15
a4 1
all), 1
adds 24
alloc()/free() 1
address) 2
adapt 1
a[4] 1
[WL+93]. 1
adios, 1
address-space 5
added 12
a[i]; 1
[X+10], 2
allocating 19
administrators 2
addressed 2
address); 1
about: 1
a:30:200. 1
a[1]. 1
admission 1
address, 7
advice 4
allocation 24
a[3], 1
admit 1
address-based 1
affairs 1
allowed. 1
a[6]) 2
adversely 1
above 50
address-translation 4
affects 2
abstractions 7
a[7] 2
about), 1
above; 7
again, 31
access; 1
advertise 1
addresses, 3
altering 1
abstraction. 1
alike. 1
accesses; 1
advisors, 1
advance 1
abuse 1
all; 4
affecting 1
am 16
accidentally 12
advanced, 2
advantageous 1
again? 2
allocation. 7
answering 1
accommodate 4
accept 2
advent 1
against 9
allocators 9
answers; 2
accordingly. 3
advocates 1
access. 8
agent 1
allotment, 1
anything, 5
affected 1
account 6
accessed), 1
ago 1
appeared, 1
although 15
affinity 8
accesses. 5
agreed-upon 1
achieve 12
applications? 1
amazingly 3
after 54
ahead, 3
achieved, 1
ain’t 2
amount 37
applies 1
again!) 1
acquires 8
an- 1
accessibility 1
alas. 4
apply 1
again: 2
acquisition, 2
age), 2
appreciate 1
an-THREE 1
actions, 1
aims 1
accessing 36
analysis 5
activities 3
algorithm; 2
accidental 1
algorithm 34
analyze 3
activity 3
accom-plish 1
all!), 3
another; 1
ad 3
accumulated 1
algorithms 26
accurate 2
answer, 8
add, 3
all. 9
alike, 1
accused 1
anti-gaming 1
addl 2
allegorical 1
all) 1
accustomed 1
allocated. 5
approach 138
allocation, 2
anyhow. 2
addr:0 4
allocator. 2
achieves 7
allocators. 3
appealing; 1
address(es). 1
allocators; 1
act 3
appears 1
approaches 31
address). 1
active, 2
allows 37
allow 22
application 29
appropriately-named 1
address? 1
activity; 1
alone 6
approximations 2
approach. 8
addresses). 1
approaches. 2
addition, 4
arcane, 1
addr:21 1
addresses? 1
approaching 1
already 28
appropriately 3
architectures. 1
advances 1
architectures 2
address: 8
alternatives 4
are, 4
affinity; 1
archive, 1
address>, 1
amazingly!), 1
arg: 1
argc/argv 1
argue 1
among 14
are. 4
administer 1
alas, 3
argued, 1
also 213
amount. 2
advice, 1
arg); 8
algorithm. 2
arguments. 4
always. 1
ancient 2
affected. 1
arg, 2
alive, 1
argv[1]; 1
am! 1
and? 1
affinity. 4
args->b); 4
aforementioned 2
argument; 2
arise 12
annotate 2
all, 17
amazing 9
arose: 1
answer: 2
arguments 23
amount; 3
arranged 1
all-too-trusting 1
anticipate 1
arise2 1
anyhow, 2
anymore? 1
arrangement 1
arose, 1
amounts 7
anyone 3
array), 1
allocate 31
allocate(10). 1
arrays, 2
arrive), 1
again 58
age; 1
arrive; 1
anything 17
arrives 4
allocated, 2
article 3
arrive] 2
aside 4
aggressive 3
alas). 1
application. 4
algorithms. 5
all? 8
allocate(int 1
approach, 25
approaches, 1
allocates 11
allotment 2
approximate 20
allocation). 2
ask? 2
allocator, 5
asks, 1
allowed 8
approximation? 1
architects 4
architectures, 1
are: 2
almost 13
allowed), 1
asleep, 1
and 2770
assigned 7
arguments, 5
arise. 3
arithmetic 2
arose 5
array; 1
assume 80
allowing 22
alone! 1
answer; 3
arrays 5
alternately 1
assumptions 14
alter 2
answers 3
arrives. 2
astute 2
always, 5
anticipating 1
amortized. 1
arriving 2
atomics. 2
alternate 5
anywhere 6
amt; 2
aside, 2
attempts, 3
alternatives. 2
ap-proaches 1
animals 1
asks 4
amazed. 1
attention 10
applications, 6
anon) 1
asleep 3
amazingly, 1
approach), 2
authors 8
an 545
another, 12
assert 3
amplifying 1
approximate! 2
auto-matically 1
and, 5
answered, 1
assert(p 1
analyses 1
approximating 1
automate. 1
anomalous 1
anyhow). 1
assists 1
analyzed 2
approximation 1
avoids 5
architectural 2
applicable 2
assume, 2
another. 6
applications. 12
answer 29
architecture 18
answer? 3
award-winning 1
assumed 12
approach). 4
assumptions, 6
argument 22
answers, 2
atoi(argv[1]); 1
baby 2
approach? 3
arise? 3
anti-hero 1
atomically; 2
baby!” 2
approaches? 1
any? 1
arises, 4
attack: 1
background. 2
approximates 1
anymore, 1
arising. 2
attackers 2
backwards, 1
arbitrarily 2
anytime 1
appearing 1
attained 1
aren’t 5
arranges 1
balance 15
application; 1
any 171
attempts 4
arg; 7
array, 7
base/bounds) 2
array-based 2
argc 1
applications 29
anything. 1
bases 2
array[1000]; 1
attention, 3
args 8
applied 5
authors.. 4
arrive: 1
be? 9
args->a, 4
apologize. 1
argument: 2
average). 1
ask, 1
appreciation 1
apparently 1
arises. 2
becomes 18
avoided. 2
aspects 10
approach) 1
append 2
around, 4
begins. 1
assert(count 2
away 12
approached 1
appetite, 1
array. 4
beguiling 1
assert(tmp 2
awesome! 1
appropriate 3
applicable; 1
array’s 1
assigning 1
behaves 11
backwards 1
approximately 1
approach: 5
arrived 6
associative 1
behavior. 4
balanced 6
architecture, 4
approaches: 1
art. 1
behaviors; 1
assumption 10
base/bound 1
area. 1
appropriate) 1
asking 4
benefits. 1
atomic. 2
bash, 1
arena 1
aspiring 1
arbitrary 13
atomic_decrement 2
atomically, 2
argument, 11
best 31
architectures: 2
best-fit 7
as 1029
asked, 1
asleep... 1
assembly, 3
assert(fd 1
assigned. 1
basic 94
arguments) 1
atomicity 8
assistance. 1
arise; 1
batch 7
attacker, 1
better 88
batches 1
attacks 5
assumptions. 2
beware 1
arises 21
beyond), 1
attempt, 2
atop 1
attr 2
beauty 2
bible 2
attains 1
big!”, 1
author 2
attempts: 2
attention. 1
avalanche 1
attentive 1
array 46
attribute 2
authors. 1
average 16
arrives; 1
big, 3
available; 1
assertion), 1
art 1
been 100
bit). 3
avenue 1
bits, 7
articles 2
before? 2
assign 3
avoided 2
black) 1
begins: 1
assignment, 3
badly 1
avoid 50
ask 12
behalf 2
blocks 9
association 1
balance. 1
avoided? 1
asking: 3
behave? 4
bodies 2
balanced: 1
assumption: 1
background; 1
basically 6
behaves, 1
body 2
assumptions? 1
assembly). 1
backward, 1
basing 1
behavior: 1
book; 1
books 21
batch-like 1
assembly? 2
both) 1
assert(rc 5
botte 1
battle 1
behind 31
base 66
assume) 1
bounds; 2
because, 1
below) 3
base-and-bounds 4
bounds”); 1
becoming 2
beneficial 1
begin” 6
assuming 25
branch 3
bash), 1
broadcasts 1
behaves. 5
assured 1
benefits: 1
basic) 1
brutal, 1
atomically 16
bucket 2
behaving 1
basics. 1
better, 14
attacker 4
bucks. 1
attacks, 3
behavior, 3
behaviors) 1
be, 2
attaining 1
buffer); 1
believe 5
between 79
become 32
big 44
bit; 1
buffer, 11
below; 1
better. 7
bigger, 2
billions 1
bit), 1
bits: 1
black). 1
bits 70
buffer[fill_ptr] 1
bug 4
blocked. 2
blocked 16
before 130
attempt 14
are 870
buggy 1
blocks, 1
blocks. 2
before!” 1
attr, 4
arg. 2
build. 2
arguments: 3
book! 1
argv 3
attributes 4
book). 5
begin. 3
books. 1
arise, 4
automatic 2
book? 1
a 3927
available. 14
building 41
boot 11
arrange 4
born! 1
beginning: 1
a+b,b+c,c+d,c+e,c-. 1
avoided; 2
built. 1
borrowed 1
arrangement, 1
both), 1
behave 12
a1). 1
awake. 1
burden. 1
both? 2
array) 3
bounds). 1
behaviors 2
a:100:100,b:100:100,c:100:100) 1
award 4
bus, 1
at 576
bother 1
array.c 2
bounds? 1
belt, 1
a:100:100,b:100:50,c:100:50) 1
away.” 1
bus-based 1
bottom). 2
array[i] 1
break), 1
atomic 25
benchmark 3
a[0] 2
axes. 2
butter 1
bounce 1
aside: 1
breed 1
atomically. 2
benefit. 1
a[8] 1
back-to-back 1
buying 2
bounds) 1
asked 2
bring 4
attacks2 1
bet 2
about-to-be-run 4
back. 2
bx=2,bx=2 2
bowels 1
bytes). 3
brag 4
aspect 15
better.” 1
about. 6
backing 1
browser. 1
attempting 1
bytes? 1
breath. 1
binary. 1
assembly 13
backward 1
brutal 1
attributes. 2
c->value; 4
above, 39
browser 1
assertion 2
bit, 10
automatically, 2
abundant, 1
bad 31
buffers? 1
c3 10
buffer 43
bits) 1
auxw 1
associated 18
abusing 1
base); 1
build, 2
c; 3
bug, 1
bits1 1
assume: 1
available, 11
accessed. 4
base, 1
built-in 1
cache: 1
bugs) 1
away; 1
attack 9
awesome, 3
accesses). 1
business 1
based 17
calculate 5
building, 1
block 22
attempted 2
awoken 3
achieved 1
bx=1000,bx=1000 2
battles 2
call: 2
bumping 1
avoidance. 2
axis 4
achievement 1
bye, 1
book 47
caller; 2
bus 3
avoided, 1
b; 4
acquisition 6
boost, 1
calls). 1
byte 15
bx 2
aware 2
back, 4
boots, 1
actions 18
came 12
bytes), 3
bx=3 2
awful! 1
born: 1
bad. 7
activate 1
can, 4
c->local[cpu]; 2
bytes; 2
borrow 2
bandwidth 3
actively 4
capacity 2
background 15
c->threshold) 2
bytesLeft 3
both. 4
barons 1
adapted. 1
careful, 3
bad! 1
c->value++; 4
c->global; 2
bottleneck 1
base/bounds 5
cares 2
badly, 1
c->local[i] 2
c1 10
case: 4
basics 13
base-and-bound 3
add 82
basics; 1
be. 11
bounds 48
c;, 1
c5, 1
additional 15
beautiful, 1
break. 1
breaking 1
address; 3
cache. 9
breathe 2
addresses): 1
caches; 1
addresses; 4
calamity. 1
brk, 1
became 21
administrator 2
calculated 1
broadcast 1
adopted 1
began 4
broaden 2
advantage. 1
cache 86
call. 17
cake 4
affect 10
broadly. 1
begin 32
affordable; 1
because 93
cases). 1
brought 10
afterwards. 1
begin\n"); 5
before), 2
cases? 2
btrees. 1
again) 3
begin\n", 2
calling 55
cast; 1
begins 13
buffer[MAX]; 1
age-old 1
beginning, 1
casts 1
behalf. 1
builds 1
built; 2
ago: 1
begun, 1
ahead. 1
behavioral 1
cen-tral 1
al-though 1
al.’s 2
alas 1
albeit 2
algorithm: 2
certain 26
behavior 35
algorithms). 1
below). 3
below? 1
being 54
chains 1
be 785
below, 2
benefits 5
challenges 2
before, 7
benefit 1
biased 2
chanced 1
begin... 1
better-than-expected 1
big. 3
call 230
care! 2
better? 1
bigger 19
big; 1
change 55
but 288
biggest 4
bx=0,bx=1 2
billions) 1
changed, 3
case 62
behaved 1
bit! 1
behavior? 2
chaos 2
binary 14
all 247
bit) 1
caught 8
bind 1
chapter). 3
causes 5
bits. 2
bit. 5
below. 13
centers 1
chapter? 9
blank 1
bitmap 2
allocated 46
best-case 1
cesses. 1
blocked); 2
chapters, 9
black 3
allocations 8
better) 1
chagrin 1
blocked, 3
books). 1
beyond. 1
blocks: 1
char 35
challenging 6
bookshelves 2
bidding. 1
allocator 26
bold). 1
bolts, 1
change. 6
boost. 1
along 10
book), 2
changes; 3
born, 1
chapter), 1
bookstore 1
bit 93
also: 1
characteristics 2
cheaper, 1
check 46
bits), 2
altered 1
boolean 2
check. 4
child: 1
bits”. 1
alternately, 2
boosted 3
checking 6
chosen. 1
bitwise 1
alternating 2
bound 4
circuitry 2
both 87
bizarre 3
bounded-buffer 1
block, 2
child 59
bottom 10
break; 5
citations 1
bombs, 1
chip 1
bouncing 1
breaks 2
clarity. 1
choices. 1
can 699
box, 1
always 53
break 5
brief 4
chooses 3
cannot? 1
class 12
book, 18
always!). 3
briefly 7
amortization 1
chosen, 1
can’t) 1
classic, 1
boost 8
broad 4
boots 2
broadcast(), 1
chucking 2
browser, 1
clean; 2
brings 1
amt>0) 2
born. 1
capacity, 1
chunks 13
cleans 2
broadly 1
analogous 1
buddy 11
boundary; 1
card 1
classically 1
cleverness, 1
by 705
byte). 1
anonymous 4
buffer. 6
bounds, 5
cleaned 1
brand 2
break: 1
close 11
buffering 1
bytes, 10
careful 16
broken, 2
brilliant. 1
clearly 17
another 105
clustering. 1
carefully; 1
brk 1
clock 11
answer! 1
case. 3
code; 3
buffer; 6
broader 1
close(fd); 1
broken. 3
causing 3
codes 2
buffers 6
answer) 1
cloud), 1
brutally 1
challenges, 1
collect 1
build 118
bugs, 2
answered 1
clustering, 1
buffer), 1
challenging. 1
column 5
byte) 2
combat 2
cmpl 1
built 19
buffer[use_ptr]; 1
chan 1
answers. 2
bytes. 3
combinations 3
co-authors). 1
c 177
buggy! 2
bunch 6
chance 4
anymore. 1
bugs. 11
builder 1
c2 10
combining 7
burst 3
co-exist 1
anything? 3
c->threshold 2
changed 18
c->value 4
c6, 1
commands, 1
buy 6
co-workers 1
appear 4
but, 1
chapter; 1
bx=100). 2
c:100:50 1
bx=1 2
coalescing, 4
arbitrarily, 1
commonly 13
c4, 1
cache) 1
chapters 14
byte(s) 1
coarse-grained 2
bytes) 3
commonplace 1
c->value--; 4
communicating 3
bytes 41
charge 7
architecture. 4
code) 3
cache). 1
caches. 1
c5 5
communication 2
c->global 4
caching 9
architectures; 2
cache, 11
cache? 2
company). 1
child. 2
call) 1
c4 6
are! 3
cached 3
code/stack/heap? 1
caches, 5
compare? 1
children! 1
call1 1
cache; 2
area 5
caches) 1
codes. 2
caching. 1
competing 6
chip’s 1
caches 16
call); 1
coherence 3
calculation, 1
colleagues 3
argc, 23
chocolate 2
calculation 1
compiler; 2
call). 5
collection 3
argument. 2
chooses. 2
call-ing 1
compilers 1
call, 19
call? 4
com- 1
arguments; 1
choosing 2
called 111
completely 6
campaign 1
called. 4
come 9
arises: 1
call3 1
chop 5
completion); 1
calls. 5
can. 3
come–great 1
call; 2
chose 1
caller 14
completion, 2
camp, 1
canonical 3
command-line 2
caller, 4
chunks. 3
around 42
calls, 3
complex. 2
candidate 3
capability. 1
commands: 1
calloc() 1
class, 3
array.c) 1
can) 1
carts 1
careful. 1
carved 1
commercial 3
array: 1
canceled, 1
arrival 1
carefully! 2
classic 26
case) 1
commonalities 1
complexity 10
candidates; 1
case); 2
clean). 1
cases. 3
cannot 21
care 10
arrive 21
clear; 1
caused 2
clears 5
components 1
calls 88
carefully, 6
asides 1
commonly-used 2
centralized 1
close, 1
comprised 3
care, 2
case? 5
ask: 2
complete; 5
cluster 2
challenge: 9
computation; 2
careful), 1
associative. 1
cases, 27
completes 6
co-advisors 1
chances 4
computations 1
case, 105
assumes 14
cast 4
complex, 4
carefully 17
complexity. 2
changes, 1
computers, 1
cat 3
assumption. 2
catches 1
coalesces 2
case; 3
components. 1
code? 9
atomic_increment 2
caused. 1
chapter. 25
computing 16
categories: 1
computing. 1
codes, 2
atomically: 2
caution 1
characterize 1
concatenating 1
cell 1
cases 29
concept 9
coined 2
attachment 1
cheat 2
concept: 2
centers, 1
cause. 1
certainly 32
concern, 3
cold 3
attacks. 3
child/parent 1
comfortably 3
children, 3
certainly, 1
chain 2
attain 3
concise 7
conceptual 4
century. 1
commands 2
choice: 1
challenge, 1
attainable, 1
challenge 5
concurrent) 2
concert 2
challenging, 1
common) 1
chops 1
commonplace, 3
chunk, 3
concurrently, 1
concluding 1
chance. 2
concurrency; 2
change! 2
author. 1
compares 1
circular 1
chapter, 16
changes? 2
cond 17
concurrently-running 1
changes. 1
authors’ 1
compiling 1
changing 9
chapters) 1
chapter! 1
conditional 1
concurrently. 1
auto-magically 1
cite 2
complete) 1
character. 1
confusing 2
condition). 1
chapters. 6
automatically 6
class? 2
completed), 2
chapter 37
cheating 1
consider-ably 1
condition3, 1
characteristics, 1
clean-page 2
cheapskate. 1
completes. 4
child? 2
consisted 1
available 31
condition? 1
checking, 1
clear. 2
chips 3
completing 1
constraints, 1
choice 8
average. 1
conference. 1
avoid. 3
child, 8
choice, 2
constructed. 1
completion 4
avoiding 16
clearing 2
confidence 2
chip, 2
chosen). 1
chopped 5
complexity, 1
awake 1
comprise 3
configured 1
chopping 1
consumer 26
chunk. 4
chunks). 1
clever, 1
awesome 2
compromised 1
confined 1
chosen 5
consumers), 1
chunks; 1
citation 1
client. 1
ax 4
computers 7
clear 12
chunk). 1
client 5
class), 2
client/server 1
ax=0,ax=1 2
confirm 6
ax=1,ax=0 2
contain 6
chunks, 4
clock; 1
classmates; 1
client’s 2
computing, 4
confuses 1
contention; 2
circumvent 1
closing 2
clean 9
closest 1
conception 2
congratulations! 1
contents. 2
clarify. 1
cloud 2
clear, 5
back 65
clues) 1
conceptualized 1
context-switch 4
clean), 1
consists 8
coalesce 2
client, 2
back-and-forth 1
co-authors 5
concerns? 2
context-switches 1
closer 2
constructed 4
code); 2
close(), 1
balances 1
coarse 1
concurrency). 1
contexts, 1
clustering 3
consumed 2
closing, 2
barest 1
cocoon, 1
concurrency? 1
continuing. 2
condition3 1
controls 5
base. 1
cmp 1
conditions 9
cloud-based 1
convenience). 1
contents 28
basi-cally 1
code: 7
coalescing 6
configure 5
clustered 1
converts 2
code, 73
copy! 1
continues. 6
cold-start 2
coarse-grained, 1
conflict 2
be: 2
cofounded 1
cores 1
continuing 4
correct: 1
confusion. 1
code), 4
consideration 2
beautiful 9
combine 7
contrast 7
cost; 4
coming 7
code.” 2
consistency 3
bed. 2
cold- 1
controlled 8
command. 2
costly. 3
coherence, 2
constant 1
before. 7
colleagues’ 1
controversy 1
beginning 15
combina-tion 1
constructed, 1
costs 8
collected 1
commands; 1
convention; 1
begins! 2
combines 1
consume 5
collectively 2
couldn’t 2
common, 1
convoy 2
begs 2
communicates 1
consumer. 2
collector 2
communicate 2
color 1
counter); 6
behave. 2
compacted 1
cooperatively 1
containing 4
community 3
columns. 1
behaviors. 2
copy-onwrite. 1
comparing 5
contents, 1
compact. 1
counter, 15
behind-thescenes 1
correct, 2
comes 14
correctly? 3
context-switching 2
compaction 3
counts 4
complementary 1
below 11
corruptions. 1
best; 1
company’s 1
contrast, 10
coverage 2
complete). 1
command 12
complete? 3
comparison: 1
costly 7
control-c) 1
commandline 1
bet. 2
completed; 1
completely: 1
beyond 20
code 391
count--; 1
conventions, 1
commentary 1
big? 1
completes, 9
columns: 2
converted 1
create 49
compete 1
commonlyused 1
compile-time 1
big” 1
created, 14
cooking 1
creativity 1
counter. 12
crime, 1
binaries, 1
completion. 2
compiled 6
combination 11
cores. 1
compact 3
critically, 1
counter_t; 6
binary, 1
complete, 7
bits). 4
completed 5
crux: 5
companies 6
complex 22
counterbalance 1
command, 4
corn 1
bits? 1
corner-case 4
curr 6
company 1
components: 3
counter’s 2
community. 1
completes1 1
blame 3
corre-sponding 1
currency) 6
comprehensive 2
compare 6
created. 3
companies, 1
completion; 5
block. 3
cycles) 1
compromised. 1
compare-and-exchange 2
critical; 2
company, 2
blocking 2
complicated 13
computers. 1
daemon 8
critique 2
book. 23
compare-and-swap, 2
complications 1
correct 42
computing2 1
dangling 1
compare-and-swap 10
curious, 1
boring 1
compared 7
comprises 1
correctly; 1
concern 5
compulsory 5
comparison, 3
curr->pass 1
born 4
comparison 7
datacenters. 2
concludes 1
costly, 6
competitive. 1
compute 12
currency; 1
both, 1
date. 1
conclusions 1
dealing 2
compiled(!) 1
computer. 1
compiler, 2
con- 1
currently-running 9
concatenate 2
concurrency), 1
debugging 1
compiler 26
bottleneck. 2
complete. 6
cycle. 1
costs. 1
concerned, 2
concurrently 9
conclude 2
complain 2
bottom, 2
complete: 1
dandy. 1
couldn’t. 2
decade. 2
condition) 1
concurrency: 2
completion), 1
bounded 8
completes? 1
darned 1
count) 3
decimal), 1
conditions. 5
concurrently), 2
complex-instruction 1
bounds. 5
data, 18
count++; 1
decision. 2
configuration 2
complicated: 2
condition. 8
complicated. 4
boxes 2
date 2
counter: 1
declared 1
confusing, 2
computation, 2
conditionals. 2
bragging 2
component 5
counting; 2
day 5
decrease 2
connection 1
conditions; 2
break, 1
computation 2
coupling) 2
deadlock). 2
decreased, 1
configure; 1
default? 1
brilliant!” 1
computational-overhead 1
course) 1
considered 10
confines 1
computer 59
defaults, 2
deal 16
broken 1
computer, 3
covers 4
computers) 2
connects 2
computers), 2
defeats 1
deallocate 1
bug; 2
constant. 1
crazy! 1
concepts, 1
bugs 6
degenerate 1
concepts 7
degree 3
crazy) 1
consider. 2
credentials, 1
decide 23
busy. 1
constituent 1
concrete, 1
constraints 2
conceptually 2
cross 1
considering 6
c->local[cpu] 4
delivered 2
decision 15
consult 2
concern; 1
crux 3
concurrency, 10
constants 2
c2, 1
demands 2
declaration 5
consumer, 6
concerns 3
curious 3
concurrent, 2
constitutes 1
depicts 1
c6 6
decreases? 1
context; 1
concrete 1
deep 7
defaults. 2
concurrency 36
curse 3
deployed. 1
customer 2
depressing 1
contexts 2
defend 2
concurrently? 2
construct 5
contiguous 13
consulted, 1
depths, 1
defense, 1
cond; 2
cabinets 1
cycles). 2
calculates 1
consumers. 1
defer 2
describes 6
cond_t 5
continue; 2
dark 3
calculation: 1
concurrent 80
consumes 2
deletes 1
description 9
continues 7
design: 1
concurrently; 1
contention, 2
demand-zero 1
calculations? 2
designate 1
designers 9
condition); 1
call), 1
demonstrate 5
desire 7
condition, 7
continuously, 1
condition 81
depending 12
called, 10
desired, 1
confections 1
control-z 1
configurations, 1
dequeue 5
control? 3
context 70
destination: 1
confining 1
confused 1
caller. 2
dereference. 2
control” 2
contiguously 2
destroy()) 2
confuse 1
confusing; 1
caller’s 1
derivatives 1
cooperative? 1
destruction 2
continue 10
connected 4
calls: 3
descheduled, 1
copyon-write 1
detail10 1
consider 26
connections 1
control, 4
data 252
descriptor). 1
correct. 2
considerably 1
detailed 8
consist 2
can’t 30
convenience 2
datacenters, 1
descriptor? 1
correcting 1
conspired 1
constructing 3
casting 1
converse 2
date, 2
descriptors, 2
correctly! 2
const 3
catastrophic, 1
constantly 3
convince 1
daunting 1
design, 1
details. 34
costs, 1
construction 7
consumer; 1
convoys, 1
day, 2
cause 24
detects 1
deallocated 4
desired. 9
cooked 1
caused, 1
consults 1
consumers 9
deallocations 2
desk? 2
deterministic 8
decided 6
deterministically. 1
decision, 4
cool 17
despairing 1
center 2
consume! 1
developer. 2
consumers, 2
developments. 1
consuming 3
counter 116
despite 6
decrement(counter_t 4
central 7
copy-on-write 5
device, 1
consumption 1
context. 2
detail; 1
dedication. 1
couple 10
course). 1
coverage, 2
covered 2
cpu 4
craft 2
deviously 1
contiguous; 1
diagram). 1
challenge. 4
contains 32
crazier 1
deep, 1
create(); 1
core, 5
differ, 2
continue. 7
differences. 2
contributed 1
changes 20
defense 3
create, 2
correct; 1
contention. 2
details 46
differently 1
contributions 1
channel 1
demanded 2
correctly-working 1
continuous 1
determining 4
digested; 1
created 22
control: 1
chapters). 2
demands. 1
control. 1
correctly. 8
developed. 1
direction; 1
creation; 1
conundrum 1
check; 1
demonstrated 2
cope 1
correctness: 2
developer 2
directly, 5
creator 1
convention 2
checkbook 1
demoted 1
copy, 1
developments 1
corresponding 10
curious. 1
dirty 11
copies 12
depicted 2
copying. 1
core. 2
checks 25
curr); 1
cost, 5
current->next; 1
counter1, 1
device. 1
corollary 2
copy 18
children 1
disable 3
depressing. 1
current->tickets; 1
countermeasures 1
did), 2
correct) 1
choice. 1
disappears 2
correctly 19
describing 4
correctness, 4
didn’t 11
disassemble 2
die, 1
correct-ness; 1
died 1
cost. 1
differences 2
choose 5
disassembler. 2
descriptors 5
correctly, 3
currently 27
costing 1
digest. 1
chores.” 1
directly. 3
course, 73
currently-pointed 1
design 22
correctness 9
discipline 1
cycle 4
chunk 44
citation. 2
cited 2
cost: 4
dirty-page 2
discredited 1
dangerous 5
covering 7
designers. 2
claims 2
costs? 1
disassembler 2
discretion 1
crash, 1
desire. 1
crashes, 3
cleaning 1
could, 1
discussing 4
data. 9
desktop 4
cream.” 1
destination 2
discussion 17
could 137
discuss 53
clear: 6
counter; 2
create() 11
destroy 1
disk) 3
destructive 1
count. 2
discusses 1
clever 5
creating 9
databases 5
counters 14
disposal.” 1
details); 2
counterpart 1
details, 4
close(STDOUT_FILENO); 1
counting, 2
closes 3
do) 1
discussion: 1
creation 20
counters, 6
detector 1
deadlock) 2
counting-based 1
coalescing) 1
doesn’t, 3
disk; 4
cruces 1
deterministic. 2
counting 7
debugging, 1
cover, 2
doing; 1
disks 4
curr->stride; 1
developer, 1
course. 4
decay-usage 2
code. 44
create()6 1
current: 1
display 2
devices). 1
done. 10
decide: 1
cover 11
collaboration 1
creators 1
daemon1 1
devices? 1
dividing 6
don’t, 2
decides). 1
crash. 1
columns 1
creature 1
darn 1
diagnose 1
do; 2
double) 1
decisions? 1
crazy. 2
declare 4
credit 3
data; 1
die 1
documents, 1
differentiate 2
combined 1
deep... 1
database 13
double-precision 1
doing.” 1
differently. 3
creates 34
defaults 3
creation: 1
days, 6
doubt. 1
deal? 2
difficult 10
debate 2
directed. 1
definite 1
common 61
criterion 2
down, 1
debug. 1
directions. 3
deletion, 1
directives 1
critical, 2
delve 5
debugger 6
community, 1
discuss, 1
downsides, 1
discussion. 1
demand? 1
disk). 3
compete, 1
disk-access 1
downward. 3
disk-drive 1
draw. 1
customized 1
competitive 1
demand” 1
decimal. 1
depend 3
drawn 1
critical 140
dreams 1
cycles, 3
disk? 2
decisions, 2
disks, 1
compile 11
done 72
crucial 2
driver 1
cyclic 2
depends.” 1
decreasing 1
dismantling 1
compiled, 1
done\n", 2
crude 2
driver8 1
cyclic-sequential 1
dereference 1
distinct 2
descheduled. 1
don’t. 1
ctxt 1
dummy 4
data), 1
deeper 5
diverse 1
complete 23
description, 1
double-check 1
culprit 1
duty. 1
datacenter, 1
default 7
complete?) 2
do? 9
descriptors. 1
documentation 3
currency 4
design. 2
day! 1
defense; 1
completed, 2
double-click 1
does). 1
dx 2
designated 2
days. 1
defined. 1
complicate 1
doubt 2
current 37
dominant 4
dx=3,dx=3 4
designers, 1
deadlock 5
definitely 4
complicated, 1
down-wards 1
customer! 1
downsides. 1
e.g., 8
debug 1
designing 3
delaying 2
compulsory, 1
done, 6
downward 1
decayed 1
cycles 11
desire, 1
deletion) 1
earlier 18
computation. 2
downward, 1
draw 2
deciding 5
data) 2
deploy 1
ease. 1
computed 1
dread: 1
drive, 2
decimal 2
data[100] 1
deployment, 1
easy-to-use 2
concerned 5
decisions. 2
drive 5
datacenter 1
depth 2
easy: 2
concurrency. 7
due 19
decodes 1
d’un 1
desired 52
days... 1
eaters 2
concurrently) 1
duration 2
decreases 3
earlier. 2
dedicated 2
described 36
days: 2
concurrentlyrunning 1
eax. 5
ease 4
desktop. 1
ease-of-use 1
design-ers, 1
defined 5
de-queue 1
condition: 1
edx; 1
easy, 1
destination. 1
designer, 1
definitive 1
deallocation, 1
configurable 1
effectively. 3
confront 1
designs 1
degenerates 2
debug, 2
easy 50
eax 20
destroying 1
effect” 1
cons. 1
desktops 1
delay 2
declares 2
eax=50. 2
eat 6
destruction, 1
elapsed. 1
constants, 1
dest_buffer[100]; 1
delete, 2
decrees 1
eax=51), 2
eax, 3
elsewhere 3
construction. 1
details). 4
deleted 1
dedicate 1
ecosphere 1
determines 17
ebp; 1
emailing. 1
consulted 1
demand. 1
deeper. 1
demanding 3
edit 2
deterministic, 2
ebx; 1
empty), 1
determine 34
deeply 1
demise 1
contending 14
editor? 1
edition. 1
enacted 1
developing 7
deeply-nested 1
developed 23
contention 4
effective) 2
effectively 5
encountered 1
device), 1
end), 1
context, 2
define 9
effectively, 1
efficient) 1
device 11
dependence, 1
end”. 1
continue, 1
diagram 10
deleted); 1
efficacy 2
efficiently, 1
diagrams 1
dependent 1
energy-efficiency 1
continued 1
did, 1
effort 3
efficiently 10
deliver 8
differ 2
depiction 2
enough. 2
difference: 4
egomaniac. 1
element, 2
dense, 1
differently, 1
deployment. 2
ensued 1
different. 2
element 14
employ 4
elsewhere. 2
derive 1
difficult. 3
entering 9
depends 5
encounters 2
embarrassment. 1
entirely 4
differentiates 1
descriptor, 2
descheduling 2
directly 8
emphasis 1
endless 4
entirety 2
design) 1
control 79
direction, 4
describe. 1
directory; 1
entries: 1
control-c 1
designed 9
descriptor 1
end” 8
dirty, 2
enables 23
envisager 1
directory 18
convenience, 1
designs. 1
desired). 1
engineering; 1
disappear). 1
ends 4
discipline, 1
enforcement, 1
convenient 1
destroy() 2
desires 1
equal, 2
dirty) 2
disciplines) 1
enough, 5
disconnection 1
destroyed 1
desk 1
enough 32
equivalent. 2
detail, 6
converge 1
discovered 4
era, 1
disabling 5
details! 1
cool, 1
discussion, 1
detail 26
ensure 34
errant 3
disaster. 1
details) 1
enter 32
coolest 2
disk), 2
detour 1
enterprising 2
errantly-freed 1
discipline1 1
details1 1
entries); 1
cooperative 5
distribution 1
develop, 2
entirely. 4
errorprone. 1
disciplines. 1
detecting 1
entries, 5
copy-on-write, 1
dive 4
developed; 1
entity), 1
errors? 2
development 13
deterministically) 1
copy. 1
entries 22
copying 4
discrepancy 1
esi; 1
device; 1
entry, 8
divides 6
develop 12
do), 1
discussed. 1
documented 1
equation 1
does), 1
core 8
developers. 2
est 1
disk-like 1
devices 15
era. 1
correct? 3
devices, 2
estimate 2
divide 6
entry 55
evicted 3
did. 2
correctness. 3
difference 18
error, 3
do: 2
differ? 1
error 17
different-sized 1
etc.); 1
does: 2
difference, 4
etc. 5
doesn’t 51
differentiation 1
etc., 1
cost 49
doing, 3
etc.)? 1
doing? 2
differs 1
costly; 2
done? 1
event 3
downfall. 2
count 25
ever 19
everywhere, 1
downward). 1
evicted. 2
example 131
exceeding 1
don’t 81
exactly 39
counter) 1
dramatic 2
difficulties 2
exam? 1
counter++; 1
drives 2
difficulty 4
drop 4
examines 3
counter1 1
down 25
even 148
digest; 1
excellent 42
dx) 4
course 20
ever, 1
download 2
different 196
court, 1
exceptional 5
direct 14
evicts 3
example. 31
example... 1
different-size 1
cpu.c 2
dynamic 20
excessively 1
drink 2
exchange1 1
examples; 2
differently; 1
crash 2
example: 8
dynamically-allocated 1
directory. 6
drive. 2
exciting! 1
exception; 2
direction. 3
crashes 2
excited 2
e 1
disabled; 3
driven 1
exec(). 2
directory: 1
exceptions 3
crazy 3
each, 1
discussed, 1
dynamics 1
exec() 13
executed), 2
disciplines 2
create()); 2
eagerly, 1
discussion). 1
earlier, 3
easy. 3
discussed 24
create(), 2
disk); 1
executing 26
exclusion 21
eating 1
earlier) 1
creation, 6
exec(), 6
eax=50 2
criteria. 2
disk, 14
effects 1
curr->next; 4
efficiency; 1
executable 13
disk 54
execl(), 1
currency. 2
do, 11
efficiently. 1
executes, 3
disrupt 1
execlp(), 2
distinguish 2
execution 48
document 1
electrical 1
executing. 1
early 68
executable, 3
currently-executing 2
distributed 7
execvp() 1
element. 1
does, 6
easier, 1
execution. 17
cycles. 4
execvp(). 1
exist). 1
elements; 1
doesn’t). 2
else? 2
executes 23
dives 1
dairy 1
execvp(myargs[0], 2
existed. 2
easily. 3
doesn’t? 1
elsewhere, 1
execution: 1
email 2
embracing 1
easy; 1
doing. 3
exit 13
danger 2
exists, 3
exhaustive 3
emptied 1
edi; 1
domains, 1
darker 1
exit()) 1
existed 1
enabling 15
done! 3
effect 4
data). 1
expected 7
exits? 2
exists. 4
enacted, 1
done) 1
effective, 2
data? 1
experimentation. 1
expect; 1
exiting. 1
engineers 2
double-ing! 1
efficiencies 1
datacenter. 1
explained 2
expected: 2
expectations? 2
enjoys 1
expects 3
expected, 4
days 4
experiments 3
enlisted 1
efficiency 8
expires. 1
doubt! 1
exploited 2
expert, 1
enqueue 4
de 1
draconian 1
efficient 19
exploits. 1
explains 2
entity; 1
deallocates 1
explicit 22
dramatically 2
efficiently; 1
dream. 1
extracts 3
entries. 3
express 1
decides 11
expose 1
drivers 1
elements 8
eyes 2
extreme 4
entry. 10
decisions 7
drops? 1
facets 2
else, 7
extra 18
else-where, 1
dynamically 1
declaring 1
fact, 28
equal 19
fact 20
each. 4
deeply. 2
fact. 2
do 328
empty. 1
fail. 2
era 7
failure. 1
earlier; 2
default, 2
documents/R4400 1
emptying 1
failing 3
essential 3
faint 1
fail 13
easier. 1
defeat 1
emulate 2
fair, 1
evicted, 1
far; 1
defensive 1
fair 19
enable. 2
easily 17
definition 6
evil 1
delight 1
fair-share 7
encouraged 1
fashion. 3
eaters; 1
fashion, 1
exam- 1
delving 1
families 1
end-of-string 1
eax=51. 4
fast 19
fast. 5
examining 4
family 5
end. 1
demand 11
economist. 1
fetch, 2
fastpath) 2
far) 2
ending 1
fast, 6
editor 2
fetches, 2
enemy? 2
demonstrates 3
fault 12
fault. 7
effective. 3
few, 2
enjoy 3
deployable 1
feature 5
deschedules 3
either. 1
fewer), 1
enormously 1
fewest 2
feel 8
fewest-possible 1
ensures 14
describe 14
faulting 2
field: 1
ele-ment 1
descrip-tion 1
entities 5
employed 4
entries; 2
employs. 1
favor, 1
field 15
designs, 1
entry; 2
figure, 15
fd 1
does 256
empty 14
design” 1
file, 9
enum 2
figured 2
doing: 1
en-us/um/people/mbj/Mars 2
desirable. 1
file.txt|wc 1
environment 4
fetch 29
file. 2
detail. 12
files) 1
equally 1
domains 1
fetches 10
details; 3
fill_ptr 2
error; 1
file.txt 2
enable 24
double 3
finally), 1
detect 5
file’s 2
driving 1
errors 9
finds 10
essay 1
finegrained 1
enabled, 4
filled. 1
deter- 1
earlier). 1
fine, 1
determined 9
essentially 11
easy-to-read 1
finish), 1
first, 20
developer; 2
events 5
ebx, 1
example, 262
first-fit, 1
finished, 10
eventually, 1
few 102
ecx; 1
developers 12
end 46
excellent, 4
first-in 2
end\n"); 5
exclusion. 6
field. 1
editor, 1
devices. 4
effect. 1
endeavors 1
evermore 1
exec(): 1
first-out) 1
fixed-sized 11
diagram); 1
efficiency. 3
endlessly, 2
everyone 1
executing, 2
first. 10
flag[self] 4
eight-page 1
diagram, 6
figure 35
enough! 1
execution, 8
fit; 1
execv(), 2
floating 1
emails 1
dictates 1
empty, 3
followed 5
execvp(), 2
fits 9
follows. 4
everything 12
enabled 4
foo 4
exercise 4
flag, 14
evil.” 2
enact 1
forays 1
file-system 1
foreground) 1
focus. 1
did 22
entire 46
evolution 3
ence 1
exert 2
file: 1
forever; 2
focusing 2
die). 1
entirely; 2
evolved 1
entry), 1
encounter 7
files” 1
follows 6
end, 5
exhibits 2
establish 3
dies, 2
estimator? 1
for? 2
endlessly 2
exist; 2
exact 26
fill; 2
different: 2
forget-ting 1
engineering 2
form 46
existence 3
difficulties. 1
fills 3
evaluate 6
example) 10
eviction. 1
enough), 2
ensuring 14
entered, 2
entirety? 1
exists 3
digging 1
fork(); 4
exit. 5
examine 36
entry) 1
final 51
examples. 3
formula 2
exiting 2
digit 1
format; 2
environment. 4
findings 2
exception. 1
forth; 1
examples 21
exits; 2
excellent; 2
fortuitous 1
equals 3
exchange1) 1
forward! 1
excludes 2
directing 1
expand 1
errors. 1
exception 15
fine 7
forwarded 1
excuse 1
direction 1
expected. 4
escalation 1
excessive 3
fourteen. 1
exec 2
finished 14
directory, 8
esp; 1
experience 9
execute, 2
execl, 1
fraction 5
fit? 1
disappear 1
expert 3
executed. 1
exploring 2
fragmentation? 1
executed 17
executing) 1
especially 13
disk. 14
exporting 1
fits, 1
fragmented) 1
found 84
execvpe(). 2
exhibit 3
establishment 1
displays 1
exist 11
five 8
dissertation 6
foundational 2
exist: 1
etc.) 11
exit; 1
exposed 1
frames 5
extend 2
evenly 3
exit(1); 6
exited2 1
divided 8
extent 1
diving 1
fact: 3
exits 3
framework 3
exit), 1
failed; 2
expect, 2
flag 73
exiting? 1
expected; 3
four 52
do. 18
flag)? 1
every 52
expect. 2
expensive. 2
failure 21
experiment, 1
free()) 1
does. 1
flag[0] 2
expectations 1
evict 9
free(50). 1
evidence 1
explicitly. 2
free(void 4
flash-based 2
expensive 3
fair. 1
free(rvals); 2
exploit 1
example). 3
free-page 1
flavor 2
expensive!). 1
familiar; 1
free(x); 1
family. 1
exploration 1
explicitly 12
freed. 3
flight, 1
doing 76
free, 5
example? 2
famously 3
exports 1
explore 5
friend, 2
floor 1
doivent 1
freed 3
examples, 3
fancy? 1
extension 1
exploring? 1
dollars 2
full; 2
flush 5
exception, 3
fashion 4
extremely 3
facility 3
dominate 3
excess 1
foil 2
faster; 1
fact). 1
face 4
done; 1
exchange 2
forces 2
fail! 2
fault, 7
double. 1
function 41
doubts 1
factor 8
forever! 2
faulting. 1
failed 8
excluding 1
execle(), 2
downside, 1
fails 5
downwards 1
favorite 8
dream 1
future; 1
drives, 1
failed\n"); 4
fairly 9
forgets 1
game, 1
dump”, 2
execute 29
failure), 1
fetch-and-add 8
fairness, 2
gcc) 1
fork 7
executed, 5
form. 2
fetch. 2
gdb) 1
fall 5
fairshare 1
execution” 1
formally, 1
fetching 4
far-reaching 1
falling 1
during 29
exercises 4
general 41
few. 1
far. 1
familiar 2
forms; 1
dustbin 2
exhibit. 1
dynamically-allocated, 1
exist. 5
formula, 1
fanatics, 2
fascinating 9
existing 14
field, 2
forth). 1
fancifully 1
generalize 1
fashion). 1
exit() 6
fight. 1
found. 2
fantastic 1
generalized, 1
fault3 1
exited 1
fault; 2
exits. 4
fragmentation; 1
faults 3
generates 10
getpid() 1
expect: 4
far, 13
features 17
expected) 4
farmer 1
expensive, 6
fellow. 1
file 95
faster 16
filled 6
fast” 1
experts 1
fault) 1
explanation 1
fine. 2
fetch), 2
gettid()); 4
faulting”, 1
explored 2
faulty 1
expressed 2
few), 2
gettimeofday(); 1
finished. 2
features. 2
gives 15
fewer. 1
feedback 5
extents 2
globally 4
fields 2
figure), 1
external 10
files, 3
free 187
fill 11
go 37
extract 7
fetch-ing 1
free()? 1
from 443
fail? 1
fg 1
freedom 1
goals 15
fullness 1
finally 27
fails, 3
figures 4
frequency 5
find. 1
failure; 2
fully 8
file), 1
fully-associative 1
goes 27
failures 1
frequent 4
fill. 1
fairness 7
function. 2
goodness); 1
frequently; 1
finding 15
filling 1
familiarity 2
functions; 1
good”. 1
friend: 1
fine-tuned 1
fine; 2
from. 5
fundamentally 3
finish. 2
further, 2
finish, 2
each 340
full). 2
famous 21
goofs 1
finishes. 1
finishes, 1
function, 3
far: 2
granularity, 2
first” 1
futex 16
fire). 1
earliest 13
fashion; 1
game 4
graph, 6
fit, 2
gates 1
first-level 2
general. 1
faster. 6
grep 7
five-level 1
eases 1
fix 3
fitting 3
flag), 2
generalization 5
groups. 2
general, 18
fault? 1
fix. 1
flag=0 2
easier 19
generalpurpose 2
generalized 1
grows, 4
faults, 2
guard; 2
flag[2]; 2
eater 2
generating 2
get: 4
flag; 6
effective 12
guide 1
generation 1
flags: 9
first 278
feasible 1
getpid()); 9
features, 2
efficiency, 3
habits; 1
get(); 5
efficient, 5
flags 10
first-fit 3
getpid(), 2
feeble 2
flexibility: 2
hacker 2
ghastly 1
efficiently? 5
github.com/remzi-arpacidusseau/ostep-code/tree/master/threads-locks 1
gettid() 2
fell 2
flexible, 1
halted, 1
flaws 1
efforts 2
flexibility 2
eight 1
focused, 1
flexibly 1
giving 15
hand-controlled 1
fixed 13
gettimeofday()). 1
felt 3
eip; 1
for. 3
folks 1
global; 2
fetched 5
globally-allocated 2
forefront 2
handler 24
follow, 1
flag. 13
few) 1
goals. 2
getting 33
hands 4
glance 1
hang 1
flag’s 2
happen: 1
forever, 6
happens? 2
globally-shared 1
gnu 2
flavor. 1
either 49
fork.py, 1
going 29
harder 4
fields, 1
go, 2
flexibility; 1
fork; 1
formal, 1
grab 11
goals, 1
formed 3
flow 14
grabbing 2
field” 1
going. 1
flushing 1
good! 2
forward 4
else 45
fought 1
employs 3
emulator 1
fragmentation. 6
figuring 1
got 16
file; 1
files 10
fragmented 3
grand 1
en.wikipedia.org/wiki/LoadLink/Store-Conditional. 2
gracefully, 1
focus 21
free(): 1
free(ptr), 1
gray) 3
enabled. 1
granting 1
enacting 1
finally, 8
grows: 1
free; 5
graph 11
frees 6
frequencies; 2
frequency; 1
frequently-used 1
frequently. 1
find!) 1
focuses 3
fine! 1
guarantee 21
first; 6
friendly 5
grasshopper, 1
frightening 1
follows: 21
encapsulated 2
greater 4
hardware 263
guessed, 5
from) 2
footnote: 1
func() 4
encounter. 1
greater-than 1
harming 2
guide. 1
fit 27
for) 1
functionality, 2
forcing 1
grow; 1
foreman 1
hair 4
hallmark 1
encountering 1
functions, 1
haul, 1
fork()/exec() 1
have: 2
grows 16
encourage 3
funky 1
hand-over-hand 8
flag) 5
handed 4
form, 6
guarantee. 1
engineering. 1
furthest 5
head, 1
handle 17
formally: 1
handle. 1
enough; 1
gaining 5
head_lock, 2
flag.s 2
handled, 1
forth), 1
handler. 2
garbage-collected 2
flag[1] 2
enters 21
gcc 10
forthcoming 3
flags. 2
entitled 2
handlers; 1
entity, 3
found, 2
entries). 2
gdb 5
flaws. 3
entry). 1
happen 15
fourth 4
general? 1
fragmented; 1
handler, 3
entry? 1
happen. 2
harder. 1
heap 76
generated. 1
free(10), 1
flexible 9
environment, 2
happening 1
hardly 3
hearing 3
flushed 1
generic 4
epic 1
happens; 2
held) 1
fly 1
free. 13
getrandom(0, 1
hardware. 10
equation; 1
happy 5
follow 2
here: 10
globallyshared 1
high. 3
equivalent; 1
hard-and-fast 1
freeing 6
following: 8
hardware’s 1
for, 2
higher-priority 2
him 1
harddisk 1
goal: 1
friend 3
forced 2
for 1176
hardware, 15
goals? 2
from, 3
forcefully 2
error-prone. 1
force 2
hints 4
good, 2
fully-associative, 1
hardware-based 5
forget, 1
error? 2
forest, 1
government 3
history, 3
funny 1
harsh, 2
forever. 1
et 7
hit! 1
graduate 9
has. 1
forewarned: 1
etc.). 1
hits. 1
graphs 1
hogging; 1
fork() 25
etc.? 2
forget 8
hash_t; 2
hold? 2
further 31
form). 1
group 12
hate 1
holder 2
have. 3
formed. 1
eventually 15
fork(), 9
grow. 1
fusion, 1
holds, 2
evict. 3
honor 1
forms 3
growing 5
futex_wait 2
former 5
evicting 1
host 2
eviction 3
growth: 1
head 39
gained 1
forth, 4
forth 3
hour 1
exactly? 2
gruesome. 1
heap); 1
gains. 1
gates, 1
generality, 1
heap, 22
found? 1
heart. 1
example), 10
heavily 2
heavy-handed, 1
forward-growing 1
fragmentation, 6
exceeds 8
held), 7
except 6
guarantees. 2
fragmentation 13
guy 3
exceptionally 2
help) 1
exclusion? 2
frankly 3
hack. 1
has 348
hacking 1
frame 40
exec(); 1
free(), 2
helped 2
free(16500) 1
free() 8
free(tmp); 3
free) 5
free), 2
free-list 1
here. 11
get 126
hash 17
execution), 3
freed) 1
here’s 1
free-space 4
good? 1
exist, 1
hexadecimal), 1
freely 2
freely, 1
graph. 1
existed; 2
greater. 1
frees. 1
hey, 1
hide 1
exit). 2
frequently 7
frequently, 3
greatly 4
had 57
hierarchy; 1
handler). 1
exit? 1
friends 3
greedy 3
high: 1
friends, 2
exits, 2
handlers, 3
fringe 1
highlyfragmented 1
groups 3
grows. 1
from). 2
expect 15
guaranteed 1
handling 14
guessed 1
expected? 2
historical 14
happened 5
guest 1
experiment 5
history 16
friend” 1
full 33
guide: 1
happens. 3
explain 1
hit), 4
from; 1
func(). 1
habit 2
functions: 1
extended 5
hoc 2
hacked 1
full, 6
fully-operational 2
futex_wake 2
eyes...) 1
hand-assembled 1
hard-andfast 1
functional, 1
failed, 1
holds 38
functionality. 3
future 21
handle, 1
hard-to-find 1
how 441
failures. 2
honor, 1
functioned 1
gaming 2
handled 4
hard-working 1
hptr 1
hard. 1
fairness. 6
gather 1
family? 2
honorable 1
http://people.freebsd.org/˜jasone/jemalloc/bsdcan2006/jemalloc.pdf. 1
fundamental 18
hands-on 1
hardware). 3
gave 3
hood 1
fancy 7
hope. 1
fundamentalist 1
how, 1
hardware? 1
http://www-formal.stanford.edu/jmc/ 1
fantastic, 1
happen, 2
future, 5
however: 1
gadgets 1
generally 28
happened; 1
harmful. 1
far 21
fares 1
http://www.sparc.org/standards/SPARCV9.pdf. 2
gain 16
hates 1
https://birrell.org/andrew/papers/035-Threads.pdf 2
fast; 1
happy. 4
faster, 6
hardware-managed 9
gaming, 1
hugely 3
generate 28
feasible. 1
hardware: 3
general) 1
hybrid, 1
generated, 1
feature-filled 1
gently 1
generalizing 1
harm 3
fellow 1
having 29
http://www.unix.org/version3/. 1
have 487
get(counter_t 6
has, 1
generally, 7
few). 1
hundred 7
havoc’ 1
he 20
head->next 1
head->value; 1
i.e., 29
have, 1
generated 12
headaches. 1
fewer 13
hybrid 10
head; 2
i5 2
head->size 1
generations 1
header_t 1
figures, 1
hypervisors, 1
header, 4
i=0 1
header). 1
idea; 1
gets 51
headers 2
files. 1
iMac 4
heap). 1
generator 2
headers, 1
get? 1
heap-allocated 1
gettimeofday() 5
idea? 2
ideal? 1
heap? 3
heap: 2
gigabytes 1
giant 1
ideas, 3
heap. 10
hear 1
goal, 1
heavy 5
identifiers, 1
heavyweight 1
heavily-used 1
good. 6
held; 2
idle, 1
give 30
ideas 36
illegal 11
heard 1
hello, 8
grabs 16
glock; 2
illusions 1
idle 5
heart 2
held 25
held). 2
grade, 1
ignored. 1
here, 22
find 86
helgrind? 2
grammar 1
illegal, 1
goal 19
herein), 1
helgrind 16
fine). 1
great, 1
imagine 41
illegally). 1
google’s 1
heuristic 2
help, 1
hello 5
fine-grained 3
greater), 1
imbalance. 1
illusions, 1
gray 3
here! 1
helpful, 1
fingertips. 1
greatest 1
immediately. 2
imagine, 4
helps 5
immense 1
finish 13
ground 1
high 36
impact, 3
here) 4
implementation, 2
impact 5
finishes 6
highlight 3
implications. 1
hex 4
great 79
implementation 7
grow 18
fires 1
hire 1
hides 1
here 46
grocery 2
importance 8
implementation)” 2
gruesome 1
first) 1
history. 3
hierarchy. 2
heyday 1
grossly 1
important, 7
implements 6
flag). 2
hit; 1
guarantees 6
high-level 6
hidden 4
grouping 4
importance, 1
flag.s. 2
improve 17
highest-order 1
guess 8
grow, 1
high, 4
hits 13
flag? 3
in; 2
growth 1
guesses 3
highly 7
hole 1
guard 14
flags, 1
inadvisable 1
guts, 1
high-end 4
highly-networked 1
guess, 3
homework, 9
focused 3
inc 1
hackers. 1
higher-level 1
important 63
history; 1
guesses, 1
honor: 1
inconclusive 1
hand, 3
improved 6
habits 1
improvement 3
in-between 5
incorporated 4
hand-coded 1
highest 20
hack, 1
himself, 1
in-terface 1
handle; 1
following 55
hit 32
half 8
hopefully 6
hinted 3
increase 20
in/out 1
for: 1
hogs, 1
how: 1
hand 6
increased, 1
handles 14
in? 2
forcefully. 1
however 1
hand-over-hand). 2
forever 6
holding 12
happen?4 1
incl 1
http://en.wikipedia.org/wiki/ 1
incremental 1
handling. 1
forewarned, 2
his 37
homeworks. 1
http://ostep.org/Citations/inside-cfs.pdf. 1
incorporate 7
hoping 6
forget: 1
happen? 8
history... 2
increased 3
incremented, 1
http://www.cs.utexas.edu/users/EWD/ewd01xx/EWD123.PDF. 5
http://en.wikipedia.org/wiki/You 1
forgetting 2
happening! 1
hit). 1
incrementalism; 1
indefinitely. 2
https://en.wikipedia.org/wiki/Buffer_overflow 1
http://stackoverflow.com/questions/2509679/ 1
forgot 2
happens, 4
hits, 2
happens 78
incremented 4
index: 1
https://quoteinvestigator.com/2015/07/23/great-power. 1
http://www-formal.stanford.edu/jmc/history/timesharing/timesharing.html. 1
fork(). 2
hard-hitting 1
homework 9
independent 4
humans, 1
indicating 8
http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF. 1
indivisible 2
hardwaremanaged 1
honor. 1
index. 1
hung. 2
fork()ing 1
humans) 1
industry 2
harmful, 1
indexing 1
hybrid. 1
formal 2
hope 13
humble 2
inefficiencies. 1
hard 51
harmless, 1
hundreds 5
forms: 1
hopefully, 3
inefficient. 4
inexpensive 1
hardware) 3
has). 2
i++) 18
hybrids 1
formulae. 1
illegal. 2
information, 6
hardware/OS 2
inherently 2
infinite 6
house 2
hypervisors). 1
imbalance, 1
icon, 1
forth. 10
has? 2
initial 5
influential; 1
hardwaremanaged, 1
info: 1
immediately, 4
fortunately, 2
have? 2
idea: 1
headed 3
initialize 15
implicitly 2
four-level 1
head), 1
ideas? 1
header: 2
fprintf(stderr, 6
initiates 4
improve. 1
head->next; 1
identical 6
headway 1
however, 49
fragmentation2 1
input: 1
in) 2
header. 1
idioms 1
heap), 1
included 4
heavilyused 1
ins 1
header_t; 1
illusion. 2
http://books.google.com/ngrams). 1
fragmentation: 1
increasingly 6
inseparably 1
information 57
heap) 2
imbalances. 1
http://cag.csail.mit.edu/raw/documents/R4400 2
implement!) 1
held. 16
increment(counter_t 4
installation 1
informs 1
installs 2
fragmented, 2
http://history-computer.com/Library/AltoUsersHandbook.pdf. 1
frames; 1
helgrind. 2
increments 7
held: 2
infrequently 1
implementations, 1
http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD329.PDF 1
help: 1
free(). 6
indefinitely, 1
help. 1
inherits 1
helping 2
http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1303.PDF. 1
free? 4
important). 1
hence 20
init: 2
http://www.ibm.com/developerworks/linux/library/l-solar/. 2
hence, 3
http://www.intel.com/products/processor/manuals. 3
important? 1
here? 3
index 20
initialization. 3
freed; 1
http://www.multicians.org/history.html. 1
here; 4
impressive. 1
herein 3
indexes 1
https://github.com/mit-pdos/xv6-public. 1
initialized 8
herein, 1
improves 4
heuristics 1
in-kernel 5
indicative 1
hundreds). 1
injected 2
hierarchies 2
front 10
hierarchies, 1
in-memory 2
instruction 130
indirection 3
innocent 1
hierarchy 2
innovations. 1
hierarchy, 1
i; 16
instructions), 1
idea! 1
in. 11
ideally 1
high-performance 1
inodes, 1
hint 4
insert(queue, 1
historically, 1
frustrating 1
inability 1
idiom: 1
high-priority 2
inefficient, 2
integer, 4
inserted 2
historically-based 1
frustration 1
inaccessible 2
ignore 5
inflation, 1
intend 2
informed, 1
fully-developed 1
incentive 1
hit. 5
imbalance 3
insight 1
intensively 1
inspired 1
installation, 1
intent 5
inheritance. 2
hold, 1
holes 1
fun 20
instead. 4
init(); 2
immediately 23
homeworks, 3
functionality 2
instruction(s) 2
interact 15
higher 24
init(lock_t 4
implementation. 4
hostility: 1
including 51
functions 7
interactive, 1
historically 2
interesting. 2
hits). 1
fundamen-tally 1
initialization 8
instruction, 19
increases 6
instructions) 2
implemented 10
intergalactic 2
initiating 1
hot 1
future. 9
intact; 1
incredibly 8
interposing 1
important. 5
inkernel 1
however; 2
gadget), 1
hold 27
interrupt), 1
improvement. 1
increment 14
innovations 2
integer 17
http://portal.acm.org/citation.cfm?id=540365. 2
garbage 2
homeworks 5
interrupted, 3
in- 1
incrementally. 1
innovator 1
integers), 1
https://gruss.cc/files/kaiser.pdf 1
gcc, 1
hopes 1
gdb, 2
in-between. 3
inode) 2
huh?? 1
intense 2
indeed, 11
intervals: 4
horrible 1
incarnation. 1
hours. 1
humorously, 1
interactive 20
general-purpose 8
input 20
how-to-generate-a-random-number-from-within-a-range. 1
indefinitely) 2
hurt 3
generalizes 1
interest 3
input/output 3
get() 7
insert; 2
insisting 1
interrupted 14
indeterminate, 2
include 18
inspiration 1
intervals. 1
inclusion 1
indicated 4
installed 1
into, 1
incorrectly. 1
influenced 2
increased. 5
intricacy 1
http://ftp.gnu.org/gnu/glibc. 2
inherent 5
instances 2
given 80
independently! 1
introducing 5
https://lwn.net/Articles/170003. 2
init() 6
humorously 1
glibc 3
hy-brid 1
indicated). 1
idea, 7
indicates 3
ideal 4
introduction, 1
identifier, 2
intuitively 1
inefficiencies 1
idle! 1
idea 92
inventory 1
inefficient 4
invocation, 1
identifier 3
infinite. 1
if, 4
inflation 2
is: 9
illusion, 2
global 56
info 1
initializes 5
isolation, 2
imagining 1
gods, 1
immensely 1
information. 9
it! 14
instead 95
gone 5
inject 2
innovation 2
it) 5
instruction. 22
inputs: 2
instructions; 2
it?!) 1
implement 30
insert 12
informative 3
int), 2
iterations, 1
implemented? 1
inspires 2
good 99
informed 3
interact. 1
iterations/threads: 2
init 4
installing 1
grande 1
implicit 1
graphics 2
itself? 1
initializer 2
instance 3
interacting 1
great. 1
implies 7
jacket, 1
inner 1
interaction 13
greater). 1
imply 2
innovations, 1
instant, 1
interchangeably 1
green 1
importantly 1
input); 1
instead), 1
interest: 2
grew, 1
interested! 1
grows? 2
instruction; 3
input, 1
into 339
inserted. 1
introduces: 1
introduction 17
jobs 102
gum 1
join. 2
intuition? 1
improving 4
inside 30
invention 1
in, 6
instead, 5
inaccessible. 1
instruction: 1
investigating. 2
instructions). 1
interesting, 4
inactive 4
hackers 1
invocation 1
increases. 5
interfaces, 1
halt 5
is. 7
instrumentation 1
interleaving 4
int) 2
instructions 78
isolating 1
increasing 10
interlude, 2
interpretation 1
insufficient. 2
incrementing 12
hand. 3
handed-out 1
isolation 3
integer). 2
interrupt; 1
independently 8
interesting 46
indicated. 1
inefficient? 2
influential 4
inform 4
issuing 6
integers, 2
interfaces 17
interrupts 33
handlers 5
initializing 1
handling, 1
interactivity. 2
interfere 2
interconnected 1
it), 4
initially, 2
happening? 1
intervals 6
interesting) 1
interleaving, 2
it.” 1
initiated 1
interval’ 1
interludes. 1
happens: 5
item; 1
interrupted. 2
innocently 1
interrupts, 4
inopportune 2
if 483
hardware-interpreted 2
intricacies. 2
items 9
internal 12
intriguing 1
inputs 2
illegally 3
insert. 2
intro 3
insertion 2
interposed 1
introduces 6
interpret 1
iterations 4
installations. 1
invent 3
hardware-specific 1
inverse 1
hardware; 2
itself; 3
illusion 20
job). 1
invoked 2
instruction) 9
haven’t 4
involving 1
imag-ine 1
just 304
job? 1
havoc 2
instructions. 5
imbalanced? 1
kernel), 1
jobs); 1
is, 22
immediate 2
header 15
interrupt 77
kind 54
immediately; 7
jobs, 14
it3 1
knows, 1
heap; 2
l/stl 2
interval 8
jumping 2
intervention 1
heavy, 2
intrinsically 1
introduce 12
kernel) 2
late 4
it; 14
held, 6
imperatives. 1
invalid. 2
latency. 1
key) 16
helgrind, 2
impetus 1
invented 5
later. 9
kick 8
layout 2
kill. 1
implement, 1
killing 2
implementations. 4
int 260
help 38
kind, 1
intellectually 1
here), 2
important) 1
inversion 6
intelligence 1
lead 50
herein. 5
knows 18
importantly, 9
invisible 1
intensive. 1
leaked 2
highlighted 1
learn, 1
laid 4
least- 1
landmark 3
interactions 4
impossible 1
language. 3
least-frequentlyused 1
interface: 1
larger), 1
leaving 3
larger-scale 1
interleavings 4
leftmost 1
largest 2
intermediate 1
length, 1
hit, 28
involved. 2
last. 1
interrupt. 4
lesson: 2
hog; 1
level. 7
lations 1
interval. 1
home 3
is! 2
libc, 1
isn’t, 2
intervention. 1
honest 1
ld-2.23.so 1
libraries) 1
leap 3
intricate 3
http://cag.csail.mit.edu/raw/ 1
library) 5
http://linux.die.net/man/3/pthread 1
intuition 3
http://www.ostep.org/Citations/notes-solaris.pdf. 1
https://events.static.linuxfound.org/sites/events/files/slides/elc 1
isolated 2
invalid, 8
life. 2
learn 65
huge 20
investigate 1
invited 1
human 4
lifted. 1
learned? 1
isolation; 3
involved, 6
is? 2
hurting 2
least) 1
its 295
issue, 3
like) 2
least-recently-used 4
limits, 1
itself) 1
it!), 1
it’ll 1
line. 1
left). 2
legends 2
issued 7
jars 1
len:10 6
link 6
len:9 1
list-like 1
list: 3
length 16
lest2 1
libc 2
lie 1
life: 1
it. 68
itself); 1
itself, 8
it’s 33
hurts; 2
i 22
little 103
ice 1
load. 2
likely 73
jobs: 2
limits 6
load/store: 1
line: 2
lingo) 1
join 12
loading 6
locally-allocated 2
location.” 2
lock(&mutex); 2
list. 21
list_t; 2
listens 2
lock(), 8
lock), 2
listing 4
lock->flag 6
judiciousness 1
list’s 1
identical, 1
locks: 3
jumps) 1
literally 1
illusion: 2
logic 7
illustrate 5
located. 2
job 144
long-running 15
k-stack(A) 1
imaginary 1
locations. 1
junctures 1
looked 8
keeps 13
lookup, 2
keeping 14
kernel” 1
impacts 1
kernel-owned 1
kicking 1
kicked 2
loop, 10
implement. 5
killed; 1
killall. 1
lock() 38
lost, 3
implementations 4
kind: 1
killer 1
know! 1
lock) 4
implementing 8
kindly 1
kinds: 1
implication 1
knowledge 14
lottery.py, 1
locked 7
implying 1
know, 5
known; 1
love 2
important; 4
knowing. 1
laborious 1
locks. 6
low, 3
improbable, 2
known. 1
laptop 2
l/stq 2
lowered, 1
in-depth 1
logic, 1
large-file 1
looking? 1
lowest 9
in-use 1
lack 4
large-scale 1
lwarx/stwcx 2
in: 1
languages, 2
last); 1
lookup 12
last, 1
last-in 1
latency 9
large 93
larger. 1
launch 2
loop 41
inaccessible, 3
machine) 2
lost 4
incorporates 2
increase? 2
machinery. 3
launches 2
lots 12
increases, 2
later 36
lazy; 2
incremented; 2
loved 1
latter, 2
leaking 3
lazy 5
incur 1
leaks 1
learned 13
lean 1
low 10
incurring 1
left 21
machines. 6
learning 2
lower-case 3
left), 1
madvise), 1
length) 1
lowered 1
legal; 1
m->flag 6
indeed 26
lets 10
indeterminate 2
macro 1
main(), 1
magnitude 1
letter 3
indexed 3
main() 11
indicate 15
main-deadlock-global.c. 2
level 23
individual 3
levels), 1
main-race) 2
let’s 73
main-deadlock.c 2
library; 1
main.c 6
inducing 1
maintains. 1
levels 9
make, 2
ineffec1 1
malicious, 1
lie. 1
libcrypt-2.23.so 1
infinitum. 1
managed), 1
influence 1
libraries. 2
informally, 1
managing 9
informing 1
manifests 2
library. 10
manual, 2
infrastructure 1
libtinfo, 1
life; 1
masking 4
lifetime, 1
math 4
like. 6
init(), 2
inputs. 1
mathematical 1
life 22
maximum, 1
light 1
lightweight 1
me 6
like; 2
linear 34
likes 1
limit) 1
inquiry 2
lines 14
measure 21
limited 17
make 214
insparable 1
instant 3
memory! 2
malicious 14
instruction? 3
malloc(sizeof(node_t)); 8
malloc. 1
mandated 1
manifesto 1
instructions, 10
memory) 5
limits. 1
memory-mapping 1
manual 13
instrument 1
mention 1
many! 1
integers 4
mentioning: 1
intelligence. 1
line 14
list). 2
map 7
list? 1
methods. 3
mapping: 1
market... 1
list, 26
metric. 4
lists, 7
microcode), 1
intensive, 1
mid 1
marks 4
live 12
lists[BUCKETS]; 2
interactions. 2
lives), 1
it 1299
marvelous 1
mighty 4
lives 7
interface 16
llock[NUMCPUS]; 2
masses: 1
migrating 2
load 35
matters. 3
it?) 1
mature 1
interleavings. 2
max 1
migration 5
load; 1
item. 1
load-linked, 2
internet 1
milliseconds, 2
iteration. 1
maximum 8
locale 2
maybe 4
minicomputer. 1
locate 3
meaningful 5
loads 19
locations, 1
minimize 11
minimum. 2
meanwhile, 1
interpose 1
itself. 19
in 2103
lock). 10
miss. 9
measured 2
interrupt, 4
jne 3
lock->ticket 2
includes 13
measurement 3
interrupt-based 2
misses. 7
jobs? 3
incorrect. 1
lock-free 3
mem-access 1
interval, 1
join()); 1
incurred; 1
missing 4
lock? 10
intervals) 2
join(), 7
lock_init(lock_t 4
mem? 1
mistakes) 1
intervening 3
independently, 2
joke, 1
local 56
mmap(NULL, 1
init(counter_t 6
jump) 1
locks, 22
locality: 2
introduced 25
memory), 5
jumped 1
initially 3
mocked). 1
logically 6
locates 2
invalidate 1
memoryintensive 1
just-finished 1
memorymanagement 1
mode), 1
invented, 1
locking, 2
initiate 3
logarithmic 3
modification, 2
inversely 1
inode 3
insidious 1
more). 1
logical 15
keep 48
long-term. 1
insights. 2
merely 1
more? 1
inversion, 4
kernel, 7
long; 1
key); 4
messages. 2
long 68
motivating 1
inverted 4
install 1
longer, 1
key, 2
met 1
keyboard, 1
instantaneously. 1
lookaside 4
is), 1
metric: 1
kicks 2
mov 33
instructions: 2
microkernels 3
kidding; 1
looking 13
movement). 1
integer) 2
mild 1
kill() 1
isn’t 26
lookups. 1
integrity 1
looks 39
killed 2
isolate 1
milliseconds 6
moves 15
loop) 2
intelligent 2
lookup. 3
mind. 1
knew 5
multi.py 2
issue 33
loop.s 6
minute?), 1
loop. 8
know. 3
multiplexing 2
multiprocessorbased 1
loops. 1
mirrors 1
looping 1
interactivity 2
knowing 6
interested 11
interesting; 2
looping-race-nolock.s, 2
it, 68
miss-handling 2
iterations? 1
interface. 4
job. 8
multiprocessors, 2
lottery 24
miss: 1
interposition 2
looping-sequential 3
job’s 2
interrupt: 4
interrupted) 1
interruption, 2
loops; 13
lovely 1
mistake 3
lost. 2
must-read 3
known 90
invalid 8
ls, 1
mistakes), 1
lot! 1
join() 9
low-cost 1
la 3
low. 1
mix 1
investigator 1
lying 2
mythread, 14
journaling 3
naming 1
lower-priority 2
mode) 9
k-stack(B) 2
nanoseconds). 1
involved 9
m->guard 10
machine. 9
languages. 2
modes. 2
nary 1
involvement 1
luck! 1
irstrun 1
nearest 1
is; 3
machines; 1
lucky 3
made, 5
isn’t. 3
necessarily 8
m; 1
modification 2
magic: 7
need. 2
machine; 2
iss 6
modified), 1
larger 23
later), 1
needs; 1
isses 1
modifying 2
modularity, 1
issue. 3
negative). 1
latest 8
negatives, 2
machinery 10
module 1
moment. 1
leak 2
mail 1
network 2
it!) 2
monitoring 3
it... 1
malloc.py, 1
network-connected 1
machines 21
learns 1
monolithic 1
it1! 1
most-recently 1
it: 4
least, 7
malloc; 2
mouse), 1
item 9
main(int 23
least-significant 1
management. 3
kernel 123
main-deadlock.c. 2
manager 3
main-two-cvs-if.c. 1
leave 13
manipulates 2
move). 1
itself 32
mainframe 2
manner: 1
malfeasance 1
manually 1
key 28
many. 5
led 8
malloc 8
keyboard 2
malloc(sizeof(double)); 1
mark 6
malloc(sizeof(int)); 2
legal 6
keystroke 1
job, 19
movl 28
match. 1
manipulate 2
legitimate 1
kinds 5
jobs) 1
matching 1
ms. 5
manner? 1
lengths 5
kmalloc. 1
join(). 2
know: 2
judicious 1
manufacturers 1
matter. 2
new 140
multiple-queue 1
newly-freed 1
juggling 1
mapping, 1
measuring 5
knowing, 1
jump; 1
massive 4
multiprocessors 5
mechanisms; 1
let 36
known, 2
multiprogramming 8
master, 1
jumps 7
materials. 1
mutex; 6
meet 5
kernel. 6
levels: 1
next; 4
libcrypt, 1
labeled 3
libraries 3
mutex_t 5
kernel?” 1
math. 1
nicely. 2
matter; 1
memory-intensive 1
measurements? 1
large-memory 1
kernel’s 4
nightmares 1
large. 3
nitty-gritty: 1
memory-like 1
kids, 1
mutex_unlock 2
library 47
node, 1
memory-management 2
kills 2
my 6
larger, 2
lies 4
memory?”, 1
nodes) 2
is 2736
kind) 1
mechanisms 32
mentioned 7
myarg_t; 4
non-ASLR 1
issue; 1
laser-like 1
megabytes). 1
message. 1
non-executable 1
metal 1
nonsolution: 1
mem.c 2
n 4
note, 5
memory). 6
mid-execution 1
latency) 1
noted 3
namely 5
memory-access 1
issues 26
middle, 1
laugh 1
millisecond 1
memory-constrained 1
it). 3
know 71
memory-failing 2
knowledge? 1
laughably 1
known: 1
it? 11
minds 1
lay-out. 1
memory? 9
near 13
lags 2
itself), 3
minimizing 1
it’d 1
lays 1
memoryreference 1
lazily, 1
languages 4
miss). 1
it” 1
nearly-endless 1
memory” 1
nearly-infinite 1
laptops, 1
miss? 1
job) 3
laziness 2
men-tioned 1
large, 7
misses). 1
neat. 1
ldq 2
merest 1
jobs. 7
laughing 2
mjtsai.com/blog/2015/12/16/osspinlock 2
networking. 2
join, 2
merge 2
laws 2
mlfq.py, 1
mesmerizing. 1
new, 1
jokes 1
lawyers 1
leads 13
mocked 1
leak, 1
new->key 4
mode. 4
learned, 1
mess 1
learn? 1
journalism 1
new_head->value; 2
like 215
message; 1
monitors 5
new_head; 2
judiciously 1
limitations 1
left, 6
messages 1
newfile.txt. 1
limiting 1
left-shifted 2
limits; 1
lengths: 1
least 35
meters 1
linker 1
jump 22
node 12
legality. 1
methods, 1
length). 2
nonconcurrent 1
list) 5
metric, 2
kept 12
length? 1
nonetheless. 1
listed 1
microcosm, 1
less 29
kernel; 2
lengths, 1
normally 2
lists. 1
not), 3
lessons 5
key; 6
lively 1
library, 10
letting 6
libtinfo.so.5.9 1
notice 34
ll/sc 2
microprocessor. 1
kill 10
migration. 1
lifesaver 1
loathe 1
noticeably 4
note 27
now-standard 1
notice, 3
lifeless 1
million); 1
like, 3
locality, 8
killed). 1
now. 7
noticeable 2
nuance 1
liked 1
mind 5
kind. 1
miss); 1
lifetime 1
nuclear 1
noticed 5
likely). 1
location, 6
knowledge, 3
nuts 1
like: 3
now: 1
linear. 1
miss, 10
nptl 4
known). 1
number), 1
limit 6
language 8
links 3
objects 5
misses, 8
lines, 1
lock(&m) 1
large) 1
numerous 12
list), 1
observed 1
mobile 1
occasion; 1
larger? 1
obliged 1
literature 1
link) 1
mode; 2
occasions 1
lock(lock_t 14
occur. 3
occurs; 3
lives. 1
modes 2
last 37
modified). 1
ocean, 1
lmbench 4
linked 18
later); 1
modifies 1
later, 5
list; 4
modify 3
latter 5
list_t 2
modulo 1
lock, 61
loaded 17
law 2
lists 13
lock->turn 8
odds 1
local-to-global 2
layout. 1
observe 6
lives, 2
locked; 2
old; 4
local[NUMCPUS]; 2
moment 5
ldl 2
observed, 1
loader 4
locking. 3
olden 1
money 1
ldrex/strex 2
obtained 1
load” 1
locality 18
locks) 3
omitted, 1
logs 1
ocean 1
leading 9
locality. 4
left) 1
len:30 1
longer-running 1
monopolized 1
of) 3
once), 3
location. 3
location 39
lock()), 2
more 470
moreover, 1
lock. 64
lock_t; 8
most 130
moved 6
level, 3
mostly 4
off; 2
much. 6
libc-2.23.so 1
movie 1
locking 34
lock’s 2
much?). 1
library” 1
multilevel 2
moving 13
look 121
lookups 1
multipro-gramming 1
ms 14
older 13
much-improved 1
on! 2
life, 3
loop; 2
longer 17
much; 1
on) 1
lightweight, 1
likes, 1
muck 1
on-chip 4
multiprocessor 19
line, 7
on-going 4
loops 18
munication, 1
multi-CPU 3
linear) 1
linking 3
mutex 17
lot 35
one, 26
multi-level 30
lowest-priority 1
ls. 1
mutex_lock 2
open, 1
multi-processor 4
lock 370
low-level 16
logical. 1
operation), 2
long-list 1
luck. 1
multiply 2
lowering 1
myarg_t 8
list 103
operational 1
long-lived 3
m 1
longrunning 1
lowest-order 1
lookup? 1
lived 1
opposites 1
multiprocessing 1
myargs[0] 2
loop? 1
mutex->flag 6
mythread(), 2
lowly 2
loops, 4
load, 3
optimal 20
naive 3
ls 1
nanoseconds 1
machine 34
optimizations, 3
loss 2
nature, 2
macros 1
luck 5
optional 2
lottery. 1
ordering, 2
mutual 29
near-term 1
made. 2
macOS, 1
load-linked 14
low-priority 1
myarg 2
other, 5
magnificently; 2
machinery? 1
nearly 9
load/store 3
myturn) 2
others) 2
machines). 1
lower 13
lower-half 1
located 13
name). 1
lowlevellock.h 2
nanoseconds), 1
m;) 1
naturally, 1
made 23
one 500
machine, 8
location; 2
magic. 1
necessary. 1
one-third 1
neat 8
main 66
machinery) 1
main-one-cv-while.c. 1
machines) 1
onelevel 1
locations 11
necessary; 1
main-signal-cv.c. 2
necessitates 1
main-signal.c. 2
needed. 11
necessity! 2
main.c). 2
lock; 24
made: 3
main: 12
needless 2
need, 1
maintain, 1
lock_t 2
makes, 2
maintaining 1
needs, 2
makes. 1
negative 14
magic 7
new) 4
next, 1
main(); 1
nice, 3
no?). 2
main); 1
mainstream 1
needed; 1
non-concurrent 1
malloc()); 1
locks 79
maintain 4
non-practical 1
none-too-subtle 1
not: 3
notes: 2
malloc(), 3
malloc(strlen(src)); 1
managed 6
only 202
noticing 1
our 230
making 63
logically-different 1
now? 7
oops! 1
out"); 1
needlessly 3
malloc(). 4
major 28
null 2
open 7
network. 2
management 29
long, 5
malloc’d 3
numbers). 1
out. 11
open("./p4.output", 1
networking 3
longlived 1
malloc” 1
numer-ous 1
outcomes? 4
obscure 1
manner, 11
looping-race-nolock.s 8
open()? 1
loops? 1
operations. 8
obtaining 4
over-written 1
lowers 1
manager, 3
overcome. 2
manages; 1
operator. 3
makes 57
obvious, 2
lowest. 4
never 38
opinions; 1
manner. 7
occur? 2
lucky, 2
new. 3
overhead 12
opposed 3
machine? 2
occurred, 4
machinery, 1
overheads), 1
mapped 14
optimal, 5
malloc() 32
mappings 8
overseas. 1
optimizations 1
occurs, 14
optimizing 2
marvel 1
malloc(10 2
machines, 5
options. 3
newfile.txt 2
odd, 1
newlyrunning 1
masks 2
malloc(100e6)); 1
magic; 1
ordering 9
oversubscribed, 1
material 8
next-to-last 1
malloc(strlen(src) 1
main(). 1
odd-sized 1
main-race.c. 2
p. 1
main-signal-cv. 2
main-two-cvs-while-extra-unlock.c. 1
of. 1
noble 1
p6 5
non-contiguous 2
manage 19
main-two-cvs-while.c 1
page) 4
originally 2
non-synchronized 2
managed, 2
non-zero 3
nondeterminism, 1
page-fault 3
management, 1
off 30
none 3
pages. 28
offered 1
manager. 4
norm, 2
many 252
paging 28
offerings 2
not? 2
manner 7
paging-policy.py, 1
mappings. 3
offset, 2
manuals 2
note: 4
paid 1
marking, 1
often? 1
may 123
old, 1
nothing) 4
maps 7
pain. 1
oldest 1
meaning 3
notice. 1
match 12
paper. 1
marking 2
meltdownattack.com 1
on. 9
noticeably. 2
matches 1
par-allel, 1
matter, 3
once. 5
matters! 1
paragraph 1
mem 10
noticed: 2
mem.pdf 1
material. 3
parallel) 2
mean 6
measure? 2
mathematician 2
parameters: 1
one! 1
now, 18
memories. 1
measurements 4
park 6
one) 4
now-extinct 1
memory-add 2
matter 13
partition, 1
mechanism, 2
one-quarter 1
now-sleeping 2
memory-related 1
num 1
paths. 2
meeting 1
one-word 2
maximizing 1
megabytes 3
meant 1
objects. 1
ones. 3
obvious) 2
measurements, 1
memories 4
patient! 1
obviously, 1
measures 2
open() 6
occur, 2
pattern 5
opened 1
patterns), 1
off), 2
operate): 1
mechanism 18
pause 2
offending 10
memory. 103
mem. 1
operates 4
offset=000000, 1
method. 3
memcheck 1
percentage 5
operating-system 3
often, 7
perfectly 2
oh! 1
metrics 7
memories, 1
opposite 5
on; 1
memory); 2
opt 1
once; 4
middle 11
optimization, 3
once”, 1
performance, 14
millions 3
organization. 1
mind-blowing 1
origins 1
other) 1
minimal 7
ours: 1
other 303
mainframe, 1
misbehaves 1
others), 3
miss; 1
one. 24
maintains 1
performs 21
out; 1
mitigates 1
majors 1
mmap(); 1
make. 1
outcome? 5
period; 1
otherwise 14
onto 17
maliciously! 2
outdated) 1
modifications. 2
periods 4
out-of-bounds 1
maliciously) 1
oops.y 2
modified. 1
open-source 2
outlines 6
malloc(20);. 1
persistently 1
outcome. 6
more, 6
open. 2
malloc(3) 1
output: 4
perspective, 1
outputs. 2
most-significant 1
malloc(strlen(s) 1
operations, 3
outs 1
phone, 1
over. 1
mother 2
memory, 124
memory-mapped 3
memory-reference 1
man 21
operator, 2
overflow. 1
optimizations. 1
memory-user 4
overhead, 1
mesh 1
manages 9
overload. 1
order, 5
manipulations 2
overwrites 1
message 10
move 31
overall. 1
ordering. 2
piece 36
manner; 1
own. 2
microkernel-like 1
ms). 3
microseconds, 2
much... 1
manual. 4
pipe 8
origin 2
pipeline 1
p2 7
mid-instruction, 2
much: 1
milliseconds). 1
overhead), 2
original; 2
place! 2
p3). 1
many” 2
multiples 1
minicomputers. 1
multiprocessing). 2
placing 7
multiprocessor, 2
minimal. 2
mutex, 4
ory. 1
plans 1
own? 1
p: 18
mapping 13
owner 4
mutual-exclusion 2
myargs); 2
other. 8
minimizes 2
page), 2
ownership, 1
platforms. 1
marked 11
myret_t; 2
others; 1
minutes 1
p1.c) 1
page-replacement 6
marriage, 1
play 4
mythread() 2
other’s 1
myturn 2
p2.c 1
mask 1
pleasant. 1
misbehaved), 1
name. 4
ourselves 3
p3 5
master 4
p4.output 1
pmap 5
nanoseconds, 2
page-table 31
nasty 1
matter? 3
p; 7
packages, 1
misbehaving 2
matters, 2
pagedirectory 1
page-number 1
natural 9
maximize 2
miss) 1
pages: 2
missed 2
misses! 1
paging, 4
point, 30
pointier, 1
page. 21
policies. 7
painful; 2
pages; 9
means 31
mode 23
paper: 1
policy. 4
paging-multilevel-translate.py; 1
measurement. 1
pains 1
mem- 1
portions 7
memory): 1
pairs, 1
nature 8
papers 8
possession 2
preempted 4
needs 32
memory-allocation 10
negative, 3
paradigm. 1
newly 3
preserved. 2
memory-bug 1
parameters. 2
memory-user.c. 1
modern 90
moglie 1
newly-fetched 1
mother. 2
memory 568
memory; 19
parameters). 1
parent 44
pressed 2
newly-opened 1
out 181
ms), 4
mental 2
meta-level 1
parent) 1
parentheses 2
previously, 1
news: 2
park(); 4
mentor, 2
park(), 2
methods 4
out-of-memory 1
part, 2
park, 2
mess! 1
participated 1
outrage! 1
partition 1
message, 2
principle 6
messy 2
metadata 1
printed 6
parts 19
metric 5
printf("%d 4
particular, 28
over, 1
pause, 1
micro-instructions 1
method 8
passive 2
printf("%d\n", 7
password 1
printf("%lld\n", 2
pay 12
printf("location 3
microsecond. 1
overcome 3
overheads? 1
overwriting 2
own, 3
p 1
p1.c. 1
microseconds 2
peep 1
printf("returned 4
next 101
priority, 7
path. 3
p1–p3). 1
percentage, 1
million 17
much 135
priority-based 1
pdflush), 1
p3.c, 1
nice 34
perfectly, 1
min 3
perform? 1
privacy 1
peeking 1
packaged 2
non-scalable 2
multi-queue 4
mind, 4
penalties. 1
privileged; 2
packed 4
nor 1
multitude 1
mines 1
people. 1
mini-computer; 1
packet 3
minicomputer 5
minimally 1
pro-cessor) 1
not. 14
problematic, 1
must, 1
minimum 2
problems: 2
people.cs.clemson.edu/ 1
notes. 1
page; 5
nothing 5
per-process 12
performance 91
perfect... 2
minus 5
myargs[2] 2
perl). 1
mystery 1
notion 12
n). 1
number. 2
name, 4
numbering 1
permanent 1
o 2
proceeding. 1
named 8
perror("malloc"); 4
obey 1
process). 2
napping 1
persistently, 1
might 218
miss 32
process? 4
naturally-occurring 1
object 10
person; 1
migrate 1
processes? 3
observing 1
neatly 4
perform 70
migration? 1
processes” 5
obvious 12
necessary 9
processor. 9
produced 2
professors 3
profilers 2
perhaps 39
period 8
persistence. 2
misses 21
millisecond. 1
occurred 3
milliseconds; 1
persons 1
philosophical, 1
needed 44
occurrence. 1
miniscule 1
perspective 8
pages 195
phrase 2
miss), 3
new; 8
mmap() 7
pessimal, 1
program. 46
pain 1
physical. 1
misses), 1
newly-allocated 2
occurs 19
mode). 1
phone 1
programmed 1
pals 1
physics 1
programs; 3
newlyfreed 1
models 2
physically 2
odd 6
mistakes 3
pioneered 4
mode” 1
news 2
physics). 1
oddity: 2
mobility 1
program’s 9
modification. 2
projects, 1
picks 5
promote 1
next. 10
mode, 13
place. 16
of... 3
monopolize 6
piece, 1
proportionally 1
pleasure: 1
model 8
off, 3
month. 1
pioneer 2
protocol, 1
ploticus 1
offender. 1
models), 2
more! 1
proverbial 1
more) 1
point1 1
modified 15
ms, 5
paper 85
molecules 1
pipe, 2
offset 42
monster! 1
multicore 6
pipeline, 2
pointed 15
pthread.h 2
parameters, 5
more. 14
pthread_cond_signal(pthread_cond_t 3
please 3
pointers? 2
most. 1
parent. 4
oh 2
pthread_cond_t 3
plots 3
points. 1
motivate 1
part) 1
moustache 1
pmap, 1
much, 1
passed 18
multi-threaded 44
policies; 1
no 140
poorly. 2
multiplied 3
past 6
none.” 2
popl 1
multiprogrammed 3
multiple 95
patch 5
point 39
pthread_create(pthread_t 2
policies: 2
old 60
music 2
multiplex 1
popular 7
not, 14
patches 2
politely 1
notes); 1
ponder: 1
multiprocessors. 4
porting 2
pthread_mutex_trylock(pthread_mutex_t 2
online: 1
pool 1
onnv/onnv-gate/usr/src/lib/libc/port/threads/synch.c. 2
multiprogramming. 1
notes, 3
paths 4
populated, 1
oops.x 2
power-of-two-sized 1
ptr 16
myargs[1] 2
paying 3
open(), 1
nothing. 2
power.” 1
portion 20
pulled 1
peach? 1
myret_t 6
notices 2
powerful. 3
operation. 5
penalize 1
posed 5
mythread. 2
now! 1
pre-configured 1
nuances 3
opinions 2
per-futex 2
name; 1
positive 4
purpose 9
pre-initialized 1
number, 4
opposing 2
performance-minded 2
names 1
pushing 2
possibility 5
precious 2
numbers) 1
opposite, 1
natively 1
possible: 1
predictable; 1
obey. 1
put(i); 5
optimal) 1
power. 1
preferred; 2
prerequisite 1
object. 1
q->head 4
optimization 6
naturally 4
practical 8
must 152
order; 1
presented 8
necessarily!) 2
q->tail 4
obtain 10
mutex. 1
practice 4
performance. 35
orders 2
query 1
precise 4
pretend 5
myret 4
performed, 2
organize 1
person! 1
question. 7
n; 1
questioning 1
obviates 1
queue) 1
obvious. 2
preventing 3
queues. 2
occurs. 3
ority 1
predict 16
prevention 2
perspective. 2
predictors, 2
out). 1
name 22
preemption 2
previously 3
prepared 1
primitive! 2
out? 1
physically-indexed 1
nanoseconds. 3
quote 7
occurs?” 1
pressing 1
outcomes 1
primitives. 8
nearby 2
race): 2
picture, 5
previously) 1
output. 2
primitives? 2
nearly-complete 1
pid; 1
printing 3
printf("%p\n", 1
overcome? 1
races 4
nears 2
pioneering 6
raised. 1
priorities 5
necessitating 1
prior). 1
overflows 4
place; 1
need 152
randomly 4
overheads. 4
needed, 7
ranging 1
needed). 2
priority) 1
places 6
needed? 6
platforms 2
neighboring 1
players 1
private 18
overview 12
overwrite 4
point. 7
networking, 1
priority 61
overzealous 1
pointer). 2
problematic 2
new->next 4
rather 29
negatively) 3
newly-created 3
networks, 1
pointer? 1
re-acquire 1
own; 3
read/write 1
nice), 1
readable. 1
pointing 2
problems. 11
privileged 24
ownership 1
pro2 1
nicely 1
proceed 6
points; 1
newer 2
readers 1
reading, 1
no? 8
owns 2
node. 1
process; 13
readonly 1
next: 9
p1.c), 1
no, 1
reads” 1
processes; 7
probably 32
processes’ 1
node_t; 5
reality, 1
policies 35
probes 1
reason. 3
node_t 24
reasonably. 1
non-blocking 2
reasoning 1
processes”, 2
node’s 4
non-performant. 1
page-directory 5
reboots 1
non-computer-types 1
non-zero, 1
produce 9
page: 1
problem: 25
nondeterminism 1
receives 4
non-cooperative 2
produced, 1
pages). 3
proceed! 1
none, 1
process); 1
producer. 2
policy 50
recently 6
not; 1
non-preemptive 2
painful 7
professor? 1
pollutes 1
recollections 1
notion), 1
non-stop; 1
professors, 1
recover 1
poor 10
program: 6
referenced; 1
process, 51
references, 1
programmer. 5
possess 1
progressed, 2
prohibitively 2
projects 3
promoted 1
refers? 1
papers, 6
potential 12
normal 11
powerful, 2
prompt 4
regain 1
prone. 2
processes, 31
powers 1
register) 2
pragmatic 1
processing. 1
protected 4
registers. 3
parallelization, 1
relatively-short 1
protection; 2
parcel 1
processor; 5
park() 4
rele-vant 1
relocated; 1
relocation. 2
remaining, 1
remedy 2
now 184
null.c 1
numbers 12
pre-specified 2
processors 16
remove 10
protections 4
object), 1
producers, 1
precisely 2
part 52
oblivious 1
replacement. 4
replies: 1
producing 1
predates 1
protocol 3
observation 5
reply: 1
obviously 5
preempts 1
providing 16
production, 1
pthread_join(pthread_t 2
representing 2
occur 9
pthread_mutex_lock(&c->glock); 4
preparing 1
pthread_mutex_lock(&q->head_lock); 2
particular 60
pthread_mutex_lock(&q->tail_lock); 2
pthread_mutex_timedlock(pthread_mutex_t 2
pthread_mutex_unlock(&c->llock[cpu]); 2
pthread_mutex_unlock(pthread_mutex_t 2
pretty 26
ptr, 3
previously. 2
occurring 3
requested, 2
productive. 1
purpose, 1
professor 2
put() 4
program; 3
occurs), 1
requiring 11
pri- 1
puzzle 2
pass 54
primitives, 3
printf(), 1
programming 7
python 1
oddly 1
passes 5
odds: 1
quest 3
patterns. 2
resident 2
pause) 1
question: 7
resource. 2
pausing 2
queue), 1
prints 41
resources; 2
offset), 1
peach. 6
priorities. 1
queue_add(m->q, 4
respect 2
offset=04); 1
peaches. 1
queues: 1
priority. 8
responds 2
programs 85
often 69
per 57
responsible 6
progress. 3
perceived 3
old_ptr 4
proactively. 1
responsive 1
quickly 21
races, 4
randomly-generated 3
rest 18
prohibitive. 3
randomness 6
problem? 2
project, 2
percentages. 1
restored. 1
perfect. 2
on). 1
properly. 1
once). 1
restricting 1
once? 2
perfection 1
one: 3
properties. 1
rare 2
results, 4
problems, 12
perform, 1
oops; 2
proportions, 1
rate. 3
retains 1
problem” 1
retries 4
proc-struct(A) 1
protection, 2
performance), 1
rather, 11
proceeding 1
operations 26
retry 6
provided. 2
ratios 1
performant) 2
operator 3
return. 1
opinion 1
ps 2
perhaps, 1
re-check 3
process) 6
pseudocode 7
periodic 1
re3 1
optimal. 1
process-run.py 1
pthread_mutex_init(&c->llock[i], 2
periodically. 1
reacts 1
optimality 1
person 3
returning 27
processed 2
phenomenon 1
optimizes 4
not 449
rewrite, 2
read. 6
pthread_t 14
readability 1
philosophy 1
options 3
rich 2
processes) 1
notably 5
processing; 1
notes 5
nothing”; 2
pthreads 8
pick 15
purchase 1
pieces. 1
purify, 2
pipe() 2
placed. 1
processor 28
played 1
right 42
producer, 2
pleases: 1
robin, 2
professionals 3
putting 17
quantum 5
pointer. 3
notice? 1
policies? 1
now), 1
null-pointer 2
null. 2
question; 1
order 80
others). 1
otherwise: 2
questions 13
queue. 12
queue_t; 2
readers, 1
pop 1
routine 60
queues; 1
out, 27
readied, 1
outcome 4
running), 1
output; 1
readily 5
reading 21
ready), 2
number 198
over 90
reality 7
runs. 11
popular, 1
race 28
over-designed 1
randomization, 1
realization 1
rw- 1
popular-sized 1
objdump 8
overflow 3
sad. 3
overhead. 1
objectives; 1
range. 1
objectoriented 1
possible. 14
overheads; 1
safe? 2
really) 2
re-awaken 1
observes 2
reason: 3
re-enable 2
obvious: 2
re-reads 1
reasonable. 3
occasionally 3
recall). 1
re-referenced, 1
recently, 1
pouvoir”, 1
occurs)! 2
reclaimed, 1
reach 2
recognized 1
occurs: 1
recommend 2
records 1
off. 1
reaches 2
practice, 1
own 72
recourse: 2
offset: 1
react, 1
pragmatists 1
p); 1
recursion 1
omit 2
read-only 1
precisely? 1
program 321
p3) 1
recycles 1
read-write). 1
predictors 1
programmer, 1
read? 2
on, 11
redirect 2
p3.c 3
preemption, 2
programs5 1
once); 1
reduced. 2
reader 7
projects. 1
preferred 2
p4 7
ready. 1
package 4
prefetching 2
page). 1
realloc() 4
once, 9
references 28
prepare 1
page? 1
presenting 1
one). 1
region. 1
prompt> 37
pages); 1
rearrangement 1
preserves 1
one-to-one 1
pressure. 2
proofs” 1
reasons 6
one? 1
prevents 3
reboot 6
ones, 2
primer 1
pages, 26
register), 1
proper 14
receive 11
paging-linear-translate.py, 1
reclaiming 1
one” 1
primitive. 6
properties; 1
register-level 1
primitives; 2
regular 2
ongoing 1
recommended 1
online, 2
redirected 2
oops 2
same 145
relaxing 1
printf("%s: 4
proponents 1
paging. 4
reduced-instruction 1
open("/tmp/file", 1
saying; 1
scale. 1
reduces 9
printf("(%d) 2
releasing 16
proportion, 1
scare 1
pair 21
reference, 2
protocol. 4
referenced 6
paper, 3
scheduler? 5
printf("Final 1
protocols; 1
reliability 2
region). 1
parallelism. 2
schedulers, 1
printf("Initial 1
provides, 1
relinquishing 2
paralleliza-tion, 1
regions, 2
parameter; 2
prio_to_weight[40] 1
register. 4
private, 3
parameters 9
registers; 4
remaining 13
paranoid. 1
privilege 8
remarkably 1
probabilistic 1
remembers 2
parent: 2
remove_min(queue); 1
park. 2
partially-ordered 1
removed 6
renewed 1
pthread 57
reporting 2
problem. 26
operating 151
pthread_mutex_init(&lock, 2
procedure. 1
pthread_mutex_unlock(&lock); 2
regs(A) 3
particularly 27
relatively-slow 1
partner 1
passed, 1
requested 8
scheduling 102
released. 6
published 4
operation 20
past, 4
scientist 1
push 2
requests. 6
opposite. 1
patent 1
relocated 6
scorned 1
q->tail->next 2
researchers/engineers, 1
screen. 3
reside. 1
relocation; 1
optimal; 2
scribble 2
resources? 1
se. 1
optimize 4
responsiveness; 1
option 1
rest, 1
remain? 1
remains, 1
remembering. 2
renders 1
results 17
question 27
resuming 1
repair 3
retry, 1
search 20
queue; 5
searches 3
return-tolibc 1
repeatedly, 3
pattern. 2
returned) 2
peaches; 1
returning, 2
per-CPU 5
performance2 1
replace? 3
review 2
replacement; 1
performance: 4
replacements 2
rewrite 8
report? 4
queue_t 2
representation 1
performed 11
performs. 2
second: 1
queues 6
secondchance 1
represents 4
seconds). 1
right); 2
quickly. 5
sections. 4
right, 3
permanently-valid 1
permissions 1
road, 1
security. 1
rogue 1
personal 1
requests? 2
see! 2
pesky 1
role 11
require. 1
rolls. 1
phases 2
segment; 4
picture 5
roughly 24
segmentation 26
roused 2
piece. 3
segments 22
place? 1
selection 1
routine, 10
quite 114
plain 2
semaphores” 1
requirement: 2
rule: 2
planet 1
quote: 2
semi-nal 1
research. 1
radical 2
plenty 3
reset 3
random-access 1
reside). 1
plus 11
randomness. 1
resides, 1
run), 2
pmap. 1
sense 26
range; 1
sense?) 1
runnable; 2
sensed, 2
pointers 5
ranges 1
rvalue; 2
resource; 1
rw45 1
separation 5
rx 4
rate, 3
policies, 7
resources 6
respectively, 1
rc; 4
servers, 2
respond 1
policy, 12
same, 3
rdtsc 3
response-time 1
setpark(); 2
poorly? 1
saved? 2
positivity 1
restricts 1
setting 15
saves 9
result, 12
possible; 2
share; 1
possibly-failing 2
re-create 1
ret 1
say), 2
sharing: 1
says: 1
or 469
re-duces 1
retain 1
posterity) 2
shells; 1
postulates 1
sbrk 3
re-initialized. 1
order), 1
shift 1
process 403
return; 10
scale: 1
orderly 1
short-circuiting 2
read, 7
scales? 2
readable 1
organization, 1
short-running 4
powerful 21
scary 1
short. 3
original, 1
prac-tice, 1
scenario. 4
real, 2
shortcomings. 1
orphaned 1
practice! 1
returns 61
pre-WWII 1
realistic 3
shot 2
other? 1
scheduler.py, 1
scheduler; 2
precisely, 1
shrink). 1
others, 4
reverts 1
realized 8
precision 2
reap 1
revolutionized 1
schedulers 14
prefer 2
rearranging 1
preferably 2
preferring 1
prematurely-optimized 1
presents 7
scheduling, 15
signal 28
school: 2
preserve 1
right.” 1
similar), 1
scientist, 1
presumably 4
rightly 2
presumes 1
rip 1
similarly 3
scope 2
prevent 8
scorned, 1
otherwise). 1
rise 2
reason 32
processes 107
seamlessly 1
simple, 9
seasoned 1
simplified 2
second. 5
root). 1
primary 9
routed 3
routine), 4
routine1, 1
primitives 15
processors, 9
out! 1
secretary 2
reasonably 3
rules 6
rebooted, 1
section), 2
principle. 1
output 36
rechecks 2
run. 22
printf("main: 8
producer/consumer 9
overall, 1
security: 1
reclaims 1
running: 1
recommending 2
producer; 1
overcoming 2
recorded 3
runs...) 1
recourse 1
overheads 14
printf() 1
producers 3
runs; 3
seem 7
recursive 1
overlap 6
prioritizes 1
product. 1
privileged) 2
rv; 2
overlays, 1
rvals->x 2
segment? 1
professor, 1
problem; 2
simply 128
redirection 2
overly 3
rvals; 2
segmentation, 4
program). 2
problematic: 1
segments, 5
overly-large 1
redoing 2
rvalue); 2
simulator. 2
program? 6
overwhelm 1
send 13
reduce 15
sampling 2
problems 55
satisfies 1
reference) 1
sense, 6
simultaneously 11
p1 8
satisfy 9
programmer; 4
references. 2
sensitive 1
sincerely 1
single, 1
saved 11
situation. 2
referencing 1
sent 3
reg/PC 1
size; 6
programmers 13
problem”, 1
sequential” 1
savings 9
p3.c), 1
sizes 8
programming, 2
proc 5
saw 12
proc_state 2
say. 2
p4.output. 1
process), 3
regards 2
sleeping). 1
serious 10
slice. 1
saying 4
process-run.py, 1
programs, 16
region, 5
servers 1
page(s) 1
slices; 2
sbrk() 1
regions) 1
services. 1
project 4
slowed 1
sbrk) 1
servicing 5
slowly, 4
scales 6
promise 1
processor, 13
register; 2
set. 2
produced. 1
page, 28
setting, 1
page-not-present 1
several 1
small-scale 1
scenarios, 2
severe 3
page-sized 4
smarter 1
prone; 2
sharing. 3
properties: 1
shells). 1
proportionality 1
shipping 2
pageable 1
proportions 1
paged 1
pages) 3
registers 48
pal, 2
relates 3
release? 2
papers. 4
shouldn’t. 2
scheduler); 2
so, 37
reliability. 2
parallel, 2
showed 4
software; 1
protection 22
producer 26
shrinks 1
reliable 6
scheduler, 20
provably 1
schedulers) 1
parameter 6
sidebar 2
professor! 2
relocating 1
solutions. 4
proves 1
school; 1
parameterize 1
scripting 1
profit 1
somehow, 1
relocation 6
signal, 1
repeats, 1
parent? 1
second-chance 1
someone 3
signal/wakeup 1
pthread_mutex_init(&L->lock, 4
replaced 2
seconds, 2
secretly 3
program, 58
program-debug 1
program4 1
signaling. 1
pthread_mutex_lock(&c->llock[cpu]); 2
section. 34
similarly, 3
pthread_mutex_lock(pthread_mutex_t 2
sections; 4
programmer 12
replacement 30
proofing 1
repository 1
pthread_mutex_unlock(&L->lock); 12
security; 2
represent 5
purify 1
part: 4
proportion 5
see. 4
request? 1
seeing 1
pros 1
path, 2
question). 1
seemed 1
patience 2
questions, 3
requests, 2
quoting 1
r-x 5
patterns 4
required). 1
pauses 1
required? 2
peach 4
seen 31
peaches 2
segfault 1
people, 1
percent 6
something 132
r-x-rw--r-x-r-x-r-x-r-x-rw--- 1
prove 5
perfect 7
requires 25
research; 1
reserved 6
reside, 1
resided 1
provides 30
provisions 1
rage 3
segment 56
pseudo-random. 1
segmentation.” 1
resource 14
performance? 3
raises 8
segregated 3
simple 196
performance” 1
responsibility 6
ran. 1
pthread_mutex_lock(&L->lock); 8
simpler. 1
responsibility!” 1
semantics, 5
simplicity; 2
performing 14
random. 1
restarts 1
sometimes 73
sentence. 2
publicized) 1
simply, 4
randomization 3
somewhere). 1
periodically 9
restored 4
separa-tion 1
pure 2
simultaneously, 1
rarely 1
sooner 1
permission 1
restricted? 1
sequence: 1
purpose. 2
rarely-taken 2
sorting 1
permit 1
since 7
result! 2
pursue 1
rates 1
sources: 1
persistence, 1
resulted 2
sequential 8
pushl 1
re-accessed 1
space-management 1
persistent 4
put(int 2
results. 6
re-referenced 2
space-usage 1
reac-quiring 1
space: 2
series 9
persistently; 1
react 1
spaces). 1
read-only, 2
reader, 1
sparse 7
seriously, 3
persists, 1
spatial 7
server, 1
server-based 2
serviced. 2
setassociativity; 1
set” 2
specific 21
reads 10
personally 2
puts 19
quantum) 1
realizes 3
question, 1
phase 3
really. 1
physical, 1
queue). 5
rearrange 2
physics. 1
queue? 1
spin, 2
return 169
reasons, 6
pieces 19
queues, 12
spinning 27
share 36
return-fromtrap 3
reassurance; 1
pigs. 1
quote. 4
splitting 3
returns), 1
she’ll 2
reboot, 1
pipe; 1
rabbit 1
spot 2
reused 1
shooting 1
src.opensolaris.org/source/xref/ 2
pipes 4
revert 1
recall, 1
ridiculously 1
rights). 1
shown, 2
root, 1
simple) 1
place, 9
simplest: 2
received 3
single 203
raise 10
round 2
rechecking, 2
simplicity, 16
sitting 4
raised, 2
simplifying 3
ran; 1
record 6
size). 2
placed 24
routinecalling 1
simulation. 1
rude 1
sizes, 2
sits 3
rule 4
random; 1
sketch 3
placement 1
run; 1
platform, 1
randomizes 1
skimmed 1
situations 3
runnable) 1
player, 1
randomly-accessed. 1
skip-ping 1
skips 1
plays 2
ple 1
slab 5
pleasure 1
sleep) 1
running). 2
stack 79
reference 57
plural) 2
rate 27
sleep-ing. 1
stack”! 1
running? 4
referenced, 1
re-referencing 1
slogan. 1
stance 1
referred 27
slot 7
pointer 55
reached 1
runs 83
refers 9
runtime, 2
slower. 3
regained 2
rv 4
region; 1
rvals->y); 2
of 3668
slowly 12
regions 11
size 124
relaxation 1
offers 1
sad 4
slumber 2
policy) 1
sizeof(PDE)) 1
relaxed: 1
start 58
sage 1
offset. 6
sanity 1
pool? 1
relevant. 2
starving 1
reload 1
states: 1
omniscient, 1
read 91
sat 2
poorly, 1
small! 1
sizeof(PTE)) 7
relocate 5
sketch/review 1
poorly-programmed) 1
small) 1
popular. 1
popularity 1
sketched 1
stop 21
positively) 3
sleeping, 3
possibilities. 1
slicek 1
store-conditional 7
stores. 1
storing 1
slices 10
slight 2
straightforward; 1
slightly; 1
real 53
strdup("p3.c"); 1
slow. 3
possible 31
saves/restores 1
realize 5
relocation.py 1
remainder 1
slower? 1
reason, 8
saving 6
stream: 2
potentially-starving) 1
slowly) 1
says 2
strictly 2
reasonable 9
remains 11
powerhouse 1
remedied 2
sbrk. 1
stringent 1
recall1 1
scale 4
small: 3
scans 1
recently. 2
scenario, 3
remember 20
structures: 2
remind 1
schedulers. 5
preemptive 2
removing 8
stub 1
redirection, 1
schedules 4
reduced 5
schemes 5
school 2
science. 2
repeatedly 15
repeating 1
scratch 3
refer 27
screen 1
references: 1
present 36
referring 2
replaces 7
regardless 2
reports 2
stuck, 1
subset 3
pressure 5
sneaky 2
second, 6
request. 7
section; 2
requesting 1
region 25
primarily 3
sections 6
requests; 1
snippet 9
required. 5
register). 1
security 21
primitive 9
seeds, 2
researchers 8
register? 2
substantial, 2
principles 5
seek 2
printf("child\n"); 3
resides 9
printf("hello 3
so 197
successful. 1
sees 4
software 17
resizing, 2
registers, 10
sockets. 2
printf("parent: 6
successfully) 1
segment), 3
solidify 1
segments: 1
suffers 5
regs(B) 3
priority). 1
resort 1
software? 1
select 4
priorityadjustment 1
summary 5
solving 4
solution. 8
resources, 4
sending 1
relative 3
probabilistically 2
superuser 3
somebody 5
solve: 1
responsabilit 1
solved. 1
supports. 1
probability 2
relax 10
sense: 2
sometime 1
somewhere, 1
serves 6
surfing 1
services, 1
soon, 1
set, 3
releases 14
somehow 6
sorry, 1
reliably 3
something, 2
severe. 1
sometimes, 2
sharing, 3
response 31
surprising 7
restores 4
sounded 1
sorts 9
sounds. 1
space-efficient, 1
shell 12
restricted. 1
space). 3
relies 1
survey 16
problem 121
short 29
result 30
shorter! 2
space. 45
proc-struct(B) 1
relinquish 5
swaps 3
space? 6
shortest, 1
retrospective 3
return-oriented 1
spaces, 5
procedure 12
shrink) 1
sparked 3
relinquishes 1
switch, 8
return-to-libc 1
spaceshared 1
process: 2
sibling 1
sparse, 1
switches, 2
space” 1
return? 2
relocation, 5
silently, 2
spawn() 1
processes: 4
rely 5
sparsely 1
returned. 2
similarly-named 2
swpd 1
species. 1
remain 8
spear-headed 1
returning) 2
swtch(struct 1
processing, 3
speeds. 1
symbol 3
simple. 10
specifies 5
returns, 7
processors. 3
returnsfrom-trap, 1
system! 2
simpler, 2
system) 1
remote 1
specify 10
reveal 1
spend 10
revisited 1
replace 9
simulated 1
system-call 5
spectreattack.com 1
system1 1
rid 1
speculation, 2
replacement, 3
product 1
spinning), 2
professor. 2
report 9
simulations 4
spring 1
spent 7
program) 1
right) 1
programmer), 1
stack), 2
request; 1
roam 1
robust 9
programming. 5
simulator 16
started, 1
starvation 3
single-threaded 4
room: 1
sit 6
requests 28
on 719
require? 1
round-robin 11
systems. 64
programs. 25
stash 1
requirements 1
on-disk 5
routine1 1
situation 9
t(A) 1
progress, 1
stashes 1
proliferation; 1
spin 79
routines. 1
sixteen 1
researcher 2
state: 2
spin-waiting 4
statement. 2
reserve 4
statistics 4
sizeof(int)); 2
step). 1
spinning, 2
rules, 1
table. 26
tables; 1
skills. 2
step? 1
stopped, 1
promotes 2
run: 3
reside 11
spurious 2
once 60
taking 11
storage. 1
ones 8
runaway 1
resource, 4
targets, 1
proofs 1
ones!). 1
responsibility, 1
slice 36
straightforward 9
task; 3
strangest 1
stack, 18
responsive. 1
online 6
properly, 1
oops, 1
stand 1
rest. 2
tasks 2
running. 23
strategies 8
tcsh, 2
opens 4
state1 1
slightly 19
property, 2
runs? 2
strategy 6
states. 1
slip 1
proportional 3
restore 17
strdup() 1
rvals->x, 2
operation, 9
statistics). 1
opportunities 1
restored, 1
proportional-share 6
streams, 1
rw59 1
stretching 1
stop, 1
opportunity 1
technique 29
resumes 5
slow; 2
rwrw- 1
protect 11
opposite: 1
store), 3
returning. 1
slower, 1
tends 5
rw— 2
optimization. 1
reuse 1
stride 17
reused, 1
slowly. 2
string, 2
option, 2
safe 6
store-conditional, 4
revenge 1
storeconditional) 1
struction 1
small). 3
or, 5
sane 2
order! 1
strcpy(dest_buffer, 1
right. 5
structure: 2
testing 2
strdup 1
ordered 4
structures? 1
root 3
thank 2
stream. 2
thankfully, 1
strung 1
smaller 14
routine. 2
ordering; 1
student, 3
provide 65
snapshot 1
streaming 2
save 27
orderings 2
rudimentary 4
subproblem 1
provided, 2
strengths 2
saying, 1
organization 2
succeeded. 1
so. 15
ps. 1
strike 1
run? 8
scalability. 1
succeeds, 2
software), 1
pthread_create(..., 4
strings 1
running; 3
original 19
strongly 5
scalable 15
pthread_mutex_lock(mutex); 2
scaling. 1
runs, 21
success: 2
runtime 2
ptr; 2
rvals->y 2
others 14
scenarios 2
softwaremanaged 1
purely 1
safely 3
otool 2
purposes 2
structure) 1
solely 1
our-selves 1
solution; 1
sake 5
out-of-bounds; 1
satisfaction, 1
out.” 1
satisfactory 1
solutions 11
output, 2
satisfied 1
solve? 1
say? 1
outside 4
structures. 22
sched 7
them 99
some, 2
says, 1
put 41
schedule: 2
sort 6
overall 9
scale, 1
strut 2
q->head; 2
scheduled. 2
then? 2
quantify 3
scaling; 2
overlap, 1
there. 6
question! 1
scenario 4
stuck 16
scenarios), 1
there’s 1
scheduled3 1
scheduled; 1
students 3
scheduler), 1
thing, 6
questions. 3
overlays 1
studied 5
overstate 1
oversubscribed; 1
scheduling. 9
space, 50
sub-job 3
school, 2
queue, 17
owns. 1
queued 1
subjunctive 1
scourge, 2
spaces) 1
screen, 1
p1, 5
subsections 1
quick, 1
sparc/ 2
se, 2
p2; 5
subsystems 1
scheduler 110
suc-cessfully 1
species, 1
p4.c 2
qu’une 1
succeed. 3
searching 4
scream, 2
think 66
race. 4
p5 5
specifically 6
searched 1
success! 4
thinking: 2
suggest 3
specified, 1
suite 1
thinks), 1
packing 2
second; 1
speed-of-light 1
spell 1
spending 3
ran 15
this. 4
seconds 9
those; 1
spin-lock 2
seconds!). 2
spin-waiting. 2
thoughtful, 1
secure 3
spin. 4
see: 2
supervisor 1
random 37
thoughts 5
second 78
splitting: 1
seed. 1
sure; 1
ravages 1
such 274
sponse 1
seconds), 3
thr 7
stack: 3
section? 4
surprising, 1
sections, 2
sudden 1
security, 1
thr_join() 3
see). 1
suffer 8
see? 6
suggested 8
superpages, 1
rc, 3
surround 2
thread. 20
seeds 11
support. 9
seeds; 1
rc_wait 3
standpoint, 1
staring 1
re-acquires 4
threads; 2
segmentation. 3
supporting 1
segment, 14
re-energized 1
suppose, 2
segmented 4
semantics 8
re-place 1
suspend 2
supposed 4
swap? 1
semaphores 1
segments. 3
re-use 1
starve; 1
thread’s 14
surprise. 1
sentence: 1
self)) 2
reaching 1
sequence. 2
surprisingly 7
semaphore 1
susceptible 3
stateful 2
threshold) 2
stateless 1
suspicion. 2
statements 1
server 11
states, 1
service. 3
thumb. 1
switch 62
read(), 1
setaffinity() 1
read), 1
switches 14
static 21
sense. 11
stdlib.h 1
swap 34
sets 27
synchroniza-tions 1
ready, 3
thus: 1
sequences 5
real-world 2
switch() 3
step, 5
tight. 1
shape. 1
services 1
switched 2
synchronization 26
still 59
time). 3
switching; 1
stored? 1
swtch: 1
really 52
time? 9
stores 16
system), 3
symbiotic 1
strategy), 2
times, 10
system.” 1
tmp->next; 2
syscall 3
stream, 2
shared 67
reasons. 10
to; 1
systems: 5
shells, 1
t. 2
reboot. 1
together, 3
short). 1
tolerate. 1
table2 1
receive. 1
shorter 6
recency 1
too, 2
table: 3
too4 1
tables? 1
system. 57
tool 15
tail 5
topmost 7
taken? 1
trace? 2
systems; 9
tracked 2
talking 5
tract 1
set 146
system’s 3
page 635
task). 2
recent 16
trade-off. 1
set-it-to-1 2
t). 2
page-frame 1
tasks, 1
recognizes 1
transac-tions 1
set-top 1
pagereplacement 1
table; 5
recommended. 1
tcsh 2
transaction 4
pages), 1
transfers. 1
pagetable 4
technique, 2
recursion). 2
technologies. 1
technology. 1
reducing 6
paging). 1
tens 2
translate 19
reduction, 1
painful. 1
sharing 30
translated, 1
refer- 1
terminating 5
shell, 5
refine 3
tables 49
termination 4
shifting 1
pairs. 1
translations, 6
tailor 1
regains 3
terminology) 1
ship 1
test-and-set! 1
panacea, 1
regard, 2
test-and-set.s 2
treating 2
paradigm 1
shoppers 1
register, 6
tree. 5
short, 3
taken 16
registers) 2
parallel 6
trees; 1
shortest 2
takes; 1
regs 3
tremendous 1
shouldn’t 5
them, 20
shown), 1
then; 1
therein; 2
task 16
related 18
parameter, 4
teaching 1
parent; 1
park(). 2
technical 3
part. 1
relatively 16
tend 7
passing 12
terminated. 1
passion 1
should 274
string) 2
strings. 1
path 8
showing 8
terms 10
release 23
structures, 13
shows 94
patience, 1
tests 5
shutdown 1
stuff 8
text. 1
pays 1
side). 2
subject 4
peach, 3
subsequently, 1
signal. 3
substituted 1
signal?? 1
peaches, 1
relevant 13
shown 35
subsystems. 1
peanut 1
remains: 2
shudder 1
remember: 1
peek 1
subtract 1
shuts 1
penalty 2
pending 1
successful 5
removes 1
signaling 17
signal() 4
suddenly 2
rent 1
signals; 1
repeat 1
sufficient 2
they 149
replacement) 1
trends. 1
summarizes 1
support; 4
people 28
tricky 10
replete 1
true. 3
supports 5
performance; 5
signaled 1
surrounding 2
thing 38
survive, 1
tuned. 2
performance”, 1
significant 4
simple: 39
represented 3
think, 2
survived 1
permissible. 1
two, 3
similar. 2
reproduce 1
simpler 6
persistence 1
simplicity), 1
perspectives 1
type, 4
similarity 1
swapon 2
simulate 3
than 149
simulator, 1
typeset 2
simplicity 7
request 35
peterson.s, 2
this: 49
switch. 4
that: 3
single-queue 4
single-CPU 2
phase, 4
six 3
phones 3
though; 4
them), 2
thoughtful 1
switches. 1
required 15
photos 1
size) 5
research, 4
thousand, 1
typical 26
theme 6
phrase... 1
single-processor 5
reset. 2
sizes. 3
thread!) 2
unanswered: 1
switching 17
sleep; 4
singlequeue 1
resistance 1
threads). 2
themselves; 2
swoop 1
sleeps 4
resource) 2
site: 2
threads? 4
size); 2
three-queue 1
under 18
slice, 7
resources. 5
synchronized 10
then, 16
three: 1
underneath 2
theory 4
restricted 7
throughput?) 1
size, 12
system; 8
restrictions 1
thrown 1
there; 5
ticket. 2
sizeof(int); 1
result: 2
understanding 19
thereby 1
slides 1
tickets; 1
skill 2
results? 2
therein, 2
undo 4
slow? 1
undoes 1
slower 6
time; 16
unfairness 4
resume 8
things. 7
small/random; 2
skip 5
uniform. 1
resumed, 1
unimaginatively 1
smaller, 1
snuck 1
units; 4
sleep. 8
retaining 3
sleeping 5
sleeping/waking 2
slice). 1
slices, 2
times 40
sloppy 4
small. 1
software) 2
smaller? 1
returned 15
thinking? 1
returning; 1
smart 13
unrealistic; 1
update(counter_t 2
returns. 3
so), 1
solution). 1
third 18
revolutionary. 1
software, 4
timespec 2
physical 236
solutions, 3
tn 2
picking 6
right; 1
software-based 1
to? 2
software4 1
pieces, 5
solution: 1
update; 1
right”, 1
solves 7
piece” 1
solve. 1
together 12
some_function(char 1
sometimes) 2
risen 2
somewhere 4
updates 33
systems 185
routines 41
sz; 1
upon, 1
ruins 2
t, 2
us. 4
those 84
run, 24
piena 1
soon 25
too 85
sorry 1
run-and-yield 2
usability 1
pioneers 4
though, 8
run-time 7
source. 1
pipes, 2
use) 10
useful2 1
thought 17
space; 11
thr_exit(); 1
users, 1
spaces 20
place 46
spawning 1
placed, 1
uses. 3
thread; 7
spectrum, 1
tool, 6
speculation 2
threadID. 2
toolbars, 1
topics 5
speeding 2
trace; 1
placement, 1
player 1
speeds; 1
traces 3
splintering 1
trade-off: 1
splits 1
transaction, 2
sploitfun.wordpress.com/ 1
transcript 1
pointer, 10
transforming 3
points 15
transistors. 1
poorly 3
translated 3
translation; 1
sprawling 1
table 175
tables), 1
spread 9
translations 22
tackled 2
transparency 1
sptr. 1
tail. 2
transparent 4
spuriously 2
trap; 2
trapframe 1
stack) 7
traps 5
stages 1
possible, 14
possibly 1
tricks: 1
using 140
usual, 3
potentially 7
takes 50
trust 14
targeted 1
techniques? 1
started 11
running 227
turn) 2
power 8
utilize 5
tell? 2
starvation, 1
rw 6
starve: 1
v 2
threads 197
temporarily 5
precautions 2
rwx 4
predate 1
sad! 1
val; 2
preempt 2
turnaround 30
threshold. 2
state. 10
tempting 4
valgrind? 1
safer 2
valid. 2
turned 2
value) 13
values. 1
vantage 1
some 505
stealing 1
tension 3
preemptive, 1
said 43
something. 2
steps 3
satisfying 2
premature 2
stipulated 1
soon-to-be-executing 4
premise 1
stitch 1
term 15
say, 5
presence 11
soon-to-be-exec’d 1
terminal, 1
scalability 2
stopped 2
variable 75
present, 2
scales. 1
preserving 1
scaling 2
sophisticated 13
variables), 1
terrific 4
scanning 3
pressure, 2
stops. 1
tick 1
varies, 2
sounds 6
pretends 1
store-conditional) 1
test 7
tick-by-tick 1
variety: 1
soup.” 1
ticket.s. 2
storeconditional. 1
prevented 5
test-and-set.s. 2
scheduled 11
vast 2
stored. 1
sources 6
tests), 1
tickets, 4
textbook 1
scheduling; 4
straightforward, 2
previous 19
that? 7
vectors 1
tidbits 2
scheme, 1
two 241
scientific 1
two-fold. 1
scientists 4
scoff 1
scratched 2
scream. 1
second-level 3
section, 24
version 31
see, 15
space 278
segment. 8
themselves 4
segmentation; 2
segmenting 1
segments; 1
segment’s 1
seminal 1
sense; 5
senses 1
time, 75
special; 1
type 73
specific. 1
sequence 24
time-shared 2
serve, 1
ubiquitous 2
previously; 2
ultimately 1
served 3
specifically, 13
understand2 1
strange; 1
primitive, 2
strategy, 2
specified 8
very 60
understand: 1
speeds 4
strdup("p4.c"); 1
virtualized; 1
unexpectedly 1
service 11
speedup. 1
serviced, 1
print 25
time-slicing. 1
unless 1
visible 2
spin-wait 10
setpark(). 2
timeline, 1
printf("%s\n", 3
unlock. 4
vruntime, 1
streams 2
spinning. 2
sets: 2
timer-interrupt 1
settle 1
times) 1
printf("hello, 6
stride, 1
printf("this 1
shaded 1
split 9
shmget() 1
w/ 2
src); 3
priori 3
unmapped 1
stack-allocated 2
short) 5
priorities; 1
string 12
priority; 1
short-lived 2
stack. 17
structure. 16
wait() 26
structures; 2
tmp->next 4
unmasks 2
show 24
problem, 24
waited 1
stage 3
student 3
unpack 2
sign 3
walling 1
proceeds 4
standpoint 1
start. 1
unpark() 2
was; 1
signals 13
unrealistic? 1
wasted. 3
studies. 1
unsafe 4
study. 2
unsurprisingly, 1
watermark 2
unused. 2
way), 1
studying 9
upcoming 1
stuff? 1
ways: 2
style. 1
similar 45
subdirectory 2
process. 69
wc, 3
similarly; 2
subsequent 24
processes. 22
web 10
upon 40
subsystem 4
upside 1
simplest 13
websites 1
usable. 2
subtle 1
starting 14
use_ptr 2
succeeds 3
weird; 1
processing 4
simplified; 1
starve). 1
simultaneous 1
success. 3
used) 1
there 250
well-known 4
state; 2
single-entry 2
super 2
thesis 1
went 3
thing. 2
sinister 1
states 15
super-linear 1
process’s 18
we’re 3
status 5
useful. 10
situations. 1
stays 4
produces 7
six-level 1
professional 1
whatever 15
programmers. 2
stems 1
user; 3
things; 3
size. 7
when, 3
programming: 2
sizeof() 7
progress 8
thinking, 2
step 2
stopping 4
pronounced 1
sizeof(PDE)). 1
who 41
store-conditional. 3
whose 8
sure 56
properly 15
users 27
strange 8
usual 2
utilization. 1
strcpy(dst, 4
why. 2
surface. 1
sizes; 2
properties 8
utilized 4
widely 9
v); 2
willing 3
valid: 1
surprise: 1
win 1
property 10
surprised. 2
value), 3
within; 2
proportional-share, 1
woke 1
surprisingly, 6
wonder? 1
suspect 1
variable, 8
swath 1
sleep 30
sloth” 1
strdup("wc"); 2
variable-sized 7
system: 6
variables) 1
slots, 3
wonderful 11
systems). 1
variants: 1
slow, 8
prot 8
systems? 2
t(B) 1
varies 5
stream 7
work; 6
protection. 3
t; 2
vary 4
stride) 1
worker, 2
table). 3
vectors, 1
protective 1
stronger 2
workgroup. 1
victim. 1
table? 3
protocols 2
small 61
view). 1
tables, 8
stronghold 1
workloads 14
provided 20
snatch 1
virtualizes 3
stronglytyped, 1
taken, 5
pthread_attr_t 2
snippet. 1
visualization 1
structure; 2
vmalloc, 1
snooping, 1
so). 1
so? 5
software. 2
solid-state 1
works 54
solution, 10
talents, 1
world. 3
talks 1
structures 59
worse. 6
stuff, 1
target 6
pthread_cond_wait(pthread_cond_t 3
wreak, 1
solve 20
someday). 1
somewhere... 1
soon-to-be-faulted-in 1
soon-to-be-running 1
sorted 1
sound 5
writes 21
pthread_create(&p, 2
task, 5
sub-sequent 1
source 23
www.ajwm.net/amayer/papers/B5000.html. 2
subsequently 4
tcsh), 1
x-axis, 2
pthread_mutex_init(&c->glock, 2
space), 4
void 153
team 2
substitute 3
x. 2
telling 1
subtleties 2
sparsely-used 2
pthread_mutex_init(&q->head_lock, 2
subverted 1
vruntime 10
ten 7
succeed 2
pthread_mutex_init(&q->tail_lock, 2
vulnerabilities 2
terminate. 3
success; 1
pthread_mutex_lock(&lock); 2
sufficient, 1
special 22
x86 23
specialize 1
wait(), 6
x86)” 2
walks 1
specification 1
pthread_mutex_t 22
support? 4
pthread_mutex_unlock(&c->glock); 4
survive 2
x86-64) 1
pthread_mutex_unlock(&q->head_lock); 4
terms, 3
pthread_mutex_unlock(&q->tail_lock); 2
publishing 2
test-and-set. 4
swapoff. 1
yet, 10
test? 2
thanked 1
want 50
swapped 12
specifics 1
warm-start 1
pull 2
waste. 7
way! 1
way) 1
speed 12
spins, 2
switching); 1
zero. 11
switching, 2
splay 1
symbol. 1
ways. 11
zeroing 4
sptr 2
synchronize 2
zombie 2
src) 1
queue 55
system). 4
wc 11
queue_init(m->q); 2
queuingbased 1
stack; 3
weightB 1
system? 4
quick 4
that. 9
stacks 4
well. 30
systems, 49
quickly; 3
system” 1
that’s 8
rage. 1
the?? 1
raising 3
— 131
them) 1
ran, 1
stale 1
we’ve 21
’05. 1
what’s 2
’07, 2
’94. 1
’Precise’), 2
“01” 1
“100x” 1
“ARC: 1
“Alto 1
“A” 8
themselves). 1
“CPU 1
“Control-c” 1
“Evaluating 1
“Evaluation 1
“Experience 1
“E”, 2
“Get 1
“Hoard: 1
“Ils 1
“Man-Computer 1
“Program 1
“Pthread 1
“Relocating 1
“Reminiscences 1
“TENEX, 2
“THE” 2
“Test 1
“There 1
“Time-Sharing 1
“Volume 4
“Why 2
“core” 1
“first 1
standard 22
“fun” 1
random, 1
“havoc” 1
randomized 2
range 7
rapidly 1
“hello, 1
rarely-used 1
standards/SPARCV9.pdf. 1
“high 1
“lock” 2
“loop.s”. 2
“looping 1
“out 1
“real-world” 2
starts 25
t 10
starvation. 7
“reserved 2
rarely. 2
table, 26
rate) 2
“running” 2
tables! 1
“starts” 2
then 227
tables) 2
theory, 1
there). 1
tackle 4
“steal” 1
rc 13
take? 2
there? 4
takes, 1
rc_wait, 2
“test 2
therein 1
“tried 1
re-checks 4
thermodynamics 1
when 480
“turn” 2
reaction 2
talk 10
starved 1
think) 1
tasked 1
read() 1
third, 2
tasks. 1
reader: 2
which). 1
while) 1
tech 1
winner). 1
technique. 1
winning 7
technology 7
this? 5
woken. 2
ready 33
state 73
tells 11
stated, 2
work? 7
realizing 1
statement, 1
worked. 1
stay 3
really, 4
temporal 7
steal 3
rears 1
worker 6
recent, 1
stood 1
working-set 1
those, 1
terminal 4
reclaim 3
storage, 2
workloads, 1
terminates 1
recursively 1
store, 2
terms) 1
red-black 4
store-conditional; 2
terrific, 1
storeconditional 1
redirects 1
works, 15
testand-set 1
reduction 2
worse: 2
text). 2
stored 15
wrap 2
textbook, 1
though 29
reference. 8
straightforward. 2
thread? 2
strategies. 1
wreak 1
refined 5
this 1109
threads); 2
strategy. 1
thorough 2
writes, 4
written), 1
reflect 4
wrote) 1
thr_exit() 3
refuses 1
strength: 1
region) 1
thrashing 2
strict 1
stride. 1
their 91
strings? 1
strong, 1
www.gnu.org/gnu/manifesto.html. 1
them. 16
x-axis 1
threads, 38
x86); 2
themselves, 1
thread” 1
theoretical 1
threats, 1
there, 2
three-instruction 3
therefore 2
ticket; 2
x86, 8
therein), 2
register 75
xchg 2
thing... 1
registers), 2
xv6. 1
thing: 4
reject 4
structure 73
relate 1
y-axis? 1
think. 2
years. 4
yes! 1
thinking 23
relaxed 2
studies 4
tickets 30
thirty 1
yet 20
released 10
study 52
relegated 2
remainder. 1
sub-jobs, 1
yields 5
subsystem: 1
young 3
subtle: 2
yourself! 3
succeeded, 2
zeroing, 1
this, 32
× 1
’83, 1
success 9
’d’ 1
successfully, 1
’his/their 1
such. 1
“Analysis 1
suffering 2
“A”, 2
suggested. 1
“CPU-bound” 1
suitable 2
“Exterminator: 1
sum, 1
“Hmm... 1
summarize, 1
“Informed 1
sun.com/solaris/articles/atomic 2
“Inside 3
“Intel 4
remains. 1
“Is 1
repeat, 1
support, 16
“Nonblocking 2
repeatedly. 2
“Policy/mechanism 1
surface 3
repeating. 1
thread, 48
“Segmented 1
surprised 2
“Towards 1
“Wait-free 2
swapping 12
threads) 1
“What 5
switch? 2
“With 1
three, 3
switches? 1
three-quarters 1
time 306
“as 2
replacing 3
“brain 2
time-share 1
throw 6
switching) 1
timeline 3
swtch 1
“have 1
reproduce, 1
timeout 4
“hello 1
reproduced 1
“modern” 1
“owned” 1
“parent: 1
request, 10
“ready” 2
requester), 1
“what 1
require 10
required, 3
→ 17
research 18
timer. 1
research.microsoft.com/ 2
times), 1
reside) 1
timing? 1
resides. 3
tip: 1
residing 2
thread 449
system, 65
tlb.c, 1
thread-local 2
resize; 2
systems) 4
thread-safe, 2
respectively. 2
table! 1
threat 1
to, 13
restart 5
table) 2
today. 6
restoring 5
today’s 2
tables. 6
take, 3
result. 11
taken. 1
topic 18
totals 2
tandem 5
totaltickets); 1
tough 2
resulting 24
task. 7
rethink 1
taste 2
tcsh). 1
three 69
threshold; 4
return-from-trap 17
trace 24
return-to-libc. 1
transformation 2
returned, 2
reusing 1
transforms 4
techniques 24
rewrites 1
technology-driven 1
richer 1
translated), 2
right). 2
right? 8
road” 1
thus, 54
tell 28
ticket, 2
tennis 1
time! 2
room 17
time) 4
rosy 1
terminate 6
rotational 1
translation 46
time-sharing 7
terrible 3
rough 3
time-space 2
routines, 5
timer? 3
timers, 2
test-and-set 15
times. 7
test-and-set.s? 2
tested 1
timing 5
text, 2
tips 2
tired 1
thanks 4
tirelessly 2
to), 1
translation-lookaside 1
together. 5
transparently 3
tolerate 1
thus 486
tomes 1
trap 52
traversals 2
too. 6
tree? 1
top), 1
top-level 2
trees, 4
traces. 2
trials 2
tracing 6
ticket 27
track; 1
tickets), 1
time), 4
tracks 8
time-slice 5
trade-off 4
traditionally 1
timedlock 4
transferred 4
timely 3
tries 41
timer; 1
transfers 7
timing, 3
translation) 1
translations. 6
trapped 2
tread 1
treasure-trove 1
tiny 21
treat 4
treatment, 2
tmp; 7
to! 1
to) 1
tons 2
tree 15
too: 2
trees), 1
tool. 1
try 64
top) 1
tricks 2
tricky: 1
turning 9
tried 4
tweaks 2
two-CPU 1
total 26
two-level 7
true 14
towards 3
typing, 1
tracing, 1
run 374
unblocked 2
tragically 2
truly 9
undesirable) 2
transfers, 1
undoubtedly 2
trylock 4
transform 4
turnaround. 1
transistors 2
unique 7
twice, 5
translation), 2
running, 30
units, 2
translations: 2
runtimei 1
unlock): 2
transparency2 1
two-phase 6
safe. 2
unmask 1
trap), 1
two. 3
unpark(threadID) 2
traversal 3
said, 10
type. 1
unqualified 1
typesetting 2
unrealistic, 3
uber-engineer 1
uint 1
untimely 6
undefined. 1
traverse 1
update, 1
say 29
tree, 4
trend? 1
scalable. 5
tried, 1
updated 8
scaling, 1
trigger 2
scan 5
true, 3
scenarios. 1
tune 1
scenes, 2
turn; 4
used. 15
schedule 14
schedule(curr); 1
scheduler. 10
scheduler’s 1
scheduling? 1
turns 37
tweak 1
scheme 6
script 2
twice 5
two: 1
seconds. 3
type: 1
secretary; 1
unallocated 2
unbounded 1
uncommon 2
underpowered 1
understand, 3
understandable 2
understand 112
understanding. 1
understandable, 1
undertaken; 1
understanding: 2
unfortunately 4
unified, 1
unfortunately, 14
section 55
unimaginably 1
uniprocessor, 2
user 117
uniform, 1
unit 7
unlock 13
unknown 1
unlucky) 1
unlock(&m) 1
unlock(lock_t 10
usually 52
unlock, 2
utilizing 4
unmodified, 1
v9 1
unnecessary 1
unpacking 2
valgrind 15
unsurprisingly: 1
valid). 1
unsuspecting 1
valid? 3
unused, 1
until 52
values). 2
up; 2
values? 3
updated) 1
vanishes. 1
upon. 1
variable) 1
unused 14
up? 3
variables. 13
update) 1
vector, 1
versa. 1
vice 1
view, 1
violations). 1
updating 13
upper 1
upper-half 1
upwards. 1
urging 1
us, 2
usable 2
used; 2
us 84
usage; 1
use; 4
used? 1
useful 69
useful2. 1
useful, 11
useless 2
user/supervisor 1
user-facing 1
users. 1
see 272
user-level 6
usermode 1
users: 1
seemingly 12
using. 2
utilities 1
utility 3
seems 12
utilization 5
segment: 10
segmentation). 2
valid, 14
segmentation.py 5
valuable 3
segmentation? 1
value? 2
segmentation” 1
virtual 253
self; 2
uses 70
semantics. 2
use”, 1
virtualize 13
values, 12
sends 3
usual. 2
virtualized, 1
sense? 1
utilization, 1
virtue 2
utilized. 1
variable. 8
vmstat 2
sensible 4
utopian 1
sentence 1
variable’s 1
vs. 8
variety 3
vengeance’.” 1
wait()) 1
wait(address, 2
viewed 4
separate 17
wait-for-me.s. 2
virtualization). 1
virtualization? 1
waiters 4
sequence, 8
virtually 9
waiting, 5
serve 2
visible. 2
waitpid()); 1
valid 51
visionary 1
serviced 4
visited, 1
visualize 1
wake(address) 2
sets. 2
vruntime: 1
wake? 1
setup, 2
wait(). 3
wakeup/waiting 2
value; 22
shade 1
wait(NULL); 3
walk 1
shared. 1
waiter 2
short-lived, 1
warmup 1
warm 3
shortly 1
warnings. 2
should. 1
show, 1
side 4
waste 23
signal(). 1
wastes 10
signals, 2
watch 5
simplicity. 3
watches 2
simplify 1
ways 19
simulating 1
way. 6
wc), 1
simulation 7
weaknesses. 1
site 1
well-regarded 2
sitting; 1
values 75
well-suited 2
variable-sized. 1
well; 1
variable: 2
size: 16
variants 4
size=100); 1
vary. 2
sizeof(), 1
sizeof(node_t); 1
varying 2
sizeof(x)); 2
slabs 1
versus 5
sleep, 13
sleeping. 4
slice), 2
slots 7
via 53
virtualization; 1
slow 15
slowdown 2
virtualizing 14
slowly; 1
vision 1
visualization. 1
we’ll 112
void. 1
whatever) 1
small, 7
volatile 5
small-sized 1
vruntime. 1
whereas 14
vulnerabilities. 1
smallest 5
vulnerable 2
sneaks 2
snippet: 3
snooping 1
so; 2
software-managed 5
waits 36
whether 59
which, 4
while. 2
whole 5
wake 33
why? 2
wakeups 2
wikipedia 1
wall 1
windows, 1
want. 1
wine, 1
warmed 1
solution 44
winter. 1
wasn’t 2
solved 2
within, 1
wasted 4
somewhere. 3
wonder 3
way). 1
soon-to-be-run 1
way? 1
wondering: 4
soon. 1
ways, 1
won’t, 1
sorry. 1
weight 1
words 2
sounds! 1
weight0 1
source, 1
weirdly 1
space! 2
space) 4
space1 1
work, 23
well, 15
work-stealing 2
well-defined 1
worker(), 1
spaces. 7
well-meaning 1
spans 1
weren’t 1
workload, 11
specialized 4
when. 2
world? 1
specifying, 1
wherever 2
world” 1
speculative 1
whet 1
while? 1
spends 1
whims 2
worst 7
worst-fit 2
write, 3
spins 11
x86) 1
splits. 1
x? 1
years; 2
yell) 1
stack). 4
stack-smashing 1
yes. 3
yet), 1
stacks, 3
stands 1
starting) 1
why 58
widespread 1
starts, 3
wild 1
starvation: 1
starve 2
yield 21
you: 1
state, 13
stated 2
statement 3
statically-initialized 1
step-by-step 2
stolen 1
storage 12
store 24
str); 1
straightforward: 6
streams. 1
stringing 1
strive 5
strlen(), 1
strong 2
that 1398
your 201
struct 49
yourself. 1
you’re 18
zero). 1
zplot. 1
’95. 1
structure, 24
’a’ 4
’threshold’, 2
stuck; 3
study, 3
studying. 1
“A 15
style, 1
sub-microsecond 1
“B” 8
submitted, 1
“Earliest 1
“Electrochemically 1
substrate 1
“History” 2
“I 1
succeeded 4
“Jack 1
“Javascript: 2
success, 5
“MIPS 3
“Mac 1
successfully 5
“Membrane: 1
suffering, 1
“Memory 1
“OS” 1
suffice 3
“Operating 2
“Purify: 1
suggests 2
“RISC-I: 1
suit 1
“Run-Time 1
“Structure 1
sum 3
summarize 5
supply 1
“The 40
“Tolerating 1
“Valgrind: 1
“a 1
“all 4
will 580
“batch” 1
window 3
“cold” 2
wise 1
woken, 2
wondered 1
“correct” 4
wonders. 1
“fault.” 1
word, 1
“free” 1
worked, 2
“glibc 2
workings, 2
“lost” 1
“operating 1
“out-of-bounds” 1
“response”; 1
“the 1
“uninitialized 1
world 26
“wreaked”? 1
world\n", 1
” 4
worse 9
worst-case 5
wouldn’t 5
wrappers, 2
wrapping 2
write(), 1
writes: 1
written; 1
support 110
sure. 2
surely) 1
x 12
surprise 2
xv6, 1
yeah! 1
surprising? 2
surprisingly!) 1
years, 9
swapping, 1
yet. 4
to 4068
switches; 1
yield() 2
together! 1
switching), 1
we 992
synchronizations 1
told 2
yield.s 2
web. 1
too! 2
you; 1
weight, 1
yours. 2
top 32
you’ll 37
topic, 4
total). 1
well 88
touch 4
zero 10
touches 2
zeroes 2
toughest 1
|| 2
trace, 3
tracking 2
}; 8
’09, 1
trade-offs 5
tradeoff 1
’10, 4
’14 1
’18, 2
traditional 11
’81, 5
transfer. 1
’89, 1
’98, 1
transition 6
’b’ 1
’flag’ 2
’new’ 2
’peek 1
’self’ 2
translation, 15
“21” 2
translations! 1
“Ah! 1
trap, 3
“Aleph 1
treasure 1
“Algorithms 2
treats 1
“Animal 1
trees 4
“Dahm 2
trials, 1
trickier. 1
“Introduction 3
triggers, 1
“One 1
trivial 2
“Performance 1
“Principled 1
trouble. 3
“Priority 1
twenty 1
“Profiling 1
twice). 1
“Reese’s 1
type) 1
“SDS 1
typically 1
what 280
“They 2
whenever 3
“big 1
why, 1
“bounds” 1
typing 9
will, 2
“catch” 1
unasked 1
window, 3
“crux 1
uncaught, 1
winner) 2
“easy 1
under- 1
wished 2
“got 1
undergraduate 4
“hot” 2
underlies 2
“other 1
underly 1
“privileged” 1
undertake 1
“ticket-assignment 1
unexpected. 2
“too 3
system 363
systems), 1
← 2
unfortunate 5
table), 1
units 1
tail_lock; 2
unit”, 2
unlock? 2
unrealistic 2
unreasonably 1
up. 7
take 97
taken: 2
tapes 1
target. 1
target’s 2
task: 1
taught?! 2
teach 1
techniques, 7
terminated 2
update 54
terribly 1
test-and-test-and-set.s. 2
updated, 2
testand-set! 1
uplifting! 1
upward 1
text 9
usage. 4
thanks, 1
that, 11
them). 2
them? 3
then. 1
theory-types 2
use. 16
therein. 5
useful? 1
these, 4
user, 3
thing; 1
user-defined 2
usually, 2
utility? 2
val 2
valid; 1
things 46
think? 1
value. 12
thinking! 1
thousands, 1
varied 2
thread), 2
vastly 1
threadID 2
vector 1
three-level 1
vi, 1
vice-versa. 1
threshold 11
through, 1
tickets. 5
tightly 1
time-slicing 1
time-tested 1
view 14
virtual, 1
virtualization. 4
virtualized 6
vmstat, 1
voo-doo 2
vruntimei 2
wait. 2
time. 66
timeline. 2
timer, 4
times; 3
tip 2
tmp); 5
today, 4
too; 1
took 16
tool? 1
tools, 3
top-to-bottom 1
topic. 1
total) 2
track 27
traffic. 1
trans- 1
transfer 10
transformed 2
with 638
translation. 10
translations; 1
transparency; 1
trap. 1
trapping 3
waiting 94
traversing 2
trials. 1
waitpid() 2
trick 3
trouble 9
trusts 4
truth. 1
try. 1
wakes 15
trying 15
wanted 3
tuning 1
twins!” 1
two-thirds 1
wary 7
without 70
types 33
u 2
ubriaca. 1
unaffected 1
unfair 2
unlikely 3
woken 13
won 3
unlock() 14
unlocked 2
unpacks 1
unrealistically 2
unsatisfying) 1
unsigned 2
word 14
unusable. 1
unused) 1
work! 3
unusual 3
worked 6
workflows. 1
workloads. 3
works. 22
world!”, 1
world, 6
worried 1
worry! 2
worse, 8
up 156
update: 2
worth 20
updating) 1
upper-case 1
wrapper; 2
upsides 1
wrappers 2
wreakers 1
write() 5
usage 16
writing 21
written). 1
written? 2
x, 2
x86. 1
x[10]; 1
xv6 6
y; 2
was 188
water 1
way: 5
website 2
weightk 1
years 19
yelling 1
weights 2
yet: 2
weird 3
yield.s, 2
you). 1
you? 9
yours: 1
yourself2! 1
yourself; 3
you’d 9
zero, 3
zeroing. 2
| 8
ˆC 2
’03. 1
’63 3
’85, 1
’92. 1
’94, 2
were 76
’Approximate’, 2
’b’, 2
we’d 9
“...with 1
when! 2
“010101”, 1
“80-20” 1
“Advanced 4
“Change 1
“Extending 1
use 317
“Fact 1
use?) 1
“Guide 2
“Hints 3
used, 8
“Hoare” 1
“Information 1
user. 7
“Just 2
“My 1
user’s 4
“Our 1
uses), 1
“RTFM.” 1
using). 2
“Shared-access 1
“She’s 1
using? 2
“Someone 2
valgrind. 1
“Survey 1
valid), 1
“Think 1
“Transaction 2
“Understanding 5
“Using 2
“baby 1
“bad” 3
“demon”, 1
“ease 1
“familial” 1
“goodbye”. 1
“hello”; 1
“jemalloc” 1
“just 3
“perfect”. 1
“right 1
“second-system 1
“smart” 1
“walk” 1
“yes.” 1
where 166
• 69
− 7
value 233
variable). 1
variable-length 2
variables, 5
variable” 1
variant 3
vector-like 1
vengeance’. 1
version? 2
viewpoint 1
violation 2
virtual-memory 1
virtualization 20
virtuallyindexed 1
void; 2
wait 53
waitFirst 2
waking, 1
want; 1
wants 16
wary: 1
waste! 1
watch. 1
watching 1
way, 20
welcome! 1
well) 1
which... 1
whichever 4
while, 8
wily 2
winner: 2
with) 2
wondering 2
work: 1
workers 1
workload: 1
works? 3
worlds: 1
world”. 1
worry: 1
worthwhile 2
write: 1
written 18
wrong 15
www.stanford.edu/˜ouster/. 1
x86). 2
x86” 2
yes, 6
yielding 5
which 501
while2 1
whom 2
widely), 1
winner 5
wired 2
wisdom 1
wish 26
wishes 16
with? 1
within 89
won’t 21
words, 5
work 150
workload 14
world; 1
worry 21
worst-fit, 2
worstcase 1
worthwhile. 3
would 200
wreak1 1
you 995
yourself, 2
yuck! 1
zero), 1
zero.” 1
zombies, 1
zsh 2
write 63
wrong. 3
wrote: 1
www.takeourword.com/TOW146 1
x; 4
y-axis 2
yes: 3
yet! 1
yield(); 2
yield, 2
yield-based 2
you. 8
yourself2 1
you’ve 6
} 271
˜mark/syscall.html. 1
– 19
’15, 1
’93. 1
’95, 2
’Classic 1
’c’, 1
’pedantry’ 1
’wreak 2
’w’ 1
“An 9
“Bell 1
“B”. 2
“Cloud 3
“Computer 6
“Converting 1
“Idleness 1
“If 2
“John 1
“Load-Link, 2
“Making 2
“Observations 2
“One-Level 2
“One-level 2
“OpenSolaris 2
“Perfection 1
“Practical, 1
“TLB”. 1
“Time 1
{ 281
“T”, 2
“Virtual 8
“bad 1
“buddy” 1
“child”, 1
© 21
“condition 1
“daemon”, 1
“discovered” 1
“drum” 1
’ 11
“interrupts” 1
’04, 2
“limited” 1
’13, 5
’75, 1
’a’, 1
“main: 14
“1984” 1
“process 1
“2Q: 1
“ten-items-or-less” 1
“Ad 2
“test” 2
“Atomic 2
“the”). 2
“A”), 1
“Cold-start 1
“Dynamic 3
“Efficient 2
“Everything 2
“He 1
“It 2
“KASLR 1
“Machine 1
“Mesa” 1
“Microreboot 1
“Monitors: 1
“Myths 2
“OSSpinLock 2
“OS”, 1
“On 2
“Parallel 1
“Premature 2
“Solaris 3
“Solution 2
“Symmetric 1
“System 1
“Take 1
“U 1
“You 2
“at 1
“atomic 2
“being 1
“best” 2
“commoncase 1
“emulation” 1
“implements” 2
“interactive” 1
“it 1
“older” 1
“on 1
“page 1
“reliability”, 1
“right” 1
“same” 1
“setting” 2
“works” 1
the 8323
them; 2
there! 1
therein: 2
these 222
they? 2
things); 1
things, 6
thing” 1
think-ing 1
thinks 7
this! 2
thousands 10
thr_join(); 1
thread.c 1
threadID, 2
threaded 2
threads. 19
three) 1
threshold, 2
through 56
throughout 13
tickets: 1
time-efficient 1
time: 2
timer 36
times). 2
times? 2
timings. 1
tip, 4
tive) 1
tmp 8
tmp->value 2
to. 4
today 7
too). 2
took, 1
tools 16
too” 1
touching 1
trace: 1
track, 1
trading 1
transactions 1
transitioning 4
translates 5
translations). 1
transparent” 1
treated 6
trouble, 2
true! 1
truth: 2
turn 32
type). 1
typedef 33
ugly 3
uncommon), 1
underlying 9
understand! 2
unfair, 1
uniformly, 1
unifying 1
uninitialized 1
uninteresting: 1
unit) 1
units. 3
universal 1
unlock(&mutex); 2
unlock(), 2
unpark 2
unpark(queue_remove(m->q)); 2
unpleasant. 1
unrealistic. 1
up, 12
update. 1
upper-level 2
urgent, 1
usage, 2
use, 15
used 175
user-managed 1
user-mode 3
using; 2
utilized? 1
utilizes 1
v; 2
value); 2
value, 17
variable; 2
variables 33
variablesized, 1
variants) 1
various 27
vary). 1
vector. 1
versions 8
viewing 2
violation, 2
virtual-to-physical 6
virtualization, 7
virtualized. 1
visually 1
voluminous 2
wait(); 1
wait, 4
wait-for-me.s 4
wakeup, 1
waking 5
was. 1
wasteful. 2
way 97
weakness 1
weaknesses 1
weightA 1
weighted 1
weighti 2
well), 2
were. 1
while 170
wide 1
winner. 2
wishing 3
within. 1
work. 24
workers, 2
working 28
workload. 6
works3 1
works; 1
workshop, 1
worlds. 2
worry. 3
worse! 1
wrangling 1
wrapper 3
wreaked?” 1
write(fd, 1
write. 2
written, 1
wrong, 4
wrote 10
www.cs.tau.ac.il/˜shanir/concurrent-data-structures.pdf. 2
www.nds.rub.de/lehre/seminar/SS06/Werthmann 1
www.sparc.org/ 1
x) 1
x86-version 2
x86.py, 4
you, 11
younger 1
yourself 7
zeroed 1
zombies 1
· 4
’02, 2
’11, 2
’19, 1
’68 1
’current’ 1
’c’ 3
’e’. 1
’mutex’ 2
“Aspects 1
“Before 1
“But 1
“Concurrent 2
“Cooperating 7
“H-Pucks”) 1
“H”, 2
“Improving 1
“It’s 2
“Lottery 2
“Mach: 1
“Multics: 1
“Multilevel 1
“PThreads 2
“Programming 7
“cooperating 2
“direct 1
“double 1
“fault” 2
“first-in” 2
“foo” 1
“lmbench: 1
“longword” 1
“pinning 1
“private 1
“prove” 2
“real” 3
“reasonable” 1
“yeah, 1
